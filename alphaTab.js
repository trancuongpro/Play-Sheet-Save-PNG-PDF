/*!
 * alphaTab v1.6.0 (, build 19)
 *
 * Copyright © 2025, Daniel Kuschny and Contributors, All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Integrated Libraries:
 *
 * Library: TinySoundFont
 * License: MIT
 * Copyright: Copyright (C) 2017, 2018 Bernhard Schelling
 * URL: https://github.com/schellingb/TinySoundFont
 * Purpose: SoundFont loading and Audio Synthesis
 *
 * Library: SFZero
 * License: MIT
 * Copyright: Copyright (C) 2012 Steve Folta ()
 * URL: https://github.com/stevefolta/SFZero
 * Purpose: TinySoundFont is based on SFZEro
 *
 * Library: Haxe Standard Library
 * License: MIT
 * Copyright: Copyright (C)2005-2025 Haxe Foundation
 * URL: https://github.com/HaxeFoundation/haxe/tree/development/std
 * Purpose: XML Parser & Zip Inflate Algorithm
 *
 * Library: SharpZipLib
 * License: MIT
 * Copyright: Copyright © 2000-2018 SharpZipLib Contributors
 * URL: https://github.com/icsharpcode/SharpZipLib
 * Purpose: Zip Deflate Algorithm for writing compressed Zips
 *
 * Library: NVorbis
 * License: MIT
 * Copyright: Copyright (c) 2020 Andrew Ward
 * URL: https://github.com/NVorbis/NVorbis
 * Purpose: Vorbis Stream Decoding
 *
 * Library: libvorbis
 * License: BSD-3-Clause
 * Copyright: Copyright (c) 2002-2020 Xiph.org Foundation
 * URL: https://github.com/xiph/vorbis
 * Purpose: NVorbis adopted some code from libvorbis.
 *
 * @preserve
 * @license
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.alphaTab = {}));
})(this, (function (exports) { 'use strict';

    /**
     * A very basic polyfill of the ResizeObserver which triggers
     * a the callback on window resize for all registered targets.
     * @target web
     */
    class ResizeObserverPolyfill {
        constructor(callback) {
            this._targets = new Set();
            this._callback = callback;
            window.addEventListener('resize', this.onWindowResize.bind(this), false);
        }
        observe(target) {
            this._targets.add(target);
        }
        unobserve(target) {
            this._targets.delete(target);
        }
        disconnect() {
            this._targets.clear();
        }
        onWindowResize() {
            const entries = [];
            for (const t of this._targets) {
                entries.push({
                    target: t,
                    // not used by alphaTab
                    contentRect: undefined,
                    borderBoxSize: undefined,
                    contentBoxSize: [],
                    devicePixelContentBoxSize: []
                });
            }
            this._callback(entries, this);
        }
    }

    /**
     * A polyfill of the InsersectionObserver
     * @target web
     */
    class IntersectionObserverPolyfill {
        constructor(callback) {
            this._elements = [];
            let timer = null;
            const oldCheck = this.check.bind(this);
            this.check = () => {
                if (!timer) {
                    timer = setTimeout(() => {
                        oldCheck();
                        timer = null;
                    }, 100);
                }
            };
            this._callback = callback;
            window.addEventListener('resize', this.check, true);
            document.addEventListener('scroll', this.check, true);
        }
        observe(target) {
            if (this._elements.indexOf(target) >= 0) {
                return;
            }
            this._elements.push(target);
            this.check();
        }
        unobserve(target) {
            this._elements = this._elements.filter(item => {
                return item !== target;
            });
        }
        check() {
            const entries = [];
            for (const element of this._elements) {
                const rect = element.getBoundingClientRect();
                const isVisible = rect.top + rect.height >= 0 &&
                    rect.top <= window.innerHeight &&
                    rect.left + rect.width >= 0 &&
                    rect.left <= window.innerWidth;
                if (isVisible) {
                    entries.push({
                        target: element,
                        isIntersecting: true
                    });
                }
            }
            if (entries.length) {
                this._callback(entries, this);
            }
        }
    }

    /*@target web*/
    (() => {
        if (typeof Symbol.dispose === 'undefined') {
            Symbol.dispose = Symbol('Symbol.dispose');
        }
        if (typeof window !== 'undefined') {
            // ResizeObserver API does not yet exist so long on Safari (only start 2020 with iOS Safari 13.7 and Desktop 13.1)
            // so we better add a polyfill for it
            if (!('ResizeObserver' in globalThis)) {
                globalThis.ResizeObserver = ResizeObserverPolyfill;
            }
            // IntersectionObserver API does not on older iOS versions
            // so we better add a polyfill for it
            if (!('IntersectionObserver' in globalThis)) {
                globalThis.IntersectionObserver = IntersectionObserverPolyfill;
            }
            if (!('replaceChildren' in Element.prototype)) {
                Element.prototype.replaceChildren = function (...nodes) {
                    this.innerHTML = '';
                    this.append(...nodes);
                };
                Document.prototype.replaceChildren = Element.prototype.replaceChildren;
                DocumentFragment.prototype.replaceChildren = Element.prototype.replaceChildren;
            }
        }
        if (!('replaceAll' in String.prototype)) {
            String.prototype.replaceAll = function (str, newStr) {
                return this.replace(new RegExp(str, 'g'), newStr);
            };
        }
    })();

    /**
     * Lists all layout modes that are supported.
     */
    exports.LayoutMode = void 0;
    (function (LayoutMode) {
        /**
         * The bars are aligned in an [vertically endless page-style fashion](https://alphatab.net/docs/showcase/layouts#page-layout)
         */
        LayoutMode[LayoutMode["Page"] = 0] = "Page";
        /**
         * Bars are aligned horizontally in [one horizontally endless system (row)](https://alphatab.net/docs/showcase/layouts#horizontal-layout)
         */
        LayoutMode[LayoutMode["Horizontal"] = 1] = "Horizontal";
    })(exports.LayoutMode || (exports.LayoutMode = {}));

    /**
     * Lists all stave profiles controlling which staves are shown.
     */
    exports.StaveProfile = void 0;
    (function (StaveProfile) {
        /**
         * The profile is auto detected by the track configurations.
         */
        StaveProfile[StaveProfile["Default"] = 0] = "Default";
        /**
         * Standard music notation and guitar tablature are rendered.
         */
        StaveProfile[StaveProfile["ScoreTab"] = 1] = "ScoreTab";
        /**
         * Only standard music notation is rendered.
         */
        StaveProfile[StaveProfile["Score"] = 2] = "Score";
        /**
         * Only guitar tablature is rendered.
         */
        StaveProfile[StaveProfile["Tab"] = 3] = "Tab";
        /**
         * Only guitar tablature is rendered, but also rests and time signatures are not shown.
         * This profile is typically used in multi-track scenarios.
         */
        StaveProfile[StaveProfile["TabMixed"] = 4] = "TabMixed";
    })(exports.StaveProfile || (exports.StaveProfile = {}));

    /**
     * This public class provides names for all general midi instruments.
     */
    class GeneralMidi {
        static getValue(name) {
            if (!GeneralMidi._values) {
                GeneralMidi._values = new Map();
            }
            name = name.toLowerCase().replaceAll(' ', '');
            return GeneralMidi._values.has(name) ? GeneralMidi._values.get(name) : 0;
        }
        static isPiano(program) {
            return program <= 7 || (program >= 16 && program <= 23);
        }
        static isGuitar(program) {
            return (program >= 24 && program <= 39) || program === 105 || program === 43;
        }
    }
    GeneralMidi._values = new Map([
        ['acousticgrandpiano', 0],
        ['brightacousticpiano', 1],
        ['electricgrandpiano', 2],
        ['honkytonkpiano', 3],
        ['electricpiano1', 4],
        ['electricpiano2', 5],
        ['harpsichord', 6],
        ['clavinet', 7],
        ['celesta', 8],
        ['glockenspiel', 9],
        ['musicbox', 10],
        ['vibraphone', 11],
        ['marimba', 12],
        ['xylophone', 13],
        ['tubularbells', 14],
        ['dulcimer', 15],
        ['drawbarorgan', 16],
        ['percussiveorgan', 17],
        ['rockorgan', 18],
        ['churchorgan', 19],
        ['reedorgan', 20],
        ['accordion', 21],
        ['harmonica', 22],
        ['tangoaccordion', 23],
        ['acousticguitarnylon', 24],
        ['acousticguitarsteel', 25],
        ['electricguitarjazz', 26],
        ['electricguitarclean', 27],
        ['electricguitarmuted', 28],
        ['overdrivenguitar', 29],
        ['distortionguitar', 30],
        ['guitarharmonics', 31],
        ['acousticbass', 32],
        ['electricbassfinger', 33],
        ['electricbasspick', 34],
        ['fretlessbass', 35],
        ['slapbass1', 36],
        ['slapbass2', 37],
        ['synthbass1', 38],
        ['synthbass2', 39],
        ['violin', 40],
        ['viola', 41],
        ['cello', 42],
        ['contrabass', 43],
        ['tremolostrings', 44],
        ['pizzicatostrings', 45],
        ['orchestralharp', 46],
        ['timpani', 47],
        ['stringensemble1', 48],
        ['stringensemble2', 49],
        ['synthstrings1', 50],
        ['synthstrings2', 51],
        ['choiraahs', 52],
        ['voiceoohs', 53],
        ['synthvoice', 54],
        ['orchestrahit', 55],
        ['trumpet', 56],
        ['trombone', 57],
        ['tuba', 58],
        ['mutedtrumpet', 59],
        ['frenchhorn', 60],
        ['brasssection', 61],
        ['synthbrass1', 62],
        ['synthbrass2', 63],
        ['sopranosax', 64],
        ['altosax', 65],
        ['tenorsax', 66],
        ['baritonesax', 67],
        ['oboe', 68],
        ['englishhorn', 69],
        ['bassoon', 70],
        ['clarinet', 71],
        ['piccolo', 72],
        ['flute', 73],
        ['recorder', 74],
        ['panflute', 75],
        ['blownbottle', 76],
        ['shakuhachi', 77],
        ['whistle', 78],
        ['ocarina', 79],
        ['lead1square', 80],
        ['lead2sawtooth', 81],
        ['lead3calliope', 82],
        ['lead4chiff', 83],
        ['lead5charang', 84],
        ['lead6voice', 85],
        ['lead7fifths', 86],
        ['lead8bassandlead', 87],
        ['pad1newage', 88],
        ['pad2warm', 89],
        ['pad3polysynth', 90],
        ['pad4choir', 91],
        ['pad5bowed', 92],
        ['pad6metallic', 93],
        ['pad7halo', 94],
        ['pad8sweep', 95],
        ['fx1rain', 96],
        ['fx2soundtrack', 97],
        ['fx3crystal', 98],
        ['fx4atmosphere', 99],
        ['fx5brightness', 100],
        ['fx6goblins', 101],
        ['fx7echoes', 102],
        ['fx8scifi', 103],
        ['sitar', 104],
        ['banjo', 105],
        ['shamisen', 106],
        ['koto', 107],
        ['kalimba', 108],
        ['bagpipe', 109],
        ['fiddle', 110],
        ['shanai', 111],
        ['tinklebell', 112],
        ['agogo', 113],
        ['steeldrums', 114],
        ['woodblock', 115],
        ['taikodrum', 116],
        ['melodictom', 117],
        ['synthdrum', 118],
        ['reversecymbal', 119],
        ['guitarfretnoise', 120],
        ['breathnoise', 121],
        ['seashore', 122],
        ['birdtweet', 123],
        ['telephonering', 124],
        ['helicopter', 125],
        ['applause', 126],
        ['gunshot', 127]
    ]);

    /**
     * Lists the different modes on how the brackets/braces are drawn and extended.
     */
    var BracketExtendMode;
    (function (BracketExtendMode) {
        /**
         * Do not draw brackets
         */
        BracketExtendMode[BracketExtendMode["NoBrackets"] = 0] = "NoBrackets";
        /**
         * Groups staves into bracket (or braces for grand staff).
         */
        BracketExtendMode[BracketExtendMode["GroupStaves"] = 1] = "GroupStaves";
        /**
         * Groups similar instruments in multi-track rendering into brackets.
         * The braces of tracks with grand-staffs break any brackets.
         * Similar instruments means actually the same "midi program". No custom grouping is currently done.
         */
        BracketExtendMode[BracketExtendMode["GroupSimilarInstruments"] = 2] = "GroupSimilarInstruments";
    })(BracketExtendMode || (BracketExtendMode = {}));
    /**
     * Lists the different policies on how to display the track names.
     */
    var TrackNamePolicy;
    (function (TrackNamePolicy) {
        /**
         * Track names are hidden everywhere.
         */
        TrackNamePolicy[TrackNamePolicy["Hidden"] = 0] = "Hidden";
        /**
         * Track names are displayed on the first system.
         */
        TrackNamePolicy[TrackNamePolicy["FirstSystem"] = 1] = "FirstSystem";
        /**
         * Track names are displayed on all systems.
         */
        TrackNamePolicy[TrackNamePolicy["AllSystems"] = 2] = "AllSystems";
    })(TrackNamePolicy || (TrackNamePolicy = {}));
    /**
     * Lists the different modes what text to display for track names.
     */
    var TrackNameMode;
    (function (TrackNameMode) {
        /**
         * Full track names are displayed {@link Track.name}
         */
        TrackNameMode[TrackNameMode["FullName"] = 0] = "FullName";
        /**
         * Short Track names (abbreviations) are displayed {@link Track.shortName}
         */
        TrackNameMode[TrackNameMode["ShortName"] = 1] = "ShortName";
    })(TrackNameMode || (TrackNameMode = {}));
    /**
     * Lists the different orientations modes how to render the track names.
     */
    var TrackNameOrientation;
    (function (TrackNameOrientation) {
        /**
         * Text is shown horizontally (left-to-right)
         */
        TrackNameOrientation[TrackNameOrientation["Horizontal"] = 0] = "Horizontal";
        /**
         * Vertically rotated (bottom-to-top)
         */
        TrackNameOrientation[TrackNameOrientation["Vertical"] = 1] = "Vertical";
    })(TrackNameOrientation || (TrackNameOrientation = {}));
    /**
     * This class represents the rendering stylesheet.
     * It contains settings which control the display of the score when rendered.
     * @json
     * @json_strict
     */
    class RenderStylesheet {
        constructor() {
            /**
             * Whether dynamics are hidden.
             */
            this.hideDynamics = false;
            /**
             * The mode in which brackets and braces are drawn.
             */
            this.bracketExtendMode = BracketExtendMode.GroupStaves;
            /**
             * Whether to draw the // sign to separate systems.
             */
            this.useSystemSignSeparator = false;
            /**
             * Whether to show the tuning.
             */
            this.globalDisplayTuning = true;
            /**
             * Whether to show the tuning.(per-track)
             */
            this.perTrackDisplayTuning = null;
            /**
             * Whether to show the chord diagrams on top.
             */
            this.globalDisplayChordDiagramsOnTop = true;
            /**
             * Whether to show the chord diagrams on top. (per-track)
             */
            this.perTrackChordDiagramsOnTop = null;
            /**
             * The policy where to show track names when a single track is rendered.
             */
            this.singleTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
            /**
             * The policy where to show track names when a multiple tracks are rendered.
             */
            this.multiTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
            /**
             * The mode what text to display for the track name on the first system
             */
            this.firstSystemTrackNameMode = TrackNameMode.ShortName;
            /**
             * The mode what text to display for the track name on the first system
             */
            this.otherSystemsTrackNameMode = TrackNameMode.ShortName;
            /**
             * The orientation of the the track names on the first system
             */
            this.firstSystemTrackNameOrientation = TrackNameOrientation.Vertical;
            /**
             * The orientation of the the track names on other systems
             */
            this.otherSystemsTrackNameOrientation = TrackNameOrientation.Vertical;
            /**
             * If multi track: Whether to render multiple subsequent empty (or rest-only) bars together as multi-bar rest.
             */
            this.multiTrackMultiBarRest = false;
            /**
             * If single track: Whether to render multiple subsequent empty (or rest-only) bars together as multi-bar rest.
             */
            this.perTrackMultiBarRest = null;
        }
    }

    /**
     * This public class can store the information about a group of measures which are repeated
     */
    class RepeatGroup {
        constructor() {
            /**
             * All masterbars repeated within this group
             */
            this.masterBars = [];
            /**
             * the masterbars which opens the group.
             */
            this.opening = null;
            /**
             * a list of masterbars which close the group.
             */
            this.closings = [];
            /**
             * true if the repeat group was closed well
             */
            this.isClosed = false;
        }
        /**
         * a list of masterbars which open the group.
         * @deprecated There can only be one opening, use the opening property instead
         */
        get openings() {
            const opening = this.opening;
            return opening ? [opening] : [];
        }
        /**
         * Gets whether this repeat group is really opened as a repeat.
         */
        get isOpened() {
            return this.opening?.isRepeatStart === true;
        }
        addMasterBar(masterBar) {
            if (this.opening === null) {
                this.opening = masterBar;
            }
            this.masterBars.push(masterBar);
            masterBar.repeatGroup = this;
            if (masterBar.isRepeatEnd) {
                this.closings.push(masterBar);
                this.isClosed = true;
            }
        }
    }

    /**
     * Defines the custom styles for an element in the music sheet (like bars, voices, notes etc).
     */
    class ElementStyle {
        constructor() {
            /**
             * Changes the color of the specified sub-element within the element this style container belongs to.
             * Null indicates that a certain element should use the default color from {@link RenderingResources}
             * even if some "higher level" element changes colors.
             */
            this.colors = new Map();
            // TODO: replace NotationSettings.elements by adding a visibility here?
        }
    }

    /**
     * This public enumeration lists all supported Clefs.
     */
    var Clef;
    (function (Clef) {
        /**
         * Neutral clef.
         */
        Clef[Clef["Neutral"] = 0] = "Neutral";
        /**
         * C3 clef
         */
        Clef[Clef["C3"] = 1] = "C3";
        /**
         * C4 clef
         */
        Clef[Clef["C4"] = 2] = "C4";
        /**
         * F4 clef
         */
        Clef[Clef["F4"] = 3] = "F4";
        /**
         * G2 clef
         */
        Clef[Clef["G2"] = 4] = "G2";
    })(Clef || (Clef = {}));

    /**
     * Lists all ottavia.
     */
    var Ottavia;
    (function (Ottavia) {
        /**
         * 2 octaves higher
         */
        Ottavia[Ottavia["_15ma"] = 0] = "_15ma";
        /**
         * 1 octave higher
         */
        Ottavia[Ottavia["_8va"] = 1] = "_8va";
        /**
         * Normal
         */
        Ottavia[Ottavia["Regular"] = 2] = "Regular";
        /**
         * 1 octave lower
         */
        Ottavia[Ottavia["_8vb"] = 3] = "_8vb";
        /**
         * 2 octaves lower.
         */
        Ottavia[Ottavia["_15mb"] = 4] = "_15mb";
    })(Ottavia || (Ottavia = {}));

    /**
     * Lists all simile mark types as they are assigned to bars.
     */
    var SimileMark;
    (function (SimileMark) {
        /**
         * No simile mark is applied
         */
        SimileMark[SimileMark["None"] = 0] = "None";
        /**
         * A simple simile mark. The previous bar is repeated.
         */
        SimileMark[SimileMark["Simple"] = 1] = "Simple";
        /**
         * A double simile mark. This value is assigned to the first
         * bar of the 2 repeat bars.
         */
        SimileMark[SimileMark["FirstOfDouble"] = 2] = "FirstOfDouble";
        /**
         * A double simile mark. This value is assigned to the second
         * bar of the 2 repeat bars.
         */
        SimileMark[SimileMark["SecondOfDouble"] = 3] = "SecondOfDouble";
    })(SimileMark || (SimileMark = {}));

    /**
     * This public enumeration lists all available key signatures
     */
    var KeySignature;
    (function (KeySignature) {
        /**
         * Cb (7 flats)
         */
        KeySignature[KeySignature["Cb"] = -7] = "Cb";
        /**
         * Gb (6 flats)
         */
        KeySignature[KeySignature["Gb"] = -6] = "Gb";
        /**
         * Db (5 flats)
         */
        KeySignature[KeySignature["Db"] = -5] = "Db";
        /**
         * Ab (4 flats)
         */
        KeySignature[KeySignature["Ab"] = -4] = "Ab";
        /**
         * Eb (3 flats)
         */
        KeySignature[KeySignature["Eb"] = -3] = "Eb";
        /**
         * Bb (2 flats)
         */
        KeySignature[KeySignature["Bb"] = -2] = "Bb";
        /**
         * F (1 flat)
         */
        KeySignature[KeySignature["F"] = -1] = "F";
        /**
         * C (no signs)
         */
        KeySignature[KeySignature["C"] = 0] = "C";
        /**
         * G (1 sharp)
         */
        KeySignature[KeySignature["G"] = 1] = "G";
        /**
         * D (2 sharp)
         */
        KeySignature[KeySignature["D"] = 2] = "D";
        /**
         * A (3 sharp)
         */
        KeySignature[KeySignature["A"] = 3] = "A";
        /**
         * E (4 sharp)
         */
        KeySignature[KeySignature["E"] = 4] = "E";
        /**
         * B (5 sharp)
         */
        KeySignature[KeySignature["B"] = 5] = "B";
        /**
         * F# (6 sharp)
         */
        KeySignature[KeySignature["FSharp"] = 6] = "FSharp";
        /**
         * C# (7 sharp)
         */
        KeySignature[KeySignature["CSharp"] = 7] = "CSharp";
    })(KeySignature || (KeySignature = {}));

    /**
     * This public enumeration lists all available types of KeySignatures
     */
    var KeySignatureType;
    (function (KeySignatureType) {
        /**
         * Major
         */
        KeySignatureType[KeySignatureType["Major"] = 0] = "Major";
        /**
         * Minor
         */
        KeySignatureType[KeySignatureType["Minor"] = 1] = "Minor";
    })(KeySignatureType || (KeySignatureType = {}));

    /**
     * The different pedal marker types.
     */
    var SustainPedalMarkerType;
    (function (SustainPedalMarkerType) {
        /**
         * Indicates that the pedal should be pressed from this time on.
         */
        SustainPedalMarkerType[SustainPedalMarkerType["Down"] = 0] = "Down";
        /**
         * Indicates that the pedal should be held on this marker (used when the pedal is held for the whole bar)
         */
        SustainPedalMarkerType[SustainPedalMarkerType["Hold"] = 1] = "Hold";
        /**
         * indicates that the pedal should be lifted up at this time.
         */
        SustainPedalMarkerType[SustainPedalMarkerType["Up"] = 2] = "Up";
    })(SustainPedalMarkerType || (SustainPedalMarkerType = {}));
    /**
     * A marker on whether a sustain pedal starts or ends.
     * @json
     * @json_strict
     */
    class SustainPedalMarker {
        constructor() {
            /**
             * The relative position of pedal markers within the bar.
             */
            this.ratioPosition = 0;
            /**
             * Whether what should be done with the pedal at this point
             */
            this.pedalType = SustainPedalMarkerType.Down;
            /**
             * The next pedal marker for linking the related markers together to a "down -> hold -> up" or "down -> up" sequence.
             * Always null for "up" markers.
             * @json_ignore
             */
            this.nextPedalMarker = null;
            /**
             * The previous pedal marker for linking the related markers together to a "down -> hold -> up" or "down -> up" sequence.
             * Always null for "down" markers.
             * @json_ignore
             */
            this.previousPedalMarker = null;
        }
    }
    /**
     * Lists all graphical sub elements within a {@link Bar} which can be styled via {@link Bar.style}
     */
    var BarSubElement;
    (function (BarSubElement) {
        /**
         * The repeat signs on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationRepeats"] = 0] = "StandardNotationRepeats";
        /**
         * The repeat signs on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsRepeats"] = 1] = "GuitarTabsRepeats";
        /**
         * The repeat signs on the slash staff.
         */
        BarSubElement[BarSubElement["SlashRepeats"] = 2] = "SlashRepeats";
        /**
         * The repeat signs on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedRepeats"] = 3] = "NumberedRepeats";
        /**
         * The bar numbers on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationBarNumber"] = 4] = "StandardNotationBarNumber";
        /**
         * The bar numbers on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsBarNumber"] = 5] = "GuitarTabsBarNumber";
        /**
         * The bar numbers on the slash staff.
         */
        BarSubElement[BarSubElement["SlashBarNumber"] = 6] = "SlashBarNumber";
        /**
         * The bar numbers on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedBarNumber"] = 7] = "NumberedBarNumber";
        /**
         * The bar lines on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationBarLines"] = 8] = "StandardNotationBarLines";
        /**
         * The bar lines on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsBarLines"] = 9] = "GuitarTabsBarLines";
        /**
         * The bar lines on the slash staff.
         */
        BarSubElement[BarSubElement["SlashBarLines"] = 10] = "SlashBarLines";
        /**
         * The bar lines on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedBarLines"] = 11] = "NumberedBarLines";
        /**
         * The clefs on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationClef"] = 12] = "StandardNotationClef";
        /**
         * The clefs on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsClef"] = 13] = "GuitarTabsClef";
        /**
         * The key signatures on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationKeySignature"] = 14] = "StandardNotationKeySignature";
        /**
         * The key signatures on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedKeySignature"] = 15] = "NumberedKeySignature";
        /**
         * The time signatures on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationTimeSignature"] = 16] = "StandardNotationTimeSignature";
        /**
         * The time signatures on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsTimeSignature"] = 17] = "GuitarTabsTimeSignature";
        /**
         * The time signatures on the slash staff.
         */
        BarSubElement[BarSubElement["SlashTimeSignature"] = 18] = "SlashTimeSignature";
        /**
         * The time signature on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedTimeSignature"] = 19] = "NumberedTimeSignature";
        /**
         * The staff lines on the standard notation staff.
         */
        BarSubElement[BarSubElement["StandardNotationStaffLine"] = 20] = "StandardNotationStaffLine";
        /**
         * The staff lines on the guitar tab staff.
         */
        BarSubElement[BarSubElement["GuitarTabsStaffLine"] = 21] = "GuitarTabsStaffLine";
        /**
         * The staff lines on the slash staff.
         */
        BarSubElement[BarSubElement["SlashStaffLine"] = 22] = "SlashStaffLine";
        /**
         * The staff lines on the numbered notation staff.
         */
        BarSubElement[BarSubElement["NumberedStaffLine"] = 23] = "NumberedStaffLine";
    })(BarSubElement || (BarSubElement = {}));
    /**
     * Defines the custom styles for bars.
     * @json
     * @json_strict
     */
    class BarStyle extends ElementStyle {
    }
    /**
     * Lists all bar line styles.
     */
    var BarLineStyle;
    (function (BarLineStyle) {
        /**
         * No special custom line style, automatic handling (e.g. last bar might be LightHeavy)
         */
        BarLineStyle[BarLineStyle["Automatic"] = 0] = "Automatic";
        BarLineStyle[BarLineStyle["Dashed"] = 1] = "Dashed";
        BarLineStyle[BarLineStyle["Dotted"] = 2] = "Dotted";
        BarLineStyle[BarLineStyle["Heavy"] = 3] = "Heavy";
        BarLineStyle[BarLineStyle["HeavyHeavy"] = 4] = "HeavyHeavy";
        BarLineStyle[BarLineStyle["HeavyLight"] = 5] = "HeavyLight";
        BarLineStyle[BarLineStyle["LightHeavy"] = 6] = "LightHeavy";
        BarLineStyle[BarLineStyle["LightLight"] = 7] = "LightLight";
        BarLineStyle[BarLineStyle["None"] = 8] = "None";
        BarLineStyle[BarLineStyle["Regular"] = 9] = "Regular";
        BarLineStyle[BarLineStyle["Short"] = 10] = "Short";
        BarLineStyle[BarLineStyle["Tick"] = 11] = "Tick";
    })(BarLineStyle || (BarLineStyle = {}));
    /**
     * A bar is a single block within a track, also known as Measure.
     * @json
     * @json_strict
     */
    class Bar {
        constructor() {
            /**
             * Gets or sets the unique id of this bar.
             */
            this.id = Bar._globalBarId++;
            /**
             * Gets or sets the zero-based index of this bar within the staff.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets the next bar that comes after this bar.
             * @json_ignore
             */
            this.nextBar = null;
            /**
             * Gets or sets the previous bar that comes before this bar.
             * @json_ignore
             */
            this.previousBar = null;
            /**
             * Gets or sets the clef on this bar.
             */
            this.clef = Clef.G2;
            /**
             * Gets or sets the ottava applied to the clef.
             */
            this.clefOttava = Ottavia.Regular;
            /**
             * Gets or sets the list of voices contained in this bar.
             * @json_add addVoice
             */
            this.voices = [];
            /**
             * Gets or sets the simile mark on this bar.
             */
            this.simileMark = SimileMark.None;
            /**
             * Gets a value indicating whether this bar contains multiple voices with notes.
             * @json_ignore
             */
            this.isMultiVoice = false;
            /**
             * A relative scale for the size of the bar when displayed. The scale is relative
             * within a single line (system). The sum of all scales in one line make the total width,
             * and then this individual scale gives the relative size.
             */
            this.displayScale = 1;
            /**
             * An absolute width of the bar to use when displaying in single track display scenarios.
             */
            this.displayWidth = -1;
            /**
             * The sustain pedal markers within this bar.
             */
            this.sustainPedals = [];
            this._isEmpty = true;
            this._isRestOnly = true;
            /**
             * The bar line to draw on the left side of the bar.
             * @remarks
             * Note that the combination with {@link barLineRight} of the previous bar matters.
             * If this bar has a Regular/Automatic style but the previous bar is customized, no additional line is drawn by this bar.
             * If both bars have a custom style, both bar styles are drawn.
             */
            this.barLineLeft = BarLineStyle.Automatic;
            /**
             * The bar line to draw on the right side of the bar.
             * @remarks
             * Note that the combination with {@link barLineLeft} of the next bar matters.
             * If this bar has a Regular/Automatic style but the next bar is customized, no additional line is drawn by this bar.
             * If both bars have a custom style, both bar styles are drawn.
             */
            this.barLineRight = BarLineStyle.Automatic;
            /**
             * Gets or sets the key signature used on all bars.
             */
            this.keySignature = KeySignature.C;
            /**
             * Gets or sets the type of key signature (major/minor)
             */
            this.keySignatureType = KeySignatureType.Major;
        }
        /**
         * @internal
         */
        static resetIds() {
            Bar._globalBarId = 0;
        }
        get masterBar() {
            return this.staff.track.score.masterBars[this.index];
        }
        /**
         * Whether this bar is fully empty (not even having rests).
         */
        get isEmpty() {
            return this._isEmpty;
        }
        /**
         * Whether this bar has any changes applied which are not related to the voices in it.
         * (e.g. new key signatures)
         */
        get hasChanges() {
            if (this.index === 0) {
                return true;
            }
            const hasChangesToPrevious = this.keySignature !== this.previousBar.keySignature ||
                this.keySignatureType !== this.previousBar.keySignatureType ||
                this.clef !== this.previousBar.clef ||
                this.clefOttava !== this.previousBar.clefOttava;
            if (hasChangesToPrevious) {
                return true;
            }
            return (this.simileMark !== SimileMark.None ||
                this.sustainPedals.length > 0 ||
                this.barLineLeft !== BarLineStyle.Automatic ||
                this.barLineRight !== BarLineStyle.Automatic);
        }
        /**
         * Whether this bar is empty or has only rests.
         */
        get isRestOnly() {
            return this._isRestOnly;
        }
        /**
         * The bar line to draw on the left side of the bar with an "automatic" type resolved to the actual one.
         * @param isFirstOfSystem  Whether the bar is the first one in the system.
         */
        getActualBarLineLeft(isFirstOfSystem) {
            return Bar.actualBarLine(this, false, isFirstOfSystem);
        }
        /**
         * The bar line to draw on the right side of the bar with an "automatic" type resolved to the actual one.
         * @param isFirstOfSystem  Whether the bar is the first one in the system.
         */
        getActualBarLineRight() {
            return Bar.actualBarLine(this, true, false /* not relevant */);
        }
        static automaticToActualType(masterBar, isRight, firstOfSystem) {
            let actualLineType;
            if (isRight) {
                if (masterBar.isRepeatEnd) {
                    actualLineType = BarLineStyle.LightHeavy;
                }
                else if (!masterBar.nextMasterBar) {
                    actualLineType = BarLineStyle.LightHeavy;
                }
                else if (masterBar.isFreeTime) {
                    actualLineType = BarLineStyle.Dashed;
                }
                else if (masterBar.isDoubleBar) {
                    actualLineType = BarLineStyle.LightLight;
                }
                else {
                    actualLineType = BarLineStyle.Regular;
                }
            }
            else {
                if (masterBar.isRepeatStart) {
                    actualLineType = BarLineStyle.HeavyLight;
                }
                else if (firstOfSystem) {
                    actualLineType = BarLineStyle.Regular;
                }
                else {
                    actualLineType = BarLineStyle.None;
                }
            }
            return actualLineType;
        }
        static actualBarLine(bar, isRight, firstOfSystem) {
            const masterBar = bar.masterBar;
            const requestedLineType = isRight ? bar.barLineRight : bar.barLineLeft;
            let actualLineType;
            if (requestedLineType === BarLineStyle.Automatic) {
                actualLineType = Bar.automaticToActualType(masterBar, isRight, firstOfSystem);
            }
            else {
                actualLineType = requestedLineType;
            }
            return actualLineType;
        }
        addVoice(voice) {
            voice.bar = this;
            voice.index = this.voices.length;
            this.voices.push(voice);
        }
        finish(settings, sharedDataBag = null) {
            this.isMultiVoice = false;
            this._isEmpty = true;
            this._isRestOnly = true;
            for (let i = 0, j = this.voices.length; i < j; i++) {
                const voice = this.voices[i];
                voice.finish(settings, sharedDataBag);
                if (i > 0 && !voice.isEmpty) {
                    this.isMultiVoice = true;
                }
                if (!voice.isEmpty) {
                    this._isEmpty = false;
                }
                if (!voice.isRestOnly) {
                    this._isRestOnly = false;
                }
            }
            // chain sustain pedal markers (and merge overlaps)
            const sustainPedals = this.sustainPedals;
            if (sustainPedals.length > 0) {
                let previousMarker = null;
                this.sustainPedals = [];
                if (this.previousBar && this.previousBar.sustainPedals.length > 0) {
                    previousMarker = this.previousBar.sustainPedals[this.previousBar.sustainPedals.length - 1];
                }
                const isDown = previousMarker !== null && previousMarker.pedalType !== SustainPedalMarkerType.Up;
                for (const marker of sustainPedals) {
                    if (previousMarker && previousMarker.pedalType !== SustainPedalMarkerType.Up) {
                        //duplicate or out-of-order markers
                        if (previousMarker.bar === this && marker.ratioPosition <= previousMarker.ratioPosition) {
                            continue;
                        }
                        previousMarker.nextPedalMarker = marker;
                        marker.previousPedalMarker = previousMarker;
                    }
                    if (isDown && marker.pedalType === SustainPedalMarkerType.Down) {
                        marker.pedalType = SustainPedalMarkerType.Hold;
                    }
                    marker.bar = this;
                    this.sustainPedals.push(marker);
                    previousMarker = marker;
                }
            }
            else if (this.previousBar && this.previousBar.sustainPedals.length > 0) {
                const lastMarker = this.previousBar.sustainPedals[this.previousBar.sustainPedals.length - 1];
                if (lastMarker.pedalType !== SustainPedalMarkerType.Up) {
                    // create hold marker if the last marker on the previous bar is not "up"
                    const holdMarker = new SustainPedalMarker();
                    holdMarker.ratioPosition = 0;
                    holdMarker.bar = this;
                    holdMarker.pedalType = SustainPedalMarkerType.Hold;
                    this.sustainPedals.push(holdMarker);
                    lastMarker.nextPedalMarker = holdMarker;
                    holdMarker.previousPedalMarker = lastMarker;
                }
            }
        }
        calculateDuration() {
            let duration = 0;
            for (const voice of this.voices) {
                const voiceDuration = voice.calculateDuration();
                if (voiceDuration > duration) {
                    duration = voiceDuration;
                }
            }
            return duration;
        }
    }
    Bar._globalBarId = 0;

    /**
     * Lists all dynamics.
     */
    var DynamicValue;
    (function (DynamicValue) {
        // common dynamics
        /**
         * pianississimo (very very soft)
         */
        DynamicValue[DynamicValue["PPP"] = 0] = "PPP";
        /**
         * pianissimo (very soft)
         */
        DynamicValue[DynamicValue["PP"] = 1] = "PP";
        /**
         * piano (soft)
         */
        DynamicValue[DynamicValue["P"] = 2] = "P";
        /**
         * mezzo-piano (half soft)
         */
        DynamicValue[DynamicValue["MP"] = 3] = "MP";
        /**
         * mezzo-forte (half loud)
         */
        DynamicValue[DynamicValue["MF"] = 4] = "MF";
        /**
         * forte (loud)
         */
        DynamicValue[DynamicValue["F"] = 5] = "F";
        /**
         * fortissimo (very loud)
         */
        DynamicValue[DynamicValue["FF"] = 6] = "FF";
        /**
         * fortississimo (very very loud)
         */
        DynamicValue[DynamicValue["FFF"] = 7] = "FFF";
        // special dynamics
        DynamicValue[DynamicValue["PPPP"] = 8] = "PPPP";
        DynamicValue[DynamicValue["PPPPP"] = 9] = "PPPPP";
        DynamicValue[DynamicValue["PPPPPP"] = 10] = "PPPPPP";
        DynamicValue[DynamicValue["FFFF"] = 11] = "FFFF";
        DynamicValue[DynamicValue["FFFFF"] = 12] = "FFFFF";
        DynamicValue[DynamicValue["FFFFFF"] = 13] = "FFFFFF";
        /**
         * Sforzando
         */
        DynamicValue[DynamicValue["SF"] = 14] = "SF";
        /**
         * SforzandoPiano
         */
        DynamicValue[DynamicValue["SFP"] = 15] = "SFP";
        /**
         * SforzandoPianissimo
         */
        DynamicValue[DynamicValue["SFPP"] = 16] = "SFPP";
        /**
         * FortePiano
         */
        DynamicValue[DynamicValue["FP"] = 17] = "FP";
        /**
         * Rinforzando 1
         */
        DynamicValue[DynamicValue["RF"] = 18] = "RF";
        /**
         * Rinforzando 2
         */
        DynamicValue[DynamicValue["RFZ"] = 19] = "RFZ";
        /**
         * Sforzato
         */
        DynamicValue[DynamicValue["SFZ"] = 20] = "SFZ";
        /**
         * SforzatoFF
         */
        DynamicValue[DynamicValue["SFFZ"] = 21] = "SFFZ";
        /**
         * Forzando
         */
        DynamicValue[DynamicValue["FZ"] = 22] = "FZ";
        /**
         * Niente
         */
        DynamicValue[DynamicValue["N"] = 23] = "N";
        /**
         * Poco forte
         */
        DynamicValue[DynamicValue["PF"] = 24] = "PF";
        /**
         * SforzatoPiano
         */
        DynamicValue[DynamicValue["SFZP"] = 25] = "SFZP";
    })(DynamicValue || (DynamicValue = {}));

    class MidiUtils {
        /**
         * Converts the given midi tick duration into milliseconds.
         * @param ticks The duration in midi ticks
         * @param tempo The current tempo in BPM.
         * @returns The converted duration in milliseconds.
         */
        static ticksToMillis(ticks, tempo) {
            return (ticks * (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
        }
        /**
         * Converts the given midi tick duration into milliseconds.
         * @param millis The duration in milliseconds
         * @param tempo The current tempo in BPM.
         * @returns The converted duration in midi ticks.
         */
        static millisToTicks(millis, tempo) {
            return (millis / (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
        }
        /**
         * Converts a duration value to its ticks equivalent.
         */
        static toTicks(duration) {
            return MidiUtils.valueToTicks(duration);
        }
        /**
         * Converts a numerical value to its ticks equivalent.
         * @param duration the numerical proportion to convert. (i.E. timesignature denominator, note duration,...)
         */
        static valueToTicks(duration) {
            let denomninator = duration;
            if (denomninator < 0) {
                denomninator = 1 / -denomninator;
            }
            return (MidiUtils.QuarterTime * (4.0 / denomninator)) | 0;
        }
        static applyDot(ticks, doubleDotted) {
            if (doubleDotted) {
                return ticks + ((ticks / 4) | 0) * 3;
            }
            return ticks + ((ticks / 2) | 0);
        }
        static applyTuplet(ticks, numerator, denominator) {
            return ((ticks * denominator) / numerator) | 0;
        }
        static removeTuplet(ticks, numerator, denominator) {
            return ((ticks * numerator) / denominator) | 0;
        }
        static dynamicToVelocity(dynamicValue, adjustment = 0) {
            let velocity = 1;
            switch (dynamicValue) {
                case DynamicValue.PPP:
                    velocity = MidiUtils.MinVelocity + 0 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.PP:
                    velocity = MidiUtils.MinVelocity + 1 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.P:
                    velocity = MidiUtils.MinVelocity + 2 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.MP:
                    velocity = MidiUtils.MinVelocity + 3 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.MF:
                    velocity = MidiUtils.MinVelocity + 4 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.F:
                    velocity = MidiUtils.MinVelocity + 5 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.FF:
                    velocity = MidiUtils.MinVelocity + 6 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.FFF:
                    velocity = MidiUtils.MinVelocity + 7 * MidiUtils.VelocityIncrement;
                    break;
                // special
                case DynamicValue.PPPP:
                    velocity = 10;
                    break;
                case DynamicValue.PPPPP:
                    velocity = 5;
                    break;
                case DynamicValue.PPPPPP:
                    velocity = 3;
                    break;
                case DynamicValue.FFFF:
                    velocity = MidiUtils.MinVelocity + 8 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.FFFFF:
                    velocity = MidiUtils.MinVelocity + 9 * MidiUtils.VelocityIncrement;
                    break;
                case DynamicValue.FFFFFF:
                    velocity = MidiUtils.MinVelocity + 10 * MidiUtils.VelocityIncrement;
                    break;
                // "forced" variants -> a bit louder than normal, same as FF for us
                case DynamicValue.SF:
                case DynamicValue.SFP:
                case DynamicValue.SFZP:
                case DynamicValue.SFPP:
                case DynamicValue.SFZ:
                case DynamicValue.FZ:
                    velocity = MidiUtils.MinVelocity + 6 * MidiUtils.VelocityIncrement;
                    break;
                // force -> piano, same as F for us
                case DynamicValue.FP:
                    velocity = MidiUtils.MinVelocity + 5 * MidiUtils.VelocityIncrement;
                    break;
                // "rinforced" varaints -> like "forced" but typically for a whole passage
                // not a single note, same as FF for us
                case DynamicValue.RF:
                case DynamicValue.RFZ:
                case DynamicValue.SFFZ:
                    velocity = MidiUtils.MinVelocity + 5 * MidiUtils.VelocityIncrement;
                    break;
                // almost not hearable but still a value
                case DynamicValue.N:
                    velocity = 1;
                    break;
                // A bit weaker than standard F but stronger than MF
                case DynamicValue.PF:
                    velocity = MidiUtils.MinVelocity + ((4.5 * MidiUtils.VelocityIncrement) | 0);
                    break;
            }
            // 0 would means note-off (not played) so we need a minimum of 1 to have still a note played
            velocity += adjustment * MidiUtils.VelocityIncrement;
            return Math.min(Math.max(velocity, 1), 127);
        }
    }
    MidiUtils.QuarterTime = 960;
    MidiUtils.MinVelocity = 15;
    MidiUtils.VelocityIncrement = 16;

    /**
     * This public enumeration lists all types of automations.
     */
    var AutomationType;
    (function (AutomationType) {
        /**
         * Tempo change.
         */
        AutomationType[AutomationType["Tempo"] = 0] = "Tempo";
        /**
         * Colume change.
         */
        AutomationType[AutomationType["Volume"] = 1] = "Volume";
        /**
         * Instrument change.
         */
        AutomationType[AutomationType["Instrument"] = 2] = "Instrument";
        /**
         * Balance change.
         */
        AutomationType[AutomationType["Balance"] = 3] = "Balance";
        /**
         * A sync point for synchronizing the internal time axis with an external audio track.
         */
        AutomationType[AutomationType["SyncPoint"] = 4] = "SyncPoint";
    })(AutomationType || (AutomationType = {}));
    /**
     * Represents the data of a sync point for synchronizing the internal time axis with
     * an external audio file.
     * @cloneable
     * @json
     * @json_strict
     */
    class SyncPointData {
        constructor() {
            /**
             * Indicates for which repeat occurence this sync point is valid (e.g. 0 on the first time played, 1 on the second time played)
             */
            this.barOccurence = 0;
            /**
             * The audio offset marking the position within the audio track in milliseconds.
             * This information is used to regularly sync (or on seeking) to match a given external audio time axis with the internal time axis.
             */
            this.millisecondOffset = 0;
        }
    }
    /**
     * Automations are used to change the behaviour of a song.
     * @cloneable
     * @json
     * @json_strict
     */
    class Automation {
        constructor() {
            /**
             * Gets or sets whether the automation is applied linear.
             */
            this.isLinear = false;
            /**
             * Gets or sets the type of the automation.
             */
            this.type = AutomationType.Tempo;
            /**
             * Gets or sets the target value of the automation.
             */
            this.value = 0;
            /**
             * Gets or sets the relative position of of the automation.
             */
            this.ratioPosition = 0;
            /**
             * Gets or sets the additional text of the automation.
             */
            this.text = '';
        }
        static buildTempoAutomation(isLinear, ratioPosition, value, reference) {
            if (reference < 1 || reference > 5) {
                reference = 2;
            }
            const references = new Float32Array([1, 0.5, 1.0, 1.5, 2.0, 3.0]);
            const automation = new Automation();
            automation.type = AutomationType.Tempo;
            automation.isLinear = isLinear;
            automation.ratioPosition = ratioPosition;
            automation.value = value * references[reference];
            return automation;
        }
        static buildInstrumentAutomation(isLinear, ratioPosition, value) {
            const automation = new Automation();
            automation.type = AutomationType.Instrument;
            automation.isLinear = isLinear;
            automation.ratioPosition = ratioPosition;
            automation.value = value;
            return automation;
        }
    }

    /**
     * A single point of a bending graph. Used to
     * describe WhammyBar and String Bending effects.
     * @cloneable
     * @json
     * @json_strict
     */
    class BendPoint {
        /**
         * Initializes a new instance of the {@link BendPoint} class.
         * @param offset The offset.
         * @param value The value.
         */
        constructor(offset = 0, value = 0) {
            this.offset = offset;
            this.value = value;
        }
    }
    BendPoint.MaxPosition = 60;
    BendPoint.MaxValue = 12;

    /**
     * Lists the different bend styles
     */
    var BendStyle;
    (function (BendStyle) {
        /**
         * The bends are as described by the bend points
         */
        BendStyle[BendStyle["Default"] = 0] = "Default";
        /**
         * The bends are gradual over the beat duration.
         */
        BendStyle[BendStyle["Gradual"] = 1] = "Gradual";
        /**
         * The bends are done fast before the next note.
         */
        BendStyle[BendStyle["Fast"] = 2] = "Fast";
    })(BendStyle || (BendStyle = {}));

    /**
     * Lists all types of bends
     */
    var BendType;
    (function (BendType) {
        /**
         * No bend at all
         */
        BendType[BendType["None"] = 0] = "None";
        /**
         * Individual points define the bends in a flexible manner.
         * This system was mainly used in Guitar Pro 3-5
         */
        BendType[BendType["Custom"] = 1] = "Custom";
        /**
         * Simple Bend from an unbended string to a higher note.
         */
        BendType[BendType["Bend"] = 2] = "Bend";
        /**
         * Release of a bend that was started on an earlier note.
         */
        BendType[BendType["Release"] = 3] = "Release";
        /**
         * A bend that starts from an unbended string,
         * and also releases the bend after some time.
         */
        BendType[BendType["BendRelease"] = 4] = "BendRelease";
        /**
         * Holds a bend that was started on an earlier note
         */
        BendType[BendType["Hold"] = 5] = "Hold";
        /**
         * A bend that is already started before the note is played then it is held until the end.
         */
        BendType[BendType["Prebend"] = 6] = "Prebend";
        /**
         * A bend that is already started before the note is played and
         * bends even further, then it is held until the end.
         */
        BendType[BendType["PrebendBend"] = 7] = "PrebendBend";
        /**
         * A bend that is already started before the note is played and
         * then releases the bend to a lower note where it is held until the end.
         */
        BendType[BendType["PrebendRelease"] = 8] = "PrebendRelease";
    })(BendType || (BendType = {}));

    /**
     * Lists all types of how to brush multiple notes on a beat.
     */
    var BrushType;
    (function (BrushType) {
        /**
         * No brush.
         */
        BrushType[BrushType["None"] = 0] = "None";
        /**
         * Normal brush up.
         */
        BrushType[BrushType["BrushUp"] = 1] = "BrushUp";
        /**
         * Normal brush down.
         */
        BrushType[BrushType["BrushDown"] = 2] = "BrushDown";
        /**
         * Arpeggio up.
         */
        BrushType[BrushType["ArpeggioUp"] = 3] = "ArpeggioUp";
        /**
         * Arpeggio down.
         */
        BrushType[BrushType["ArpeggioDown"] = 4] = "ArpeggioDown";
    })(BrushType || (BrushType = {}));

    /**
     * Lists all Crescendo and Decrescendo types.
     */
    var CrescendoType;
    (function (CrescendoType) {
        /**
         * No crescendo applied.
         */
        CrescendoType[CrescendoType["None"] = 0] = "None";
        /**
         * Normal crescendo applied.
         */
        CrescendoType[CrescendoType["Crescendo"] = 1] = "Crescendo";
        /**
         * Normal decrescendo applied.
         */
        CrescendoType[CrescendoType["Decrescendo"] = 2] = "Decrescendo";
    })(CrescendoType || (CrescendoType = {}));

    /**
     * Lists all durations of a beat.
     */
    var Duration;
    (function (Duration) {
        /**
         * A quadruple whole note duration
         */
        Duration[Duration["QuadrupleWhole"] = -4] = "QuadrupleWhole";
        /**
         * A double whole note duration
         */
        Duration[Duration["DoubleWhole"] = -2] = "DoubleWhole";
        /**
         * A whole note duration
         */
        Duration[Duration["Whole"] = 1] = "Whole";
        /**
         * A 1/2 note duration
         */
        Duration[Duration["Half"] = 2] = "Half";
        /**
         * A 1/4 note duration
         */
        Duration[Duration["Quarter"] = 4] = "Quarter";
        /**
         * A 1/8 note duration
         */
        Duration[Duration["Eighth"] = 8] = "Eighth";
        /**
         * A 1/16 note duration
         */
        Duration[Duration["Sixteenth"] = 16] = "Sixteenth";
        /**
         * A 1/32 note duration
         */
        Duration[Duration["ThirtySecond"] = 32] = "ThirtySecond";
        /**
         * A 1/64 note duration
         */
        Duration[Duration["SixtyFourth"] = 64] = "SixtyFourth";
        /**
         * A 1/128 note duration
         */
        Duration[Duration["OneHundredTwentyEighth"] = 128] = "OneHundredTwentyEighth";
        /**
         * A 1/256 note duration
         */
        Duration[Duration["TwoHundredFiftySixth"] = 256] = "TwoHundredFiftySixth";
    })(Duration || (Duration = {}));

    /**
     * Lists all types of grace notes
     */
    var GraceType;
    (function (GraceType) {
        /**
         * No grace, normal beat.
         */
        GraceType[GraceType["None"] = 0] = "None";
        /**
         * The beat contains on-beat grace notes.
         */
        GraceType[GraceType["OnBeat"] = 1] = "OnBeat";
        /**
         * The beat contains before-beat grace notes.
         */
        GraceType[GraceType["BeforeBeat"] = 2] = "BeforeBeat";
        /**
         * The beat contains very special bend-grace notes used in SongBook style displays.
         */
        GraceType[GraceType["BendGrace"] = 3] = "BendGrace";
    })(GraceType || (GraceType = {}));

    /**
     * Lists all types of note acceuntations
     */
    var AccentuationType;
    (function (AccentuationType) {
        /**
         * No accentuation
         */
        AccentuationType[AccentuationType["None"] = 0] = "None";
        /**
         * Normal accentuation
         */
        AccentuationType[AccentuationType["Normal"] = 1] = "Normal";
        /**
         * Heavy accentuation
         */
        AccentuationType[AccentuationType["Heavy"] = 2] = "Heavy";
        /**
         * Tenuto accentuation
         */
        AccentuationType[AccentuationType["Tenuto"] = 3] = "Tenuto";
    })(AccentuationType || (AccentuationType = {}));

    /**
     * Lists all fingers.
     */
    var Fingers;
    (function (Fingers) {
        /**
         * Unknown type (not documented)
         */
        Fingers[Fingers["Unknown"] = -2] = "Unknown";
        /**
         * No finger, dead note
         */
        Fingers[Fingers["NoOrDead"] = -1] = "NoOrDead";
        /**
         * The thumb
         */
        Fingers[Fingers["Thumb"] = 0] = "Thumb";
        /**
         * The index finger
         */
        Fingers[Fingers["IndexFinger"] = 1] = "IndexFinger";
        /**
         * The middle finger
         */
        Fingers[Fingers["MiddleFinger"] = 2] = "MiddleFinger";
        /**
         * The annular finger
         */
        Fingers[Fingers["AnnularFinger"] = 3] = "AnnularFinger";
        /**
         * The little finger
         */
        Fingers[Fingers["LittleFinger"] = 4] = "LittleFinger";
    })(Fingers || (Fingers = {}));

    /**
     * Lists all harmonic types.
     */
    var HarmonicType;
    (function (HarmonicType) {
        /**
         * No harmonics.
         */
        HarmonicType[HarmonicType["None"] = 0] = "None";
        /**
         * Natural harmonic
         */
        HarmonicType[HarmonicType["Natural"] = 1] = "Natural";
        /**
         * Artificial harmonic
         */
        HarmonicType[HarmonicType["Artificial"] = 2] = "Artificial";
        /**
         * Pinch harmonics
         */
        HarmonicType[HarmonicType["Pinch"] = 3] = "Pinch";
        /**
         * Tap harmonics
         */
        HarmonicType[HarmonicType["Tap"] = 4] = "Tap";
        /**
         * Semi harmonics
         */
        HarmonicType[HarmonicType["Semi"] = 5] = "Semi";
        /**
         * Feedback harmonics
         */
        HarmonicType[HarmonicType["Feedback"] = 6] = "Feedback";
    })(HarmonicType || (HarmonicType = {}));

    /**
     * Lists the modes how accidentals are handled for notes
     */
    var NoteAccidentalMode;
    (function (NoteAccidentalMode) {
        /**
         * Accidentals are calculated automatically.
         */
        NoteAccidentalMode[NoteAccidentalMode["Default"] = 0] = "Default";
        /**
         * This will try to ensure that no accidental is shown.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceNone"] = 1] = "ForceNone";
        /**
         * This will move the note one line down and applies a Naturalize.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceNatural"] = 2] = "ForceNatural";
        /**
         * This will move the note one line down and applies a Sharp.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceSharp"] = 3] = "ForceSharp";
        /**
         * This will move the note to be shown 2 half-notes deeper with a double sharp symbol
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceDoubleSharp"] = 4] = "ForceDoubleSharp";
        /**
         * This will move the note one line up and applies a Flat.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceFlat"] = 5] = "ForceFlat";
        /**
         * This will move the note two half notes up with a double flag symbol.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceDoubleFlat"] = 6] = "ForceDoubleFlat";
    })(NoteAccidentalMode || (NoteAccidentalMode = {}));

    /**
     * This public enum lists all different types of finger slide-ins on a string.
     */
    var SlideInType;
    (function (SlideInType) {
        /**
         * No slide.
         */
        SlideInType[SlideInType["None"] = 0] = "None";
        /**
         * Slide into the note from below on the same string.
         */
        SlideInType[SlideInType["IntoFromBelow"] = 1] = "IntoFromBelow";
        /**
         * Slide into the note from above on the same string.
         */
        SlideInType[SlideInType["IntoFromAbove"] = 2] = "IntoFromAbove";
    })(SlideInType || (SlideInType = {}));

    /**
     * This public enum lists all different types of finger slide-outs on a string.
     */
    var SlideOutType;
    (function (SlideOutType) {
        /**
         * No slide.
         */
        SlideOutType[SlideOutType["None"] = 0] = "None";
        /**
         * Shift slide to next note on same string
         */
        SlideOutType[SlideOutType["Shift"] = 1] = "Shift";
        /**
         * Legato slide to next note on same string.
         */
        SlideOutType[SlideOutType["Legato"] = 2] = "Legato";
        /**
         * Slide out from the note from upwards on the same string.
         */
        SlideOutType[SlideOutType["OutUp"] = 3] = "OutUp";
        /**
         * Slide out from the note from downwards on the same string.
         */
        SlideOutType[SlideOutType["OutDown"] = 4] = "OutDown";
        /**
         * Pickslide down on this note
         */
        SlideOutType[SlideOutType["PickSlideDown"] = 5] = "PickSlideDown";
        /**
         * Pickslide up on this note
         */
        SlideOutType[SlideOutType["PickSlideUp"] = 6] = "PickSlideUp";
    })(SlideOutType || (SlideOutType = {}));

    /**
     * This public enum lists all vibrato types that can be performed.
     */
    var VibratoType;
    (function (VibratoType) {
        /**
         * No vibrato.
         */
        VibratoType[VibratoType["None"] = 0] = "None";
        /**
         * A slight vibrato.
         */
        VibratoType[VibratoType["Slight"] = 1] = "Slight";
        /**
         * A wide vibrato.
         */
        VibratoType[VibratoType["Wide"] = 2] = "Wide";
    })(VibratoType || (VibratoType = {}));

    /**
     * Lists the different modes on how rhythm notation is shown on the tab staff.
     */
    exports.TabRhythmMode = void 0;
    (function (TabRhythmMode) {
        /**
         * Rhythm notation is hidden.
         */
        TabRhythmMode[TabRhythmMode["Hidden"] = 0] = "Hidden";
        /**
         * Rhythm notation is shown with individual beams per beat.
         */
        TabRhythmMode[TabRhythmMode["ShowWithBeams"] = 1] = "ShowWithBeams";
        /**
         * Rhythm notation is shown and behaves like normal score notation with connected bars.
         */
        TabRhythmMode[TabRhythmMode["ShowWithBars"] = 2] = "ShowWithBars";
        /**
         * Automatic detection whether the tabs should show rhythm based on hidden standard notation.
         * @since 1.4.0
         */
        TabRhythmMode[TabRhythmMode["Automatic"] = 3] = "Automatic";
    })(exports.TabRhythmMode || (exports.TabRhythmMode = {}));
    /**
     * Lists all modes on how fingerings should be displayed.
     */
    exports.FingeringMode = void 0;
    (function (FingeringMode) {
        /**
         * Fingerings will be shown in the standard notation staff.
         */
        FingeringMode[FingeringMode["ScoreDefault"] = 0] = "ScoreDefault";
        /**
         * Fingerings will be shown in the standard notation staff. Piano finger style is enforced, where
         * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
         */
        FingeringMode[FingeringMode["ScoreForcePiano"] = 1] = "ScoreForcePiano";
        /**
         * Fingerings will be shown in a effect band above the tabs in case
         * they have only a single note on the beat.
         */
        FingeringMode[FingeringMode["SingleNoteEffectBand"] = 2] = "SingleNoteEffectBand";
        /**
         * Fingerings will be shown in a effect band above the tabs in case
         * they have only a single note on the beat. Piano finger style is enforced, where
         * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
         */
        FingeringMode[FingeringMode["SingleNoteEffectBandForcePiano"] = 3] = "SingleNoteEffectBandForcePiano";
    })(exports.FingeringMode || (exports.FingeringMode = {}));
    /**
     * Lists all modes on how alphaTab can handle the display and playback of music notation.
     */
    exports.NotationMode = void 0;
    (function (NotationMode) {
        /**
         * Music elements will be displayed and played as in Guitar Pro.
         */
        NotationMode[NotationMode["GuitarPro"] = 0] = "GuitarPro";
        /**
         * Music elements will be displayed and played as in traditional songbooks.
         * Changes:
         * 1. Bends
         *   For bends additional grace beats are introduced.
         *   Bends are categorized into gradual and fast bends.
         *   - Gradual bends are indicated by beat text "grad" or "grad.". Bend will sound along the beat duration.
         *   - Fast bends are done right before the next note. If the next note is tied even on-beat of the next note.
         * 2. Whammy Bars
         *   Dips are shown as simple annotation over the beats
         *   Whammy Bars are categorized into gradual and fast.
         *   - Gradual whammys are indicated by beat text "grad" or "grad.". Whammys will sound along the beat duration.
         *   - Fast whammys are done right the beat.
         * 3. Let Ring
         *   Tied notes with let ring are not shown in standard notation
         *   Let ring does not cause a longer playback, duration is defined via tied notes.
         */
        NotationMode[NotationMode["SongBook"] = 1] = "SongBook";
    })(exports.NotationMode || (exports.NotationMode = {}));
    /**
     * Lists all major music notation elements that are part
     * of the music sheet and can be dynamically controlled to be shown
     * or hidden.
     */
    exports.NotationElement = void 0;
    (function (NotationElement) {
        /**
         * The score title shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreTitle"] = 0] = "ScoreTitle";
        /**
         * The score subtitle shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreSubTitle"] = 1] = "ScoreSubTitle";
        /**
         * The score artist shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreArtist"] = 2] = "ScoreArtist";
        /**
         * The score album shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreAlbum"] = 3] = "ScoreAlbum";
        /**
         * The score words author shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreWords"] = 4] = "ScoreWords";
        /**
         * The score music author shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreMusic"] = 5] = "ScoreMusic";
        /**
         * The score words&music author shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreWordsAndMusic"] = 6] = "ScoreWordsAndMusic";
        /**
         * The score copyright owner shown at the start of the music sheet.
         */
        NotationElement[NotationElement["ScoreCopyright"] = 7] = "ScoreCopyright";
        /**
         * The tuning information of the guitar shown
         * above the staves.
         */
        NotationElement[NotationElement["GuitarTuning"] = 8] = "GuitarTuning";
        /**
         * The track names which are shown in the accolade.
         */
        NotationElement[NotationElement["TrackNames"] = 9] = "TrackNames";
        /**
         * The chord diagrams for guitars. Usually shown
         * below the score info.
         */
        NotationElement[NotationElement["ChordDiagrams"] = 10] = "ChordDiagrams";
        /**
         * Parenthesis that are shown for tied bends
         * if they are preceeded by bends.
         */
        NotationElement[NotationElement["ParenthesisOnTiedBends"] = 11] = "ParenthesisOnTiedBends";
        /**
         * The tab number for tied notes if the
         * bend of a note is increased at that point.
         */
        NotationElement[NotationElement["TabNotesOnTiedBends"] = 12] = "TabNotesOnTiedBends";
        /**
         * Zero tab numbers on "dive whammys".
         */
        NotationElement[NotationElement["ZerosOnDiveWhammys"] = 13] = "ZerosOnDiveWhammys";
        /**
         * The alternate endings information on repeats shown above the staff.
         */
        NotationElement[NotationElement["EffectAlternateEndings"] = 14] = "EffectAlternateEndings";
        /**
         * The information about the fret on which the capo is placed shown above the staff.
         */
        NotationElement[NotationElement["EffectCapo"] = 15] = "EffectCapo";
        /**
         * The chord names shown above beats shown above the staff.
         */
        NotationElement[NotationElement["EffectChordNames"] = 16] = "EffectChordNames";
        /**
         * The crescendo/decrescendo angle  shown above the staff.
         */
        NotationElement[NotationElement["EffectCrescendo"] = 17] = "EffectCrescendo";
        /**
         * The beat dynamics  shown above the staff.
         */
        NotationElement[NotationElement["EffectDynamics"] = 18] = "EffectDynamics";
        /**
         * The curved angle for fade in/out effects  shown above the staff.
         */
        NotationElement[NotationElement["EffectFadeIn"] = 19] = "EffectFadeIn";
        /**
         * The fermata symbol shown above the staff.
         */
        NotationElement[NotationElement["EffectFermata"] = 20] = "EffectFermata";
        /**
         * The fingering information.
         */
        NotationElement[NotationElement["EffectFingering"] = 21] = "EffectFingering";
        /**
         * The harmonics names shown above the staff.
         * (does not represent the harmonic note heads)
         */
        NotationElement[NotationElement["EffectHarmonics"] = 22] = "EffectHarmonics";
        /**
         * The let ring name and line above the staff.
         */
        NotationElement[NotationElement["EffectLetRing"] = 23] = "EffectLetRing";
        /**
         * The lyrics of the track shown above the staff.
         */
        NotationElement[NotationElement["EffectLyrics"] = 24] = "EffectLyrics";
        /**
         * The section markers shown above the staff.
         */
        NotationElement[NotationElement["EffectMarker"] = 25] = "EffectMarker";
        /**
         * The ottava symbol and lines shown above the staff.
         */
        NotationElement[NotationElement["EffectOttavia"] = 26] = "EffectOttavia";
        /**
         * The palm mute name and line shown above the staff.
         */
        NotationElement[NotationElement["EffectPalmMute"] = 27] = "EffectPalmMute";
        /**
         * The pick slide information shown above the staff.
         * (does not control the pick slide lines)
         */
        NotationElement[NotationElement["EffectPickSlide"] = 28] = "EffectPickSlide";
        /**
         * The pick stroke symbols shown above the staff.
         */
        NotationElement[NotationElement["EffectPickStroke"] = 29] = "EffectPickStroke";
        /**
         * The slight beat vibrato waves shown above the staff.
         */
        NotationElement[NotationElement["EffectSlightBeatVibrato"] = 30] = "EffectSlightBeatVibrato";
        /**
         * The slight note vibrato waves shown above the staff.
         */
        NotationElement[NotationElement["EffectSlightNoteVibrato"] = 31] = "EffectSlightNoteVibrato";
        /**
         * The tap/slap/pop effect names shown above the staff.
         */
        NotationElement[NotationElement["EffectTap"] = 32] = "EffectTap";
        /**
         * The tempo information shown above the staff.
         */
        NotationElement[NotationElement["EffectTempo"] = 33] = "EffectTempo";
        /**
         * The additional beat text shown above the staff.
         */
        NotationElement[NotationElement["EffectText"] = 34] = "EffectText";
        /**
         * The trill name and waves shown above the staff.
         */
        NotationElement[NotationElement["EffectTrill"] = 35] = "EffectTrill";
        /**
         * The triplet feel symbol shown above the staff.
         */
        NotationElement[NotationElement["EffectTripletFeel"] = 36] = "EffectTripletFeel";
        /**
         * The whammy bar information shown above the staff.
         * (does not control the whammy lines shown within the staff)
         */
        NotationElement[NotationElement["EffectWhammyBar"] = 37] = "EffectWhammyBar";
        /**
         * The wide beat vibrato waves shown above the staff.
         */
        NotationElement[NotationElement["EffectWideBeatVibrato"] = 38] = "EffectWideBeatVibrato";
        /**
         * The wide note vibrato waves shown above the staff.
         */
        NotationElement[NotationElement["EffectWideNoteVibrato"] = 39] = "EffectWideNoteVibrato";
        /**
         * The left hand tap symbol shown above the staff.
         */
        NotationElement[NotationElement["EffectLeftHandTap"] = 40] = "EffectLeftHandTap";
        /**
         * The "Free time" text shown above the staff.
         */
        NotationElement[NotationElement["EffectFreeTime"] = 41] = "EffectFreeTime";
        /**
         * The Sustain pedal effect shown above the staff "Ped.____*"
         */
        NotationElement[NotationElement["EffectSustainPedal"] = 42] = "EffectSustainPedal";
        /**
         * The Golpe effect signs above and below the staff.
         */
        NotationElement[NotationElement["EffectGolpe"] = 43] = "EffectGolpe";
        /**
         * The Wah effect signs above and below the staff.
         */
        NotationElement[NotationElement["EffectWahPedal"] = 44] = "EffectWahPedal";
        /**
         * The Beat barre effect signs above and below the staff "1/2B IV ─────┐"
         */
        NotationElement[NotationElement["EffectBeatBarre"] = 45] = "EffectBeatBarre";
        /**
         * The note ornaments like turns and mordents.
         */
        NotationElement[NotationElement["EffectNoteOrnament"] = 46] = "EffectNoteOrnament";
        /**
         * The Rasgueado indicator above the staff Rasg. ----|"
         */
        NotationElement[NotationElement["EffectRasgueado"] = 47] = "EffectRasgueado";
        /**
         * The directions indicators like coda and segno.
         */
        NotationElement[NotationElement["EffectDirections"] = 48] = "EffectDirections";
        /**
         * The absolute playback time of beats.
         */
        NotationElement[NotationElement["EffectBeatTimer"] = 49] = "EffectBeatTimer";
    })(exports.NotationElement || (exports.NotationElement = {}));
    /**
     * The notation settings control how various music notation elements are shown and behaving
     * @json
     * @json_declaration
     */
    class NotationSettings {
        constructor() {
            /**
             * The mode to use for display and play music notation elements.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `NotationMode.GuitarPro`
             * @remarks
             * AlphaTab provides 2 main music notation display modes `GuitarPro` and `SongBook`.
             * As the names indicate they adjust the overall music notation rendering either to be more in line how [Arobas Guitar Pro](https://www.guitar-pro.com) displays it,
             * or more like the common practice in paper song books practices the display.
             *
             * The main differences in the Songbook display mode are:
             *
             * 1. **Bends**
             * For bends additional grace beats are introduced. Bends are categorized into gradual and fast bends.
             *     * Gradual bends are indicated by beat text "grad" or "grad.". Bend will sound along the beat duration.
             *     * Fast bends are done right before the next note. If the next note is tied even on-beat of the next note.
             * 2.  **Whammy Bars**
             * Dips are shown as simple annotation over the beats. Whammy Bars are categorized into gradual and fast.
             *     * Gradual whammys are indicated by beat text "grad" or "grad.". Whammys will sound along the beat duration.
             *     * Fast whammys are done right the beat.
             *
             * 3. **Let Ring**
             * Tied notes with let ring are not shown in standard notation. Let ring does not cause a longer playback, duration is defined via tied notes.
             *
             * 4. **Settings**
             * Following default setting values are applied:
             * ```js
             * {
             *     notation: {
             *         smallGraceTabNotes: false,
             *         fingeringMode: alphaTab.FingeringMode.SingleNoteEffectBandm
             *         extendBendArrowsOnTiedNotes: false
             *     },
             *     elements: {
             *         parenthesisOnTiedBends: false,
             *         tabNotesOnTiedBends: false,
             *         zerosOnDiveWhammys: true
             *     }
             * }
             * ```
             */
            this.notationMode = exports.NotationMode.GuitarPro;
            /**
             * The fingering mode to use.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `FingeringMode.ScoreDefault`
             * @remarks
             * AlphaTab supports multiple modes on how to display fingering information in the music sheet. This setting controls how they should be displayed. The default behavior is to show the finger information
             * directly in the score along the notes. For some use cases of training courses and for beginners this notation might be hard to read. The effect band mode allows to show a single finger information above the staff.
             *
             * | Score                                                       | Effect Band                                                       |
             * |-------------------------------------------------------------|-------------------------------------------------------------------|
             * | ![Enabled](https://alphatab.net/img/reference/property/fingeringmode-score.png) | ![Disabled](https://alphatab.net/img/reference/property/fingeringmode-effectband.png) |
             */
            this.fingeringMode = exports.FingeringMode.ScoreDefault;
            /**
             * Whether music notation elements are visible or not.
             * @since 0.9.8
             * @category Notation
             * @defaultValue `[[NotationElement.ZerosOnDiveWhammys, false]]`
             * @remarks
             * AlphaTab has quite a set of notation elements that are usually shown by default or only shown when using
             * the `SongBook` notation mode. This setting allows showing/hiding individual notation elements like the
             * song information or the track names.
             *
             * For each element you can configure whether it is visible or not. The setting is a Map/Dictionary where
             * the key is the element to configure and the value is a boolean value whether it should be visible or not.
             * @example
             * JavaScript
             * Internally the setting is a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) where the key must be a {@link NotationElement} enumeration value.
             * For JSON input the usual enumeration serialization applies where also the names can be used. The names
             * are case insensitive.
             *
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'), {
             *     notation: {
             *         elements: {
             *             scoreTitle: false,
             *             trackNames: false
             *         }
             *     }
             * });
             * api.settings.notation.elements.set(alphaTab.NotationElement.EffectWhammyBar, false);
             * ```
             * @example
             * C#
             * ```cs
             * var settings = new AlphaTab.Settings();
             * settings.Notation.Elements[AlphaTab.NotationElement.ScoreTitle] = false;
             * settings.Notation.Elements[AlphaTab.NotationElement.TrackNames] = false;
             * ```
             * @example
             * Android
             * ```kotlin
             * val settings = AlphaTab.Settings();
             * settings.notation.elements[alphaTab.NotationElement.ScoreTitle] = false;
             * settings.notation.elements[alphaTab.NotationElement.TrackNames] = false;
             * ```
             */
            this.elements = new Map();
            /**
             * Controls how the rhythm notation is rendered for tab staves.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `TabRhythmMode.Automatic`
             * @remarks
             * This setting enables the display of rhythm notation on tab staffs. [Demo](https://alphatab.net/docs/showcase/guitar-tabs)
             * {@since 1.4.0} its automatically detected whether rhythm notation should be shown on tabs (based on the visibility of other staves).
             */
            this.rhythmMode = exports.TabRhythmMode.Automatic;
            /**
             * Controls how high the ryhthm notation is rendered below the tab staff
             * @since 0.9.6
             * @category Notation
             * @defaultValue `15`
             * @remarks
             * This setting can be used in combination with the {@link rhythmMode} setting to control how high the rhythm notation should be rendered below the tab staff.
             */
            this.rhythmHeight = 15;
            /**
             * The transposition pitch offsets for the individual tracks used for rendering and playback.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `[]`
             * @remarks
             * This setting allows transposing of tracks for display and playback.
             * The `transpositionPitches` setting allows defining an additional pitch offset per track, that is then considered when displaying the music sheet.
             */
            this.transpositionPitches = [];
            /**
             * The transposition pitch offsets for the individual tracks used for rendering only.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `[]`
             * @remarks
             * For some instruments the pitch shown on the standard notation has an additional transposition. One example is the Guitar.
             * Notes are shown 1 octave higher than they are on the piano. The following image shows a C4 for a piano and a guitar, and a C5 for the piano as comparison:
             *
             * ![Display Transposition Pitches example](https://alphatab.net/img/reference/property/displaytranspositionpitches.png)
             *
             * The `DisplayTranspositionPitch` setting allows defining an additional pitch offset per track, that is then considered when displaying the music sheet.
             * This setting does not affect the playback of the instrument in any way. Despite the 2 different standard notations in the above example, they both play the same note height.
             * The transposition is defined as number of semitones and one value per track of the song can be defined.
             */
            this.displayTranspositionPitches = [];
            /**
             * If set to true the guitar tabs on grace beats are rendered smaller.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `true`
             * @remarks
             * By default, grace notes are drawn smaller on the guitar tabs than the other numbers. With this setting alphaTab can be configured to show grace tab notes with normal text size.
             * | Enabled                                                            | Disabled                                                             |
             * |--------------------------------------------------------------------|----------------------------------------------------------------------|
             * | ![Enabled](https://alphatab.net/img/reference/property/smallgracetabnotes-enabled.png) | ![Disabled](https://alphatab.net/img/reference/property/smallgracetabnotes-disabled.png) |
             */
            this.smallGraceTabNotes = true;
            /**
             * If set to true bend arrows expand to the end of the last tied note of the string. Otherwise they end on the next beat.
             * @since 0.9.6
             * @category Notation
             * @defaultValue `true`
             * @remarks
             * By default the arrows and lines on bend effects are extended to the space of tied notes. This behavior is the Guitar Pro default but some applications and songbooks practice it different.
             * There the bend only is drawn to the next beat.
             * | Enabled                                                                     | Disabled                                                                      |
             * |-----------------------------------------------------------------------------|-------------------------------------------------------------------------------|
             * | ![Enabled](https://alphatab.net/img/reference/property/extendbendarrowsontiednotes-enabled.png) | ![Disabled](https://alphatab.net/img/reference/property/extendbendarrowsontiednotes-disabled.png) |
             */
            this.extendBendArrowsOnTiedNotes = true;
            /**
             * If set to true, line effects like w/bar and let-ring are drawn until the end of the beat instead of the start
             * @since 0.9.6
             * @category Notation
             * @defaultValue `false`
             * @remarks
             * By default effect annotations that render a line above the staff, stop on the beat. This is the typical display of Guitar Pro. In songbooks and some other tools
             * these effects are drawn to the end of this beat.
             * | Enabled                                                                     | Disabled                                                                      |
             * |-----------------------------------------------------------------------------|-------------------------------------------------------------------------------|
             * | ![Enabled](https://alphatab.net/img/reference/property/extendlineeffectstobeatend-enabled.png) | ![Disabled](https://alphatab.net/img/reference/property/extendlineeffectstobeatend-disabled.png) |
             */
            this.extendLineEffectsToBeatEnd = false;
            /**
             * The height scale factor for slurs
             * @since 0.9.6
             * @category Notation
             * @defaultValue `5`
             * @remarks
             * Slurs and ties currently calculate their height based on the distance they have from start to end note. Most music notation software do some complex collision detection to avoid a slur to overlap with other elements, alphaTab
             * only has a simplified version of the slur positioning as of today. This setting allows adjusting the slur height to avoid collisions. The factor defined by this setting, is multiplied with the logarithmic distance between start and end.
             * | Slur Height Default                                                    | Slur Height 14                                               |
             * |------------------------------------------------------------------------|--------------------------------------------------------------|
             * | ![Slur Height Default](https://alphatab.net/img/reference/property/slurheight-default.png) | ![Slur Height 14](https://alphatab.net/img/reference/property/slurheight-14.png)  |
             */
            this.slurHeight = 5.0;
        }
        /**
         * Gets whether the given music notation element should be shown
         * @param element the element to check
         * @returns true if the element should be shown, otherwise false.
         */
        isNotationElementVisible(element) {
            if (this.elements.has(element)) {
                return this.elements.get(element);
            }
            if (NotationSettings.defaultElements.has(element)) {
                return NotationSettings.defaultElements.get(element);
            }
            return true;
        }
    }
    /**
     * Gets the default configuration of the {@see notationElements} setting. Do not modify
     * this map as it might not result in the expected side effects.
     * If items are not listed explicitly in this list, they are considered visible.
     */
    NotationSettings.defaultElements = new Map([
        [exports.NotationElement.ZerosOnDiveWhammys, false]
    ]);

    /**
     * @target web
     */
    class Lazy {
        constructor(factory) {
            this._value = undefined;
            this._factory = factory;
        }
        get value() {
            if (this._value === undefined) {
                this._value = this._factory();
            }
            return this._value;
        }
    }

    /**
     * Defines all loglevels.
     * @json
     */
    exports.LogLevel = void 0;
    (function (LogLevel) {
        /**
         * No logging
         */
        LogLevel[LogLevel["None"] = 0] = "None";
        /**
         * Debug level (internal details are displayed).
         */
        LogLevel[LogLevel["Debug"] = 1] = "Debug";
        /**
         * Info level (only important details are shown)
         */
        LogLevel[LogLevel["Info"] = 2] = "Info";
        /**
         * Warning level
         */
        LogLevel[LogLevel["Warning"] = 3] = "Warning";
        /**
         * Error level.
         */
        LogLevel[LogLevel["Error"] = 4] = "Error";
    })(exports.LogLevel || (exports.LogLevel = {}));

    class ConsoleLogger {
        static format(category, msg) {
            return `[AlphaTab][${category}] ${msg}`;
        }
        debug(category, msg, ...details) {
            console.debug(ConsoleLogger.format(category, msg), ...details);
        }
        warning(category, msg, ...details) {
            console.warn(ConsoleLogger.format(category, msg), ...details);
        }
        info(category, msg, ...details) {
            console.info(ConsoleLogger.format(category, msg), ...details);
        }
        error(category, msg, ...details) {
            console.error(ConsoleLogger.format(category, msg), ...details);
        }
    }
    ConsoleLogger.logLevel = exports.LogLevel.Info;
    class Logger {
        static shouldLog(level) {
            return Logger.logLevel !== exports.LogLevel.None && level >= Logger.logLevel;
        }
        static debug(category, msg, ...details) {
            if (Logger.shouldLog(exports.LogLevel.Debug)) {
                Logger.log.debug(category, msg, ...details);
            }
        }
        static warning(category, msg, ...details) {
            if (Logger.shouldLog(exports.LogLevel.Warning)) {
                Logger.log.warning(category, msg, ...details);
            }
        }
        static info(category, msg, ...details) {
            if (Logger.shouldLog(exports.LogLevel.Info)) {
                Logger.log.info(category, msg, ...details);
            }
        }
        static error(category, msg, ...details) {
            if (Logger.shouldLog(exports.LogLevel.Error)) {
                Logger.log.error(category, msg, ...details);
            }
        }
    }
    Logger.logLevel = exports.LogLevel.Info;
    Logger.log = new ConsoleLogger();

    /**
     * This public enumeration lists all feels of triplets.
     */
    var TripletFeel;
    (function (TripletFeel) {
        /**
         * No triplet feel
         */
        TripletFeel[TripletFeel["NoTripletFeel"] = 0] = "NoTripletFeel";
        /**
         * Triplet 16th
         */
        TripletFeel[TripletFeel["Triplet16th"] = 1] = "Triplet16th";
        /**
         * Triplet 8th
         */
        TripletFeel[TripletFeel["Triplet8th"] = 2] = "Triplet8th";
        /**
         * Dotted 16th
         */
        TripletFeel[TripletFeel["Dotted16th"] = 3] = "Dotted16th";
        /**
         * Dotted 8th
         */
        TripletFeel[TripletFeel["Dotted8th"] = 4] = "Dotted8th";
        /**
         * Scottish 16th
         */
        TripletFeel[TripletFeel["Scottish16th"] = 5] = "Scottish16th";
        /**
         * Scottish 8th
         */
        TripletFeel[TripletFeel["Scottish8th"] = 6] = "Scottish8th";
    })(TripletFeel || (TripletFeel = {}));

    /**
     * The MasterBar stores information about a bar which affects
     * all tracks.
     * @json
     * @json_strict
     */
    class MasterBar {
        constructor() {
            /**
             * Gets or sets the bitflag for the alternate endings. Each bit defines for which repeat counts
             * the bar is played.
             */
            this.alternateEndings = 0;
            /**
             * Gets or sets the next masterbar in the song.
             * @json_ignore
             */
            this.nextMasterBar = null;
            /**
             * Gets or sets the next masterbar in the song.
             * @json_ignore
             */
            this.previousMasterBar = null;
            /**
             * Gets the zero based index of the masterbar.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets whether a double bar is shown for this masterbar.
             * @deprecated Use {@link Bar.barLineLeft} and {@link Bar.barLineRight}
             */
            this.isDoubleBar = false;
            /**
             * Gets or sets whether a repeat section starts on this masterbar.
             */
            this.isRepeatStart = false;
            /**
             * Gets or sets the number of repeats for the current repeat section.
             */
            this.repeatCount = 0;
            /**
             * Gets or sets the time signature numerator.
             */
            this.timeSignatureNumerator = 4;
            /**
             * Gets or sets the time signature denominiator.
             */
            this.timeSignatureDenominator = 4;
            /**
             * Gets or sets whether this is bar has a common time signature.
             */
            this.timeSignatureCommon = false;
            /**
             * Gets or sets whether the bar indicates a free time playing.
             */
            this.isFreeTime = false;
            /**
             * Gets or sets the triplet feel that is valid for this bar.
             */
            this.tripletFeel = TripletFeel.NoTripletFeel;
            /**
             * Gets or sets the new section information for this bar.
             */
            this.section = null;
            /**
             * Gets or sets all tempo automation for this bar.
             */
            this.tempoAutomations = [];
            /**
             * Gets or sets the fermatas for this bar. The key is the offset of the fermata in midi ticks.
             * @json_add addFermata
             */
            this.fermata = null;
            /**
             * The timeline position of the voice within the whole score. (unit: midi ticks)
             */
            this.start = 0;
            /**
             * Gets or sets a value indicating whether the master bar is an anacrusis (aka. pickup bar)
             */
            this.isAnacrusis = false;
            /**
             * Gets a percentual scale for the size of the bars when displayed in a multi-track layout.
             */
            this.displayScale = 1;
            /**
             * An absolute width of the bar to use when displaying in a multi-track layout.
             */
            this.displayWidth = -1;
            /**
             * The directions applied to this masterbar.
             * @json_add addDirection
             */
            this.directions = null;
        }
        /**
         * Whether the masterbar is has any changes applied to it (e.g. tempo changes, time signature changes etc)
         * The first bar is always considered changed due to initial setup of values. It does not consider
         * elements like whether the tempo really changes to the previous bar.
         */
        get hasChanges() {
            if (this.index === 0) {
                return false;
            }
            const hasChangesToPrevious = this.timeSignatureCommon !== this.previousMasterBar.timeSignatureCommon ||
                this.timeSignatureNumerator !== this.previousMasterBar.timeSignatureNumerator ||
                this.timeSignatureDenominator !== this.previousMasterBar.timeSignatureDenominator ||
                this.tripletFeel !== this.previousMasterBar.tripletFeel;
            if (hasChangesToPrevious) {
                return true;
            }
            return (this.alternateEndings !== 0 ||
                this.isRepeatStart ||
                this.isRepeatEnd ||
                this.isFreeTime ||
                this.isSectionStart ||
                this.tempoAutomations.length > 0 ||
                this.syncPoints && this.syncPoints.length > 0 ||
                (this.fermata !== null && this.fermata.size > 0) ||
                (this.directions !== null && this.directions.size > 0) ||
                this.isAnacrusis);
        }
        /**
         * The key signature used on all bars.
         * @deprecated Use key signatures on bar level
         */
        get keySignature() {
            return this.score.tracks[0].staves[0].bars[this.index].keySignature;
        }
        /**
         * The key signature used on all bars.
         * @deprecated Use key signatures on bar level
         */
        set keySignature(value) {
            this.score.tracks[0].staves[0].bars[this.index].keySignature = value;
        }
        /**
         * The type of key signature (major/minor)
         * @deprecated Use key signatures on bar level
         */
        get keySignatureType() {
            return this.score.tracks[0].staves[0].bars[this.index].keySignatureType;
        }
        /**
         * The type of key signature (major/minor)
         * @deprecated Use key signatures on bar level
         */
        set keySignatureType(value) {
            this.score.tracks[0].staves[0].bars[this.index].keySignatureType = value;
        }
        get isRepeatEnd() {
            return this.repeatCount > 0;
        }
        get isSectionStart() {
            return !!this.section;
        }
        /**
         * Gets or sets the first tempo automation for this bar.
         * @deprecated Use {@link tempoAutomations}.
         */
        get tempoAutomation() {
            return this.tempoAutomations.length > 0 ? this.tempoAutomations[0] : null;
        }
        /**
         * Calculates the time spent in this bar. (unit: midi ticks)
         */
        calculateDuration(respectAnacrusis = true) {
            if (this.isAnacrusis && respectAnacrusis) {
                let duration = 0;
                for (const track of this.score.tracks) {
                    for (const staff of track.staves) {
                        const barDuration = this.index < staff.bars.length ? staff.bars[this.index].calculateDuration() : 0;
                        if (barDuration > duration) {
                            duration = barDuration;
                        }
                    }
                }
                return duration;
            }
            return this.timeSignatureNumerator * MidiUtils.valueToTicks(this.timeSignatureDenominator);
        }
        /**
         * Adds a fermata to the masterbar.
         * @param offset The offset of the fermata within the bar in midi ticks.
         * @param fermata The fermata.
         */
        addFermata(offset, fermata) {
            let fermataMap = this.fermata;
            if (fermataMap === null) {
                fermataMap = new Map();
                this.fermata = fermataMap;
            }
            fermataMap.set(offset, fermata);
        }
        /**
         * Adds a direction to the masterbar.
         * @param direction The direction to add.
         */
        addDirection(direction) {
            if (this.directions == null) {
                this.directions = new Set();
            }
            this.directions.add(direction);
        }
        /**
         * Gets the fermata for a given beat.
         * @param beat The beat to get the fermata for.
         * @returns
         */
        getFermata(beat) {
            const fermataMap = this.fermata;
            if (fermataMap === null) {
                return null;
            }
            if (fermataMap.has(beat.playbackStart)) {
                return fermataMap.get(beat.playbackStart);
            }
            return null;
        }
        /**
         * Adds the given sync point to the list of sync points for this bar.
         * @param syncPoint  The sync point to add.
         */
        addSyncPoint(syncPoint) {
            if (!this.syncPoints) {
                this.syncPoints = [];
            }
            this.syncPoints.push(syncPoint);
        }
    }
    MasterBar.MaxAlternateEndings = 8;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class SynthConstants {
    }
    SynthConstants.DefaultChannelCount = 16 + 1;
    SynthConstants.MetronomeChannel = SynthConstants.DefaultChannelCount - 1;
    SynthConstants.MetronomeKey = 33;
    SynthConstants.AudioChannels = 2;
    SynthConstants.MinVolume = 0;
    SynthConstants.MinProgram = 0;
    SynthConstants.MaxProgram = 127;
    SynthConstants.MinPlaybackSpeed = 0.125;
    SynthConstants.MaxPlaybackSpeed = 8;
    SynthConstants.PercussionChannel = 9;
    SynthConstants.PercussionBank = 128;
    /**
     * The Midi Pitch bend message is a 15-bit value
     */
    SynthConstants.MaxPitchWheel = 0x4000;
    /**
     * The Midi 2.0 Pitch bend message is a 32-bit value
     */
    SynthConstants.MaxPitchWheel20 = 0x100000000;
    /**
     * The pitch wheel value for no pitch change at all.
     */
    SynthConstants.DefaultPitchWheel = SynthConstants.MaxPitchWheel / 2;
    SynthConstants.MicroBufferCount = 32;
    SynthConstants.MicroBufferSize = 64;

    /**
     * Represents a group of grace beats that belong together
     */
    class GraceGroup {
        constructor() {
            /**
             * All beats within this group.
             */
            this.beats = [];
            /**
             * Gets a unique ID for this grace group.
             */
            this.id = 'empty';
            /**
             * true if the grace beat are followed by a normal beat within the same
             * bar.
             */
            this.isComplete = false;
        }
        /**
         * Adds a new beat to this group
         * @param beat The beat to add
         */
        addBeat(beat) {
            beat.graceIndex = this.beats.length;
            beat.graceGroup = this;
            this.beats.push(beat);
        }
        finish() {
            if (this.beats.length > 0) {
                this.id = `${this.beats[0].absoluteDisplayStart}_${this.beats[0].voice.index}`;
            }
        }
    }

    /**
     * Lists all graphical sub elements within a {@link Voice} which can be styled via {@link Voice.style}
     */
    var VoiceSubElement;
    (function (VoiceSubElement) {
        /**
         * All general glyphs (like notes heads and rests).
         */
        VoiceSubElement[VoiceSubElement["Glyphs"] = 0] = "Glyphs";
    })(VoiceSubElement || (VoiceSubElement = {}));
    /**
     * Defines the custom styles for voices.
     * @json
     * @json_strict
     */
    class VoiceStyle extends ElementStyle {
    }
    /**
     * A voice represents a group of beats
     * that can be played during a bar.
     * @json
     * @json_strict
     */
    let Voice$1 = class Voice {
        constructor() {
            this._isEmpty = true;
            this._isRestOnly = true;
            /**
             * Gets or sets the unique id of this bar.
             */
            this.id = Voice._globalVoiceId++;
            /**
             * Gets or sets the zero-based index of this voice within the bar.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets the list of beats contained in this voice.
             * @json_add addBeat
             */
            this.beats = [];
        }
        /**
         * @internal
         */
        static resetIds() {
            Voice._globalVoiceId = 0;
        }
        /**
         * Gets or sets a value indicating whether this voice is empty.
         */
        get isEmpty() {
            return this._isEmpty;
        }
        /**
         * @internal
         */
        forceNonEmpty() {
            this._isEmpty = false;
        }
        /**
         * Gets or sets a value indicating whether this voice is empty.
         */
        get isRestOnly() {
            return this._isRestOnly;
        }
        insertBeat(after, newBeat) {
            newBeat.nextBeat = after.nextBeat;
            if (newBeat.nextBeat) {
                newBeat.nextBeat.previousBeat = newBeat;
            }
            newBeat.previousBeat = after;
            newBeat.voice = this;
            after.nextBeat = newBeat;
            this.beats.splice(after.index + 1, 0, newBeat);
        }
        addBeat(beat) {
            beat.voice = this;
            beat.index = this.beats.length;
            this.beats.push(beat);
            if (!beat.isEmpty) {
                this._isEmpty = false;
            }
            if (!beat.isRest) {
                this._isRestOnly = false;
            }
        }
        chain(beat, sharedDataBag = null) {
            if (!this.bar) {
                return;
            }
            if (beat.index < this.beats.length - 1) {
                beat.nextBeat = this.beats[beat.index + 1];
                beat.nextBeat.previousBeat = beat;
            }
            else if (beat.isLastOfVoice && beat.voice.bar.nextBar) {
                const nextVoice = this.bar.nextBar.voices[this.index];
                if (nextVoice.beats.length > 0) {
                    beat.nextBeat = nextVoice.beats[0];
                    beat.nextBeat.previousBeat = beat;
                }
                else {
                    beat.nextBeat.previousBeat = beat;
                }
            }
            beat.chain(sharedDataBag);
        }
        addGraceBeat(beat) {
            if (this.beats.length === 0) {
                this.addBeat(beat);
                return;
            }
            // remove last beat
            const lastBeat = this.beats[this.beats.length - 1];
            this.beats.splice(this.beats.length - 1, 1);
            // insert grace beat
            this.addBeat(beat);
            // reinsert last beat
            this.addBeat(lastBeat);
            this._isEmpty = false;
            this._isRestOnly = false;
        }
        getBeatAtPlaybackStart(playbackStart) {
            if (this._beatLookup.has(playbackStart)) {
                return this._beatLookup.get(playbackStart);
            }
            return null;
        }
        finish(settings, sharedDataBag = null) {
            this._isEmpty = true;
            this._isRestOnly = true;
            this._beatLookup = new Map();
            let currentGraceGroup = null;
            for (let index = 0; index < this.beats.length; index++) {
                const beat = this.beats[index];
                beat.index = index;
                this.chain(beat, sharedDataBag);
                if (beat.graceType === GraceType.None) {
                    beat.graceGroup = currentGraceGroup;
                    if (currentGraceGroup) {
                        currentGraceGroup.isComplete = true;
                    }
                    currentGraceGroup = null;
                }
                else {
                    if (!currentGraceGroup) {
                        currentGraceGroup = new GraceGroup();
                    }
                    currentGraceGroup.addBeat(beat);
                }
                if (!beat.isEmpty) {
                    this._isEmpty = false;
                }
                if (!beat.isRest) {
                    this._isRestOnly = false;
                }
            }
            let currentDisplayTick = 0;
            let currentPlaybackTick = 0;
            for (let i = 0; i < this.beats.length; i++) {
                const beat = this.beats[i];
                beat.index = i;
                beat.finish(settings, sharedDataBag);
                // if this beat is a non-grace but has grace notes
                // we need to first steal the duration from the right beat
                // and place the grace beats correctly
                if (beat.graceType === GraceType.None) {
                    if (beat.graceGroup) {
                        const firstGraceBeat = beat.graceGroup.beats[0];
                        const lastGraceBeat = beat.graceGroup.beats[beat.graceGroup.beats.length - 1];
                        if (firstGraceBeat.graceType !== GraceType.BendGrace) {
                            // find out the stolen duration first
                            const stolenDuration = lastGraceBeat.playbackStart + lastGraceBeat.playbackDuration - firstGraceBeat.playbackStart;
                            switch (firstGraceBeat.graceType) {
                                case GraceType.BeforeBeat:
                                    // steal duration from previous beat and then place grace beats newly
                                    if (firstGraceBeat.previousBeat) {
                                        firstGraceBeat.previousBeat.playbackDuration -= stolenDuration;
                                        // place beats starting after new beat end
                                        if (firstGraceBeat.previousBeat.voice === this) {
                                            currentPlaybackTick =
                                                firstGraceBeat.previousBeat.playbackStart +
                                                    firstGraceBeat.previousBeat.playbackDuration;
                                        }
                                        else {
                                            // stealing into the previous bar
                                            currentPlaybackTick = -stolenDuration;
                                        }
                                    }
                                    else {
                                        // before-beat on start is somehow not possible as it causes negative ticks
                                        currentPlaybackTick = -stolenDuration;
                                    }
                                    for (const graceBeat of beat.graceGroup.beats) {
                                        this._beatLookup.delete(graceBeat.playbackStart);
                                        graceBeat.playbackStart = currentPlaybackTick;
                                        this._beatLookup.set(graceBeat.playbackStart, beat);
                                        currentPlaybackTick += graceBeat.playbackDuration;
                                    }
                                    break;
                                case GraceType.OnBeat:
                                    // steal duration from current beat
                                    beat.playbackDuration -= stolenDuration;
                                    if (lastGraceBeat.voice === this) {
                                        // with changed durations, update current position to be after the last grace beat
                                        currentPlaybackTick = lastGraceBeat.playbackStart + lastGraceBeat.playbackDuration;
                                    }
                                    else {
                                        // if last grace beat is on the previous bar, we shift the time back to have the note played earlier
                                        currentPlaybackTick = -stolenDuration;
                                    }
                                    break;
                            }
                        }
                    }
                    beat.displayStart = currentDisplayTick;
                    beat.playbackStart = currentPlaybackTick;
                    if (beat.fermata) {
                        this.bar.masterBar.addFermata(beat.playbackStart, beat.fermata);
                    }
                    else {
                        beat.fermata = this.bar.masterBar.getFermata(beat);
                    }
                    this._beatLookup.set(beat.playbackStart, beat);
                }
                else {
                    beat.displayStart = currentDisplayTick;
                    beat.playbackStart = currentPlaybackTick;
                }
                beat.finishTuplet();
                if (beat.graceGroup) {
                    beat.graceGroup.finish();
                }
                currentDisplayTick += beat.displayDuration;
                currentPlaybackTick += beat.playbackDuration;
            }
        }
        calculateDuration() {
            if (this.isEmpty || this.beats.length === 0) {
                return 0;
            }
            const lastBeat = this.beats[this.beats.length - 1];
            const firstBeat = this.beats[0];
            return lastBeat.playbackStart + lastBeat.playbackDuration - firstBeat.playbackStart;
        }
    };
    Voice$1._globalVoiceId = 0;

    class TuningParseResult {
        constructor() {
            this.note = null;
            this.tone = new TuningParseResultTone();
            this.octave = 0;
        }
        get realValue() {
            return this.octave * 12 + this.tone.noteValue;
        }
    }
    class TuningParseResultTone {
        constructor(noteValue = 0, accidentalMode = NoteAccidentalMode.Default) {
            this.noteValue = noteValue;
            this.accidentalMode = accidentalMode;
        }
    }
    /**
     * This public class contains some utilities for working with model public classes
     */
    class ModelUtils {
        static getIndex(duration) {
            const index = 0;
            const value = duration;
            if (value < 0) {
                return index;
            }
            return Math.log2(duration) | 0;
        }
        static keySignatureIsFlat(ks) {
            return ks < 0;
        }
        static keySignatureIsNatural(ks) {
            return ks === 0;
        }
        static keySignatureIsSharp(ks) {
            return ks > 0;
        }
        static applyPitchOffsets(settings, score) {
            for (let i = 0; i < score.tracks.length; i++) {
                if (i < settings.notation.displayTranspositionPitches.length) {
                    for (const staff of score.tracks[i].staves) {
                        staff.displayTranspositionPitch = -settings.notation.displayTranspositionPitches[i];
                    }
                }
                if (i < settings.notation.transpositionPitches.length) {
                    for (const staff of score.tracks[i].staves) {
                        staff.transpositionPitch = -settings.notation.transpositionPitches[i];
                    }
                }
            }
        }
        static fingerToString(settings, beat, finger, leftHand) {
            if (settings.notation.fingeringMode === exports.FingeringMode.ScoreForcePiano ||
                settings.notation.fingeringMode === exports.FingeringMode.SingleNoteEffectBandForcePiano ||
                GeneralMidi.isPiano(beat.voice.bar.staff.track.playbackInfo.program)) {
                switch (finger) {
                    case Fingers.Unknown:
                    case Fingers.NoOrDead:
                        return null;
                    case Fingers.Thumb:
                        return '1';
                    case Fingers.IndexFinger:
                        return '2';
                    case Fingers.MiddleFinger:
                        return '3';
                    case Fingers.AnnularFinger:
                        return '4';
                    case Fingers.LittleFinger:
                        return '5';
                    default:
                        return null;
                }
            }
            if (leftHand) {
                switch (finger) {
                    case Fingers.Unknown:
                        return null;
                    case Fingers.NoOrDead:
                        return '0';
                    case Fingers.Thumb:
                        return 't';
                    case Fingers.IndexFinger:
                        return '1';
                    case Fingers.MiddleFinger:
                        return '2';
                    case Fingers.AnnularFinger:
                        return '3';
                    case Fingers.LittleFinger:
                        return '4';
                    default:
                        return null;
                }
            }
            switch (finger) {
                case Fingers.Unknown:
                case Fingers.NoOrDead:
                    return null;
                case Fingers.Thumb:
                    return 'p';
                case Fingers.IndexFinger:
                    return 'i';
                case Fingers.MiddleFinger:
                    return 'm';
                case Fingers.AnnularFinger:
                    return 'a';
                case Fingers.LittleFinger:
                    return 'c';
                default:
                    return null;
            }
        }
        /**
         * Checks if the given string is a tuning inticator.
         * @param name
         */
        static isTuning(name) {
            return !!ModelUtils.parseTuning(name);
        }
        static parseTuning(name) {
            let note = '';
            let octave = '';
            for (let i = 0; i < name.length; i++) {
                const c = name.charCodeAt(i);
                if (c >= 0x30 && c <= 0x39 /* 0-9 */) {
                    // number without note?
                    if (!note) {
                        return null;
                    }
                    octave += String.fromCharCode(c);
                }
                else if (ModelUtils.TuningLetters.has(c)) {
                    note += String.fromCharCode(c);
                }
                else {
                    return null;
                }
            }
            if (!octave || !note) {
                return null;
            }
            const result = new TuningParseResult();
            result.octave = Number.parseInt(octave) + 1;
            result.note = note.toLowerCase();
            result.tone = ModelUtils.getToneForText(result.note);
            // if tone.noteValue is negative (eg. on Cb note)
            // we adjust roll-over to a lower octave
            if (result.tone.noteValue < 0) {
                result.octave--;
                result.tone.noteValue += 12;
            }
            return result;
        }
        static getTuningForText(str) {
            const result = ModelUtils.parseTuning(str);
            if (!result) {
                return -1;
            }
            return result.realValue;
        }
        static getToneForText(note) {
            const noteName = note.substring(0, 1);
            const accidental = note.substring(1);
            let noteValue;
            let noteAccidenalMode;
            switch (noteName.toLowerCase()) {
                case 'c':
                    noteValue = 0;
                    break;
                case 'd':
                    noteValue = 2;
                    break;
                case 'e':
                    noteValue = 4;
                    break;
                case 'f':
                    noteValue = 5;
                    break;
                case 'g':
                    noteValue = 7;
                    break;
                case 'a':
                    noteValue = 9;
                    break;
                case 'b':
                    noteValue = 11;
                    break;
                default:
                    noteValue = 0;
                    break;
            }
            noteAccidenalMode = ModelUtils.parseAccidentalMode(accidental);
            switch (noteAccidenalMode) {
                case NoteAccidentalMode.Default:
                    break;
                case NoteAccidentalMode.ForceNone:
                    break;
                case NoteAccidentalMode.ForceNatural:
                    break;
                case NoteAccidentalMode.ForceSharp:
                    noteValue++;
                    break;
                case NoteAccidentalMode.ForceDoubleSharp:
                    noteValue += 2;
                    break;
                case NoteAccidentalMode.ForceFlat:
                    noteValue--;
                    break;
                case NoteAccidentalMode.ForceDoubleFlat:
                    noteValue -= 2;
                    break;
            }
            return new TuningParseResultTone(noteValue, noteAccidenalMode);
        }
        static parseAccidentalMode(data) {
            const key = data.toLowerCase();
            if (ModelUtils.accidentalModeMapping.has(key)) {
                return ModelUtils.accidentalModeMapping.get(key);
            }
            return NoteAccidentalMode.Default;
        }
        static newGuid() {
            return `${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1) +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1)}-${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}-${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}-${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}-${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}${Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1)}`;
        }
        static isAlmostEqualTo(a, b) {
            return Math.abs(a - b) < 0.00001;
        }
        static toHexString(n, digits = 0) {
            let s = '';
            const hexChars = '0123456789ABCDEF';
            do {
                s = String.fromCharCode(hexChars.charCodeAt(n & 15)) + s;
                n = n >> 4;
            } while (n > 0);
            while (s.length < digits) {
                s = `0${s}`;
            }
            return s;
        }
        /**
         * Gets the list of alternate endings on which the master bar is played.
         * @param bitflag The alternate endings bitflag.
         */
        static getAlternateEndingsList(bitflag) {
            const endings = [];
            for (let i = 0; i < MasterBar.MaxAlternateEndings; i++) {
                if ((bitflag & (0x01 << i)) !== 0) {
                    endings.push(i);
                }
            }
            return endings;
        }
        static deltaFretToHarmonicValue(deltaFret) {
            switch (deltaFret) {
                case 2:
                    return 2.4;
                case 3:
                    return 3.2;
                case 4:
                case 5:
                case 7:
                case 9:
                case 12:
                case 16:
                case 17:
                case 19:
                case 24:
                    return deltaFret;
                case 8:
                    return 8.2;
                case 10:
                    return 9.6;
                case 14:
                case 15:
                    return 14.7;
                case 21:
                case 22:
                    return 21.7;
                default:
                    return 12;
            }
        }
        static clamp(value, min, max) {
            if (value <= min) {
                return min;
            }
            if (value >= max) {
                return max;
            }
            return value;
        }
        static buildMultiBarRestInfo(tracks, startIndex, endIndexInclusive) {
            if (!tracks) {
                return null;
            }
            const stylesheet = tracks[0].score.stylesheet;
            const shouldDrawMultiBarRests = tracks.length > 1
                ? stylesheet.multiTrackMultiBarRest
                : stylesheet.perTrackMultiBarRest?.has(tracks[0].index) === true;
            if (!shouldDrawMultiBarRests) {
                return null;
            }
            const lookup = new Map();
            const score = tracks[0].score;
            let currentIndex = startIndex;
            let tempo = score.tempo;
            while (currentIndex <= endIndexInclusive) {
                const currentGroupStartIndex = currentIndex;
                let currentGroup = null;
                while (currentIndex <= endIndexInclusive) {
                    const masterBar = score.masterBars[currentIndex];
                    let hasTempoChange = false;
                    for (const a of masterBar.tempoAutomations) {
                        if (a.value !== tempo) {
                            hasTempoChange = true;
                        }
                        tempo = a.value;
                    }
                    // check if masterbar breaks multibar rests, it must be fully empty with no annotations
                    if (masterBar.alternateEndings ||
                        (masterBar.isRepeatStart && masterBar.index !== currentGroupStartIndex) ||
                        masterBar.isFreeTime ||
                        masterBar.isAnacrusis ||
                        masterBar.section !== null ||
                        (masterBar.index !== currentGroupStartIndex && hasTempoChange) ||
                        (masterBar.fermata !== null && masterBar.fermata.size > 0) ||
                        (masterBar.directions !== null && masterBar.directions.size > 0)) {
                        break;
                    }
                    // check if masterbar breaks multibar rests because of change to previous
                    if (currentGroupStartIndex > startIndex &&
                        masterBar.previousMasterBar &&
                        (masterBar.timeSignatureCommon !== masterBar.previousMasterBar.timeSignatureCommon ||
                            masterBar.timeSignatureNumerator !== masterBar.previousMasterBar.timeSignatureNumerator ||
                            masterBar.timeSignatureDenominator !== masterBar.previousMasterBar.timeSignatureDenominator ||
                            masterBar.tripletFeel !== masterBar.previousMasterBar.tripletFeel)) {
                        break;
                    }
                    // masterbar is good, now check bars across staves
                    let areAllBarsSuitable = true;
                    for (const t of tracks) {
                        for (const s of t.staves) {
                            const bar = s.bars[masterBar.index];
                            if (!bar.isRestOnly) {
                                areAllBarsSuitable = false;
                                break;
                            }
                            if (bar.index > 0 &&
                                (bar.keySignature !== bar.previousBar.keySignature ||
                                    bar.keySignatureType !== bar.previousBar.keySignatureType)) {
                                areAllBarsSuitable = false;
                                break;
                            }
                        }
                        if (!areAllBarsSuitable) {
                            break;
                        }
                    }
                    if (!areAllBarsSuitable) {
                        break;
                    }
                    // skip initial bar as it is not "additional" but we are checking it
                    currentIndex++;
                    if (masterBar.index > currentGroupStartIndex) {
                        if (currentGroup === null) {
                            currentGroup = [masterBar.index];
                        }
                        else {
                            currentGroup.push(masterBar.index);
                        }
                    }
                    // special scenario -> repeat ends are included but then we stop
                    if (masterBar.isRepeatEnd) {
                        break;
                    }
                }
                if (currentGroup) {
                    lookup.set(currentGroupStartIndex, currentGroup);
                }
                else {
                    currentIndex++;
                }
            }
            return lookup;
        }
        static computeFirstDisplayedBarIndex(score, settings) {
            let startIndex = settings.display.startBar;
            startIndex--; // map to array index
            startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
            return startIndex;
        }
        static computeLastDisplayedBarIndex(score, settings, startIndex) {
            let endBarIndex = settings.display.barCount;
            if (endBarIndex < 0) {
                endBarIndex = score.masterBars.length;
            }
            endBarIndex = startIndex + endBarIndex - 1; // map count to array index
            endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
            return endBarIndex;
        }
        static getOrCreateHeaderFooterStyle(score, element) {
            let style = score.style;
            if (!score.style) {
                style = new ScoreStyle();
                score.style = style;
            }
            let headerFooterStyle;
            if (style.headerAndFooter.has(element)) {
                headerFooterStyle = style.headerAndFooter.get(element);
            }
            else {
                headerFooterStyle = new HeaderFooterStyle();
                if (ScoreStyle.defaultHeaderAndFooter.has(element)) {
                    const defaults = ScoreStyle.defaultHeaderAndFooter.get(element);
                    headerFooterStyle.template = defaults.template;
                    headerFooterStyle.textAlign = defaults.textAlign;
                }
                style.headerAndFooter.set(element, headerFooterStyle);
            }
            return headerFooterStyle;
        }
        /**
         * Performs some general consolidations of inconsistencies on the given score like
         * missing bars, beats, duplicated midi channels etc
         */
        static consolidate(score) {
            // empty score?
            if (score.masterBars.length === 0) {
                const master = new MasterBar();
                score.addMasterBar(master);
                const tempoAutomation = new Automation();
                tempoAutomation.isLinear = false;
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = score.tempo;
                master.tempoAutomations.push(tempoAutomation);
                const bar = new Bar();
                score.tracks[0].staves[0].addBar(bar);
                const v = new Voice$1();
                bar.addVoice(v);
                const emptyBeat = new Beat();
                emptyBeat.isEmpty = true;
                v.addBeat(emptyBeat);
                return;
            }
            const usedChannels = new Set([SynthConstants.PercussionChannel]);
            for (const track of score.tracks) {
                // ensure percussion channel
                if (track.staves.length === 1 && track.staves[0].isPercussion) {
                    track.playbackInfo.primaryChannel = SynthConstants.PercussionChannel;
                    track.playbackInfo.secondaryChannel = SynthConstants.PercussionChannel;
                }
                else {
                    // unique midi channels and generate secondary channels
                    if (track.playbackInfo.primaryChannel !== SynthConstants.PercussionChannel) {
                        while (usedChannels.has(track.playbackInfo.primaryChannel)) {
                            track.playbackInfo.primaryChannel++;
                        }
                    }
                    usedChannels.add(track.playbackInfo.primaryChannel);
                    if (track.playbackInfo.secondaryChannel !== SynthConstants.PercussionChannel) {
                        while (usedChannels.has(track.playbackInfo.secondaryChannel)) {
                            track.playbackInfo.secondaryChannel++;
                        }
                    }
                    usedChannels.add(track.playbackInfo.secondaryChannel);
                }
                for (const staff of track.staves) {
                    // fill empty beats
                    for (const b of staff.bars) {
                        for (const v of b.voices) {
                            if (v.isEmpty && v.beats.length === 0) {
                                const emptyBeat = new Beat();
                                emptyBeat.isEmpty = true;
                                v.addBeat(emptyBeat);
                            }
                        }
                    }
                    // fill missing bars
                    const voiceCount = staff.bars.length === 0 ? 1 : staff.bars[0].voices.length;
                    while (staff.bars.length < score.masterBars.length) {
                        const bar = new Bar();
                        staff.addBar(bar);
                        const previousBar = bar.previousBar;
                        if (previousBar) {
                            bar.clef = previousBar.clef;
                            bar.clefOttava = previousBar.clefOttava;
                            bar.keySignature = bar.previousBar.keySignature;
                            bar.keySignatureType = bar.previousBar.keySignatureType;
                        }
                        for (let i = 0; i < voiceCount; i++) {
                            const v = new Voice$1();
                            bar.addVoice(v);
                            const emptyBeat = new Beat();
                            emptyBeat.isEmpty = true;
                            v.addBeat(emptyBeat);
                        }
                    }
                }
            }
        }
        /**
         * Trims any empty bars at the end of the song.
         * @param score
         */
        static trimEmptyBarsAtEnd(score) {
            while (score.masterBars.length > 1) {
                const barIndex = score.masterBars.length - 1;
                const masterBar = score.masterBars[barIndex];
                if (masterBar.hasChanges) {
                    return;
                }
                for (const track of score.tracks) {
                    for (const staff of track.staves) {
                        if (barIndex < staff.bars.length) {
                            const bar = staff.bars[barIndex];
                            if (!bar.isEmpty || bar.hasChanges) {
                                // found a non-empty bar, stop whole cleanup
                                return;
                            }
                        }
                    }
                }
                // if we reach here, all found bars are empty, remove the bar
                for (const track of score.tracks) {
                    for (const staff of track.staves) {
                        if (barIndex < staff.bars.length) {
                            const bar = staff.bars[barIndex];
                            staff.bars.pop();
                            // unlink
                            bar.previousBar.nextBar = null;
                        }
                    }
                }
                score.masterBars.pop();
                masterBar.previousMasterBar.nextMasterBar = null;
            }
        }
    }
    ModelUtils.TuningLetters = new Set([
        0x43 /* C */, 0x44 /* D */, 0x45 /* E */, 0x46 /* F */, 0x47 /* G */, 0x41 /* A */, 0x42 /* B */, 0x63 /* c */,
        0x64 /* d */, 0x65 /* e */, 0x66 /* f */, 0x67 /* g */, 0x61 /* a */, 0x62 /* b */, 0x23 /* # */
    ]);
    /**
     * @internal
     */
    ModelUtils.accidentalModeMapping = new Map([
        ['default', NoteAccidentalMode.Default],
        ['d', NoteAccidentalMode.Default],
        ['forcenone', NoteAccidentalMode.ForceNone],
        ['-', NoteAccidentalMode.ForceNone],
        ['forcenatural', NoteAccidentalMode.ForceNatural],
        ['n', NoteAccidentalMode.ForceNatural],
        ['forcesharp', NoteAccidentalMode.ForceSharp],
        ['#', NoteAccidentalMode.ForceSharp],
        ['forcedoublesharp', NoteAccidentalMode.ForceDoubleSharp],
        ['##', NoteAccidentalMode.ForceDoubleSharp],
        ['x', NoteAccidentalMode.ForceDoubleSharp],
        ['forceflat', NoteAccidentalMode.ForceFlat],
        ['b', NoteAccidentalMode.ForceFlat],
        ['forcedoubleflat', NoteAccidentalMode.ForceDoubleFlat],
        ['bb', NoteAccidentalMode.ForceDoubleFlat]
    ]);

    /**
     * Lists all types of pick strokes.
     */
    var PickStroke;
    (function (PickStroke) {
        /**
         * No pickstroke used.
         */
        PickStroke[PickStroke["None"] = 0] = "None";
        /**
         * Pickstroke up.
         */
        PickStroke[PickStroke["Up"] = 1] = "Up";
        /**
         * Pickstroke down
         */
        PickStroke[PickStroke["Down"] = 2] = "Down";
    })(PickStroke || (PickStroke = {}));

    /**
     * Lists all music font symbols used within alphaTab. The names
     * and values are aligned with the SMuFL standard.
     */
    var MusicFontSymbol;
    (function (MusicFontSymbol) {
        MusicFontSymbol[MusicFontSymbol["None"] = -1] = "None";
        MusicFontSymbol[MusicFontSymbol["Space"] = 32] = "Space";
        MusicFontSymbol[MusicFontSymbol["Brace"] = 57344] = "Brace";
        MusicFontSymbol[MusicFontSymbol["BracketTop"] = 57347] = "BracketTop";
        MusicFontSymbol[MusicFontSymbol["BracketBottom"] = 57348] = "BracketBottom";
        MusicFontSymbol[MusicFontSymbol["SystemDivider"] = 57351] = "SystemDivider";
        MusicFontSymbol[MusicFontSymbol["GClef"] = 57424] = "GClef";
        MusicFontSymbol[MusicFontSymbol["CClef"] = 57436] = "CClef";
        MusicFontSymbol[MusicFontSymbol["FClef"] = 57442] = "FClef";
        MusicFontSymbol[MusicFontSymbol["UnpitchedPercussionClef1"] = 57449] = "UnpitchedPercussionClef1";
        MusicFontSymbol[MusicFontSymbol["SixStringTabClef"] = 57453] = "SixStringTabClef";
        MusicFontSymbol[MusicFontSymbol["FourStringTabClef"] = 57454] = "FourStringTabClef";
        MusicFontSymbol[MusicFontSymbol["TimeSig0"] = 57472] = "TimeSig0";
        MusicFontSymbol[MusicFontSymbol["TimeSig1"] = 57473] = "TimeSig1";
        MusicFontSymbol[MusicFontSymbol["TimeSig2"] = 57474] = "TimeSig2";
        MusicFontSymbol[MusicFontSymbol["TimeSig3"] = 57475] = "TimeSig3";
        MusicFontSymbol[MusicFontSymbol["TimeSig4"] = 57476] = "TimeSig4";
        MusicFontSymbol[MusicFontSymbol["TimeSig5"] = 57477] = "TimeSig5";
        MusicFontSymbol[MusicFontSymbol["TimeSig6"] = 57478] = "TimeSig6";
        MusicFontSymbol[MusicFontSymbol["TimeSig7"] = 57479] = "TimeSig7";
        MusicFontSymbol[MusicFontSymbol["TimeSig8"] = 57480] = "TimeSig8";
        MusicFontSymbol[MusicFontSymbol["TimeSig9"] = 57481] = "TimeSig9";
        MusicFontSymbol[MusicFontSymbol["TimeSigCommon"] = 57482] = "TimeSigCommon";
        MusicFontSymbol[MusicFontSymbol["TimeSigCutCommon"] = 57483] = "TimeSigCutCommon";
        MusicFontSymbol[MusicFontSymbol["NoteheadDoubleWholeSquare"] = 57505] = "NoteheadDoubleWholeSquare";
        MusicFontSymbol[MusicFontSymbol["NoteheadDoubleWhole"] = 57504] = "NoteheadDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadWhole"] = 57506] = "NoteheadWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadHalf"] = 57507] = "NoteheadHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadBlack"] = 57508] = "NoteheadBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadNull"] = 57509] = "NoteheadNull";
        MusicFontSymbol[MusicFontSymbol["NoteheadXOrnate"] = 57514] = "NoteheadXOrnate";
        MusicFontSymbol[MusicFontSymbol["NoteheadPlusDoubleWhole"] = 57516] = "NoteheadPlusDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadPlusWhole"] = 57517] = "NoteheadPlusWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadPlusHalf"] = 57518] = "NoteheadPlusHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadPlusBlack"] = 57519] = "NoteheadPlusBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadSquareWhite"] = 57528] = "NoteheadSquareWhite";
        MusicFontSymbol[MusicFontSymbol["NoteheadSquareBlack"] = 57529] = "NoteheadSquareBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpDoubleWhole"] = 57530] = "NoteheadTriangleUpDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpWhole"] = 57531] = "NoteheadTriangleUpWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpHalf"] = 57532] = "NoteheadTriangleUpHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpBlack"] = 57534] = "NoteheadTriangleUpBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleRightWhite"] = 57537] = "NoteheadTriangleRightWhite";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleRightBlack"] = 57538] = "NoteheadTriangleRightBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleDownDoubleWhole"] = 57548] = "NoteheadTriangleDownDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleDownWhole"] = 57540] = "NoteheadTriangleDownWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleDownHalf"] = 57541] = "NoteheadTriangleDownHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadTriangleDownBlack"] = 57543] = "NoteheadTriangleDownBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondDoubleWhole"] = 57559] = "NoteheadDiamondDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondWhole"] = 57560] = "NoteheadDiamondWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondHalf"] = 57561] = "NoteheadDiamondHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondBlack"] = 57563] = "NoteheadDiamondBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondBlackWide"] = 57564] = "NoteheadDiamondBlackWide";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondWhite"] = 57565] = "NoteheadDiamondWhite";
        MusicFontSymbol[MusicFontSymbol["NoteheadDiamondWhiteWide"] = 57566] = "NoteheadDiamondWhiteWide";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircleXDoubleWhole"] = 57520] = "NoteheadCircleXDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircleXWhole"] = 57521] = "NoteheadCircleXWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircleXHalf"] = 57522] = "NoteheadCircleXHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircleX"] = 57523] = "NoteheadCircleX";
        MusicFontSymbol[MusicFontSymbol["NoteheadXDoubleWhole"] = 57510] = "NoteheadXDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadXWhole"] = 57511] = "NoteheadXWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadXHalf"] = 57512] = "NoteheadXHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadXBlack"] = 57513] = "NoteheadXBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadParenthesis"] = 57550] = "NoteheadParenthesis";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedBlack1"] = 57551] = "NoteheadSlashedBlack1";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedBlack2"] = 57552] = "NoteheadSlashedBlack2";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedHalf1"] = 57553] = "NoteheadSlashedHalf1";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedHalf2"] = 57554] = "NoteheadSlashedHalf2";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedWhole1"] = 57555] = "NoteheadSlashedWhole1";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedWhole2"] = 57556] = "NoteheadSlashedWhole2";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedDoubleWhole1"] = 57557] = "NoteheadSlashedDoubleWhole1";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashedDoubleWhole2"] = 57558] = "NoteheadSlashedDoubleWhole2";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircledBlack"] = 57572] = "NoteheadCircledBlack";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircledHalf"] = 57573] = "NoteheadCircledHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircledWhole"] = 57574] = "NoteheadCircledWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircledDoubleWhole"] = 57575] = "NoteheadCircledDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadCircleSlash"] = 57591] = "NoteheadCircleSlash";
        MusicFontSymbol[MusicFontSymbol["NoteheadHeavyX"] = 57592] = "NoteheadHeavyX";
        MusicFontSymbol[MusicFontSymbol["NoteheadHeavyXHat"] = 57593] = "NoteheadHeavyXHat";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashVerticalEnds"] = 57600] = "NoteheadSlashVerticalEnds";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashWhiteWhole"] = 57602] = "NoteheadSlashWhiteWhole";
        MusicFontSymbol[MusicFontSymbol["NoteheadSlashWhiteHalf"] = 57603] = "NoteheadSlashWhiteHalf";
        MusicFontSymbol[MusicFontSymbol["NoteheadRoundWhiteWithDot"] = 57621] = "NoteheadRoundWhiteWithDot";
        MusicFontSymbol[MusicFontSymbol["NoteheadSquareBlackLarge"] = 57626] = "NoteheadSquareBlackLarge";
        MusicFontSymbol[MusicFontSymbol["NoteheadSquareBlackWhite"] = 57627] = "NoteheadSquareBlackWhite";
        MusicFontSymbol[MusicFontSymbol["NoteheadClusterDoubleWhole3rd"] = 57640] = "NoteheadClusterDoubleWhole3rd";
        MusicFontSymbol[MusicFontSymbol["NoteheadClusterWhole3rd"] = 57641] = "NoteheadClusterWhole3rd";
        MusicFontSymbol[MusicFontSymbol["NoteheadClusterHalf3rd"] = 57642] = "NoteheadClusterHalf3rd";
        MusicFontSymbol[MusicFontSymbol["NoteheadClusterQuarter3rd"] = 57643] = "NoteheadClusterQuarter3rd";
        MusicFontSymbol[MusicFontSymbol["NoteShapeRoundWhite"] = 57776] = "NoteShapeRoundWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeRoundBlack"] = 57777] = "NoteShapeRoundBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeSquareWhite"] = 57778] = "NoteShapeSquareWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeSquareBlack"] = 57779] = "NoteShapeSquareBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleRightWhite"] = 57780] = "NoteShapeTriangleRightWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleRightBlack"] = 57781] = "NoteShapeTriangleRightBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleLeftWhite"] = 57782] = "NoteShapeTriangleLeftWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleLeftBlack"] = 57783] = "NoteShapeTriangleLeftBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeDiamondWhite"] = 57784] = "NoteShapeDiamondWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeDiamondBlack"] = 57785] = "NoteShapeDiamondBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleUpWhite"] = 57786] = "NoteShapeTriangleUpWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleUpBlack"] = 57787] = "NoteShapeTriangleUpBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeMoonWhite"] = 57788] = "NoteShapeMoonWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeMoonBlack"] = 57789] = "NoteShapeMoonBlack";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleRoundWhite"] = 57790] = "NoteShapeTriangleRoundWhite";
        MusicFontSymbol[MusicFontSymbol["NoteShapeTriangleRoundBlack"] = 57791] = "NoteShapeTriangleRoundBlack";
        MusicFontSymbol[MusicFontSymbol["NoteQuarterUp"] = 57813] = "NoteQuarterUp";
        MusicFontSymbol[MusicFontSymbol["NoteEighthUp"] = 57815] = "NoteEighthUp";
        MusicFontSymbol[MusicFontSymbol["TextBlackNoteLongStem"] = 57841] = "TextBlackNoteLongStem";
        MusicFontSymbol[MusicFontSymbol["TextBlackNoteFrac8thLongStem"] = 57843] = "TextBlackNoteFrac8thLongStem";
        MusicFontSymbol[MusicFontSymbol["TextBlackNoteFrac16thLongStem"] = 57845] = "TextBlackNoteFrac16thLongStem";
        MusicFontSymbol[MusicFontSymbol["TextBlackNoteFrac32ndLongStem"] = 57846] = "TextBlackNoteFrac32ndLongStem";
        MusicFontSymbol[MusicFontSymbol["TextCont8thBeamLongStem"] = 57848] = "TextCont8thBeamLongStem";
        MusicFontSymbol[MusicFontSymbol["TextCont16thBeamLongStem"] = 57850] = "TextCont16thBeamLongStem";
        MusicFontSymbol[MusicFontSymbol["TextCont32ndBeamLongStem"] = 57851] = "TextCont32ndBeamLongStem";
        MusicFontSymbol[MusicFontSymbol["TextAugmentationDot"] = 57852] = "TextAugmentationDot";
        MusicFontSymbol[MusicFontSymbol["TextTupletBracketStartLongStem"] = 57857] = "TextTupletBracketStartLongStem";
        MusicFontSymbol[MusicFontSymbol["TextTuplet3LongStem"] = 57858] = "TextTuplet3LongStem";
        MusicFontSymbol[MusicFontSymbol["TextTupletBracketEndLongStem"] = 57859] = "TextTupletBracketEndLongStem";
        MusicFontSymbol[MusicFontSymbol["Tremolo3"] = 57890] = "Tremolo3";
        MusicFontSymbol[MusicFontSymbol["Tremolo2"] = 57889] = "Tremolo2";
        MusicFontSymbol[MusicFontSymbol["Tremolo1"] = 57888] = "Tremolo1";
        MusicFontSymbol[MusicFontSymbol["FlagEighthUp"] = 57920] = "FlagEighthUp";
        MusicFontSymbol[MusicFontSymbol["FlagEighthDown"] = 57921] = "FlagEighthDown";
        MusicFontSymbol[MusicFontSymbol["FlagSixteenthUp"] = 57922] = "FlagSixteenthUp";
        MusicFontSymbol[MusicFontSymbol["FlagSixteenthDown"] = 57923] = "FlagSixteenthDown";
        MusicFontSymbol[MusicFontSymbol["FlagThirtySecondUp"] = 57924] = "FlagThirtySecondUp";
        MusicFontSymbol[MusicFontSymbol["FlagThirtySecondDown"] = 57925] = "FlagThirtySecondDown";
        MusicFontSymbol[MusicFontSymbol["FlagSixtyFourthUp"] = 57926] = "FlagSixtyFourthUp";
        MusicFontSymbol[MusicFontSymbol["FlagSixtyFourthDown"] = 57927] = "FlagSixtyFourthDown";
        MusicFontSymbol[MusicFontSymbol["FlagOneHundredTwentyEighthUp"] = 57928] = "FlagOneHundredTwentyEighthUp";
        MusicFontSymbol[MusicFontSymbol["FlagOneHundredTwentyEighthDown"] = 57929] = "FlagOneHundredTwentyEighthDown";
        MusicFontSymbol[MusicFontSymbol["FlagTwoHundredFiftySixthUp"] = 57930] = "FlagTwoHundredFiftySixthUp";
        MusicFontSymbol[MusicFontSymbol["FlagTwoHundredFiftySixthDown"] = 57931] = "FlagTwoHundredFiftySixthDown";
        MusicFontSymbol[MusicFontSymbol["AccidentalFlat"] = 57952] = "AccidentalFlat";
        MusicFontSymbol[MusicFontSymbol["AccidentalNatural"] = 57953] = "AccidentalNatural";
        MusicFontSymbol[MusicFontSymbol["AccidentalSharp"] = 57954] = "AccidentalSharp";
        MusicFontSymbol[MusicFontSymbol["AccidentalDoubleSharp"] = 57955] = "AccidentalDoubleSharp";
        MusicFontSymbol[MusicFontSymbol["AccidentalDoubleFlat"] = 57956] = "AccidentalDoubleFlat";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneFlatArrowUp"] = 57968] = "AccidentalQuarterToneFlatArrowUp";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneSharpArrowUp"] = 57972] = "AccidentalQuarterToneSharpArrowUp";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneNaturalArrowUp"] = 57970] = "AccidentalQuarterToneNaturalArrowUp";
        MusicFontSymbol[MusicFontSymbol["Segno"] = 57415] = "Segno";
        MusicFontSymbol[MusicFontSymbol["Coda"] = 57416] = "Coda";
        MusicFontSymbol[MusicFontSymbol["ArticAccentAbove"] = 58528] = "ArticAccentAbove";
        MusicFontSymbol[MusicFontSymbol["ArticAccentBelow"] = 58529] = "ArticAccentBelow";
        MusicFontSymbol[MusicFontSymbol["ArticStaccatoAbove"] = 58530] = "ArticStaccatoAbove";
        MusicFontSymbol[MusicFontSymbol["ArticStaccatoBelow"] = 58531] = "ArticStaccatoBelow";
        MusicFontSymbol[MusicFontSymbol["ArticTenutoAbove"] = 58532] = "ArticTenutoAbove";
        MusicFontSymbol[MusicFontSymbol["ArticTenutoBelow"] = 58533] = "ArticTenutoBelow";
        MusicFontSymbol[MusicFontSymbol["ArticMarcatoAbove"] = 58540] = "ArticMarcatoAbove";
        MusicFontSymbol[MusicFontSymbol["ArticMarcatoBelow"] = 58541] = "ArticMarcatoBelow";
        MusicFontSymbol[MusicFontSymbol["FermataAbove"] = 58560] = "FermataAbove";
        MusicFontSymbol[MusicFontSymbol["FermataShortAbove"] = 58564] = "FermataShortAbove";
        MusicFontSymbol[MusicFontSymbol["FermataLongAbove"] = 58566] = "FermataLongAbove";
        MusicFontSymbol[MusicFontSymbol["RestLonga"] = 58593] = "RestLonga";
        MusicFontSymbol[MusicFontSymbol["RestDoubleWhole"] = 58594] = "RestDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["RestWhole"] = 58595] = "RestWhole";
        MusicFontSymbol[MusicFontSymbol["RestHalf"] = 58596] = "RestHalf";
        MusicFontSymbol[MusicFontSymbol["RestQuarter"] = 58597] = "RestQuarter";
        MusicFontSymbol[MusicFontSymbol["RestEighth"] = 58598] = "RestEighth";
        MusicFontSymbol[MusicFontSymbol["RestSixteenth"] = 58599] = "RestSixteenth";
        MusicFontSymbol[MusicFontSymbol["RestThirtySecond"] = 58600] = "RestThirtySecond";
        MusicFontSymbol[MusicFontSymbol["RestSixtyFourth"] = 58601] = "RestSixtyFourth";
        MusicFontSymbol[MusicFontSymbol["RestOneHundredTwentyEighth"] = 58602] = "RestOneHundredTwentyEighth";
        MusicFontSymbol[MusicFontSymbol["RestTwoHundredFiftySixth"] = 58603] = "RestTwoHundredFiftySixth";
        MusicFontSymbol[MusicFontSymbol["RestHBarLeft"] = 58607] = "RestHBarLeft";
        MusicFontSymbol[MusicFontSymbol["RestHBarMiddle"] = 58608] = "RestHBarMiddle";
        MusicFontSymbol[MusicFontSymbol["RestHBarRight"] = 58609] = "RestHBarRight";
        MusicFontSymbol[MusicFontSymbol["Repeat1Bar"] = 58624] = "Repeat1Bar";
        MusicFontSymbol[MusicFontSymbol["Repeat2Bars"] = 58625] = "Repeat2Bars";
        MusicFontSymbol[MusicFontSymbol["Ottava"] = 58640] = "Ottava";
        MusicFontSymbol[MusicFontSymbol["OttavaAlta"] = 58641] = "OttavaAlta";
        MusicFontSymbol[MusicFontSymbol["OttavaBassaVb"] = 58652] = "OttavaBassaVb";
        MusicFontSymbol[MusicFontSymbol["Quindicesima"] = 58644] = "Quindicesima";
        MusicFontSymbol[MusicFontSymbol["QuindicesimaAlta"] = 58645] = "QuindicesimaAlta";
        MusicFontSymbol[MusicFontSymbol["DynamicPPPPPP"] = 58663] = "DynamicPPPPPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPPPPP"] = 58664] = "DynamicPPPPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPPPP"] = 58665] = "DynamicPPPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPPP"] = 58666] = "DynamicPPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPP"] = 58667] = "DynamicPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPiano"] = 58656] = "DynamicPiano";
        MusicFontSymbol[MusicFontSymbol["DynamicMP"] = 58668] = "DynamicMP";
        MusicFontSymbol[MusicFontSymbol["DynamicMF"] = 58669] = "DynamicMF";
        MusicFontSymbol[MusicFontSymbol["DynamicPF"] = 58670] = "DynamicPF";
        MusicFontSymbol[MusicFontSymbol["DynamicForte"] = 58658] = "DynamicForte";
        MusicFontSymbol[MusicFontSymbol["DynamicFF"] = 58671] = "DynamicFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFFF"] = 58672] = "DynamicFFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFFFF"] = 58673] = "DynamicFFFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFFFFF"] = 58674] = "DynamicFFFFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFFFFFF"] = 58675] = "DynamicFFFFFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFortePiano"] = 58676] = "DynamicFortePiano";
        MusicFontSymbol[MusicFontSymbol["DynamicNiente"] = 58662] = "DynamicNiente";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzando1"] = 58678] = "DynamicSforzando1";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzandoPiano"] = 58679] = "DynamicSforzandoPiano";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzandoPianissimo"] = 58680] = "DynamicSforzandoPianissimo";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzato"] = 58681] = "DynamicSforzato";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzatoPiano"] = 58682] = "DynamicSforzatoPiano";
        MusicFontSymbol[MusicFontSymbol["DynamicSforzatoFF"] = 58683] = "DynamicSforzatoFF";
        MusicFontSymbol[MusicFontSymbol["DynamicRinforzando1"] = 58684] = "DynamicRinforzando1";
        MusicFontSymbol[MusicFontSymbol["DynamicRinforzando2"] = 58685] = "DynamicRinforzando2";
        MusicFontSymbol[MusicFontSymbol["DynamicForzando"] = 58677] = "DynamicForzando";
        MusicFontSymbol[MusicFontSymbol["OrnamentTrill"] = 58726] = "OrnamentTrill";
        MusicFontSymbol[MusicFontSymbol["OrnamentTurn"] = 58727] = "OrnamentTurn";
        MusicFontSymbol[MusicFontSymbol["OrnamentTurnInverted"] = 58728] = "OrnamentTurnInverted";
        MusicFontSymbol[MusicFontSymbol["OrnamentShortTrill"] = 58732] = "OrnamentShortTrill";
        MusicFontSymbol[MusicFontSymbol["OrnamentMordent"] = 58733] = "OrnamentMordent";
        MusicFontSymbol[MusicFontSymbol["StringsDownBow"] = 58896] = "StringsDownBow";
        MusicFontSymbol[MusicFontSymbol["StringsUpBow"] = 58898] = "StringsUpBow";
        MusicFontSymbol[MusicFontSymbol["KeyboardPedalPed"] = 58960] = "KeyboardPedalPed";
        MusicFontSymbol[MusicFontSymbol["KeyboardPedalUp"] = 58965] = "KeyboardPedalUp";
        MusicFontSymbol[MusicFontSymbol["PictEdgeOfCymbal"] = 59177] = "PictEdgeOfCymbal";
        MusicFontSymbol[MusicFontSymbol["GuitarString0"] = 59443] = "GuitarString0";
        MusicFontSymbol[MusicFontSymbol["GuitarString1"] = 59444] = "GuitarString1";
        MusicFontSymbol[MusicFontSymbol["GuitarString2"] = 59445] = "GuitarString2";
        MusicFontSymbol[MusicFontSymbol["GuitarString3"] = 59446] = "GuitarString3";
        MusicFontSymbol[MusicFontSymbol["GuitarString4"] = 59447] = "GuitarString4";
        MusicFontSymbol[MusicFontSymbol["GuitarString5"] = 59448] = "GuitarString5";
        MusicFontSymbol[MusicFontSymbol["GuitarString6"] = 59449] = "GuitarString6";
        MusicFontSymbol[MusicFontSymbol["GuitarString7"] = 59450] = "GuitarString7";
        MusicFontSymbol[MusicFontSymbol["GuitarString8"] = 59451] = "GuitarString8";
        MusicFontSymbol[MusicFontSymbol["GuitarString9"] = 59452] = "GuitarString9";
        MusicFontSymbol[MusicFontSymbol["GuitarOpenPedal"] = 59453] = "GuitarOpenPedal";
        MusicFontSymbol[MusicFontSymbol["GuitarClosePedal"] = 59455] = "GuitarClosePedal";
        MusicFontSymbol[MusicFontSymbol["GuitarGolpe"] = 59458] = "GuitarGolpe";
        MusicFontSymbol[MusicFontSymbol["GuitarFadeIn"] = 59459] = "GuitarFadeIn";
        MusicFontSymbol[MusicFontSymbol["GuitarFadeOut"] = 59460] = "GuitarFadeOut";
        MusicFontSymbol[MusicFontSymbol["GuitarVolumeSwell"] = 59461] = "GuitarVolumeSwell";
        MusicFontSymbol[MusicFontSymbol["FretboardX"] = 59481] = "FretboardX";
        MusicFontSymbol[MusicFontSymbol["FretboardO"] = 59482] = "FretboardO";
        MusicFontSymbol[MusicFontSymbol["WiggleTrill"] = 60068] = "WiggleTrill";
        MusicFontSymbol[MusicFontSymbol["WiggleVibratoMediumFast"] = 60126] = "WiggleVibratoMediumFast";
        MusicFontSymbol[MusicFontSymbol["OctaveBaselineM"] = 60565] = "OctaveBaselineM";
        MusicFontSymbol[MusicFontSymbol["OctaveBaselineB"] = 60563] = "OctaveBaselineB";
    })(MusicFontSymbol || (MusicFontSymbol = {}));

    /**
     * This public enum lists all different text alignments
     */
    var TextAlign;
    (function (TextAlign) {
        /**
         * Text is left aligned.
         */
        TextAlign[TextAlign["Left"] = 0] = "Left";
        /**
         * Text is centered.
         */ TextAlign[TextAlign["Center"] = 1] = "Center";
        /**
         * Text is right aligned.
         */ TextAlign[TextAlign["Right"] = 2] = "Right";
    })(TextAlign || (TextAlign = {}));
    /**
     * This public enum lists all base line modes
     */
    var TextBaseline;
    (function (TextBaseline) {
        /**
         * Text is aligned on top.
         */
        TextBaseline[TextBaseline["Top"] = 0] = "Top";
        /**
         * Text is aligned middle
         */
        TextBaseline[TextBaseline["Middle"] = 1] = "Middle";
        /**
         * Text is aligend on the bottom.
         */
        TextBaseline[TextBaseline["Bottom"] = 2] = "Bottom";
    })(TextBaseline || (TextBaseline = {}));
    /**
     * The MeasuredText class represents the dimensions of a piece of text in the canvas;
     */
    class MeasuredText {
        constructor(width, height) {
            this.width = width;
            this.height = height;
        }
    }

    /**
     * Describes an instrument articulation which is used for percussions.
     * @json
     * @json_strict
     */
    class InstrumentArticulation {
        constructor(elementType = '', staffLine = 0, outputMidiNumber = 0, noteHeadDefault = MusicFontSymbol.None, noteHeadHalf = MusicFontSymbol.None, noteHeadWhole = MusicFontSymbol.None, techniqueSymbol = MusicFontSymbol.None, techniqueSymbolPlacement = TextBaseline.Middle) {
            this.elementType = elementType;
            this.outputMidiNumber = outputMidiNumber;
            this.staffLine = staffLine;
            this.noteHeadDefault = noteHeadDefault;
            this.noteHeadHalf = noteHeadHalf !== MusicFontSymbol.None ? noteHeadHalf : noteHeadDefault;
            this.noteHeadWhole = noteHeadWhole !== MusicFontSymbol.None ? noteHeadWhole : noteHeadDefault;
            this.techniqueSymbol = techniqueSymbol;
            this.techniqueSymbolPlacement = techniqueSymbolPlacement;
        }
        getSymbol(duration) {
            switch (duration) {
                case Duration.Whole:
                    return this.noteHeadWhole;
                case Duration.Half:
                    return this.noteHeadHalf;
                default:
                    return this.noteHeadDefault;
            }
        }
    }

    class PercussionMapper {
        static articulationFromElementVariation(element, variation) {
            if (element < PercussionMapper.gp6ElementAndVariationToArticulation.length) {
                if (variation >= PercussionMapper.gp6ElementAndVariationToArticulation.length) {
                    variation = 0;
                }
                return PercussionMapper.gp6ElementAndVariationToArticulation[element][variation];
            }
            // unknown combination, should not happen, fallback to some default value (Snare hit)
            return 38;
        }
        static getArticulation(n) {
            const articulationIndex = n.percussionArticulation;
            if (articulationIndex < 0) {
                return null;
            }
            const trackArticulations = n.beat.voice.bar.staff.track.percussionArticulations;
            if (articulationIndex < trackArticulations.length) {
                return trackArticulations[articulationIndex];
            }
            return PercussionMapper.getArticulationByInputMidiNumber(articulationIndex);
        }
        static getElementAndVariation(n) {
            const articulation = PercussionMapper.getArticulation(n);
            if (!articulation) {
                return [-1, -1];
            }
            // search for the first element/variation combination with the same midi output
            for (let element = 0; element < PercussionMapper.gp6ElementAndVariationToArticulation.length; element++) {
                const variations = PercussionMapper.gp6ElementAndVariationToArticulation[element];
                for (let variation = 0; variation < variations.length; variation++) {
                    const gp6Articulation = PercussionMapper.getArticulationByInputMidiNumber(variations[variation]);
                    if (gp6Articulation?.outputMidiNumber === articulation.outputMidiNumber) {
                        return [element, variation];
                    }
                }
            }
            return [-1, -1];
        }
        static getArticulationByInputMidiNumber(inputMidiNumber) {
            if (PercussionMapper.instrumentArticulations.has(inputMidiNumber)) {
                return PercussionMapper.instrumentArticulations.get(inputMidiNumber);
            }
            return null;
        }
    }
    PercussionMapper.gp6ElementAndVariationToArticulation = [
        // known GP6 elements and variations, analyzed from a GPX test file
        // with all instruments inside manually aligned with the same names of articulations in GP7
        // [{articulation index}]   // [{element number}] => {element name} ({variation[0]}, {variation[1]}, {variation[2]})
        [35, 35, 35], // [0] => Kick (hit, unused, unused)
        [38, 91, 37], // [1] => Snare (hit, rim shot, side stick)
        [99, 100, 99], // [2] => Cowbell low (hit, tip, unused)
        [56, 100, 56], // [3] => Cowbell medium (hit, tip, unused)
        [102, 103, 102], // [4] => Cowbell high (hit, tip, unused)
        [43, 43, 43], // [5] => Tom very low (hit, unused, unused)
        [45, 45, 45], // [6] => Tom low (hit, unused, unused)
        [47, 47, 47], // [7] => Tom medium (hit, unused, unused)
        [48, 48, 48], // [8] => Tom high (hit, unused, unused)
        [50, 50, 50], // [9] => Tom very high (hit, unused, unused)
        [42, 92, 46], // [10] => Hihat (closed, half, open)
        [44, 44, 44], // [11] => Pedal hihat (hit, unused, unused)
        [57, 98, 57], // [12] => Crash medium (hit, choke, unused)
        [49, 97, 49], // [13] => Crash high (hit, choke, unused)
        [55, 95, 55], // [14] => Splash (hit, choke, unused)
        [51, 93, 127], // [15] => Ride (middle, edge, bell)
        [52, 96, 52] // [16] => China (hit, choke, unused)
    ];
    /*
     * This map was generated using the following steps:
     * 1. Make a new GP7 file with a drumkit track
     * 2. Add one note for each midi value using the instrument panel
     * 3. Load the file in alphaTab and set a breakpoint in the GP7 importer.
     * 4. Use the following snipped in the console to generate the map initializer (fix enums manually):
     * parser = new DOMParser();
     * xmlDoc = parser.parseFromString(xml, 'text/xml');
     * articulations = xmlDoc.getElementsByTagName('Articulation');
     * existingArticulations = new Map();
     * s = '';
     * for(let i = 0; i < articulations.length; i++) {
     *     const articulation = articulations[i];
     *     let midi = articulation.getElementsByTagName('InputMidiNumbers');
     * 	if(midi.length === 1) {
     * 		midi = midi[0].textContent;
     *      const elementType = articulation.parentElement.parentElement.getElementsByTagName('Type')[0].textContent;
     *      const outputMidiNumber = articulation.getElementsByTagName('OutputMidiNumber')[0].textContent;
     * 		const staffLine = articulation.getElementsByTagName('StaffLine')[0].textContent;
     * 		const techniqueSymbol = articulation.getElementsByTagName('TechniqueSymbol')[0].textContent;
     * 		const techniquePlacement = articulation.getElementsByTagName('TechniquePlacement')[0].textContent;
     * 		const noteHeads = articulation.getElementsByTagName('Noteheads')[0].textContent.split(' ').map(n=>n = 'MusicFontSymbol.' + n);
     * 		if(!existingArticulations.has(midi)) {
     *        if(techniqueSymbol) {
     * 		    s += `['${elementType}', ${midi}, new InstrumentArticulation(${staffLine}, ${outputMidiNumber}, ${noteHeads[0]}, ${noteHeads[1]}, ${noteHeads[2]}, ${techniqueSymbol}, ${techniquePlacement})],\r\n`;
     *        }
     *        else {
     * 		    s += `['${elementType}', ${midi}, new InstrumentArticulation(${staffLine}, ${outputMidiNumber}, ${noteHeads[0]}, ${noteHeads[1]}, ${noteHeads[2]})],\r\n`;
     *        }
     * 		  existingArticulations.set(midi, true);
     * 		}
     * 	}
     * }
     * copy(s)
     */
    PercussionMapper.instrumentArticulations = new Map([
        [
            38,
            new InstrumentArticulation('snare', 3, 38, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            37,
            new InstrumentArticulation('snare', 3, 37, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            91,
            new InstrumentArticulation('snare', 3, 38, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)
        ],
        [
            42,
            new InstrumentArticulation('hiHat', -1, 42, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            92,
            new InstrumentArticulation('hiHat', -1, 46, MusicFontSymbol.NoteheadCircleSlash, MusicFontSymbol.NoteheadCircleSlash, MusicFontSymbol.NoteheadCircleSlash)
        ],
        [
            46,
            new InstrumentArticulation('hiHat', -1, 46, MusicFontSymbol.NoteheadCircleX, MusicFontSymbol.NoteheadCircleX, MusicFontSymbol.NoteheadCircleX)
        ],
        [
            44,
            new InstrumentArticulation('hiHat', 9, 44, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            35,
            new InstrumentArticulation('kickDrum', 8, 35, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            36,
            new InstrumentArticulation('kickDrum', 7, 36, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            50,
            new InstrumentArticulation('tom', 1, 50, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            48,
            new InstrumentArticulation('tom', 2, 48, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            47,
            new InstrumentArticulation('tom', 4, 47, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            45,
            new InstrumentArticulation('tom', 5, 45, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            43,
            new InstrumentArticulation('tom', 6, 43, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            93,
            new InstrumentArticulation('ride', 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.PictEdgeOfCymbal, TextBaseline.Bottom)
        ],
        [
            51,
            new InstrumentArticulation('ride', 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            53,
            new InstrumentArticulation('ride', 0, 53, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)
        ],
        [
            94,
            new InstrumentArticulation('ride', 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Top)
        ],
        [
            55,
            new InstrumentArticulation('splash', -2, 55, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            95,
            new InstrumentArticulation('splash', -2, 55, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)
        ],
        [
            52,
            new InstrumentArticulation('china', -3, 52, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat)
        ],
        [
            96,
            new InstrumentArticulation('china', -3, 52, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat)
        ],
        [
            49,
            new InstrumentArticulation('crash', -2, 49, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX)
        ],
        [
            97,
            new InstrumentArticulation('crash', -2, 49, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)
        ],
        [
            57,
            new InstrumentArticulation('crash', -1, 57, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX)
        ],
        [
            98,
            new InstrumentArticulation('crash', -1, 57, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)
        ],
        [
            99,
            new InstrumentArticulation('cowbell', 1, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)
        ],
        [
            100,
            new InstrumentArticulation('cowbell', 1, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)
        ],
        [
            56,
            new InstrumentArticulation('cowbell', 0, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)
        ],
        [
            101,
            new InstrumentArticulation('cowbell', 0, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)
        ],
        [
            102,
            new InstrumentArticulation('cowbell', -1, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)
        ],
        [
            103,
            new InstrumentArticulation('cowbell', -1, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)
        ],
        [
            77,
            new InstrumentArticulation('woodblock', -9, 77, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)
        ],
        [
            76,
            new InstrumentArticulation('woodblock', -10, 76, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)
        ],
        [
            60,
            new InstrumentArticulation('bongo', -4, 60, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            104,
            new InstrumentArticulation('bongo', -5, 60, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            105,
            new InstrumentArticulation('bongo', -6, 60, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            61,
            new InstrumentArticulation('bongo', -7, 61, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            106,
            new InstrumentArticulation('bongo', -8, 61, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            107,
            new InstrumentArticulation('bongo', -16, 61, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            66,
            new InstrumentArticulation('timbale', 10, 66, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            65,
            new InstrumentArticulation('timbale', 9, 65, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            68,
            new InstrumentArticulation('agogo', 12, 68, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            67,
            new InstrumentArticulation('agogo', 11, 67, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            64,
            new InstrumentArticulation('conga', 17, 64, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            108,
            new InstrumentArticulation('conga', 16, 64, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            109,
            new InstrumentArticulation('conga', 15, 64, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            63,
            new InstrumentArticulation('conga', 14, 63, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            110,
            new InstrumentArticulation('conga', 13, 63, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            62,
            new InstrumentArticulation('conga', 19, 62, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            72,
            new InstrumentArticulation('whistle', -11, 72, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            71,
            new InstrumentArticulation('whistle', -17, 71, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            73,
            new InstrumentArticulation('guiro', 38, 73, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            74,
            new InstrumentArticulation('guiro', 37, 74, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            86,
            new InstrumentArticulation('surdo', 36, 86, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            87,
            new InstrumentArticulation('surdo', 35, 87, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            54,
            new InstrumentArticulation('tambourine', 3, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)
        ],
        [
            111,
            new InstrumentArticulation('tambourine', 2, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            112,
            new InstrumentArticulation('tambourine', 1, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.StringsDownBow, TextBaseline.Bottom)
        ],
        [
            113,
            new InstrumentArticulation('tambourine', -7, 54, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            79,
            new InstrumentArticulation('cuica', 30, 79, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            78,
            new InstrumentArticulation('cuica', 29, 78, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            58,
            new InstrumentArticulation('vibraslap', 28, 58, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            81,
            new InstrumentArticulation('triangle', 27, 81, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            80,
            new InstrumentArticulation('triangle', 26, 80, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)
        ],
        [
            114,
            new InstrumentArticulation('grancassa', 25, 43, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            115,
            new InstrumentArticulation('piatti', 18, 49, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            116,
            new InstrumentArticulation('piatti', 24, 49, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            69,
            new InstrumentArticulation('cabasa', 23, 69, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            117,
            new InstrumentArticulation('cabasa', 22, 69, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            85,
            new InstrumentArticulation('castanets', 21, 85, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            75,
            new InstrumentArticulation('claves', 20, 75, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            70,
            new InstrumentArticulation('maraca', -12, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            118,
            new InstrumentArticulation('maraca', -13, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            119,
            new InstrumentArticulation('maraca', -14, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            120,
            new InstrumentArticulation('maraca', -15, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            82,
            new InstrumentArticulation('shaker', -23, 54, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            122,
            new InstrumentArticulation('shaker', -24, 54, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            84,
            new InstrumentArticulation('bellTree', -18, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            123,
            new InstrumentArticulation('bellTree', -19, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)
        ],
        [
            83,
            new InstrumentArticulation('jingleBell', -20, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            124,
            new InstrumentArticulation('unpitched', -21, 62, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.GuitarGolpe, TextBaseline.Top)
        ],
        [
            125,
            new InstrumentArticulation('unpitched', -22, 62, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.GuitarGolpe, TextBaseline.Bottom)
        ],
        [
            39,
            new InstrumentArticulation('handClap', 3, 39, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            40,
            new InstrumentArticulation('snare', 3, 40, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            31,
            new InstrumentArticulation('snare', 3, 40, MusicFontSymbol.NoteheadSlashedBlack2, MusicFontSymbol.NoteheadSlashedBlack2, MusicFontSymbol.NoteheadSlashedBlack2)
        ],
        [
            41,
            new InstrumentArticulation('tom', 5, 41, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)
        ],
        [
            59,
            new InstrumentArticulation('ride', 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.PictEdgeOfCymbal, TextBaseline.Bottom)
        ],
        [
            126,
            new InstrumentArticulation('ride', 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            127,
            new InstrumentArticulation('ride', 2, 59, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)
        ],
        [
            29,
            new InstrumentArticulation('ride', 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Top)
        ],
        [
            30,
            new InstrumentArticulation('crash', -3, 49, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            33,
            new InstrumentArticulation('snare', 3, 37, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)
        ],
        [
            34,
            new InstrumentArticulation('snare', 3, 38, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadBlack)
        ]
    ]);
    // these are manually defined names/identifiers for the articulation list above.
    // they are currently only used in the AlphaTex importer when using default articulations
    // but they are kept here close to the source of the default aritculation list to maintain them together.
    PercussionMapper.instrumentArticulationNames = new Map([
        ['Ride (choke)', 29],
        ['Cymbal (hit)', 30],
        ['Snare (side stick)', 31],
        ['Snare (side stick) 2', 33],
        ['Snare (hit)', 34],
        ['Kick (hit)', 35],
        ['Kick (hit) 2', 36],
        ['Snare (side stick) 3', 37],
        ['Snare (hit) 2', 38],
        ['Hand Clap (hit)', 39],
        ['Snare (hit) 3', 40],
        ['Low Floor Tom (hit)', 41],
        ['Hi-Hat (closed)', 42],
        ['Very Low Tom (hit)', 43],
        ['Pedal Hi-Hat (hit)', 44],
        ['Low Tom (hit)', 45],
        ['Hi-Hat (open)', 46],
        ['Mid Tom (hit)', 47],
        ['High Tom (hit)', 48],
        ['Crash high (hit)', 49],
        ['High Floor Tom (hit)', 50],
        ['Ride (middle)', 51],
        ['China (hit)', 52],
        ['Ride (bell)', 53],
        ['Tambourine (hit)', 54],
        ['Splash (hit)', 55],
        ['Cowbell medium (hit)', 56],
        ['Crash medium (hit)', 57],
        ['Vibraslap (hit)', 58],
        ['Ride (edge)', 59],
        ['Hand (hit)', 60],
        ['Hand (hit)', 61],
        ['Conga high (mute)', 62],
        ['Conga high (hit)', 63],
        ['Conga low (hit)', 64],
        ['Timbale high (hit)', 65],
        ['Timbale low (hit)', 66],
        ['Agogo high (hit)', 67],
        ['Agogo tow (hit)', 68],
        ['Cabasa (hit)', 69],
        ['Left Maraca (hit)', 70],
        ['Whistle high (hit)', 71],
        ['Whistle low (hit)', 72],
        ['Guiro (hit)', 73],
        ['Guiro (scrap-return)', 74],
        ['Claves (hit)', 75],
        ['Woodblock high (hit)', 76],
        ['Woodblock low (hit)', 77],
        ['Cuica (mute)', 78],
        ['Cuica (open)', 79],
        ['Triangle (rnute)', 80],
        ['Triangle (hit)', 81],
        ['Shaker (hit)', 82],
        ['Tinkle Bell (hat)', 83],
        ['Jingle Bell (hit)', 83],
        ['Bell Tree (hit)', 84],
        ['Castanets (hit)', 85],
        ['Surdo (hit)', 86],
        ['Surdo (mute)', 87],
        ['Snare (rim shot)', 91],
        ['Hi-Hat (half)', 92],
        ['Ride (edge) 2', 93],
        ['Ride (choke) 2', 94],
        ['Splash (choke)', 95],
        ['China (choke)', 96],
        ['Crash high (choke)', 97],
        ['Crash medium (choke)', 98],
        ['Cowbell low (hit)', 99],
        ['Cowbell low (tip)', 100],
        ['Cowbell medium (tip)', 101],
        ['Cowbell high (hit)', 102],
        ['Cowbell high (tip)', 103],
        ['Hand (mute)', 104],
        ['Hand (slap)', 105],
        ['Hand (mute) 2', 106],
        ['Hand (slap) 2', 107],
        ['Conga low (slap)', 108],
        ['Conga low (mute)', 109],
        ['Conga high (slap)', 110],
        ['Tambourine (return)', 111],
        ['Tambourine (roll)', 112],
        ['Tambourine (hand)', 113],
        ['Grancassa (hit)', 114],
        ['Piatti (hat)', 115],
        ['Piatti (hand)', 116],
        ['Cabasa (return)', 117],
        ['Left Maraca (return)', 118],
        ['Right Maraca (hit)', 119],
        ['Right Maraca (return)', 120],
        ['Shaker (return)', 122],
        ['Bell Tee (return)', 123],
        ['Golpe (thumb)', 124],
        ['Golpe (finger)', 125],
        ['Ride (middle) 2', 126],
        ['Ride (bell) 2', 127]
    ]);

    /**
     * Lists all note ornaments.
     */
    var NoteOrnament;
    (function (NoteOrnament) {
        NoteOrnament[NoteOrnament["None"] = 0] = "None";
        NoteOrnament[NoteOrnament["InvertedTurn"] = 1] = "InvertedTurn";
        NoteOrnament[NoteOrnament["Turn"] = 2] = "Turn";
        NoteOrnament[NoteOrnament["UpperMordent"] = 3] = "UpperMordent";
        NoteOrnament[NoteOrnament["LowerMordent"] = 4] = "LowerMordent";
    })(NoteOrnament || (NoteOrnament = {}));

    class NoteIdBag {
        constructor() {
            this.tieDestinationNoteId = -1;
            this.tieOriginNoteId = -1;
            this.slurDestinationNoteId = -1;
            this.slurOriginNoteId = -1;
            this.hammerPullDestinationNoteId = -1;
            this.hammerPullOriginNoteId = -1;
            this.slideTargetNoteId = -1;
            this.slideOriginNoteId = -1;
        }
    }
    /**
     * Lists all graphical sub elements within a {@link Note} which can be styled via {@link Note.style}
     */
    var NoteSubElement;
    (function (NoteSubElement) {
        /**
         * The effects and annotations shown in dedicated effect bands above the staves (e.g. vibrato).
         * The style of the first note with the effect wins.
         */
        NoteSubElement[NoteSubElement["Effects"] = 0] = "Effects";
        /**
         * The note head on the standard notation staff.
         */
        NoteSubElement[NoteSubElement["StandardNotationNoteHead"] = 1] = "StandardNotationNoteHead";
        /**
         * The accidentals on the standard notation staff.
         */
        NoteSubElement[NoteSubElement["StandardNotationAccidentals"] = 2] = "StandardNotationAccidentals";
        /**
         * The effects and annotations applied to this note on the standard notation staff (e.g. bends).
         * If effects on beats result in individual note elements shown, this color will apply.
         */
        NoteSubElement[NoteSubElement["StandardNotationEffects"] = 3] = "StandardNotationEffects";
        /**
         * The fret number on the guitar tab staff.
         */
        NoteSubElement[NoteSubElement["GuitarTabFretNumber"] = 4] = "GuitarTabFretNumber";
        /**
         * The effects and annotations applied to this note on the guitar tab staff (e.g. bends).
         * If effects on beats result in individual note elements shown, this color will apply.
         */
        NoteSubElement[NoteSubElement["GuitarTabEffects"] = 5] = "GuitarTabEffects";
        /**
         * The note head on the slash notation staff.
         */
        NoteSubElement[NoteSubElement["SlashNoteHead"] = 6] = "SlashNoteHead";
        /**
         * The effects and annotations applied to this note on the slash notation staff (e.g. dots).
         * If effects on beats result in individual note elements shown, this color will apply.
         */
        NoteSubElement[NoteSubElement["SlashEffects"] = 7] = "SlashEffects";
        /**
         * The note number on the numbered notation staff.
         */
        NoteSubElement[NoteSubElement["NumberedNumber"] = 8] = "NumberedNumber";
        /**
         * The accidentals on the numbered notation staff.
         */
        NoteSubElement[NoteSubElement["NumberedAccidentals"] = 9] = "NumberedAccidentals";
        /**
         * The effects and annotations applied to this note on the number notation staff (e.g. dots).
         * If effects on beats result in individual note elements shown, this color will apply.
         */
        NoteSubElement[NoteSubElement["NumberedEffects"] = 10] = "NumberedEffects";
    })(NoteSubElement || (NoteSubElement = {}));
    /**
     * Defines the custom styles for notes.
     * @json
     * @json_strict
     */
    class NoteStyle extends ElementStyle {
    }
    /**
     * A note is a single played sound on a fretted instrument.
     * It consists of a fret offset and a string on which the note is played on.
     * It also can be modified by a lot of different effects.
     * @cloneable
     * @json
     * @json_strict
     */
    class Note {
        constructor() {
            /**
             * Gets or sets the unique id of this note.
             * @clone_ignore
             */
            this.id = Note.GlobalNoteId++;
            /**
             * Gets or sets the zero-based index of this note within the beat.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets the accentuation of this note.
             */
            this.accentuated = AccentuationType.None;
            /**
             * Gets or sets the bend type for this note.
             */
            this.bendType = BendType.None;
            /**
             * Gets or sets the bend style for this note.
             */
            this.bendStyle = BendStyle.Default;
            /**
             * Gets or sets the note from which this note continues the bend.
             * @clone_ignore
             * @json_ignore
             */
            this.bendOrigin = null;
            /**
             * Gets or sets whether this note continues a bend from a previous note.
             */
            this.isContinuedBend = false;
            /**
             * Gets or sets a list of the points defining the bend behavior.
             * @clone_add addBendPoint
             * @json_add addBendPoint
             */
            this.bendPoints = null;
            /**
             * Gets or sets the bend point with the highest bend value.
             * @clone_ignore
             * @json_ignore
             */
            this.maxBendPoint = null;
            /**
             * Gets or sets the fret on which this note is played on the instrument.
             * 0 is the nut.
             */
            this.fret = -1;
            /**
             * Gets or sets the string number where the note is placed.
             * 1 is the lowest string on the guitar and the bottom line on the tablature.
             * It then increases the the number of strings on available on the track.
             */
            this.string = -1;
            /**
             * Gets or sets whether the string number for this note should be shown.
             */
            this.showStringNumber = false;
            /**
             * Gets or sets the octave on which this note is played.
             */
            this.octave = -1;
            /**
             * Gets or sets the tone of this note within the octave.
             */
            this.tone = -1;
            /**
             * Gets or sets the index of percussion articulation in the related `track.percussionArticulations`.
             * If the articulation is not listed in `track.percussionArticulations` the following list based on GP7 applies:
             * - 029 Ride (choke)
             * - 030 Cymbal (hit)
             * - 031 Snare (side stick)
             * - 033 Snare (side stick)
             * - 034 Snare (hit)
             * - 035 Kick (hit)
             * - 036 Kick (hit)
             * - 037 Snare (side stick)
             * - 038 Snare (hit)
             * - 039 Hand Clap (hit)
             * - 040 Snare (hit)
             * - 041 Low Floor Tom (hit)
             * - 042 Hi-Hat (closed)
             * - 043 Very Low Tom (hit)
             * - 044 Pedal Hi-Hat (hit)
             * - 045 Low Tom (hit)
             * - 046 Hi-Hat (open)
             * - 047 Mid Tom (hit)
             * - 048 High Tom (hit)
             * - 049 Crash high (hit)
             * - 050 High Floor Tom (hit)
             * - 051 Ride (middle)
             * - 052 China (hit)
             * - 053 Ride (bell)
             * - 054 Tambourine (hit)
             * - 055 Splash (hit)
             * - 056 Cowbell medium (hit)
             * - 057 Crash medium (hit)
             * - 058 Vibraslap (hit)
             * - 059 Ride (edge)
             * - 060 Hand (hit)
             * - 061 Hand (hit)
             * - 062 Conga high (mute)
             * - 063 Conga high (hit)
             * - 064 Conga low (hit)
             * - 065 Timbale high (hit)
             * - 066 Timbale low (hit)
             * - 067 Agogo high (hit)
             * - 068 Agogo tow (hit)
             * - 069 Cabasa (hit)
             * - 070 Left Maraca (hit)
             * - 071 Whistle high (hit)
             * - 072 Whistle low (hit)
             * - 073 Guiro (hit)
             * - 074 Guiro (scrap-return)
             * - 075 Claves (hit)
             * - 076 Woodblock high (hit)
             * - 077 Woodblock low (hit)
             * - 078 Cuica (mute)
             * - 079 Cuica (open)
             * - 080 Triangle (rnute)
             * - 081 Triangle (hit)
             * - 082 Shaker (hit)
             * - 083 Tinkle Bell (hat)
             * - 083 Jingle Bell (hit)
             * - 084 Bell Tree (hit)
             * - 085 Castanets (hit)
             * - 086 Surdo (hit)
             * - 087 Surdo (mute)
             * - 091 Snare (rim shot)
             * - 092 Hi-Hat (half)
             * - 093 Ride (edge)
             * - 094 Ride (choke)
             * - 095 Splash (choke)
             * - 096 China (choke)
             * - 097 Crash high (choke)
             * - 098 Crash medium (choke)
             * - 099 Cowbell low (hit)
             * - 100 Cowbell low (tip)
             * - 101 Cowbell medium (tip)
             * - 102 Cowbell high (hit)
             * - 103 Cowbell high (tip)
             * - 104 Hand (mute)
             * - 105 Hand (slap)
             * - 106 Hand (mute)
             * - 107 Hand (slap)
             * - 108 Conga low (slap)
             * - 109 Conga low (mute)
             * - 110 Conga high (slap)
             * - 111 Tambourine (return)
             * - 112 Tambourine (roll)
             * - 113 Tambourine (hand)
             * - 114 Grancassa (hit)
             * - 115 Piatti (hat)
             * - 116 Piatti (hand)
             * - 117 Cabasa (return)
             * - 118 Left Maraca (return)
             * - 119 Right Maraca (hit)
             * - 120 Right Maraca (return)
             * - 122 Shaker (return)
             * - 123 Bell Tee (return)
             * - 124 Golpe (thumb)
             * - 125 Golpe (finger)
             * - 126 Ride (middle)
             * - 127 Ride (bell)
             */
            this.percussionArticulation = -1;
            /**
             * Gets or sets whether this note is visible on the music sheet.
             */
            this.isVisible = true;
            /**
             * Gets a value indicating whether the note is left hand tapped.
             */
            this.isLeftHandTapped = false;
            /**
             * Gets or sets whether this note starts a hammeron or pulloff.
             */
            this.isHammerPullOrigin = false;
            /**
             * Gets the origin of the hammeron/pulloff of this note.
             * @clone_ignore
             * @json_ignore
             */
            this.hammerPullOrigin = null;
            /**
             * Gets the destination for the hammeron/pullof started by this note.
             * @clone_ignore
             * @json_ignore
             */
            this.hammerPullDestination = null;
            /**
             * Gets or sets whether this note finishes a slur.
             */
            this.isSlurDestination = false;
            /**
             * Gets or sets the note where the slur of this note starts.
             * @clone_ignore
             * @json_ignore
             */
            this.slurOrigin = null;
            /**
             * Gets or sets the note where the slur of this note ends.
             * @clone_ignore
             * @json_ignore
             */
            this.slurDestination = null;
            /**
             * Gets or sets the harmonic type applied to this note.
             */
            this.harmonicType = HarmonicType.None;
            /**
             * Gets or sets the value defining the harmonic pitch.
             */
            this.harmonicValue = 0;
            /**
             * Gets or sets whether the note is a ghost note and shown in parenthesis. Also this will make the note a bit more silent.
             */
            this.isGhost = false;
            /**
             * Gets or sets whether this note has a let-ring effect.
             */
            this.isLetRing = false;
            /**
             * Gets or sets the destination note for the let-ring effect.
             * @clone_ignore
             * @json_ignore
             */
            this.letRingDestination = null;
            /**
             * Gets or sets whether this note has a palm-mute effect.
             */
            this.isPalmMute = false;
            /**
             * Gets or sets the destination note for the palm-mute effect.
             * @clone_ignore
             * @json_ignore
             */
            this.palmMuteDestination = null;
            /**
             * Gets or sets whether the note is shown and played as dead note.
             */
            this.isDead = false;
            /**
             * Gets or sets whether the note is played as staccato.
             */
            this.isStaccato = false;
            /**
             * Gets or sets the slide-in type this note is played with.
             */
            this.slideInType = SlideInType.None;
            /**
             * Gets or sets the slide-out type this note is played with.
             */
            this.slideOutType = SlideOutType.None;
            /**
             * Gets or sets the target note for several slide types.
             * @clone_ignore
             * @json_ignore
             */
            this.slideTarget = null;
            /**
             * Gets or sets the source note for several slide types.
             * @clone_ignore
             * @json_ignore
             */
            this.slideOrigin = null;
            /**
             * Gets or sets whether a vibrato is played on the note.
             */
            this.vibrato = VibratoType.None;
            /**
             * Gets the origin of the tied if this note is tied.
             * @clone_ignore
             * @json_ignore
             */
            this.tieOrigin = null;
            /**
             * Gets the desination of the tie.
             * @clone_ignore
             * @json_ignore
             */
            this.tieDestination = null;
            /**
             * Gets or sets whether this note is ends a tied note.
             */
            this.isTieDestination = false;
            /**
             * Gets or sets the fingers used for this note on the left hand.
             */
            this.leftHandFinger = Fingers.Unknown;
            /**
             * Gets or sets the fingers used for this note on the right hand.
             */
            this.rightHandFinger = Fingers.Unknown;
            /**
             * Gets or sets the target note value for the trill effect.
             */
            this.trillValue = -1;
            /**
             * Gets or sets the speed of the trill effect.
             */
            this.trillSpeed = Duration.ThirtySecond;
            /**
             * Gets or sets the percentual duration of the note relative to the overall beat duration.
             */
            this.durationPercent = 1;
            /**
             * Gets or sets how accidetnals for this note should  be handled.
             */
            this.accidentalMode = NoteAccidentalMode.Default;
            /**
             * Gets or sets the dynamics for this note.
             */
            this.dynamics = DynamicValue.F;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.isEffectSlurOrigin = false;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.hasEffectSlur = false;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.effectSlurOrigin = null;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.effectSlurDestination = null;
            /**
             * The ornament applied on the note.
             */
            this.ornament = NoteOrnament.None;
            this._noteIdBag = null;
        }
        /**
         * @internal
         */
        static resetIds() {
            Note.GlobalNoteId = 0;
        }
        get hasBend() {
            return this.bendPoints !== null && this.bendType !== BendType.None;
        }
        get isStringed() {
            return this.string >= 0;
        }
        get isPiano() {
            return !this.isStringed && this.octave >= 0 && this.tone >= 0;
        }
        get isPercussion() {
            return !this.isStringed && this.percussionArticulation >= 0;
        }
        /**
         * Gets or sets the percusson element.
         * @deprecated
         */
        get element() {
            return this.isPercussion ? PercussionMapper.getElementAndVariation(this)[0] : -1;
        }
        /**
         * Gets or sets the variation of this note.
         * @deprecated
         */
        get variation() {
            return this.isPercussion ? PercussionMapper.getElementAndVariation(this)[1] : -1;
        }
        get isHammerPullDestination() {
            return !!this.hammerPullOrigin;
        }
        get isSlurOrigin() {
            return !!this.slurDestination;
        }
        get isHarmonic() {
            return this.harmonicType !== HarmonicType.None;
        }
        get isTieOrigin() {
            return this.tieDestination !== null;
        }
        /**
         * Gets or sets whether this note has fingering defined.
         */
        get isFingering() {
            return this.leftHandFinger !== Fingers.Unknown || this.rightHandFinger !== Fingers.Unknown;
        }
        get trillFret() {
            return this.trillValue - this.stringTuning;
        }
        get isTrill() {
            return this.trillValue >= 0;
        }
        get isEffectSlurDestination() {
            return !!this.effectSlurOrigin;
        }
        get stringTuning() {
            return this.beat.voice.bar.staff.capo + Note.getStringTuning(this.beat.voice.bar.staff, this.string);
        }
        static getStringTuning(staff, noteString) {
            if (staff.tuning.length > 0) {
                return staff.tuning[staff.tuning.length - (noteString - 1) - 1];
            }
            return 0;
        }
        get realValue() {
            return this.calculateRealValue(true, true);
        }
        get realValueWithoutHarmonic() {
            return this.calculateRealValue(true, false);
        }
        /**
         * Calculates the real note value of this note as midi key respecting the given options.
         * @param applyTranspositionPitch Whether or not to apply the transposition pitch of the current staff.
         * @param applyHarmonic Whether or not to apply harmonic pitches to the note.
         * @returns The calculated note value as midi key.
         */
        calculateRealValue(applyTranspositionPitch, applyHarmonic) {
            const transpositionPitch = applyTranspositionPitch ? this.beat.voice.bar.staff.transpositionPitch : 0;
            if (applyHarmonic) {
                let realValue = this.calculateRealValue(applyTranspositionPitch, false);
                if (this.isStringed) {
                    if (this.harmonicType === HarmonicType.Natural) {
                        realValue = this.harmonicPitch + this.stringTuning - transpositionPitch;
                    }
                    else {
                        realValue += this.harmonicPitch;
                    }
                }
                return realValue;
            }
            if (this.isPercussion) {
                return this.percussionArticulation;
            }
            if (this.isStringed) {
                return this.fret + this.stringTuning - transpositionPitch;
            }
            if (this.isPiano) {
                return this.octave * 12 + this.tone - transpositionPitch;
            }
            return 0;
        }
        get harmonicPitch() {
            if (this.harmonicType === HarmonicType.None || !this.isStringed) {
                return 0;
            }
            const value = this.harmonicValue;
            // add semitones to reach corresponding harmonic frets
            if (ModelUtils.isAlmostEqualTo(value, 2.4)) {
                return 36;
            }
            if (ModelUtils.isAlmostEqualTo(value, 2.7)) {
                // Fret 3 2nd octave + minor seventh
                return 34;
            }
            if (value < 3) {
                // no natural harmonics below fret 3
                return 0;
            }
            if (value <= 3.5) {
                // Fret 3 2nd octave + fifth
                return 31;
            }
            if (value <= 4) {
                return 28;
            }
            if (value <= 5) {
                return 24;
            }
            if (value <= 6) {
                return 34;
            }
            if (value <= 7) {
                return 19;
            }
            if (value <= 8.5) {
                return 36;
            }
            if (value <= 9) {
                return 28;
            }
            if (value <= 10) {
                return 34;
            }
            if (value <= 11) {
                return 0;
            }
            if (value <= 12) {
                return 12;
            }
            if (value < 14) {
                // fret 13,14 stay
                return 0;
            }
            if (value <= 15) {
                return 34;
            }
            if (value <= 16) {
                return 28;
            }
            if (value <= 17) {
                return 36;
            }
            if (value <= 18) {
                return 0;
            }
            if (value <= 19) {
                return 19;
            }
            if (value <= 21) {
                //  20,21 stay
                return 0;
            }
            if (value <= 22) {
                return 36;
            }
            if (value <= 24) {
                return 24;
            }
            return 0;
        }
        get initialBendValue() {
            if (this.hasBend) {
                return Math.floor(this.bendPoints[0].value / 2);
            }
            if (this.bendOrigin) {
                return Math.floor(this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value / 2);
            }
            if (this.isTieDestination && this.tieOrigin.bendOrigin) {
                return Math.floor(this.tieOrigin.bendOrigin.bendPoints[this.tieOrigin.bendOrigin.bendPoints.length - 1].value / 2);
            }
            if (this.beat.hasWhammyBar) {
                return Math.floor(this.beat.whammyBarPoints[0].value / 2);
            }
            if (this.beat.isContinuedWhammy) {
                return Math.floor(this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value / 2);
            }
            return 0;
        }
        get displayValue() {
            return this.displayValueWithoutBend + this.initialBendValue;
        }
        get displayValueWithoutBend() {
            let noteValue = this.realValue;
            if (this.harmonicType !== HarmonicType.Natural && this.harmonicType !== HarmonicType.None) {
                noteValue -= this.harmonicPitch;
            }
            switch (this.beat.ottava) {
                case Ottavia._15ma:
                    noteValue -= 24;
                    break;
                case Ottavia._8va:
                    noteValue -= 12;
                    break;
                case Ottavia.Regular:
                    break;
                case Ottavia._8vb:
                    noteValue += 12;
                    break;
                case Ottavia._15mb:
                    noteValue += 24;
                    break;
            }
            switch (this.beat.voice.bar.clefOttava) {
                case Ottavia._15ma:
                    noteValue -= 24;
                    break;
                case Ottavia._8va:
                    noteValue -= 12;
                    break;
                case Ottavia.Regular:
                    break;
                case Ottavia._8vb:
                    noteValue += 12;
                    break;
                case Ottavia._15mb:
                    noteValue += 24;
                    break;
            }
            return noteValue - this.beat.voice.bar.staff.displayTranspositionPitch;
        }
        get hasQuarterToneOffset() {
            if (this.hasBend) {
                return this.bendPoints[0].value % 2 !== 0;
            }
            if (this.bendOrigin) {
                return this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value % 2 !== 0;
            }
            if (this.beat.hasWhammyBar) {
                return this.beat.whammyBarPoints[0].value % 2 !== 0;
            }
            if (this.beat.isContinuedWhammy) {
                return (this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value %
                    2 !==
                    0);
            }
            return false;
        }
        addBendPoint(point) {
            let points = this.bendPoints;
            if (points === null) {
                points = [];
                this.bendPoints = points;
            }
            points.push(point);
            if (!this.maxBendPoint || point.value > this.maxBendPoint.value) {
                this.maxBendPoint = point;
            }
            if (this.bendType === BendType.None) {
                this.bendType = BendType.Custom;
            }
        }
        finish(settings, sharedDataBag = null) {
            const nextNoteOnLine = new Lazy(() => Note.nextNoteOnSameLine(this));
            const isSongBook = settings && settings.notation.notationMode === exports.NotationMode.SongBook;
            // connect ties
            if (this.isTieDestination) {
                this.chain(sharedDataBag);
                // implicit let ring
                if (isSongBook && this.tieOrigin && this.tieOrigin.isLetRing) {
                    this.isLetRing = true;
                }
            }
            // connect letring
            if (this.isLetRing) {
                if (!nextNoteOnLine.value || !nextNoteOnLine.value.isLetRing) {
                    this.letRingDestination = this;
                }
                else {
                    this.letRingDestination = nextNoteOnLine.value;
                }
                if (isSongBook && this.isTieDestination && !this.tieOrigin.hasBend) {
                    this.isVisible = false;
                }
            }
            // connect palmmute
            if (this.isPalmMute) {
                if (!nextNoteOnLine.value || !nextNoteOnLine.value.isPalmMute) {
                    this.palmMuteDestination = this;
                }
                else {
                    this.palmMuteDestination = nextNoteOnLine.value;
                }
            }
            // set hammeron/pulloffs
            if (this.isHammerPullOrigin) {
                const hammerPullDestination = Note.findHammerPullDestination(this);
                if (!hammerPullDestination) {
                    this.isHammerPullOrigin = false;
                }
                else {
                    this.hammerPullDestination = hammerPullDestination;
                    hammerPullDestination.hammerPullOrigin = this;
                }
            }
            // set slides
            switch (this.slideOutType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    if (!this.slideTarget) {
                        this.slideTarget = nextNoteOnLine.value;
                    }
                    if (!this.slideTarget) {
                        this.slideOutType = SlideOutType.None;
                    }
                    else {
                        this.slideTarget.slideOrigin = this;
                    }
                    break;
            }
            let effectSlurDestination = null;
            if (this.isHammerPullOrigin && this.hammerPullDestination) {
                effectSlurDestination = this.hammerPullDestination;
            }
            else if (this.slideOutType === SlideOutType.Legato && this.slideTarget) {
                effectSlurDestination = this.slideTarget;
            }
            if (effectSlurDestination) {
                this.hasEffectSlur = true;
                if (this.effectSlurOrigin && this.beat.pickStroke === PickStroke.None) {
                    this.effectSlurOrigin.effectSlurDestination = effectSlurDestination;
                    this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                    this.effectSlurOrigin = null;
                }
                else {
                    this.isEffectSlurOrigin = true;
                    this.effectSlurDestination = effectSlurDestination;
                    this.effectSlurDestination.effectSlurOrigin = this;
                }
            }
            // try to detect what kind of bend was used and cleans unneeded points if required
            // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all bends
            const points = this.bendPoints;
            const hasBend = points != null && points.length > 0;
            if (hasBend) {
                const isContinuedBend = this.isTieDestination && this.tieOrigin.hasBend;
                this.isContinuedBend = isContinuedBend;
            }
            else {
                this.bendType = BendType.None;
            }
            if (hasBend && this.bendType === BendType.Custom) {
                if (points.length === 4) {
                    const origin = points[0];
                    const middle1 = points[1];
                    const middle2 = points[2];
                    const destination = points[3];
                    // the middle points are used for holds, anything else is a new feature we do not support yet
                    if (middle1.value === middle2.value) {
                        // bend higher?
                        if (destination.value > origin.value) {
                            if (middle1.value > destination.value) {
                                this.bendType = BendType.BendRelease;
                            }
                            else if (!this.isContinuedBend && origin.value > 0) {
                                this.bendType = BendType.PrebendBend;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.Bend;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                        }
                        else if (destination.value < origin.value) {
                            // origin must be > 0 otherwise it's no release, we cannot bend negative
                            if (this.isContinuedBend) {
                                this.bendType = BendType.Release;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.PrebendRelease;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                        }
                        else {
                            if (middle1.value > origin.value) {
                                this.bendType = BendType.BendRelease;
                            }
                            else if (origin.value > 0 && !this.isContinuedBend) {
                                this.bendType = BendType.Prebend;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.Hold;
                                points.splice(2, 1);
                                points.splice(1, 1);
                            }
                        }
                    }
                    else {
                        Logger.warning('Model', 'Unsupported bend type detected, fallback to custom', null);
                    }
                }
                else if (points.length === 2) {
                    const origin = points[0];
                    const destination = points[1];
                    // bend higher?
                    if (destination.value > origin.value) {
                        if (!this.isContinuedBend && origin.value > 0) {
                            this.bendType = BendType.PrebendBend;
                        }
                        else {
                            this.bendType = BendType.Bend;
                        }
                    }
                    else if (destination.value < origin.value) {
                        // origin must be > 0 otherwise it's no release, we cannot bend negative
                        if (this.isContinuedBend) {
                            this.bendType = BendType.Release;
                        }
                        else {
                            this.bendType = BendType.PrebendRelease;
                        }
                    }
                    else {
                        if (origin.value > 0 && !this.isContinuedBend) {
                            this.bendType = BendType.Prebend;
                        }
                        else {
                            this.bendType = BendType.Hold;
                        }
                    }
                }
            }
            // initial bend pitch offsets and forced accidentals don't play well together
            // we reset it
            if (this.initialBendValue > 0) {
                this.accidentalMode = NoteAccidentalMode.Default;
            }
        }
        static nextNoteOnSameLine(note) {
            let nextBeat = note.beat.nextBeat;
            // keep searching in same bar
            while (nextBeat && nextBeat.voice.bar.index <= note.beat.voice.bar.index + Note.MaxOffsetForSameLineSearch) {
                const noteOnString = nextBeat.getNoteOnString(note.string);
                if (noteOnString) {
                    return noteOnString;
                }
                nextBeat = nextBeat.nextBeat;
            }
            return null;
        }
        static findHammerPullDestination(note) {
            // For Hammer-Pull destinations we have 2 potential candidates
            // 1. A note on the same string
            // 2. A note on a different string, but with a left-hand-tapping applied
            // for the second case we have a special logic to search for notes:
            // 1. We first search on lower strings, then on higher strings
            // 2. If we find a note with a left-hand-tap applied it becomes the target
            // 3. If we find a note without a left-hand-tap we stop searching in this direction
            let nextBeat = note.beat.nextBeat;
            // keep searching in same bar
            while (nextBeat && nextBeat.voice.bar.index <= note.beat.voice.bar.index + Note.MaxOffsetForSameLineSearch) {
                // 1. same string first
                let noteOnString = nextBeat.getNoteOnString(note.string);
                if (noteOnString) {
                    return noteOnString;
                }
                // 2. search toward lower strings
                for (let str = note.string; str > 0; str--) {
                    noteOnString = nextBeat.getNoteOnString(str);
                    if (noteOnString) {
                        if (noteOnString.isLeftHandTapped) {
                            return noteOnString;
                        }
                        break;
                    }
                }
                // 3. search toward higher strings
                for (let str = note.string; str <= note.beat.voice.bar.staff.tuning.length; str++) {
                    noteOnString = nextBeat.getNoteOnString(str);
                    if (noteOnString) {
                        if (noteOnString.isLeftHandTapped) {
                            return noteOnString;
                        }
                        break;
                    }
                }
                // nothing found, search on next beat
                nextBeat = nextBeat.nextBeat;
            }
            return null;
        }
        static findTieOrigin(note) {
            let previousBeat = note.beat.previousBeat;
            // keep searching in same bar
            while (previousBeat &&
                previousBeat.voice.bar.index >= note.beat.voice.bar.index - Note.MaxOffsetForSameLineSearch) {
                if (note.isStringed) {
                    const noteOnString = previousBeat.getNoteOnString(note.string);
                    if (noteOnString) {
                        return noteOnString;
                    }
                }
                else {
                    if (note.octave === -1 && note.tone === -1) {
                        // if the note has no value (e.g. alphaTex dash tie), we try to find a matching
                        // note on the previous beat by index.
                        if (note.index < previousBeat.notes.length) {
                            return previousBeat.notes[note.index];
                        }
                    }
                    else {
                        const noteWithValue = previousBeat.getNoteWithRealValue(note.realValue);
                        if (noteWithValue) {
                            return noteWithValue;
                        }
                    }
                }
                previousBeat = previousBeat.previousBeat;
            }
            return null;
        }
        chain(sharedDataBag = null) {
            // mainly for backwards compat in case we reach this code from somewhere outside.
            if (sharedDataBag === null) {
                return;
            }
            // if we have some IDs from a serialization flow,
            // we need to lookup/register the notes correctly
            if (this._noteIdBag !== null) {
                // get or create lookup
                let noteIdLookup;
                if (sharedDataBag.has(Note.NoteIdLookupKey)) {
                    noteIdLookup = sharedDataBag.get(Note.NoteIdLookupKey);
                }
                else {
                    noteIdLookup = new Map();
                    sharedDataBag.set(Note.NoteIdLookupKey, noteIdLookup);
                }
                // if this note is a source note for any effect, remember it for later
                // the destination note will look it up for linking
                if (this._noteIdBag.hammerPullDestinationNoteId !== -1 ||
                    this._noteIdBag.tieDestinationNoteId !== -1 ||
                    this._noteIdBag.slurDestinationNoteId !== -1 ||
                    this._noteIdBag.slideTargetNoteId !== -1) {
                    noteIdLookup.set(this.id, this);
                }
                // on any effect destiniation, lookup the origin which should already be
                // registered
                if (this._noteIdBag.hammerPullOriginNoteId !== -1) {
                    this.hammerPullOrigin = noteIdLookup.get(this._noteIdBag.hammerPullOriginNoteId);
                    this.hammerPullOrigin.hammerPullDestination = this;
                }
                if (this._noteIdBag.tieOriginNoteId !== -1) {
                    this.tieOrigin = noteIdLookup.get(this._noteIdBag.tieOriginNoteId);
                    this.tieOrigin.tieDestination = this;
                }
                if (this._noteIdBag.slurOriginNoteId !== -1) {
                    this.slurOrigin = noteIdLookup.get(this._noteIdBag.slurOriginNoteId);
                    this.slurOrigin.slurDestination = this;
                }
                if (this._noteIdBag.slideOriginNoteId !== -1) {
                    this.slideOrigin = noteIdLookup.get(this._noteIdBag.slideOriginNoteId);
                    this.slideOrigin.slideTarget = this;
                }
                this._noteIdBag = null; // not needed anymore
            }
            else {
                // no tie destination at all?
                if (!this.isTieDestination && this.tieOrigin === null) {
                    return;
                }
                const tieOrigin = this.tieOrigin ?? Note.findTieOrigin(this);
                if (!tieOrigin) {
                    this.isTieDestination = false;
                }
                else {
                    tieOrigin.tieDestination = this;
                    this.tieOrigin = tieOrigin;
                    this.fret = tieOrigin.fret;
                    this.octave = tieOrigin.octave;
                    this.tone = tieOrigin.tone;
                    if (tieOrigin.hasBend) {
                        this.bendOrigin = this.tieOrigin;
                    }
                }
            }
        }
        /**
         * @internal
         */
        toJson(o) {
            // inject linked note ids into JSON
            if (this.tieDestination !== null) {
                o.set('tiedestinationnoteid', this.tieDestination.id);
            }
            if (this.tieOrigin !== null) {
                o.set('tieoriginnoteid', this.tieOrigin.id);
            }
            if (this.slurDestination !== null) {
                o.set('slurdestinationnoteid', this.slurDestination.id);
            }
            if (this.slurOrigin !== null) {
                o.set('sluroriginnoteid', this.slurOrigin.id);
            }
            if (this.hammerPullOrigin !== null) {
                o.set('hammerpulloriginnoteid', this.hammerPullOrigin.id);
            }
            if (this.hammerPullDestination !== null) {
                o.set('hammerpulldestinationnoteid', this.hammerPullDestination.id);
            }
            if (this.slideTarget !== null) {
                o.set('slidetargetnoteid', this.slideTarget.id);
            }
            if (this.slideOrigin !== null) {
                o.set('slideoriginnoteid', this.slideOrigin.id);
            }
        }
        /**
         * @internal
         */
        setProperty(property, v) {
            switch (property) {
                case 'tiedestinationnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.tieDestinationNoteId = v;
                    return true;
                case 'tieoriginnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.tieOriginNoteId = v;
                    return true;
                case 'slurdestinationnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.slurDestinationNoteId = v;
                    return true;
                case 'sluroriginnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.slurOriginNoteId = v;
                    return true;
                case 'hammerpulloriginnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.hammerPullOriginNoteId = v;
                    return true;
                case 'hammerpulldestinationnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.hammerPullDestinationNoteId = v;
                    return true;
                case 'slidetargetnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.slideTargetNoteId = v;
                    return true;
                case 'slideoriginnoteid':
                    if (this._noteIdBag == null) {
                        this._noteIdBag = new NoteIdBag();
                    }
                    this._noteIdBag.slideOriginNoteId = v;
                    return true;
            }
            return false;
        }
    }
    /**
     * @internal
     */
    Note.GlobalNoteId = 0;
    Note.MaxOffsetForSameLineSearch = 3;
    Note.NoteIdLookupKey = 'NoteIdLookup';

    /**
     * Represents a list of beats that are grouped within the same tuplet.
     */
    class TupletGroup {
        /**
         * Initializes a new instance of the {@link TupletGroup} class.
         * @param voice The voice this group belongs to.
         */
        constructor(voice) {
            this._isEqualLengthTuplet = true;
            this.totalDuration = 0;
            /**
             * Gets or sets the list of beats contained in this group.
             */
            this.beats = [];
            /**
             * Gets a value indicating whether the tuplet group is fully filled.
             */
            this.isFull = false;
            this.voice = voice;
        }
        check(beat) {
            if (this.beats.length === 0) {
                // accept first beat
                this.beats.push(beat);
                this.totalDuration += beat.playbackDuration;
                return true;
            }
            if (beat.graceType !== GraceType.None) {
                // grace notes do not break tuplet group, but also do not contribute to them.
                return true;
            }
            if (beat.voice !== this.voice ||
                this.isFull ||
                beat.tupletNumerator !== this.beats[0].tupletNumerator ||
                beat.tupletDenominator !== this.beats[0].tupletDenominator) {
                // only same tuplets are potentially accepted
                return false;
            }
            // TBH: I do not really know how the 100% tuplet grouping of Guitar Pro might work
            // it sometimes has really strange rules where notes filling 3 quarters, are considered a full 3:2 tuplet
            // in alphaTab we have now 2 rules where we consider a tuplet full:
            // 1. if all beats have the same length, the tuplet must contain N notes of an N:M tuplet
            // 2. if we have mixed beats, we check if the current set of beats, matches a N:M tuplet
            //    by checking all potential note durations.
            // this logic is very likely not 100% correct but for most cases the tuplets
            // appeared correct.
            if (beat.playbackDuration !== this.beats[0].playbackDuration) {
                this._isEqualLengthTuplet = false;
            }
            this.beats.push(beat);
            this.totalDuration += beat.playbackDuration;
            if (this._isEqualLengthTuplet) {
                if (this.beats.length === this.beats[0].tupletNumerator) {
                    this.isFull = true;
                }
            }
            else {
                const factor = (this.beats[0].tupletNumerator / this.beats[0].tupletDenominator) | 0;
                for (const potentialMatch of TupletGroup.AllTicks) {
                    if (this.totalDuration === potentialMatch * factor) {
                        this.isFull = true;
                        break;
                    }
                }
            }
            return true;
        }
    }
    TupletGroup.HalfTicks = 1920;
    TupletGroup.QuarterTicks = 960;
    TupletGroup.EighthTicks = 480;
    TupletGroup.SixteenthTicks = 240;
    TupletGroup.ThirtySecondTicks = 120;
    TupletGroup.SixtyFourthTicks = 60;
    TupletGroup.OneHundredTwentyEighthTicks = 30;
    TupletGroup.TwoHundredFiftySixthTicks = 15;
    TupletGroup.AllTicks = [
        TupletGroup.HalfTicks,
        TupletGroup.QuarterTicks,
        TupletGroup.EighthTicks,
        TupletGroup.SixteenthTicks,
        TupletGroup.ThirtySecondTicks,
        TupletGroup.SixtyFourthTicks,
        TupletGroup.OneHundredTwentyEighthTicks,
        TupletGroup.TwoHundredFiftySixthTicks
    ];

    /**
     * Lists all types of whammy bars
     */
    var WhammyType;
    (function (WhammyType) {
        /**
         * No whammy at all
         */
        WhammyType[WhammyType["None"] = 0] = "None";
        /**
         * Individual points define the whammy in a flexible manner.
         * This system was mainly used in Guitar Pro 3-5
         */
        WhammyType[WhammyType["Custom"] = 1] = "Custom";
        /**
         * Simple dive to a lower or higher note.
         */
        WhammyType[WhammyType["Dive"] = 2] = "Dive";
        /**
         * A dive to a lower or higher note and releasing it back to normal.
         */
        WhammyType[WhammyType["Dip"] = 3] = "Dip";
        /**
         * Continue to hold the whammy at the position from a previous whammy.
         */
        WhammyType[WhammyType["Hold"] = 4] = "Hold";
        /**
         * Dive to a lower or higher note before playing it.
         */
        WhammyType[WhammyType["Predive"] = 5] = "Predive";
        /**
         * Dive to a lower or higher note before playing it, then change to another
         * note.
         */
        WhammyType[WhammyType["PrediveDive"] = 6] = "PrediveDive";
    })(WhammyType || (WhammyType = {}));

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class BendPointCloner {
        static clone(original) {
            const clone = new BendPoint();
            clone.offset = original.offset;
            clone.value = original.value;
            return clone;
        }
    }

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class NoteCloner {
        static clone(original) {
            const clone = new Note();
            clone.index = original.index;
            clone.accentuated = original.accentuated;
            clone.bendType = original.bendType;
            clone.bendStyle = original.bendStyle;
            clone.isContinuedBend = original.isContinuedBend;
            if (original.bendPoints) {
                clone.bendPoints = [];
                for (const i of original.bendPoints) {
                    clone.addBendPoint(BendPointCloner.clone(i));
                }
            }
            clone.fret = original.fret;
            clone.string = original.string;
            clone.showStringNumber = original.showStringNumber;
            clone.octave = original.octave;
            clone.tone = original.tone;
            clone.percussionArticulation = original.percussionArticulation;
            clone.isVisible = original.isVisible;
            clone.isLeftHandTapped = original.isLeftHandTapped;
            clone.isHammerPullOrigin = original.isHammerPullOrigin;
            clone.isSlurDestination = original.isSlurDestination;
            clone.harmonicType = original.harmonicType;
            clone.harmonicValue = original.harmonicValue;
            clone.isGhost = original.isGhost;
            clone.isLetRing = original.isLetRing;
            clone.isPalmMute = original.isPalmMute;
            clone.isDead = original.isDead;
            clone.isStaccato = original.isStaccato;
            clone.slideInType = original.slideInType;
            clone.slideOutType = original.slideOutType;
            clone.vibrato = original.vibrato;
            clone.isTieDestination = original.isTieDestination;
            clone.leftHandFinger = original.leftHandFinger;
            clone.rightHandFinger = original.rightHandFinger;
            clone.trillValue = original.trillValue;
            clone.trillSpeed = original.trillSpeed;
            clone.durationPercent = original.durationPercent;
            clone.accidentalMode = original.accidentalMode;
            clone.dynamics = original.dynamics;
            clone.ornament = original.ornament;
            return clone;
        }
    }

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class SyncPointDataCloner {
        static clone(original) {
            const clone = new SyncPointData();
            clone.barOccurence = original.barOccurence;
            clone.millisecondOffset = original.millisecondOffset;
            return clone;
        }
    }

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class AutomationCloner {
        static clone(original) {
            const clone = new Automation();
            clone.isLinear = original.isLinear;
            clone.type = original.type;
            clone.value = original.value;
            clone.syncPointValue = original.syncPointValue ? SyncPointDataCloner.clone(original.syncPointValue) : undefined;
            clone.ratioPosition = original.ratioPosition;
            clone.text = original.text;
            return clone;
        }
    }

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class BeatCloner {
        static clone(original) {
            const clone = new Beat();
            clone.index = original.index;
            clone.notes = [];
            for (const i of original.notes) {
                clone.addNote(NoteCloner.clone(i));
            }
            clone.isEmpty = original.isEmpty;
            clone.whammyStyle = original.whammyStyle;
            clone.ottava = original.ottava;
            clone.isLegatoOrigin = original.isLegatoOrigin;
            clone.duration = original.duration;
            clone.isLetRing = original.isLetRing;
            clone.isPalmMute = original.isPalmMute;
            clone.automations = [];
            for (const i of original.automations) {
                clone.automations.push(AutomationCloner.clone(i));
            }
            clone.dots = original.dots;
            clone.fade = original.fade;
            clone.lyrics = original.lyrics ? original.lyrics.slice() : null;
            clone.pop = original.pop;
            clone.slap = original.slap;
            clone.tap = original.tap;
            clone.text = original.text;
            clone.slashed = original.slashed;
            clone.deadSlapped = original.deadSlapped;
            clone.brushType = original.brushType;
            clone.brushDuration = original.brushDuration;
            clone.tupletDenominator = original.tupletDenominator;
            clone.tupletNumerator = original.tupletNumerator;
            clone.isContinuedWhammy = original.isContinuedWhammy;
            clone.whammyBarType = original.whammyBarType;
            if (original.whammyBarPoints) {
                clone.whammyBarPoints = [];
                for (const i of original.whammyBarPoints) {
                    clone.addWhammyBarPoint(BendPointCloner.clone(i));
                }
            }
            clone.vibrato = original.vibrato;
            clone.chordId = original.chordId;
            clone.graceType = original.graceType;
            clone.pickStroke = original.pickStroke;
            clone.tremoloSpeed = original.tremoloSpeed;
            clone.crescendo = original.crescendo;
            clone.displayStart = original.displayStart;
            clone.playbackStart = original.playbackStart;
            clone.displayDuration = original.displayDuration;
            clone.playbackDuration = original.playbackDuration;
            clone.overrideDisplayDuration = original.overrideDisplayDuration;
            clone.golpe = original.golpe;
            clone.dynamics = original.dynamics;
            clone.invertBeamDirection = original.invertBeamDirection;
            clone.preferredBeamDirection = original.preferredBeamDirection;
            clone.isEffectSlurOrigin = original.isEffectSlurOrigin;
            clone.beamingMode = original.beamingMode;
            clone.wahPedal = original.wahPedal;
            clone.barreFret = original.barreFret;
            clone.barreShape = original.barreShape;
            clone.rasgueado = original.rasgueado;
            clone.showTimer = original.showTimer;
            clone.timer = original.timer;
            return clone;
        }
    }

    /**
     * Lists all golpe types.
     */
    var GolpeType;
    (function (GolpeType) {
        /**
         * No Golpe played.
         */
        GolpeType[GolpeType["None"] = 0] = "None";
        /**
         * Play a golpe with the thumb.
         */
        GolpeType[GolpeType["Thumb"] = 1] = "Thumb";
        /**
         * Play a golpe with a finger.
         */
        GolpeType[GolpeType["Finger"] = 2] = "Finger";
    })(GolpeType || (GolpeType = {}));

    /**
     * Lists the different fade types.
     */
    var FadeType;
    (function (FadeType) {
        /**
         * No fading
         */
        FadeType[FadeType["None"] = 0] = "None";
        /**
         * Fade-in the sound.
         */
        FadeType[FadeType["FadeIn"] = 1] = "FadeIn";
        /**
         * Fade-out the sound.
         */
        FadeType[FadeType["FadeOut"] = 2] = "FadeOut";
        /**
         * Fade-in and then fade-out the sound.
         */
        FadeType[FadeType["VolumeSwell"] = 3] = "VolumeSwell";
    })(FadeType || (FadeType = {}));

    /**
     * Lists all wah pedal modes.
     */
    var WahPedal;
    (function (WahPedal) {
        WahPedal[WahPedal["None"] = 0] = "None";
        WahPedal[WahPedal["Open"] = 1] = "Open";
        WahPedal[WahPedal["Closed"] = 2] = "Closed";
    })(WahPedal || (WahPedal = {}));

    /**
     * Lists all beat barré types.
     */
    var BarreShape;
    (function (BarreShape) {
        /**
         * No Barré
         */
        BarreShape[BarreShape["None"] = 0] = "None";
        /**
         * Full Barré (play all strings)
         */
        BarreShape[BarreShape["Full"] = 1] = "Full";
        /**
         * 1/2 Barré (play only half the strings)
         */
        BarreShape[BarreShape["Half"] = 2] = "Half";
    })(BarreShape || (BarreShape = {}));

    /**
     * Lists all Rasgueado types.
     */
    var Rasgueado;
    (function (Rasgueado) {
        Rasgueado[Rasgueado["None"] = 0] = "None";
        Rasgueado[Rasgueado["Ii"] = 1] = "Ii";
        Rasgueado[Rasgueado["Mi"] = 2] = "Mi";
        Rasgueado[Rasgueado["MiiTriplet"] = 3] = "MiiTriplet";
        Rasgueado[Rasgueado["MiiAnapaest"] = 4] = "MiiAnapaest";
        Rasgueado[Rasgueado["PmpTriplet"] = 5] = "PmpTriplet";
        Rasgueado[Rasgueado["PmpAnapaest"] = 6] = "PmpAnapaest";
        Rasgueado[Rasgueado["PeiTriplet"] = 7] = "PeiTriplet";
        Rasgueado[Rasgueado["PeiAnapaest"] = 8] = "PeiAnapaest";
        Rasgueado[Rasgueado["PaiTriplet"] = 9] = "PaiTriplet";
        Rasgueado[Rasgueado["PaiAnapaest"] = 10] = "PaiAnapaest";
        Rasgueado[Rasgueado["AmiTriplet"] = 11] = "AmiTriplet";
        Rasgueado[Rasgueado["AmiAnapaest"] = 12] = "AmiAnapaest";
        Rasgueado[Rasgueado["Ppp"] = 13] = "Ppp";
        Rasgueado[Rasgueado["Amii"] = 14] = "Amii";
        Rasgueado[Rasgueado["Amip"] = 15] = "Amip";
        Rasgueado[Rasgueado["Eami"] = 16] = "Eami";
        Rasgueado[Rasgueado["Eamii"] = 17] = "Eamii";
        Rasgueado[Rasgueado["Peami"] = 18] = "Peami";
    })(Rasgueado || (Rasgueado = {}));

    /**
     * Lists the different modes on how beaming for a beat should be done.
     */
    var BeatBeamingMode;
    (function (BeatBeamingMode) {
        /**
         * Automatic beaming based on the timing rules.
         */
        BeatBeamingMode[BeatBeamingMode["Auto"] = 0] = "Auto";
        /**
         * Force a split to the next beat.
         */
        BeatBeamingMode[BeatBeamingMode["ForceSplitToNext"] = 1] = "ForceSplitToNext";
        /**
         * Force a merge with the next beat.
         */
        BeatBeamingMode[BeatBeamingMode["ForceMergeWithNext"] = 2] = "ForceMergeWithNext";
        /**
         * Force a split to the next beat on the secondary beam.
         */
        BeatBeamingMode[BeatBeamingMode["ForceSplitOnSecondaryToNext"] = 3] = "ForceSplitOnSecondaryToNext";
    })(BeatBeamingMode || (BeatBeamingMode = {}));
    /**
     * Lists all graphical sub elements within a {@link Beat} which can be styled via {@link Beat.style}
     */
    var BeatSubElement;
    (function (BeatSubElement) {
        /**
         * The effects and annotations shown in dedicated effect bands above the staves (e.g. fermata).
         * Only applies to items which are on beat level but not any individual note level effects.
         */
        BeatSubElement[BeatSubElement["Effects"] = 0] = "Effects";
        /**
         * The stems drawn for note heads in this beat on the standard notation staff.
         */
        BeatSubElement[BeatSubElement["StandardNotationStem"] = 1] = "StandardNotationStem";
        /**
         * The flags drawn for note heads in this beat on the standard notation staff.
         */
        BeatSubElement[BeatSubElement["StandardNotationFlags"] = 2] = "StandardNotationFlags";
        /**
         * The beams drawn between this and the next beat on the standard notation staff.
         */
        BeatSubElement[BeatSubElement["StandardNotationBeams"] = 3] = "StandardNotationBeams";
        /**
         * The tuplet drawn on the standard notation staff (the first beat affects the whole tuplet if grouped).
         */
        BeatSubElement[BeatSubElement["StandardNotationTuplet"] = 4] = "StandardNotationTuplet";
        /**
         * The effects and annotations applied to this beat on the standard notation staff (e.g. brushes).
         * Only applies to items which are on beat level but not any individual note level effects.
         */
        BeatSubElement[BeatSubElement["StandardNotationEffects"] = 5] = "StandardNotationEffects";
        /**
         * The rest symbol on the standard notation staff.
         */
        BeatSubElement[BeatSubElement["StandardNotationRests"] = 6] = "StandardNotationRests";
        /**
         * The stems drawn for note heads in this beat on the guitar tab staff.
         */
        BeatSubElement[BeatSubElement["GuitarTabStem"] = 7] = "GuitarTabStem";
        /**
         * The flags drawn for note heads in this beat on the guitar tab staff.
         */
        BeatSubElement[BeatSubElement["GuitarTabFlags"] = 8] = "GuitarTabFlags";
        /**
         * The beams drawn between this and the next beat on the guitar tab staff.
         */
        BeatSubElement[BeatSubElement["GuitarTabBeams"] = 9] = "GuitarTabBeams";
        /**
         * The tuplet drawn on the guitar tab staff (the first beat affects the whole tuplet if grouped).
         */
        BeatSubElement[BeatSubElement["GuitarTabTuplet"] = 10] = "GuitarTabTuplet";
        /**
         * The effects and annotations applied to this beat on the guitar tab staff (e.g. brushes).
         * Only applies to items which are on beat level but not any individual note level effects.
         */
        BeatSubElement[BeatSubElement["GuitarTabEffects"] = 11] = "GuitarTabEffects";
        /**
         * The rest symbol on the guitar tab staff.
         */
        BeatSubElement[BeatSubElement["GuitarTabRests"] = 12] = "GuitarTabRests";
        /**
         * The stems drawn for note heads in this beat on the slash staff.
         */
        BeatSubElement[BeatSubElement["SlashStem"] = 13] = "SlashStem";
        /**
         * The flags drawn for note heads in this beat on the slash staff.
         */
        BeatSubElement[BeatSubElement["SlashFlags"] = 14] = "SlashFlags";
        /**
         * The beams drawn between this and the next beat on the slash staff.
         */
        BeatSubElement[BeatSubElement["SlashBeams"] = 15] = "SlashBeams";
        /**
         * The tuplet drawn on the slash staff (the first beat affects the whole tuplet if grouped).
         */
        BeatSubElement[BeatSubElement["SlashTuplet"] = 16] = "SlashTuplet";
        /**
         * The rest symbol on the slash staff.
         */
        BeatSubElement[BeatSubElement["SlashRests"] = 17] = "SlashRests";
        /**
         * The effects and annotations applied to this beat on the slash staff (e.g. brushes).
         * Only applies to items which are on beat level but not any individual note level effects.
         */
        BeatSubElement[BeatSubElement["SlashEffects"] = 18] = "SlashEffects";
        /**
         * The duration lines drawn for this beat on the numbered notation staff.
         */
        BeatSubElement[BeatSubElement["NumberedDuration"] = 19] = "NumberedDuration";
        /**
         * The effects and annotations applied to this beat on the numbered notation staff (e.g. brushes).
         * Only applies to items which are on beat level but not any individual note level effects.
         */
        BeatSubElement[BeatSubElement["NumberedEffects"] = 20] = "NumberedEffects";
        /**
         * The rest (0) on the numbered notation staff.
         */
        BeatSubElement[BeatSubElement["NumberedRests"] = 21] = "NumberedRests";
        /**
         * The tuplet drawn on the numbered notation staff (the first beat affects the whole tuplet if grouped).
         */
        BeatSubElement[BeatSubElement["NumberedTuplet"] = 22] = "NumberedTuplet";
    })(BeatSubElement || (BeatSubElement = {}));
    /**
     * Defines the custom styles for beats.
     * @json
     * @json_strict
     */
    class BeatStyle extends ElementStyle {
    }
    /**
     * A beat is a single block within a bar. A beat is a combination
     * of several notes played at the same time.
     * @json
     * @json_strict
     * @cloneable
     */
    class Beat {
        constructor() {
            /**
             * Gets or sets the unique id of this beat.
             * @clone_ignore
             */
            this.id = Beat._globalBeatId++;
            /**
             * Gets or sets the zero-based index of this beat within the voice.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets the previous beat within the whole song.
             * @json_ignore
             * @clone_ignore
             */
            this.previousBeat = null;
            /**
             * Gets or sets the next beat within the whole song.
             * @json_ignore
             * @clone_ignore
             */
            this.nextBeat = null;
            /**
             * Gets or sets the list of notes contained in this beat.
             * @json_add addNote
             * @clone_add addNote
             */
            this.notes = [];
            /**
             * Gets the lookup where the notes per string are registered.
             * If this staff contains string based notes this lookup allows fast access.
             * @json_ignore
             */
            this.noteStringLookup = new Map();
            /**
             * Gets the lookup where the notes per value are registered.
             * If this staff contains string based notes this lookup allows fast access.
             * @json_ignore
             */
            this.noteValueLookup = new Map();
            /**
             * Gets or sets a value indicating whether this beat is considered empty.
             */
            this.isEmpty = false;
            /**
             * Gets or sets which whammy bar style should be used for this bar.
             */
            this.whammyStyle = BendStyle.Default;
            /**
             * Gets or sets the ottava applied to this beat.
             */
            this.ottava = Ottavia.Regular;
            /**
             * Gets or sets the fermata applied to this beat.
             * @clone_ignore
             * @json_ignore
             */
            this.fermata = null;
            /**
             * Gets a value indicating whether this beat starts a legato slur.
             */
            this.isLegatoOrigin = false;
            /**
             * Gets or sets the note with the lowest pitch in this beat. Only visible notes are considered.
             * @json_ignore
             * @clone_ignore
             */
            this.minNote = null;
            /**
             * Gets or sets the note with the highest pitch in this beat. Only visible notes are considered.
             * @json_ignore
             * @clone_ignore
             */
            this.maxNote = null;
            /**
             * Gets or sets the note with the highest string number in this beat. Only visible notes are considered.
             * @json_ignore
             * @clone_ignore
             */
            this.maxStringNote = null;
            /**
             * Gets or sets the note with the lowest string number in this beat. Only visible notes are considered.
             * @json_ignore
             * @clone_ignore
             */
            this.minStringNote = null;
            /**
             * Gets or sets the duration of this beat.
             */
            this.duration = Duration.Quarter;
            /**
             * Gets or sets whether any note in this beat has a let-ring applied.
             * @json_ignore
             */
            this.isLetRing = false;
            /**
             * Gets or sets whether any note in this beat has a palm-mute paplied.
             * @json_ignore
             */
            this.isPalmMute = false;
            /**
             * Gets or sets a list of all automations on this beat.
             */
            this.automations = [];
            /**
             * Gets or sets the number of dots applied to the duration of this beat.
             */
            this.dots = 0;
            /**
             * Gets or sets a value indicating whether this beat is fade-in.
             */
            this.fade = FadeType.None;
            /**
             * Gets or sets the lyrics shown on this beat.
             */
            this.lyrics = null;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a pop-style (bass).
             */
            this.pop = false;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a slap-style (bass).
             */
            this.slap = false;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a tap-style (bass).
             */
            this.tap = false;
            /**
             * Gets or sets the text annotation shown on this beat.
             */
            this.text = null;
            /**
             * Gets or sets whether this beat should be rendered as slashed note.
             */
            this.slashed = false;
            /**
             * Whether this beat should rendered and played as "dead slapped".
             */
            this.deadSlapped = false;
            /**
             * Gets or sets the brush type applied to the notes of this beat.
             */
            this.brushType = BrushType.None;
            /**
             * Gets or sets the duration of the brush between the notes in midi ticks.
             */
            this.brushDuration = 0;
            /**
             * Gets or sets the tuplet denominator.
             */
            this.tupletDenominator = -1;
            /**
             * Gets or sets the tuplet numerator.
             */
            this.tupletNumerator = -1;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.tupletGroup = null;
            /**
             * Gets or sets whether this beat continues a whammy effect.
             */
            this.isContinuedWhammy = false;
            /**
             * Gets or sets the whammy bar style of this beat.
             */
            this.whammyBarType = WhammyType.None;
            /**
             * Gets or sets the points defining the whammy bar usage.
             * @json_add addWhammyBarPoint
             * @clone_add addWhammyBarPoint
             */
            this.whammyBarPoints = null;
            /**
             * Gets or sets the highest point with for the highest whammy bar value.
             * @json_ignore
             * @clone_ignore
             */
            this.maxWhammyPoint = null;
            /**
             * Gets or sets the highest point with for the lowest whammy bar value.
             * @json_ignore
             * @clone_ignore
             */
            this.minWhammyPoint = null;
            /**
             * Gets or sets the vibrato effect used on this beat.
             */
            this.vibrato = VibratoType.None;
            /**
             * Gets or sets the ID of the chord used on this beat.
             */
            this.chordId = null;
            /**
             * Gets or sets the grace style of this beat.
             */
            this.graceType = GraceType.None;
            /**
             * Gets or sets the grace group this beat belongs to.
             * If this beat is not a grace note, it holds the group which belongs to this beat.
             * @json_ignore
             * @clone_ignore
             */
            this.graceGroup = null;
            /**
             * Gets or sets the index of this beat within the grace group if
             * this is a grace beat.
             * @json_ignore
             * @clone_ignore
             */
            this.graceIndex = -1;
            /**
             * Gets or sets the pickstroke applied on this beat.
             */
            this.pickStroke = PickStroke.None;
            /**
             * Gets or sets the speed of the tremolo effect.
             */
            this.tremoloSpeed = null;
            /**
             * Gets or sets whether a crescendo/decrescendo is applied on this beat.
             */
            this.crescendo = CrescendoType.None;
            /**
             * The timeline position of the voice within the current bar as it is displayed. (unit: midi ticks)
             * This might differ from the actual playback time due to special grace types.
             */
            this.displayStart = 0;
            /**
             * The timeline position of the voice within the current bar as it is played. (unit: midi ticks)
             * This might differ from the actual playback time due to special grace types.
             */
            this.playbackStart = 0;
            /**
             * Gets or sets the duration that is used for the display of this beat. It defines the size/width of the beat in
             * the music sheet. (unit: midi ticks).
             */
            this.displayDuration = 0;
            /**
             * Gets or sets the duration that the note is played during the audio generation.
             */
            this.playbackDuration = 0;
            /**
             * The type of golpe to play.
             */
            this.golpe = GolpeType.None;
            /**
             * Gets or sets the dynamics applied to this beat.
             */
            this.dynamics = DynamicValue.F;
            /**
             * Gets or sets a value indicating whether the beam direction should be inverted.
             */
            this.invertBeamDirection = false;
            /**
             * Gets or sets the preferred beam direction as specified in the input source.
             */
            this.preferredBeamDirection = null;
            /**
             * @json_ignore
             */
            this.isEffectSlurOrigin = false;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.effectSlurOrigin = null;
            /**
             * @clone_ignore
             * @json_ignore
             */
            this.effectSlurDestination = null;
            /**
             * Gets or sets how the beaming should be done for this beat.
             */
            this.beamingMode = BeatBeamingMode.Auto;
            /**
             * Whether the wah pedal should be used when playing the beat.
             */
            this.wahPedal = WahPedal.None;
            /**
             * The fret of a barré being played on this beat.
             */
            this.barreFret = -1;
            /**
             * The shape how the barre should be played on this beat.
             */
            this.barreShape = BarreShape.None;
            /**
             * The Rasgueado pattern to play with this beat.
             */
            this.rasgueado = Rasgueado.None;
            /**
             * Whether to show the time when this beat is played the first time.
             * (requires that the midi for the song is generated so that times are calculated).
             * If no midi is generated the timer value might be filled from the input file (or manually).
             */
            this.showTimer = false;
            /**
             * The absolute time in milliseconds when this beat will be played the first time.
             */
            this.timer = null;
        }
        /**
         * @internal
         */
        static resetIds() {
            Beat._globalBeatId = 0;
        }
        get isLastOfVoice() {
            return this.index === this.voice.beats.length - 1;
        }
        get isLegatoDestination() {
            return !!this.previousBeat && this.previousBeat.isLegatoOrigin;
        }
        get isRest() {
            return this.isEmpty || (!this.deadSlapped && this.notes.length === 0);
        }
        /**
         * Gets a value indicating whether this beat is a full bar rest.
         */
        get isFullBarRest() {
            return this.isRest && this.voice.beats.length === 1 && this.duration === Duration.Whole;
        }
        /**
         * Gets a value indicating whether this beat is fade-in.
         * @deprecated Use `fade`
         */
        get fadeIn() {
            return this.fade === FadeType.FadeIn;
        }
        /**
         * Sets a value indicating whether this beat is fade-in.
         * @deprecated Use `fade`
         */
        set fadeIn(value) {
            this.fade = value ? FadeType.FadeIn : FadeType.None;
        }
        /**
         * Gets or sets a value indicating whether the beat is played in rasgueado style.
         */
        get hasRasgueado() {
            return this.rasgueado !== Rasgueado.None;
        }
        get hasTuplet() {
            return (!(this.tupletDenominator === -1 && this.tupletNumerator === -1) &&
                !(this.tupletDenominator === 1 && this.tupletNumerator === 1));
        }
        get hasWhammyBar() {
            return this.whammyBarPoints !== null && this.whammyBarType !== WhammyType.None;
        }
        get hasChord() {
            return !!this.chordId;
        }
        get chord() {
            return this.chordId ? this.voice.bar.staff.getChord(this.chordId) : null;
        }
        get isTremolo() {
            return !!this.tremoloSpeed;
        }
        /**
         * The calculated visual end position of this beat in midi ticks.
         */
        get displayEnd() {
            return this.displayStart + this.displayDuration;
        }
        get absoluteDisplayStart() {
            return this.voice.bar.masterBar.start + this.displayStart;
        }
        get absolutePlaybackStart() {
            return this.voice.bar.masterBar.start + this.playbackStart;
        }
        get isEffectSlurDestination() {
            return !!this.effectSlurOrigin;
        }
        /**
         * Gets a value indicating whether the beat should be played as Barré
         */
        get isBarre() {
            return this.barreShape !== BarreShape.None && this.barreFret >= 0;
        }
        addWhammyBarPoint(point) {
            let points = this.whammyBarPoints;
            if (points === null) {
                points = [];
                this.whammyBarPoints = points;
            }
            points.push(point);
            if (!this.maxWhammyPoint || point.value > this.maxWhammyPoint.value) {
                this.maxWhammyPoint = point;
            }
            if (!this.minWhammyPoint || point.value < this.minWhammyPoint.value) {
                this.minWhammyPoint = point;
            }
            if (this.whammyBarType === WhammyType.None) {
                this.whammyBarType = WhammyType.Custom;
            }
        }
        removeWhammyBarPoint(index) {
            // check index
            const points = this.whammyBarPoints;
            if (points === null || index < 0 || index >= points.length) {
                return;
            }
            // remove point
            points.splice(index, 1);
            const point = points[index];
            // update maxWhammy point if required
            if (point === this.maxWhammyPoint) {
                this.maxWhammyPoint = null;
                for (const currentPoint of points) {
                    if (!this.maxWhammyPoint || currentPoint.value > this.maxWhammyPoint.value) {
                        this.maxWhammyPoint = currentPoint;
                    }
                }
            }
            if (point === this.minWhammyPoint) {
                this.minWhammyPoint = null;
                for (const currentPoint of points) {
                    if (!this.minWhammyPoint || currentPoint.value < this.minWhammyPoint.value) {
                        this.minWhammyPoint = currentPoint;
                    }
                }
            }
        }
        addNote(note) {
            note.beat = this;
            note.index = this.notes.length;
            this.notes.push(note);
            if (note.isStringed) {
                this.noteStringLookup.set(note.string, note);
            }
        }
        removeNote(note) {
            const index = this.notes.indexOf(note);
            if (index >= 0) {
                this.notes.splice(index, 1);
                if (note.isStringed) {
                    this.noteStringLookup.delete(note.string);
                }
            }
        }
        getAutomation(type) {
            for (let i = 0, j = this.automations.length; i < j; i++) {
                const automation = this.automations[i];
                if (automation.type === type) {
                    return automation;
                }
            }
            return null;
        }
        getNoteOnString(noteString) {
            if (this.noteStringLookup.has(noteString)) {
                return this.noteStringLookup.get(noteString);
            }
            return null;
        }
        calculateDuration() {
            if (this.overrideDisplayDuration !== undefined) {
                return this.overrideDisplayDuration;
            }
            if (this.isFullBarRest) {
                return this.voice.bar.masterBar.calculateDuration();
            }
            let ticks = MidiUtils.toTicks(this.duration);
            if (this.dots === 2) {
                ticks = MidiUtils.applyDot(ticks, true);
            }
            else if (this.dots === 1) {
                ticks = MidiUtils.applyDot(ticks, false);
            }
            if (this.tupletDenominator > 0 && this.tupletNumerator >= 0) {
                ticks = MidiUtils.applyTuplet(ticks, this.tupletNumerator, this.tupletDenominator);
            }
            return ticks;
        }
        updateDurations() {
            const ticks = this.calculateDuration();
            this.playbackDuration = ticks;
            switch (this.graceType) {
                case GraceType.BeforeBeat:
                case GraceType.OnBeat:
                    switch (this.duration) {
                        case Duration.Sixteenth:
                            this.playbackDuration = MidiUtils.toTicks(Duration.SixtyFourth);
                            break;
                        case Duration.ThirtySecond:
                            this.playbackDuration = MidiUtils.toTicks(Duration.OneHundredTwentyEighth);
                            break;
                        default:
                            this.playbackDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                            break;
                    }
                    this.displayDuration = 0;
                    break;
                case GraceType.BendGrace:
                    this.playbackDuration /= 2;
                    this.displayDuration = 0;
                    break;
                default:
                    this.displayDuration = ticks;
                    const previous = this.previousBeat;
                    if (previous && previous.graceType === GraceType.BendGrace) {
                        this.playbackDuration = previous.playbackDuration;
                    }
                    break;
            }
        }
        finishTuplet() {
            const previousBeat = this.previousBeat;
            let currentTupletGroup = previousBeat ? previousBeat.tupletGroup : null;
            if (this.hasTuplet || (this.graceType !== GraceType.None && currentTupletGroup)) {
                if (!previousBeat || !currentTupletGroup || !currentTupletGroup.check(this)) {
                    currentTupletGroup = new TupletGroup(this.voice);
                    currentTupletGroup.check(this);
                }
                this.tupletGroup = currentTupletGroup;
            }
            if (this.index > 0) {
                const barDuration = this.voice.bar.masterBar.calculateDuration();
                const validBeatAutomations = [];
                for (const automation of this.automations) {
                    if (automation.ratioPosition === 0) {
                        automation.ratioPosition = this.playbackStart / barDuration;
                    }
                    // we store tempo automations only on masterbar level
                    if (automation.type !== AutomationType.Volume) {
                        validBeatAutomations.push(automation);
                    }
                }
                this.automations = validBeatAutomations;
            }
        }
        finish(settings, sharedDataBag = null) {
            if (this.getAutomation(AutomationType.Instrument) === null &&
                this.index === 0 &&
                this.voice.index === 0 &&
                this.voice.bar.index === 0 &&
                this.voice.bar.staff.index === 0) {
                this.automations.push(Automation.buildInstrumentAutomation(false, 0, this.voice.bar.staff.track.playbackInfo.program));
            }
            switch (this.graceType) {
                case GraceType.OnBeat:
                case GraceType.BeforeBeat:
                    const numberOfGraceBeats = this.graceGroup.beats.length;
                    // set right duration for beaming/display
                    if (numberOfGraceBeats === 1) {
                        this.duration = Duration.Eighth;
                    }
                    else if (numberOfGraceBeats === 2) {
                        this.duration = Duration.Sixteenth;
                    }
                    else {
                        this.duration = Duration.ThirtySecond;
                    }
                    break;
            }
            const displayMode = !settings ? exports.NotationMode.GuitarPro : settings.notation.notationMode;
            let isGradual = this.text === 'grad' || this.text === 'grad.';
            if (isGradual && displayMode === exports.NotationMode.SongBook) {
                this.text = '';
            }
            let needCopyBeatForBend = false;
            this.minNote = null;
            this.maxNote = null;
            this.minStringNote = null;
            this.maxStringNote = null;
            let visibleNotes = 0;
            let isEffectSlurBeat = false;
            for (let i = 0, j = this.notes.length; i < j; i++) {
                const note = this.notes[i];
                note.dynamics = this.dynamics;
                note.finish(settings, sharedDataBag);
                if (note.isLetRing) {
                    this.isLetRing = true;
                }
                if (note.isPalmMute) {
                    this.isPalmMute = true;
                }
                if (displayMode === exports.NotationMode.SongBook && note.hasBend && this.graceType !== GraceType.BendGrace) {
                    if (!note.isTieOrigin) {
                        switch (note.bendType) {
                            case BendType.Bend:
                            case BendType.PrebendRelease:
                            case BendType.PrebendBend:
                                needCopyBeatForBend = true;
                                break;
                        }
                    }
                    if (isGradual || note.bendStyle === BendStyle.Gradual) {
                        isGradual = true;
                        note.bendStyle = BendStyle.Gradual;
                        needCopyBeatForBend = false;
                    }
                    else {
                        note.bendStyle = BendStyle.Fast;
                    }
                }
                if (note.isVisible) {
                    visibleNotes++;
                    if (!this.minNote || note.realValue < this.minNote.realValue) {
                        this.minNote = note;
                    }
                    if (!this.maxNote || note.realValue > this.maxNote.realValue) {
                        this.maxNote = note;
                    }
                    if (!this.minStringNote || note.string < this.minStringNote.string) {
                        this.minStringNote = note;
                    }
                    if (!this.maxStringNote || note.string > this.maxStringNote.string) {
                        this.maxStringNote = note;
                    }
                    if (note.hasEffectSlur) {
                        isEffectSlurBeat = true;
                    }
                }
            }
            if (isEffectSlurBeat) {
                if (this.effectSlurOrigin) {
                    this.effectSlurOrigin.effectSlurDestination = this.nextBeat;
                    if (this.effectSlurOrigin.effectSlurDestination) {
                        this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                    }
                    this.effectSlurOrigin = null;
                }
                else {
                    this.isEffectSlurOrigin = true;
                    this.effectSlurDestination = this.nextBeat;
                    if (this.effectSlurDestination) {
                        this.effectSlurDestination.effectSlurOrigin = this;
                    }
                }
            }
            if (this.notes.length > 0 && visibleNotes === 0) {
                this.isEmpty = true;
            }
            // we need to clean al letring/palmmute flags for rests
            // in case the effect is not continued on this beat
            if (!this.isRest && (!this.isLetRing || !this.isPalmMute)) {
                let currentBeat = this.previousBeat;
                while (currentBeat && currentBeat.isRest) {
                    if (!this.isLetRing) {
                        currentBeat.isLetRing = false;
                    }
                    if (!this.isPalmMute) {
                        currentBeat.isPalmMute = false;
                    }
                    currentBeat = currentBeat.previousBeat;
                }
            }
            else if (this.isRest &&
                this.previousBeat &&
                settings &&
                settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                if (this.previousBeat.isLetRing) {
                    this.isLetRing = true;
                }
                if (this.previousBeat.isPalmMute) {
                    this.isPalmMute = true;
                }
            }
            // try to detect what kind of bend was used and cleans unneeded points if required
            // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all whammys
            const points = this.whammyBarPoints;
            const hasWhammy = points !== null && points.length > 0;
            if (hasWhammy) {
                const isContinuedWhammy = !!this.previousBeat && this.previousBeat.hasWhammyBar;
                this.isContinuedWhammy = isContinuedWhammy;
            }
            else {
                this.whammyBarType = WhammyType.None;
            }
            if (hasWhammy && this.whammyBarType === WhammyType.Custom) {
                if (displayMode === exports.NotationMode.SongBook) {
                    this.whammyStyle = isGradual ? BendStyle.Gradual : BendStyle.Fast;
                }
                if (points.length === 4) {
                    const origin = points[0];
                    const middle1 = points[1];
                    const middle2 = points[2];
                    const destination = points[3];
                    // the middle points are used for holds, anything else is a new feature we do not support yet
                    if (middle1.value === middle2.value) {
                        // constant decrease or increase
                        if ((origin.value < middle1.value && middle1.value < destination.value) ||
                            (origin.value > middle1.value && middle1.value > destination.value)) {
                            if (origin.value !== 0 && !this.isContinuedWhammy) {
                                this.whammyBarType = WhammyType.PrediveDive;
                            }
                            else {
                                this.whammyBarType = WhammyType.Dive;
                            }
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                        else if ((origin.value > middle1.value && middle1.value < destination.value) ||
                            (origin.value < middle1.value && middle1.value > destination.value)) {
                            this.whammyBarType = WhammyType.Dip;
                            if (middle1.offset === middle2.offset || displayMode === exports.NotationMode.SongBook) {
                                points.splice(2, 1);
                            }
                        }
                        else if (origin.value === middle1.value && middle1.value === destination.value) {
                            if (origin.value !== 0 && !this.isContinuedWhammy) {
                                this.whammyBarType = WhammyType.Predive;
                            }
                            else {
                                this.whammyBarType = WhammyType.Hold;
                            }
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                    }
                }
            }
            this.updateDurations();
            if (needCopyBeatForBend) {
                // if this beat is a simple bend convert it to a grace beat
                // and generate a placeholder beat with tied notes
                const cloneBeat = BeatCloner.clone(this);
                cloneBeat.id = Beat._globalBeatId++;
                cloneBeat.pickStroke = PickStroke.None;
                for (let i = 0, j = cloneBeat.notes.length; i < j; i++) {
                    const cloneNote = cloneBeat.notes[i];
                    const note = this.notes[i];
                    // remove bend on cloned note
                    cloneNote.bendType = BendType.None;
                    cloneNote.maxBendPoint = null;
                    cloneNote.bendPoints = null;
                    cloneNote.bendStyle = BendStyle.Default;
                    cloneNote.id = Note.GlobalNoteId++;
                    // fix ties
                    if (note.isTieOrigin) {
                        cloneNote.tieDestination = note.tieDestination;
                        note.tieDestination.tieOrigin = cloneNote;
                    }
                    if (note.isTieDestination) {
                        cloneNote.tieOrigin = note.tieOrigin ? note.tieOrigin : null;
                        note.tieOrigin.tieDestination = cloneNote;
                    }
                    // if the note has a bend which is continued on the next note
                    // we need to convert this note into a hold bend
                    if (note.hasBend && note.isTieOrigin) {
                        const tieDestination = Note.findTieOrigin(note);
                        if (tieDestination && tieDestination.hasBend) {
                            cloneNote.bendType = BendType.Hold;
                            const lastPoint = note.bendPoints[note.bendPoints.length - 1];
                            cloneNote.addBendPoint(new BendPoint(0, lastPoint.value));
                            cloneNote.addBendPoint(new BendPoint(BendPoint.MaxPosition, lastPoint.value));
                        }
                    }
                    // mark as tied note
                    cloneNote.isTieDestination = true;
                }
                this.graceType = GraceType.BendGrace;
                this.graceGroup = new GraceGroup();
                this.graceGroup.addBeat(this);
                this.graceGroup.isComplete = true;
                this.graceGroup.finish();
                this.updateDurations();
                this.voice.insertBeat(this, cloneBeat);
                // ensure cloned beat has also a grace simple grace group for itself
                // (see Voice.finish where every beat gets one)
                // this ensures later that grace rods are assigned correctly to this beat.
                cloneBeat.graceGroup = new GraceGroup();
                cloneBeat.graceGroup.addBeat(this);
                cloneBeat.graceGroup.isComplete = true;
                cloneBeat.graceGroup.finish();
            }
        }
        /**
         * Checks whether the current beat is timewise before the given beat.
         * @param beat
         * @returns
         */
        isBefore(beat) {
            return (this.voice.bar.index < beat.voice.bar.index ||
                (beat.voice.bar.index === this.voice.bar.index && this.index < beat.index));
        }
        /**
         * Checks whether the current beat is timewise after the given beat.
         * @param beat
         * @returns
         */
        isAfter(beat) {
            return (this.voice.bar.index > beat.voice.bar.index ||
                (beat.voice.bar.index === this.voice.bar.index && this.index > beat.index));
        }
        hasNoteOnString(noteString) {
            return this.noteStringLookup.has(noteString);
        }
        // TODO: can be likely eliminated
        getNoteWithRealValue(noteRealValue) {
            if (this.noteValueLookup.has(noteRealValue)) {
                return this.noteValueLookup.get(noteRealValue);
            }
            return null;
        }
        chain(sharedDataBag = null) {
            for (const n of this.notes) {
                this.noteValueLookup.set(n.realValue, n);
                n.chain(sharedDataBag);
            }
        }
    }
    Beat._globalBeatId = 0;

    /**
     * Lists all graphical sub elements within a {@link Score} which can be styled via {@link Score.style}
     */
    var ScoreSubElement;
    (function (ScoreSubElement) {
        /**
         * The title of the song
         */
        ScoreSubElement[ScoreSubElement["Title"] = 0] = "Title";
        /**
         * The subtitle of the song
         */
        ScoreSubElement[ScoreSubElement["SubTitle"] = 1] = "SubTitle";
        /**
         * The artist of the song
         */
        ScoreSubElement[ScoreSubElement["Artist"] = 2] = "Artist";
        /**
         * The album of the song
         */
        ScoreSubElement[ScoreSubElement["Album"] = 3] = "Album";
        /**
         * The word author of the song
         */
        ScoreSubElement[ScoreSubElement["Words"] = 4] = "Words";
        /**
         * The Music author of the song
         */
        ScoreSubElement[ScoreSubElement["Music"] = 5] = "Music";
        /**
         * The Words&Music author of the song
         */
        ScoreSubElement[ScoreSubElement["WordsAndMusic"] = 6] = "WordsAndMusic";
        /**
         * The transcriber of the music sheet
         */
        ScoreSubElement[ScoreSubElement["Transcriber"] = 7] = "Transcriber";
        /**
         * The copyright holder of the song
         */
        ScoreSubElement[ScoreSubElement["Copyright"] = 8] = "Copyright";
        /**
         * The second copyright line (typically something like 'All Rights Reserved')
         */
        ScoreSubElement[ScoreSubElement["CopyrightSecondLine"] = 9] = "CopyrightSecondLine";
        /**
         * The chord diagram list shown on top of the score.
         */
        ScoreSubElement[ScoreSubElement["ChordDiagramList"] = 10] = "ChordDiagramList";
    })(ScoreSubElement || (ScoreSubElement = {}));
    /**
     * The additional style and display information for header and footer elements.
     * @json
     * @json_strict
     */
    class HeaderFooterStyle {
        constructor(template = '', isVisible = undefined, textAlign = TextAlign.Left) {
            this.template = template;
            this.isVisible = isVisible;
            this.textAlign = textAlign;
        }
        buildText(score) {
            let anyPlaceholderFilled = false;
            let anyPlaceholder = false;
            const replaced = this.template.replace(HeaderFooterStyle.PlaceholderPattern, (_match, variable) => {
                anyPlaceholder = true;
                let value = '';
                switch (variable) {
                    case 'TITLE':
                        value = score.title;
                        break;
                    case 'SUBTITLE':
                        value = score.subTitle;
                        break;
                    case 'ARTIST':
                        value = score.artist;
                        break;
                    case 'ALBUM':
                        value = score.album;
                        break;
                    case 'WORDS':
                    case 'WORDSMUSIC':
                        value = score.words;
                        break;
                    case 'MUSIC':
                        value = score.music;
                        break;
                    case 'TABBER':
                        value = score.tab;
                        break;
                    case 'COPYRIGHT':
                        value = score.copyright;
                        break;
                    default:
                        value = '';
                        break;
                }
                if (value) {
                    anyPlaceholderFilled = true;
                }
                return value;
            });
            if (anyPlaceholder && !anyPlaceholderFilled) {
                return '';
            }
            return replaced;
        }
    }
    HeaderFooterStyle.PlaceholderPattern = /%([^%]+)%/g;
    /**
     * Defines the custom styles for Scores.
     * @json
     * @json_strict
     */
    class ScoreStyle extends ElementStyle {
        constructor() {
            super(...arguments);
            /**
             * Changes additional style aspects fo the of the specified sub-element.
             */
            this.headerAndFooter = new Map();
        }
    }
    /**
     * The default styles applied to headers and footers if not specified
     */
    ScoreStyle.defaultHeaderAndFooter = new Map([
        [ScoreSubElement.Title, new HeaderFooterStyle('%TITLE%', undefined, TextAlign.Center)],
        [ScoreSubElement.SubTitle, new HeaderFooterStyle('%SUBTITLE%', undefined, TextAlign.Center)],
        [ScoreSubElement.Artist, new HeaderFooterStyle('%ARTIST%', undefined, TextAlign.Center)],
        [ScoreSubElement.Album, new HeaderFooterStyle('%ALBUM%', undefined, TextAlign.Center)],
        [ScoreSubElement.Words, new HeaderFooterStyle('Words by %WORDS%', undefined, TextAlign.Left)],
        [ScoreSubElement.Music, new HeaderFooterStyle('Music by %MUSIC%', undefined, TextAlign.Right)],
        [ScoreSubElement.WordsAndMusic, new HeaderFooterStyle('Words & Music by %MUSIC%', undefined, TextAlign.Right)],
        [ScoreSubElement.Transcriber, new HeaderFooterStyle('Tabbed by %TABBER%', false, TextAlign.Right)],
        [ScoreSubElement.Copyright, new HeaderFooterStyle('%COPYRIGHT%', undefined, TextAlign.Center)],
        [
            ScoreSubElement.CopyrightSecondLine,
            new HeaderFooterStyle('All Rights Reserved - International Copyright Secured', true, TextAlign.Center)
        ]
    ]);
    /**
     * The score is the root node of the complete
     * model. It stores the basic information of
     * a song and stores the sub components.
     * @json
     * @json_strict
     */
    class Score {
        constructor() {
            this._currentRepeatGroup = null;
            this._openedRepeatGroups = [];
            this._properlyOpenedRepeatGroups = 0;
            /**
             * The album of this song.
             */
            this.album = '';
            /**
             * The artist who performs this song.
             */
            this.artist = '';
            /**
             * The owner of the copyright of this song.
             */
            this.copyright = '';
            /**
             * Additional instructions
             */
            this.instructions = '';
            /**
             * The author of the music.
             */
            this.music = '';
            /**
             * Some additional notes about the song.
             */
            this.notices = '';
            /**
             * The subtitle of the song.
             */
            this.subTitle = '';
            /**
             * The title of the song.
             */
            this.title = '';
            /**
             * The author of the song lyrics
             */
            this.words = '';
            /**
             * The author of this tablature.
             */
            this.tab = '';
            /**
             * Gets or sets the global tempo of the song in BPM. The tempo might change via {@link MasterBar.tempoAutomations}.
             */
            this.tempo = 120;
            /**
             * Gets or sets the name/label of the tempo.
             */
            this.tempoLabel = '';
            /**
             * Gets or sets a list of all masterbars contained in this song.
             * @json_add addMasterBar
             */
            this.masterBars = [];
            /**
             * Gets or sets a list of all tracks contained in this song.
             * @json_add addTrack
             */
            this.tracks = [];
            /**
             * Defines how many bars are placed into the systems (rows) when displaying
             * multiple tracks unless a value is set in the systemsLayout.
             */
            this.defaultSystemsLayout = 3;
            /**
             * Defines how many bars are placed into the systems (rows) when displaying
             * multiple tracks.
             */
            this.systemsLayout = [];
            /**
             * Gets or sets the rendering stylesheet for this song.
             */
            this.stylesheet = new RenderStylesheet();
        }
        /**
         * Resets all internal ID generators.
         */
        static resetIds() {
            Bar.resetIds();
            Beat.resetIds();
            Voice$1.resetIds();
            Note.resetIds();
        }
        rebuildRepeatGroups() {
            this._currentRepeatGroup = null;
            this._openedRepeatGroups = [];
            this._properlyOpenedRepeatGroups = 0;
            for (const bar of this.masterBars) {
                this.addMasterBarToRepeatGroups(bar);
            }
        }
        addMasterBar(bar) {
            bar.score = this;
            bar.index = this.masterBars.length;
            if (this.masterBars.length !== 0) {
                bar.previousMasterBar = this.masterBars[this.masterBars.length - 1];
                bar.previousMasterBar.nextMasterBar = bar;
                // TODO: this will not work on anacrusis. Correct anacrusis durations are only working
                // when there are beats with playback positions already computed which requires full finish
                // chicken-egg problem here. temporarily forcing anacrusis length here to 0
                bar.start =
                    bar.previousMasterBar.start +
                        (bar.previousMasterBar.isAnacrusis ? 0 : bar.previousMasterBar.calculateDuration());
            }
            this.addMasterBarToRepeatGroups(bar);
            this.masterBars.push(bar);
        }
        /**
         * Adds the given bar correctly into the current repeat group setup.
         * @param bar
         */
        addMasterBarToRepeatGroups(bar) {
            // handling the repeats is quite tricky due to many invalid combinations a user might define
            // there are also some complexities due to nested repeats and repeats with multiple endings but only one opening.
            // all scenarios are handled below.
            // NOTE: In all paths we need to ensure that the bar is added to some repeat group
            // start a new repeat group if really a repeat is started
            // or we don't have a group.
            if (bar.isRepeatStart) {
                // if the current group was already closed (this opening doesn't cause nesting)
                // we consider the group as completed
                if (this._currentRepeatGroup?.isClosed) {
                    this._openedRepeatGroups.pop();
                    this._properlyOpenedRepeatGroups--;
                }
                this._currentRepeatGroup = new RepeatGroup();
                this._openedRepeatGroups.push(this._currentRepeatGroup);
                this._properlyOpenedRepeatGroups++;
            }
            else if (!this._currentRepeatGroup) {
                this._currentRepeatGroup = new RepeatGroup();
                this._openedRepeatGroups.push(this._currentRepeatGroup);
            }
            // close current group if there was one started
            this._currentRepeatGroup.addMasterBar(bar);
            // handle repeat ends
            if (bar.isRepeatEnd) {
                // if we have nested repeat groups a repeat end
                // will treat the group as completed
                if (this._properlyOpenedRepeatGroups > 1) {
                    this._openedRepeatGroups.pop();
                    this._properlyOpenedRepeatGroups--;
                    // restore outer group in cases like "open open close close"
                    this._currentRepeatGroup =
                        this._openedRepeatGroups.length > 0
                            ? this._openedRepeatGroups[this._openedRepeatGroups.length - 1]
                            : null;
                }
            }
        }
        addTrack(track) {
            track.score = this;
            track.index = this.tracks.length;
            this.tracks.push(track);
        }
        finish(settings) {
            const sharedDataBag = new Map();
            for (let i = 0, j = this.tracks.length; i < j; i++) {
                this.tracks[i].finish(settings, sharedDataBag);
            }
        }
        /**
         * Applies the given list of {@link FlatSyncPoint} to this song.
         * @param syncPoints The list of sync points to apply.
         * @since 1.6.0
         */
        applyFlatSyncPoints(syncPoints) {
            for (const b of this.masterBars) {
                b.syncPoints = undefined;
            }
            for (const syncPoint of syncPoints) {
                const automation = new Automation();
                automation.ratioPosition = Math.min(1, Math.max(0, syncPoint.barPosition));
                automation.type = AutomationType.SyncPoint;
                automation.syncPointValue = new SyncPointData();
                automation.syncPointValue.millisecondOffset = syncPoint.millisecondOffset;
                automation.syncPointValue.barOccurence = syncPoint.barOccurence;
                if (syncPoint.barIndex < this.masterBars.length) {
                    this.masterBars[syncPoint.barIndex].addSyncPoint(automation);
                }
            }
            for (const b of this.masterBars) {
                if (b.syncPoints) {
                    b.syncPoints.sort((a, b) => {
                        const occurence = a.syncPointValue.barOccurence - b.syncPointValue.barOccurence;
                        if (occurence !== 0) {
                            return occurence;
                        }
                        return a.ratioPosition - b.ratioPosition;
                    });
                }
            }
        }
        /**
         * Exports all sync points in this song to a {@link FlatSyncPoint} list.
         * @since 1.6.0
         */
        exportFlatSyncPoints() {
            const syncPoints = [];
            for (const masterBar of this.masterBars) {
                const masterBarSyncPoints = masterBar.syncPoints;
                if (masterBarSyncPoints) {
                    for (const syncPoint of masterBarSyncPoints) {
                        syncPoints.push({
                            barIndex: masterBar.index,
                            barOccurence: syncPoint.syncPointValue.barOccurence,
                            barPosition: syncPoint.ratioPosition,
                            millisecondOffset: syncPoint.syncPointValue.millisecondOffset
                        });
                    }
                }
            }
            return syncPoints;
        }
    }

    /**
     * This is the base public class for creating new song importers which
     * enable reading scores from any binary datasource
     */
    class ScoreImporter {
        /**
         * Initializes the importer with the given data and settings.
         */
        init(data, settings) {
            this.data = data;
            this.settings = settings;
            // when beginning reading a new score we reset the IDs.
            Score.resetIds();
        }
    }

    exports.AlphaTabErrorType = void 0;
    (function (AlphaTabErrorType) {
        AlphaTabErrorType[AlphaTabErrorType["General"] = 0] = "General";
        AlphaTabErrorType[AlphaTabErrorType["Format"] = 1] = "Format";
        AlphaTabErrorType[AlphaTabErrorType["AlphaTex"] = 2] = "AlphaTex";
    })(exports.AlphaTabErrorType || (exports.AlphaTabErrorType = {}));
    class AlphaTabError extends Error {
        constructor(type, message = '', inner) {
            super(message ?? '', { cause: inner });
            this.type = type;
            Object.setPrototypeOf(this, AlphaTabError.prototype);
        }
    }

    /**
     * The exception thrown by a {@link ScoreImporter} in case the
     * binary data does not contain a reader compatible structure.
     */
    class UnsupportedFormatError extends AlphaTabError {
        constructor(message = null, inner) {
            super(exports.AlphaTabErrorType.Format, message ?? 'Unsupported format', inner);
            Object.setPrototypeOf(this, UnsupportedFormatError.prototype);
        }
    }

    // TODO: rework model to specify for each finger
    // on which frets they are placed.
    /**
     * A chord definition.
     * @json
     * @json_strict
     */
    class Chord {
        constructor() {
            /**
             * Gets or sets the name of the chord
             */
            this.name = '';
            /**
             * Indicates the first fret of the chord diagram.
             */
            this.firstFret = 1;
            /**
             * Gets or sets the frets played on the individual strings for this chord.
             * - The order in this list goes from the highest string to the lowest string.
             * - -1 indicates that the string is not played.
             */
            this.strings = [];
            /**
             * Gets or sets a list of frets where the finger should hold a barre
             */
            this.barreFrets = [];
            /**
             * Gets or sets whether the chord name is shown above the chord diagram.
             */
            this.showName = true;
            /**
             * Gets or sets whether the chord diagram is shown.
             */
            this.showDiagram = true;
            /**
             * Gets or sets whether the fingering is shown below the chord diagram.
             */
            this.showFingering = true;
        }
        /**
         * Gets a unique id for this chord based on its properties.
         */
        get uniqueId() {
            const properties = [
                this.name,
                this.firstFret.toString(),
                this.strings.join(','),
                this.barreFrets.join(','),
                this.showDiagram.toString(),
                this.showFingering.toString(),
                this.showName.toString()
            ];
            return properties.join('|');
        }
    }

    var LyricsState;
    (function (LyricsState) {
        LyricsState[LyricsState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
        LyricsState[LyricsState["Begin"] = 1] = "Begin";
        LyricsState[LyricsState["Text"] = 2] = "Text";
        LyricsState[LyricsState["Comment"] = 3] = "Comment";
        LyricsState[LyricsState["Dash"] = 4] = "Dash";
    })(LyricsState || (LyricsState = {}));
    /**
     * Represents the lyrics of a song.
     */
    class Lyrics {
        constructor() {
            /**
             * Gets or sets he start bar on which the lyrics should begin.
             */
            this.startBar = 0;
            /**
             * Gets or sets the raw lyrics text in Guitar Pro format.
             * (spaces split word syllables, plus merge syllables, [..] are comments)
             */
            this.text = '';
        }
        finish(skipEmptyEntries = false) {
            this.chunks = [];
            this.parse(this.text, 0, this.chunks, skipEmptyEntries);
        }
        parse(str, p, chunks, skipEmptyEntries) {
            if (!str) {
                return;
            }
            let state = LyricsState.Begin;
            let next = LyricsState.Begin;
            let skipSpace = false;
            let start = 0;
            while (p < str.length) {
                const c = str.charCodeAt(p);
                switch (state) {
                    case LyricsState.IgnoreSpaces:
                        switch (c) {
                            case Lyrics.CharCodeLF:
                            case Lyrics.CharCodeCR:
                            case Lyrics.CharCodeTab:
                                break;
                            case Lyrics.CharCodeSpace:
                                if (!skipSpace) {
                                    state = next;
                                    continue;
                                }
                                break;
                            default:
                                skipSpace = false;
                                state = next;
                                continue;
                        }
                        break;
                    case LyricsState.Begin:
                        switch (c) {
                            case Lyrics.CharCodeBrackedOpen:
                                state = LyricsState.Comment;
                                break;
                            default:
                                start = p;
                                state = LyricsState.Text;
                                continue;
                        }
                        break;
                    case LyricsState.Comment:
                        switch (c) {
                            case Lyrics.CharCodeBrackedClose:
                                state = LyricsState.Begin;
                                break;
                        }
                        break;
                    case LyricsState.Text:
                        switch (c) {
                            case Lyrics.CharCodeDash:
                                state = LyricsState.Dash;
                                break;
                            case Lyrics.CharCodeCR:
                            case Lyrics.CharCodeLF:
                            case Lyrics.CharCodeSpace:
                                const txt = str.substr(start, p - start);
                                this.addChunk(txt, skipEmptyEntries);
                                state = LyricsState.IgnoreSpaces;
                                next = LyricsState.Begin;
                                break;
                        }
                        break;
                    case LyricsState.Dash:
                        switch (c) {
                            case Lyrics.CharCodeDash:
                                break;
                            default:
                                const txt = str.substr(start, p - start);
                                this.addChunk(txt, skipEmptyEntries);
                                skipSpace = true;
                                state = LyricsState.IgnoreSpaces;
                                next = LyricsState.Begin;
                                continue;
                        }
                        break;
                }
                p += 1;
            }
            if (state === LyricsState.Text) {
                if (p !== start) {
                    this.addChunk(str.substr(start, p - start), skipEmptyEntries);
                }
            }
        }
        addChunk(txt, skipEmptyEntries) {
            txt = this.prepareChunk(txt);
            if (!skipEmptyEntries || (txt.length > 0 && txt !== '-')) {
                this.chunks.push(txt);
            }
        }
        prepareChunk(txt) {
            const chunk = txt.split('+').join(' ');
            // trim off trailing _ like "You____" becomes "You"
            let endLength = chunk.length;
            while (endLength > 0 && chunk.charAt(endLength - 1) === '_') {
                endLength--;
            }
            return endLength !== chunk.length ? chunk.substr(0, endLength) : chunk;
        }
    }
    Lyrics.CharCodeLF = 10;
    Lyrics.CharCodeTab = 9;
    Lyrics.CharCodeCR = 13;
    Lyrics.CharCodeSpace = 32;
    Lyrics.CharCodeBrackedClose = 93;
    Lyrics.CharCodeBrackedOpen = 91;
    Lyrics.CharCodeDash = 45;

    /**
     * This public class is used to describe the beginning of a
     * section within a song. It acts like a marker.
     * @json
     * @json_strict
     */
    class Section {
        constructor() {
            /**
             * Gets or sets the marker ID for this section.
             */
            this.marker = '';
            /**
             * Gets or sets the descriptional text of this section.
             */
            this.text = '';
        }
    }

    /**
     * An invalid input format was detected (e.g. invalid setting values, file formats,...)
     */
    class FormatError extends AlphaTabError {
        constructor(message) {
            super(exports.AlphaTabErrorType.Format, message);
            Object.setPrototypeOf(this, FormatError.prototype);
        }
    }

    /**
     * @json_immutable
     */
    class Color {
        /**
         * Initializes a new instance of the {@link Color} class.
         * @param r The red component.
         * @param g The green component.
         * @param b The blue component.
         * @param a The alpha component.
         */
        constructor(r, g, b, a = 0xff) {
            /**
             * Gets or sets the raw RGBA value.
             */
            this.raw = 0;
            this.raw = ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
            this.updateRgba();
        }
        updateRgba() {
            if (this.a === 0xff) {
                this.rgba = `#${ModelUtils.toHexString(this.r, 2)}${ModelUtils.toHexString(this.g, 2)}${ModelUtils.toHexString(this.b, 2)}`;
            }
            else {
                this.rgba = `rgba(${this.r},${this.g},${this.b},${this.a / 255.0})`;
            }
        }
        get a() {
            return (this.raw >> 24) & 0xff;
        }
        get r() {
            return (this.raw >> 16) & 0xff;
        }
        get g() {
            return (this.raw >> 8) & 0xff;
        }
        get b() {
            return this.raw & 0xff;
        }
        static random(opacity = 100) {
            return new Color((Math.random() * 255) | 0, (Math.random() * 255) | 0, (Math.random() * 255) | 0, opacity);
        }
        static fromJson(v) {
            if (v instanceof Color) {
                return v;
            }
            switch (typeof v) {
                case 'number': {
                    const c = new Color(0, 0, 0, 0);
                    c.raw = v;
                    c.updateRgba();
                    return c;
                }
                case 'string': {
                    const json = v;
                    if (json.startsWith('#')) {
                        if (json.length === 4) {
                            // #RGB
                            return new Color(Number.parseInt(json[1], 16) * 17, Number.parseInt(json[2], 16) * 17, Number.parseInt(json[3], 16) * 17);
                        }
                        if (json.length === 5) {
                            // #RGBA
                            return new Color(Number.parseInt(json[1], 16) * 17, Number.parseInt(json[2], 16) * 17, Number.parseInt(json[3], 16) * 17, Number.parseInt(json[4], 16) * 17);
                        }
                        if (json.length === 7) {
                            // #RRGGBB
                            return new Color(Number.parseInt(json.substring(1, 3), 16), Number.parseInt(json.substring(3, 5), 16), Number.parseInt(json.substring(5, 7), 16));
                        }
                        if (json.length === 9) {
                            // #RRGGBBAA
                            return new Color(Number.parseInt(json.substring(1, 3), 16), Number.parseInt(json.substring(3, 5), 16), Number.parseInt(json.substring(5, 7), 16), Number.parseInt(json.substring(7, 9), 16));
                        }
                    }
                    else if (json.startsWith('rgba') || json.startsWith('rgb')) {
                        const start = json.indexOf('(');
                        const end = json.lastIndexOf(')');
                        if (start === -1 || end === -1) {
                            throw new FormatError('No values specified for rgb/rgba function');
                        }
                        const numbers = json.substring(start + 1, end).split(',');
                        if (numbers.length === 3) {
                            return new Color(Number.parseInt(numbers[0]), Number.parseInt(numbers[1]), Number.parseInt(numbers[2]));
                        }
                        if (numbers.length === 4) {
                            return new Color(Number.parseInt(numbers[0]), Number.parseInt(numbers[1]), Number.parseInt(numbers[2]), Number.parseFloat(numbers[3]) * 255);
                        }
                    }
                    return null;
                }
            }
            throw new FormatError('Unsupported format for color');
        }
        static toJson(obj) {
            return obj === null ? null : obj.raw;
        }
    }
    Color.BlackRgb = '#000000';

    /**
     * This public class stores the midi specific information of a track needed
     * for playback.
     * @json
     * @json_strict
     */
    class PlaybackInformation {
        constructor() {
            /**
             * Gets or sets the volume (0-16)
             */
            this.volume = 15;
            /**
             * Gets or sets the balance (0-16; 8=center)
             */
            this.balance = 8;
            /**
             * Gets or sets the midi port to use.
             */
            this.port = 1;
            /**
             * Gets or sets the midi program to use.
             */
            this.program = 0;
            /**
             * Gets or sets the primary channel for all normal midi events.
             */
            this.primaryChannel = 0;
            /**
             * Gets or sets the secondary channel for special midi events.
             */
            this.secondaryChannel = 0;
            /**
             * Gets or sets whether the track is muted.
             */
            this.isMute = false;
            /**
             * Gets or sets whether the track is playing alone.
             */
            this.isSolo = false;
        }
    }

    /**
     * This public class represents a predefined string tuning.
     * @json
     * @json_strict
     */
    class Tuning {
        static getTextForTuning(tuning, includeOctave) {
            const parts = Tuning.getTextPartsForTuning(tuning);
            return includeOctave ? parts.join('') : parts[0];
        }
        static getTextPartsForTuning(tuning, octaveShift = -1) {
            const octave = (tuning / 12) | 0;
            const note = tuning % 12;
            const notes = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];
            return [notes[note], (octave + octaveShift).toString()];
        }
        /**
         * Gets the default tuning for the given string count.
         * @param stringCount The string count.
         * @returns The tuning for the given string count or null if the string count is not defined.
         */
        static getDefaultTuningFor(stringCount) {
            if (Tuning._defaultTunings.has(stringCount)) {
                return Tuning._defaultTunings.get(stringCount);
            }
            return null;
        }
        /**
         * Gets a list of all tuning presets for a given stirng count.
         * @param stringCount The string count.
         * @returns The list of known tunings for the given string count or an empty list if the string count is not defined.
         */
        static getPresetsFor(stringCount) {
            switch (stringCount) {
                case 7:
                    return Tuning._sevenStrings;
                case 6:
                    return Tuning._sixStrings;
                case 5:
                    return Tuning._fiveStrings;
                case 4:
                    return Tuning._fourStrings;
            }
            return [];
        }
        static initialize() {
            Tuning._defaultTunings.set(7, new Tuning('Guitar 7 strings', [64, 59, 55, 50, 45, 40, 35], true));
            Tuning._sevenStrings.push(Tuning._defaultTunings.get(7));
            Tuning._defaultTunings.set(6, new Tuning('Guitar Standard Tuning', [64, 59, 55, 50, 45, 40], true));
            Tuning._sixStrings.push(Tuning._defaultTunings.get(6));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down ½ step', [63, 58, 54, 49, 44, 39], false));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down 1 step', [62, 57, 53, 48, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down 2 step', [60, 55, 51, 46, 41, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning', [64, 59, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning variant', [64, 57, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Double Dropped D Tuning', [62, 59, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped E Tuning', [66, 61, 57, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped C Tuning', [62, 57, 53, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open C Tuning', [64, 60, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Cm Tuning', [63, 60, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open C6 Tuning', [64, 57, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Cmaj7 Tuning', [64, 59, 55, 52, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D Tuning', [62, 57, 54, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Dm Tuning', [62, 57, 53, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D5 Tuning', [62, 57, 50, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D6 Tuning', [62, 59, 54, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Dsus4 Tuning', [62, 57, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open E Tuning', [64, 59, 56, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Em Tuning', [64, 59, 55, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Esus11 Tuning', [64, 59, 55, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open F Tuning', [65, 60, 53, 48, 45, 41], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open G Tuning', [62, 59, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Gm Tuning', [62, 58, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open G6 Tuning', [64, 59, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Gsus4 Tuning', [62, 60, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open A Tuning', [64, 61, 57, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Am Tuning', [64, 60, 57, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Nashville Tuning', [64, 59, 67, 62, 57, 52], false));
            Tuning._sixStrings.push(new Tuning('Bass 6 Strings Tuning', [48, 43, 38, 33, 28, 23], false));
            Tuning._sixStrings.push(new Tuning('Lute or Vihuela Tuning', [64, 59, 54, 50, 45, 40], false));
            Tuning._defaultTunings.set(5, new Tuning('Bass 5 Strings Tuning', [43, 38, 33, 28, 23], true));
            Tuning._fiveStrings.push(Tuning._defaultTunings.get(5));
            Tuning._fiveStrings.push(new Tuning('Banjo Dropped C Tuning', [62, 59, 55, 48, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo Open D Tuning', [62, 57, 54, 50, 69], false));
            Tuning._fiveStrings.push(new Tuning('Banjo Open G Tuning', [62, 59, 55, 50, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo G Minor Tuning', [62, 58, 55, 50, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo G Modal Tuning', [62, 57, 55, 50, 67], false));
            Tuning._defaultTunings.set(4, new Tuning('Bass Standard Tuning', [43, 38, 33, 28], true));
            Tuning._fourStrings.push(Tuning._defaultTunings.get(4));
            Tuning._fourStrings.push(new Tuning('Bass Tune down ½ step', [42, 37, 32, 27], false));
            Tuning._fourStrings.push(new Tuning('Bass Tune down 1 step', [41, 36, 31, 26], false));
            Tuning._fourStrings.push(new Tuning('Bass Tune down 2 step', [39, 34, 29, 24], false));
            Tuning._fourStrings.push(new Tuning('Bass Dropped D Tuning', [43, 38, 33, 26], false));
            Tuning._fourStrings.push(new Tuning('Ukulele C Tuning', [45, 40, 36, 43], false));
            Tuning._fourStrings.push(new Tuning('Ukulele G Tuning', [52, 47, 43, 38], false));
            Tuning._fourStrings.push(new Tuning('Mandolin Standard Tuning', [64, 57, 50, 43], false));
            Tuning._fourStrings.push(new Tuning('Mandolin or Violin Tuning', [76, 69, 62, 55], false));
            Tuning._fourStrings.push(new Tuning('Viola Tuning', [69, 62, 55, 48], false));
            Tuning._fourStrings.push(new Tuning('Cello Tuning', [57, 50, 43, 36], false));
        }
        /**
         * Tries to find a known tuning by a given list of tuning values.
         * @param strings The values defining the tuning.
         * @returns The known tuning.
         */
        static findTuning(strings) {
            const tunings = Tuning.getPresetsFor(strings.length);
            for (let t = 0, tc = tunings.length; t < tc; t++) {
                const tuning = tunings[t];
                let equals = true;
                for (let i = 0, j = strings.length; i < j; i++) {
                    if (strings[i] !== tuning.tunings[i]) {
                        equals = false;
                        break;
                    }
                }
                if (equals) {
                    return tuning;
                }
            }
            return null;
        }
        /**
         * Initializes a new instance of the {@link Tuning} class.
         * @param name The name.
         * @param tuning The tuning.
         * @param isStandard if set to`true`[is standard].
         */
        constructor(name = '', tuning = null, isStandard = false) {
            this.isStandard = isStandard;
            this.name = name;
            this.tunings = tuning ?? [];
        }
        /**
         * Tries to detect the name and standard flag of the tuning from a known tuning list based
         * on the string values.
         */
        finish() {
            const knownTuning = Tuning.findTuning(this.tunings);
            if (knownTuning) {
                this.name = knownTuning.name;
                this.isStandard = knownTuning.isStandard;
            }
            this.name = this.name.trim();
        }
    }
    Tuning._sevenStrings = [];
    Tuning._sixStrings = [];
    Tuning._fiveStrings = [];
    Tuning._fourStrings = [];
    Tuning._defaultTunings = new Map();
    Tuning.defaultAccidentals = ['', '#', '', '#', '', '', '#', '', '#', '', '#', ''];
    Tuning.defaultSteps = ['C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'];
    Tuning.initialize();

    /**
     * This class describes a single staff within a track. There are instruments like pianos
     * where a single track can contain multiple staves.
     * @json
     * @json_strict
     */
    class Staff {
        constructor() {
            /**
             * Gets or sets the zero-based index of this staff within the track.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets a list of all bars contained in this staff.
             * @json_add addBar
             */
            this.bars = [];
            /**
             * Gets or sets a list of all chords defined for this staff. {@link Beat.chordId} refers to entries in this lookup.
             * @json_add addChord
             */
            this.chords = null;
            /**
             * Gets or sets the fret on which a capo is set.
             */
            this.capo = 0;
            /**
             * Gets or sets the number of semitones this track should be
             * transposed. This applies to rendering and playback.
             */
            this.transpositionPitch = 0;
            /**
             * Gets or sets the number of semitones this track should be
             * transposed. This applies only to rendering.
             */
            this.displayTranspositionPitch = 0;
            /**
             * Get or set the guitar tuning of the guitar. This tuning also indicates the number of strings shown in the
             * guitar tablature. Unlike the {@link Note.string} property this array directly represents
             * the order of the tracks shown in the tablature. The first item is the most top tablature line.
             */
            this.stringTuning = new Tuning('', [], false);
            /**
             * Gets or sets whether the slash notation is shown.
             */
            this.showSlash = false;
            /**
             * Gets or sets whether the numbered notation is shown.
             */
            this.showNumbered = false;
            /**
             * Gets or sets whether the tabs are shown.
             */
            this.showTablature = true;
            /**
             * Gets or sets whether the standard notation is shown.
             */
            this.showStandardNotation = true;
            /**
             * Gets or sets whether the staff contains percussion notation
             */
            this.isPercussion = false;
            /**
             * The number of lines shown for the standard notation.
             * For some percussion instruments this number might vary.
             */
            this.standardNotationLineCount = Staff.DefaultStandardNotationLineCount;
        }
        /**
         * Get or set the values of the related guitar tuning.
         */
        get tuning() {
            return this.stringTuning.tunings;
        }
        /**
         * Gets or sets the name of the tuning.
         */
        get tuningName() {
            return this.stringTuning.name;
        }
        get isStringed() {
            return this.stringTuning.tunings.length > 0;
        }
        finish(settings, sharedDataBag = null) {
            this.stringTuning.finish();
            for (let i = 0, j = this.bars.length; i < j; i++) {
                this.bars[i].finish(settings, sharedDataBag);
            }
        }
        addChord(chordId, chord) {
            chord.staff = this;
            let chordMap = this.chords;
            if (chordMap === null) {
                chordMap = new Map();
                this.chords = chordMap;
            }
            chordMap.set(chordId, chord);
        }
        hasChord(chordId) {
            return this.chords?.has(chordId) ?? false;
        }
        getChord(chordId) {
            return this.chords?.get(chordId) ?? null;
        }
        addBar(bar) {
            const bars = this.bars;
            bar.staff = this;
            bar.index = bars.length;
            if (bars.length > 0) {
                bar.previousBar = bars[bars.length - 1];
                bar.previousBar.nextBar = bar;
            }
            bars.push(bar);
        }
    }
    Staff.DefaultStandardNotationLineCount = 5;

    /**
     * Lists all graphical sub elements within a {@link Track} which can be styled via {@link Track.style}
     */
    var TrackSubElement;
    (function (TrackSubElement) {
        /**
         * The track names shown before the staves.
         */
        TrackSubElement[TrackSubElement["TrackName"] = 0] = "TrackName";
        /**
         * The braces and brackets grouping the staves.
         * If a bracket spans multiple tracks, the color of the first track counts.
         */
        TrackSubElement[TrackSubElement["BracesAndBrackets"] = 1] = "BracesAndBrackets";
        /**
         * The system separator.
         */
        TrackSubElement[TrackSubElement["SystemSeparator"] = 2] = "SystemSeparator";
        /**
         * The tuning of the strings.
         */
        TrackSubElement[TrackSubElement["StringTuning"] = 3] = "StringTuning";
    })(TrackSubElement || (TrackSubElement = {}));
    /**
     * Defines the custom styles for tracks.
     * @json
     * @json_strict
     */
    class TrackStyle extends ElementStyle {
    }
    /**
     * This public class describes a single track or instrument of score.
     * It is primarily a list of staves containing individual music notation kinds.
     * @json
     * @json_strict
     */
    class Track {
        constructor() {
            /**
             * Gets or sets the zero-based index of this track.
             * @json_ignore
             */
            this.index = 0;
            /**
             * Gets or sets the list of staves that are defined for this track.
             * @json_add addStaff
             */
            this.staves = [];
            /**
             * Gets or sets the playback information for this track.
             */
            this.playbackInfo = new PlaybackInformation();
            /**
             * Gets or sets the display color defined for this track.
             */
            this.color = new Color(200, 0, 0, 255);
            /**
             * Gets or sets the long name of this track.
             */
            this.name = '';
            /**
             * Gets or sets whether this track should be visible in the UI.
             * This information is purely informational and might not be provided by all input formats.
             * In formats like Guitar Pro this flag indicates whether on the default "multi-track" layout
             * tracks should be visible or not.
             */
            this.isVisibleOnMultiTrack = true;
            /**
             * Gets or sets the short name of this track.
             */
            this.shortName = '';
            /**
             * Defines how many bars are placed into the systems (rows) when displaying
             * the track unless a value is set in the systemsLayout.
             */
            this.defaultSystemsLayout = 3;
            /**
             * Defines how many bars are placed into the systems (rows) when displaying
             * the track.
             */
            this.systemsLayout = [];
            /**
             * Gets or sets a mapping on which staff lines particular percussion instruments
             * should be shown.
             */
            this.percussionArticulations = [];
        }
        /**
         * Adds a new line break.
         * @param index  The index of the bar before which a line break should happen.
         */
        addLineBreaks(index) {
            if (!this.lineBreaks) {
                this.lineBreaks = new Set();
            }
            this.lineBreaks.add(index);
        }
        ensureStaveCount(staveCount) {
            while (this.staves.length < staveCount) {
                this.addStaff(new Staff());
            }
        }
        addStaff(staff) {
            staff.index = this.staves.length;
            staff.track = this;
            this.staves.push(staff);
        }
        finish(settings, sharedDataBag = null) {
            if (!this.shortName) {
                this.shortName = this.name;
                if (this.shortName.length > Track.ShortNameMaxLength) {
                    this.shortName = this.shortName.substr(0, Track.ShortNameMaxLength);
                }
            }
            for (let i = 0, j = this.staves.length; i < j; i++) {
                this.staves[i].finish(settings, sharedDataBag);
            }
        }
        applyLyrics(lyrics) {
            for (const lyric of lyrics) {
                lyric.finish();
            }
            const staff = this.staves[0];
            for (let li = 0; li < lyrics.length; li++) {
                const lyric = lyrics[li];
                if (lyric.startBar >= 0 && lyric.startBar < staff.bars.length) {
                    let beat = staff.bars[lyric.startBar].voices[0].beats[0];
                    for (let ci = 0; ci < lyric.chunks.length && beat; ci++) {
                        // skip rests and empty beats
                        while (beat && (beat.isEmpty || beat.isRest)) {
                            beat = beat.nextBeat;
                        }
                        // mismatch between chunks and beats might lead to missing beats
                        if (beat) {
                            // initialize lyrics list for beat if required
                            if (!beat.lyrics) {
                                beat.lyrics = new Array(lyrics.length);
                                beat.lyrics.fill('');
                            }
                            // assign chunk
                            beat.lyrics[li] = lyric.chunks[ci];
                            beat = beat.nextBeat;
                        }
                    }
                }
            }
        }
    }
    Track.ShortNameMaxLength = 10;

    /**
     * @target web
     */
    class TypeConversions {
        static float64ToBytes(v) {
            TypeConversions._dataView.setFloat64(0, v, true);
            return TypeConversions._conversionByteArray;
        }
        static bytesToInt64LE(bytes) {
            TypeConversions._conversionByteArray.set(bytes, 0);
            const int64 = TypeConversions._dataView.getBigInt64(0, true);
            if (int64 <= Number.MAX_SAFE_INTEGER && int64 >= Number.MIN_SAFE_INTEGER) {
                return Number(int64);
            }
            return Number.MAX_SAFE_INTEGER;
        }
        static bytesToFloat64LE(bytes) {
            TypeConversions._conversionByteArray.set(bytes, 0);
            return TypeConversions._dataView.getFloat64(0, true);
        }
        static bytesToFloat32LE(bytes) {
            TypeConversions._conversionByteArray.set(bytes, 0);
            return TypeConversions._dataView.getFloat32(0, true);
        }
        static float32BEToBytes(v) {
            TypeConversions._dataView.setFloat32(0, v, false);
            return TypeConversions._conversionByteArray.slice(0, 4);
        }
        static uint16ToInt16(v) {
            TypeConversions._dataView.setUint16(0, v, true);
            return TypeConversions._dataView.getInt16(0, true);
        }
        static int16ToUint32(v) {
            TypeConversions._dataView.setInt16(0, v, true);
            return TypeConversions._dataView.getUint32(0, true);
        }
        static int32ToUint16(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getUint16(0, true);
        }
        static int32ToInt16(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getInt16(0, true);
        }
        static int32ToUint32(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getUint32(0, true);
        }
        static uint8ToInt8(v) {
            TypeConversions._dataView.setUint8(0, v);
            return TypeConversions._dataView.getInt8(0);
        }
    }
    TypeConversions._conversionBuffer = new ArrayBuffer(8);
    TypeConversions._conversionByteArray = new Uint8Array(TypeConversions._conversionBuffer);
    TypeConversions._dataView = new DataView(TypeConversions._conversionBuffer);

    class IOHelper {
        static readInt32BE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            const ch3 = input.readByte();
            const ch4 = input.readByte();
            return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
        }
        static readFloat32BE(readable) {
            const bits = new Uint8Array(4);
            readable.read(bits, 0, bits.length);
            bits.reverse();
            return TypeConversions.bytesToFloat32LE(bits);
        }
        static readFloat64BE(readable) {
            const bits = new Uint8Array(8);
            readable.read(bits, 0, bits.length);
            bits.reverse();
            return TypeConversions.bytesToFloat64LE(bits);
        }
        static readInt32LE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            const ch3 = input.readByte();
            const ch4 = input.readByte();
            return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
        }
        static readInt64LE(input) {
            const b = new Uint8Array(8);
            input.read(b, 0, b.length);
            return TypeConversions.bytesToInt64LE(b);
        }
        static readUInt32LE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            const ch3 = input.readByte();
            const ch4 = input.readByte();
            return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
        }
        static decodeUInt32LE(data, index) {
            const ch1 = data[index];
            const ch2 = data[index + 1];
            const ch3 = data[index + 2];
            const ch4 = data[index + 3];
            return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
        }
        static readUInt16LE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            return TypeConversions.int32ToUint16((ch2 << 8) | ch1);
        }
        static readInt16LE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch2 << 8) | ch1);
        }
        static readUInt32BE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            const ch3 = input.readByte();
            const ch4 = input.readByte();
            return TypeConversions.int32ToUint32((ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4);
        }
        static readUInt16BE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
        }
        static readInt16BE(input) {
            const ch1 = input.readByte();
            const ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
        }
        static readByteArray(input, length) {
            const v = new Uint8Array(length);
            input.read(v, 0, length);
            return v;
        }
        static read8BitChars(input, length) {
            const b = new Uint8Array(length);
            input.read(b, 0, b.length);
            return IOHelper.toString(b, 'utf-8');
        }
        static read8BitString(input) {
            let s = '';
            let c = input.readByte();
            while (c !== 0) {
                s += String.fromCharCode(c);
                c = input.readByte();
            }
            return s;
        }
        static read8BitStringLength(input, length) {
            let s = '';
            let z = -1;
            for (let i = 0; i < length; i++) {
                const c = input.readByte();
                if (c === 0 && z === -1) {
                    z = i;
                }
                s += String.fromCharCode(c);
            }
            const t = s;
            if (z >= 0) {
                return t.substr(0, z);
            }
            return t;
        }
        static readSInt8(input) {
            const v = input.readByte();
            return ((v & 255) >> 7) * -256 + (v & 255);
        }
        static readInt24(input, index) {
            let i = input[index] | (input[index + 1] << 8) | (input[index + 2] << 16);
            if ((i & 0x800000) === 0x800000) {
                i = i | (0xff << 24);
            }
            return i;
        }
        static readInt16(input, index) {
            return TypeConversions.int32ToInt16(input[index] | (input[index + 1] << 8));
        }
        static toString(data, encoding) {
            const detectedEncoding = IOHelper.detectEncoding(data);
            if (detectedEncoding) {
                encoding = detectedEncoding;
            }
            if (!encoding) {
                encoding = 'utf-8';
            }
            const decoder = new TextDecoder(encoding);
            return decoder.decode(data.buffer);
        }
        static detectEncoding(data) {
            if (data.length > 2 && data[0] === 0xfe && data[1] === 0xff) {
                return 'utf-16be';
            }
            if (data.length > 2 && data[0] === 0xff && data[1] === 0xfe) {
                return 'utf-16le';
            }
            if (data.length > 4 && data[0] === 0x00 && data[1] === 0x00 && data[2] === 0xfe && data[3] === 0xff) {
                return 'utf-32be';
            }
            if (data.length > 4 && data[0] === 0xff && data[1] === 0xfe && data[2] === 0x00 && data[3] === 0x00) {
                return 'utf-32le';
            }
            return null;
        }
        static stringToBytes(str) {
            const decoder = new TextEncoder();
            return decoder.encode(str);
        }
        static writeInt32BE(o, v) {
            o.writeByte((v >> 24) & 0xff);
            o.writeByte((v >> 16) & 0xff);
            o.writeByte((v >> 8) & 0xff);
            o.writeByte((v >> 0) & 0xff);
        }
        static writeInt32LE(o, v) {
            o.writeByte((v >> 0) & 0xff);
            o.writeByte((v >> 8) & 0xff);
            o.writeByte((v >> 16) & 0xff);
            o.writeByte((v >> 24) & 0xff);
        }
        static writeUInt16LE(o, v) {
            o.writeByte((v >> 0) & 0xff);
            o.writeByte((v >> 8) & 0xff);
        }
        static writeInt16LE(o, v) {
            o.writeByte((v >> 0) & 0xff);
            o.writeByte((v >> 8) & 0xff);
        }
        static writeInt16BE(o, v) {
            o.writeByte((v >> 8) & 0xff);
            o.writeByte((v >> 0) & 0xff);
        }
        static writeFloat32BE(o, v) {
            const b = TypeConversions.float32BEToBytes(v);
            o.write(b, 0, b.length);
        }
    }

    class ByteBuffer {
        constructor() {
            this.length = 0;
            this.position = 0;
        }
        get bytesWritten() {
            return this.position;
        }
        getBuffer() {
            return this._buffer;
        }
        static empty() {
            return ByteBuffer.withCapacity(0);
        }
        static withCapacity(capacity) {
            const buffer = new ByteBuffer();
            buffer._buffer = new Uint8Array(capacity);
            return buffer;
        }
        static fromBuffer(data) {
            const buffer = new ByteBuffer();
            buffer._buffer = data;
            buffer.length = data.length;
            return buffer;
        }
        static fromString(contents) {
            const byteArray = IOHelper.stringToBytes(contents);
            return ByteBuffer.fromBuffer(byteArray);
        }
        reset() {
            this.position = 0;
        }
        skip(offset) {
            this.position += offset;
        }
        readByte() {
            const n = this.length - this.position;
            if (n <= 0) {
                return -1;
            }
            return this._buffer[this.position++];
        }
        read(buffer, offset, count) {
            let n = this.length - this.position;
            if (n > count) {
                n = count;
            }
            if (n <= 0) {
                return 0;
            }
            buffer.set(this._buffer.subarray(this.position, this.position + n), offset);
            this.position += n;
            return n;
        }
        writeByte(value) {
            const i = this.position + 1;
            this.ensureCapacity(i);
            this._buffer[this.position] = value & 0xff;
            if (i > this.length) {
                this.length = i;
            }
            this.position = i;
        }
        write(buffer, offset, count) {
            const i = this.position + count;
            this.ensureCapacity(i);
            const count1 = Math.min(count, buffer.length - offset);
            this._buffer.set(buffer.subarray(offset, offset + count1), this.position);
            if (i > this.length) {
                this.length = i;
            }
            this.position = i;
        }
        ensureCapacity(value) {
            if (value > this._buffer.length) {
                let newCapacity = value;
                if (newCapacity < 256) {
                    newCapacity = 256;
                }
                if (newCapacity < this._buffer.length * 2) {
                    newCapacity = this._buffer.length * 2;
                }
                const newBuffer = new Uint8Array(newCapacity);
                if (this.length > 0) {
                    newBuffer.set(this._buffer.subarray(0, 0 + this.length), 0);
                }
                this._buffer = newBuffer;
            }
        }
        readAll() {
            return this.toArray();
        }
        toArray() {
            const copy = new Uint8Array(this.length);
            copy.set(this._buffer.subarray(0, 0 + this.length), 0);
            return copy;
        }
        copyTo(destination) {
            destination.write(this._buffer, 0, this.length);
        }
    }

    /**
     * Lists all directions which can be applied to a masterbar.
     */
    var Direction;
    (function (Direction) {
        Direction[Direction["TargetFine"] = 0] = "TargetFine";
        Direction[Direction["TargetSegno"] = 1] = "TargetSegno";
        Direction[Direction["TargetSegnoSegno"] = 2] = "TargetSegnoSegno";
        Direction[Direction["TargetCoda"] = 3] = "TargetCoda";
        Direction[Direction["TargetDoubleCoda"] = 4] = "TargetDoubleCoda";
        Direction[Direction["JumpDaCapo"] = 5] = "JumpDaCapo";
        Direction[Direction["JumpDaCapoAlCoda"] = 6] = "JumpDaCapoAlCoda";
        Direction[Direction["JumpDaCapoAlDoubleCoda"] = 7] = "JumpDaCapoAlDoubleCoda";
        Direction[Direction["JumpDaCapoAlFine"] = 8] = "JumpDaCapoAlFine";
        Direction[Direction["JumpDalSegno"] = 9] = "JumpDalSegno";
        Direction[Direction["JumpDalSegnoAlCoda"] = 10] = "JumpDalSegnoAlCoda";
        Direction[Direction["JumpDalSegnoAlDoubleCoda"] = 11] = "JumpDalSegnoAlDoubleCoda";
        Direction[Direction["JumpDalSegnoAlFine"] = 12] = "JumpDalSegnoAlFine";
        Direction[Direction["JumpDalSegnoSegno"] = 13] = "JumpDalSegnoSegno";
        Direction[Direction["JumpDalSegnoSegnoAlCoda"] = 14] = "JumpDalSegnoSegnoAlCoda";
        Direction[Direction["JumpDalSegnoSegnoAlDoubleCoda"] = 15] = "JumpDalSegnoSegnoAlDoubleCoda";
        Direction[Direction["JumpDalSegnoSegnoAlFine"] = 16] = "JumpDalSegnoSegnoAlFine";
        Direction[Direction["JumpDaCoda"] = 17] = "JumpDaCoda";
        Direction[Direction["JumpDaDoubleCoda"] = 18] = "JumpDaDoubleCoda";
    })(Direction || (Direction = {}));

    /**
     * Lists all types of fermatas
     */
    var FermataType;
    (function (FermataType) {
        /**
         * A short fermata (triangle symbol)
         */
        FermataType[FermataType["Short"] = 0] = "Short";
        /**
         * A medium fermata (round symbol)
         */
        FermataType[FermataType["Medium"] = 1] = "Medium";
        /**
         * A long fermata (rectangular symbol)
         */
        FermataType[FermataType["Long"] = 2] = "Long";
    })(FermataType || (FermataType = {}));
    /**
     * Represents a fermata.
     * @json
     * @json_strict
     */
    class Fermata {
        constructor() {
            /**
             * Gets or sets the type of fermata.
             */
            this.type = FermataType.Short;
            /**
             * Gets or sets the actual length of the fermata.
             */
            this.length = 0;
        }
    }

    var BeamDirection;
    (function (BeamDirection) {
        BeamDirection[BeamDirection["Up"] = 0] = "Up";
        BeamDirection[BeamDirection["Down"] = 1] = "Down";
    })(BeamDirection || (BeamDirection = {}));

    /**
     * A list of terminals recognized by the alphaTex-parser
     */
    var AlphaTexSymbols;
    (function (AlphaTexSymbols) {
        AlphaTexSymbols[AlphaTexSymbols["No"] = 0] = "No";
        AlphaTexSymbols[AlphaTexSymbols["Eof"] = 1] = "Eof";
        AlphaTexSymbols[AlphaTexSymbols["Number"] = 2] = "Number";
        AlphaTexSymbols[AlphaTexSymbols["DoubleDot"] = 3] = "DoubleDot";
        AlphaTexSymbols[AlphaTexSymbols["Dot"] = 4] = "Dot";
        AlphaTexSymbols[AlphaTexSymbols["String"] = 5] = "String";
        AlphaTexSymbols[AlphaTexSymbols["Tuning"] = 6] = "Tuning";
        AlphaTexSymbols[AlphaTexSymbols["LParensis"] = 7] = "LParensis";
        AlphaTexSymbols[AlphaTexSymbols["RParensis"] = 8] = "RParensis";
        AlphaTexSymbols[AlphaTexSymbols["LBrace"] = 9] = "LBrace";
        AlphaTexSymbols[AlphaTexSymbols["RBrace"] = 10] = "RBrace";
        AlphaTexSymbols[AlphaTexSymbols["Pipe"] = 11] = "Pipe";
        AlphaTexSymbols[AlphaTexSymbols["MetaCommand"] = 12] = "MetaCommand";
        AlphaTexSymbols[AlphaTexSymbols["Multiply"] = 13] = "Multiply";
        AlphaTexSymbols[AlphaTexSymbols["LowerThan"] = 14] = "LowerThan";
    })(AlphaTexSymbols || (AlphaTexSymbols = {}));
    var StaffMetaResult;
    (function (StaffMetaResult) {
        StaffMetaResult[StaffMetaResult["KnownStaffMeta"] = 0] = "KnownStaffMeta";
        StaffMetaResult[StaffMetaResult["UnknownStaffMeta"] = 1] = "UnknownStaffMeta";
        StaffMetaResult[StaffMetaResult["EndOfMetaDetected"] = 2] = "EndOfMetaDetected";
    })(StaffMetaResult || (StaffMetaResult = {}));
    class AlphaTexError extends AlphaTabError {
        constructor(message, position, line, col, nonTerm, expected, symbol, symbolData = null) {
            super(exports.AlphaTabErrorType.AlphaTex, message);
            this.position = position;
            this.line = line;
            this.col = col;
            this.nonTerm = nonTerm ?? '';
            this.expected = expected ?? AlphaTexSymbols.No;
            this.symbol = symbol ?? AlphaTexSymbols.No;
            this.symbolData = symbolData;
            Object.setPrototypeOf(this, AlphaTexError.prototype);
        }
        static symbolError(position, line, col, nonTerm, expected, symbol, symbolData = null) {
            let message = `MalFormed AlphaTex: @${position} (line ${line}, col ${col}): Error on block ${nonTerm}`;
            if (expected !== symbol) {
                message += `, expected a ${AlphaTexSymbols[expected]} found a ${AlphaTexSymbols[symbol]}`;
                if (symbolData !== null) {
                    message += `: '${symbolData}'`;
                }
            }
            else {
                message += `, invalid value: '${symbolData}'`;
            }
            return new AlphaTexError(message, position, line, col, nonTerm, expected, symbol, symbolData);
        }
        static errorMessage(message, position, line, col) {
            message = `MalFormed AlphaTex: @${position} (line ${line}, col ${col}): ${message}`;
            return new AlphaTexError(message, position, line, col, null, null, null, null);
        }
    }
    var AlphaTexAccidentalMode;
    (function (AlphaTexAccidentalMode) {
        AlphaTexAccidentalMode[AlphaTexAccidentalMode["Auto"] = 0] = "Auto";
        AlphaTexAccidentalMode[AlphaTexAccidentalMode["Explicit"] = 1] = "Explicit";
    })(AlphaTexAccidentalMode || (AlphaTexAccidentalMode = {}));
    /**
     * This importer can parse alphaTex markup into a score structure.
     */
    class AlphaTexImporter extends ScoreImporter {
        constructor() {
            super(...arguments);
            this._trackChannel = 0;
            this._barIndex = 0;
            this._voiceIndex = 0;
            this._input = '';
            this._ch = AlphaTexImporter.Eof;
            // Keeps track of where in input string we are
            this._curChPos = 0;
            this._line = 1;
            this._col = 0;
            // Last known position that had valid syntax/symbols
            this._lastValidSpot = [0, 1, 0];
            this._sy = AlphaTexSymbols.No;
            this._syData = '';
            this._allowNegatives = false;
            this._allowFloat = false;
            this._allowTuning = false;
            this._currentDuration = Duration.QuadrupleWhole;
            this._currentDynamics = DynamicValue.PPP;
            this._currentTuplet = 0;
            this._staffHasExplicitDisplayTransposition = false;
            this._staffHasExplicitTuning = false;
            this._staffTuningApplied = false;
            this._percussionArticulationNames = new Map();
            this._sustainPedalToBeat = new Map();
            this._slurs = new Map();
            this._articulationValueToIndex = new Map();
            this._accidentalMode = AlphaTexAccidentalMode.Explicit;
            this._syncPoints = [];
            this.logErrors = false;
        }
        get name() {
            return 'AlphaTex';
        }
        initFromString(tex, settings) {
            this.data = ByteBuffer.empty();
            this._input = tex;
            this.settings = settings;
            // when beginning reading a new score we reset the IDs.
            Score.resetIds();
        }
        readScore() {
            try {
                if (this.data.length > 0) {
                    this._input = IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
                }
                this._allowTuning = true;
                this._lyrics = new Map();
                this._sustainPedalToBeat = new Map();
                this.createDefaultScore();
                this._curChPos = 0;
                this._line = 1;
                this._col = 0;
                this.saveValidSpot();
                this._currentDuration = Duration.Quarter;
                this._currentDynamics = DynamicValue.F;
                this._currentTuplet = 1;
                this._ch = this.nextChar();
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.LowerThan) {
                    // potential XML, stop parsing (alphaTex never starts with <)
                    throw new UnsupportedFormatError("Unknown start sign '<' (meant to import as XML?)");
                }
                if (this._sy !== AlphaTexSymbols.Eof) {
                    const anyMetaRead = this.metaData();
                    const anyBarsRead = this.bars();
                    if (!anyMetaRead && !anyBarsRead) {
                        throw new UnsupportedFormatError('No alphaTex data found');
                    }
                    if (this._sy === AlphaTexSymbols.Dot) {
                        this._sy = this.newSy();
                        this.syncPoints();
                    }
                }
                ModelUtils.consolidate(this._score);
                this._score.finish(this.settings);
                ModelUtils.trimEmptyBarsAtEnd(this._score);
                this._score.rebuildRepeatGroups();
                this._score.applyFlatSyncPoints(this._syncPoints);
                for (const [track, lyrics] of this._lyrics) {
                    this._score.tracks[track].applyLyrics(lyrics);
                }
                for (const [sustainPedal, beat] of this._sustainPedalToBeat) {
                    const duration = beat.voice.bar.masterBar.calculateDuration();
                    sustainPedal.ratioPosition = beat.playbackStart / duration;
                }
                return this._score;
            }
            catch (e) {
                if (e instanceof AlphaTexError) {
                    throw new UnsupportedFormatError(e.message, e);
                }
                throw e;
            }
        }
        syncPoints() {
            while (this._sy !== AlphaTexSymbols.Eof) {
                this.syncPoint();
            }
        }
        syncPoint() {
            // \sync BarIndex Occurence MillisecondOffset
            // \sync BarIndex Occurence MillisecondOffset RatioPosition
            if (this._sy !== AlphaTexSymbols.MetaCommand || this._syData !== 'sync') {
                this.error('syncPoint', AlphaTexSymbols.MetaCommand, true);
            }
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('syncPointBarIndex', AlphaTexSymbols.Number, true);
            }
            const barIndex = this._syData;
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('syncPointBarOccurence', AlphaTexSymbols.Number, true);
            }
            const barOccurence = this._syData;
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('syncPointBarMillis', AlphaTexSymbols.Number, true);
            }
            const millisecondOffset = this._syData;
            this._allowFloat = true;
            this._sy = this.newSy();
            this._allowFloat = false;
            let barPosition = 0;
            if (this._sy === AlphaTexSymbols.Number) {
                barPosition = this._syData;
                this._sy = this.newSy();
            }
            this._syncPoints.push({
                barIndex,
                barOccurence,
                barPosition,
                millisecondOffset
            });
        }
        error(nonterm, expected, wrongSymbol = true) {
            let receivedSymbol;
            let showSyData = false;
            if (wrongSymbol) {
                receivedSymbol = this._sy;
                if (
                // These are the only symbols that can have associated _syData set
                receivedSymbol === AlphaTexSymbols.String ||
                    receivedSymbol === AlphaTexSymbols.Number ||
                    receivedSymbol === AlphaTexSymbols.MetaCommand // ||
                // Tuning does not have a toString() yet, therefore excluded.
                // receivedSymbol === AlphaTexSymbols.Tuning
                ) {
                    showSyData = true;
                }
            }
            else {
                receivedSymbol = expected;
            }
            const e = AlphaTexError.symbolError(this._lastValidSpot[0], this._lastValidSpot[1], this._lastValidSpot[2], nonterm, expected, receivedSymbol, showSyData ? this._syData : null);
            if (this.logErrors) {
                Logger.error(this.name, e.message);
            }
            throw e;
        }
        errorMessage(message) {
            const e = AlphaTexError.errorMessage(message, this._lastValidSpot[0], this._lastValidSpot[1], this._lastValidSpot[2]);
            if (this.logErrors) {
                Logger.error(this.name, e.message);
            }
            throw e;
        }
        /**
         * Initializes the song with some required default values.
         * @returns
         */
        createDefaultScore() {
            this._score = new Score();
            this._score.tempo = 120;
            this._score.tempoLabel = '';
            this.newTrack();
        }
        newTrack() {
            this._currentTrack = new Track();
            this._currentTrack.ensureStaveCount(1);
            this._currentTrack.playbackInfo.program = 25;
            this._currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
            this._currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
            const staff = this._currentTrack.staves[0];
            staff.displayTranspositionPitch = 0;
            staff.stringTuning.tunings = Tuning.getDefaultTuningFor(6).tunings;
            this._articulationValueToIndex.clear();
            this.beginStaff(staff);
            this._score.addTrack(this._currentTrack);
            this._lyrics.set(this._currentTrack.index, []);
            this._currentDynamics = DynamicValue.F;
        }
        /**
         * Converts a clef string into the clef value.
         * @param str the string to convert
         * @returns the clef value
         */
        parseClefFromString(str) {
            switch (str.toLowerCase()) {
                case 'g2':
                case 'treble':
                    return Clef.G2;
                case 'f4':
                case 'bass':
                    return Clef.F4;
                case 'c3':
                case 'tenor':
                    return Clef.C3;
                case 'c4':
                case 'alto':
                    return Clef.C4;
                case 'n':
                case 'neutral':
                    return Clef.Neutral;
                default:
                    return Clef.G2;
                // error("clef-value", AlphaTexSymbols.String, false);
            }
        }
        /**
         * Converts a clef tuning into the clef value.
         * @param i the tuning value to convert
         * @returns the clef value
         */
        parseClefFromInt(i) {
            switch (i) {
                case 43:
                    return Clef.G2;
                case 65:
                    return Clef.F4;
                case 48:
                    return Clef.C3;
                case 60:
                    return Clef.C4;
                default:
                    return Clef.G2;
            }
        }
        parseTripletFeelFromString(str) {
            switch (str.toLowerCase()) {
                case 'no':
                case 'none':
                    return TripletFeel.NoTripletFeel;
                case 't16':
                case 'triplet-16th':
                    return TripletFeel.Triplet16th;
                case 't8':
                case 'triplet-8th':
                    return TripletFeel.Triplet8th;
                case 'd16':
                case 'dotted-16th':
                    return TripletFeel.Dotted16th;
                case 'd8':
                case 'dotted-8th':
                    return TripletFeel.Dotted8th;
                case 's16':
                case 'scottish-16th':
                    return TripletFeel.Scottish16th;
                case 's8':
                case 'scottish-8th':
                    return TripletFeel.Scottish8th;
                default:
                    return TripletFeel.NoTripletFeel;
            }
        }
        parseTripletFeelFromInt(i) {
            switch (i) {
                case 0:
                    return TripletFeel.NoTripletFeel;
                case 1:
                    return TripletFeel.Triplet16th;
                case 2:
                    return TripletFeel.Triplet8th;
                case 3:
                    return TripletFeel.Dotted16th;
                case 4:
                    return TripletFeel.Dotted8th;
                case 5:
                    return TripletFeel.Scottish16th;
                case 6:
                    return TripletFeel.Scottish8th;
                default:
                    return TripletFeel.NoTripletFeel;
            }
        }
        /**
         * Converts a keysignature string into the assocciated value.
         * @param str the string to convert
         * @returns the assocciated keysignature value
         */
        parseKeySignature(str) {
            switch (str.toLowerCase()) {
                case 'cb':
                case 'cbmajor':
                case 'abminor':
                    return KeySignature.Cb;
                case 'gb':
                case 'gbmajor':
                case 'ebminor':
                    return KeySignature.Gb;
                case 'db':
                case 'dbmajor':
                case 'bbminor':
                    return KeySignature.Db;
                case 'ab':
                case 'abmajor':
                case 'fminor':
                    return KeySignature.Ab;
                case 'eb':
                case 'ebmajor':
                case 'cminor':
                    return KeySignature.Eb;
                case 'bb':
                case 'bbmajor':
                case 'gminor':
                    return KeySignature.Bb;
                case 'f':
                case 'fmajor':
                case 'dminor':
                    return KeySignature.F;
                case 'c':
                case 'cmajor':
                case 'aminor':
                    return KeySignature.C;
                case 'g':
                case 'gmajor':
                case 'eminor':
                    return KeySignature.G;
                case 'd':
                case 'dmajor':
                case 'bminor':
                    return KeySignature.D;
                case 'a':
                case 'amajor':
                case 'f#minor':
                    return KeySignature.A;
                case 'e':
                case 'emajor':
                case 'c#minor':
                    return KeySignature.E;
                case 'b':
                case 'bmajor':
                case 'g#minor':
                    return KeySignature.B;
                case 'f#':
                case 'f#major':
                case 'd#minor':
                    return KeySignature.FSharp;
                case 'c#':
                case 'c#major':
                case 'a#minor':
                    return KeySignature.CSharp;
                default:
                    return KeySignature.C;
                // error("keysignature-value", AlphaTexSymbols.String, false); return 0
            }
        }
        parseKeySignatureType(str) {
            if (str.toLowerCase().endsWith('minor')) {
                return KeySignatureType.Minor;
            }
            return KeySignatureType.Major;
        }
        /**
         * Reads, saves, and returns the next character of the source stream.
         */
        nextChar() {
            if (this._curChPos < this._input.length) {
                this._ch = this._input.charCodeAt(this._curChPos++);
                // line/col countingF
                if (this._ch === 0x0a /* \n */) {
                    this._line++;
                    this._col = 0;
                }
                else {
                    this._col++;
                }
            }
            else {
                this._ch = AlphaTexImporter.Eof;
            }
            return this._ch;
        }
        /**
         * Saves the current position, line, and column.
         * All parsed data until this point is assumed to be valid.
         */
        saveValidSpot() {
            this._lastValidSpot = [this._curChPos, this._line, this._col];
        }
        /**
         * Reads, saves, and returns the next terminal symbol.
         */
        newSy() {
            // When a new symbol is read, the previous one is assumed to be valid.
            // The valid spot is also moved forward when reading past whitespace or comments.
            this.saveValidSpot();
            this._sy = AlphaTexSymbols.No;
            while (this._sy === AlphaTexSymbols.No) {
                if (this._ch === AlphaTexImporter.Eof) {
                    this._sy = AlphaTexSymbols.Eof;
                }
                else if (AlphaTexImporter.isWhiteSpace(this._ch)) {
                    // skip whitespaces
                    this._ch = this.nextChar();
                    this.saveValidSpot();
                }
                else if (this._ch === 0x2f /* / */) {
                    this._ch = this.nextChar();
                    if (this._ch === 0x2f /* / */) {
                        // single line comment
                        while (this._ch !== 0x0d /* \r */ &&
                            this._ch !== 0x0a /* \n */ &&
                            this._ch !== AlphaTexImporter.Eof) {
                            this._ch = this.nextChar();
                        }
                    }
                    else if (this._ch === 0x2a /* * */) {
                        // multiline comment
                        while (this._ch !== AlphaTexImporter.Eof) {
                            if (this._ch === 0x2a /* * */) {
                                this._ch = this.nextChar();
                                if (this._ch === 0x2f /* / */) {
                                    this._ch = this.nextChar();
                                    break;
                                }
                            }
                            else {
                                this._ch = this.nextChar();
                            }
                        }
                    }
                    else {
                        this.error('comment', AlphaTexSymbols.String, false);
                    }
                    this.saveValidSpot();
                }
                else if (this._ch === 0x22 /* " */ || this._ch === 0x27 /* ' */) {
                    const startChar = this._ch;
                    this._ch = this.nextChar();
                    let s = '';
                    this._sy = AlphaTexSymbols.String;
                    while (this._ch !== startChar && this._ch !== AlphaTexImporter.Eof) {
                        // escape sequences
                        if (this._ch === 0x5c /* \ */) {
                            this._ch = this.nextChar();
                            if (this._ch === 0x5c /* \\ */) {
                                s += '\\';
                            }
                            else if (this._ch === startChar /* \<startchar> */) {
                                s += String.fromCharCode(this._ch);
                            }
                            else if (this._ch === 0x52 /* \R */ || this._ch === 0x72 /* \r */) {
                                s += '\r';
                            }
                            else if (this._ch === 0x4e /* \N */ || this._ch === 0x6e /* \n */) {
                                s += '\n';
                            }
                            else if (this._ch === 0x54 /* \T */ || this._ch === 0x74 /* \t */) {
                                s += '\t';
                            }
                            else {
                                this.errorMessage('Unsupported escape sequence');
                            }
                        }
                        else {
                            s += String.fromCharCode(this._ch);
                        }
                        this._ch = this.nextChar();
                    }
                    if (this._ch === AlphaTexImporter.Eof) {
                        this.errorMessage('String opened but never closed');
                    }
                    this._syData = s;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x2d /* - */) {
                    // negative number
                    // is number?
                    if (this._allowNegatives) {
                        this.readNumberOrName();
                    }
                    else {
                        this._sy = AlphaTexSymbols.String;
                        this._syData = this.readName();
                    }
                }
                else if (this._ch === 0x2e /* . */) {
                    this._sy = AlphaTexSymbols.Dot;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x3a /* : */) {
                    this._sy = AlphaTexSymbols.DoubleDot;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x28 /* ( */) {
                    this._sy = AlphaTexSymbols.LParensis;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x5c /* \ */) {
                    this._ch = this.nextChar();
                    this._sy = AlphaTexSymbols.MetaCommand;
                    // allow double backslash (easier to test when copying from escaped Strings)
                    if (this._ch === 0x5c /* \ */) {
                        this._ch = this.nextChar();
                    }
                    this._syData = this.readName();
                }
                else if (this._ch === 0x29 /* ) */) {
                    this._sy = AlphaTexSymbols.RParensis;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7b /* { */) {
                    this._sy = AlphaTexSymbols.LBrace;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7d /* } */) {
                    this._sy = AlphaTexSymbols.RBrace;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7c /* | */) {
                    this._sy = AlphaTexSymbols.Pipe;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x2a /* * */) {
                    this._sy = AlphaTexSymbols.Multiply;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x3c /* < */) {
                    this._sy = AlphaTexSymbols.LowerThan;
                    this._ch = this.nextChar();
                }
                else if (this.isDigit(this._ch)) {
                    this.readNumberOrName();
                }
                else if (AlphaTexImporter.isNameLetter(this._ch)) {
                    const name = this.readName();
                    const tuning = this._allowTuning ? ModelUtils.parseTuning(name) : null;
                    if (tuning) {
                        this._sy = AlphaTexSymbols.Tuning;
                        this._syData = tuning;
                    }
                    else {
                        this._sy = AlphaTexSymbols.String;
                        this._syData = name;
                    }
                }
                else {
                    this.error('symbol', AlphaTexSymbols.String, false);
                }
            }
            return this._sy;
        }
        readNumberOrName() {
            let str = '';
            let isNumber = true;
            do {
                str += String.fromCharCode(this._ch);
                if (!this.isDigit(this._ch)) {
                    isNumber = false;
                }
                this._ch = this.nextChar();
            } while (this.isDigit(this._ch) || AlphaTexImporter.isNameLetter(this._ch));
            if (isNumber) {
                this._sy = AlphaTexSymbols.Number;
                this._syData = this._allowFloat ? Number.parseFloat(str) : Number.parseInt(str);
            }
            else {
                this._sy = AlphaTexSymbols.String;
                this._syData = str;
            }
        }
        /**
         * Checks if the given character is a valid letter for a name.
         * (no control characters, whitespaces, numbers or dots)
         */
        static isNameLetter(ch) {
            return (!AlphaTexImporter.isTerminal(ch) && // no control characters, whitespaces, numbers or dots
                ((0x21 <= ch && ch <= 0x2f) || (0x3a <= ch && ch <= 0x7e) || 0x80 <= ch) // Unicode Symbols
            );
        }
        static isTerminal(ch) {
            return (ch === 0x2e /* . */ ||
                ch === 0x7b /* { */ ||
                ch === 0x7d /* } */ ||
                ch === 0x5b /* [ */ ||
                ch === 0x5d /* ] */ ||
                ch === 0x28 /* ( */ ||
                ch === 0x29 /* ) */ ||
                ch === 0x7c /* | */ ||
                ch === 0x27 /* ' */ ||
                ch === 0x22 /* " */ ||
                ch === 0x2a /* * */ ||
                ch === 0x5c /* \ */);
        }
        static isWhiteSpace(ch) {
            return (ch === 0x09 /* \t */ ||
                ch === 0x0a /* \n */ ||
                ch === 0x0b /* \v */ ||
                ch === 0x0d /* \r */ ||
                ch === 0x20 /* space */);
        }
        isDigit(ch) {
            return ((ch >= 0x30 && ch <= 0x39) /* 0-9 */ ||
                (this._allowNegatives && ch === 0x2d) /* - */ || // allow minus sign if negatives
                (this._allowFloat && ch === 0x2e) /* . */ // allow dot if float
            );
        }
        /**
         * Reads a string from the stream.
         * @returns the read string.
         */
        readName() {
            let str = '';
            do {
                str += String.fromCharCode(this._ch);
                this._ch = this.nextChar();
            } while (AlphaTexImporter.isNameLetter(this._ch) || this.isDigit(this._ch));
            return str;
        }
        metaData() {
            let anyTopLevelMeta = false;
            let anyOtherMeta = false;
            let continueReading = true;
            while (this._sy === AlphaTexSymbols.MetaCommand && continueReading) {
                const metadataTag = this._syData.toLowerCase();
                switch (metadataTag) {
                    case 'title':
                    case 'subtitle':
                    case 'artist':
                    case 'album':
                    case 'words':
                    case 'music':
                    case 'copyright':
                    case 'instructions':
                    case 'notices':
                    case 'tab':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            // Known issue: Strings that happen to be parsed as valid Tunings or positive Numbers will not pass this.
                            // Need to use quotes in that case, or rewrite parsing logic.
                            this.error(metadataTag, AlphaTexSymbols.String, true);
                        }
                        const metadataValue = this._syData;
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        let element = ScoreSubElement.ChordDiagramList;
                        switch (metadataTag) {
                            case 'title':
                                this._score.title = metadataValue;
                                element = ScoreSubElement.Title;
                                break;
                            case 'subtitle':
                                this._score.subTitle = metadataValue;
                                element = ScoreSubElement.SubTitle;
                                break;
                            case 'artist':
                                this._score.artist = metadataValue;
                                element = ScoreSubElement.Artist;
                                break;
                            case 'album':
                                this._score.album = metadataValue;
                                element = ScoreSubElement.Album;
                                break;
                            case 'words':
                                this._score.words = metadataValue;
                                element = ScoreSubElement.Words;
                                break;
                            case 'music':
                                this._score.music = metadataValue;
                                element = ScoreSubElement.Music;
                                break;
                            case 'copyright':
                                this._score.copyright = metadataValue;
                                element = ScoreSubElement.Copyright;
                                break;
                            case 'instructions':
                                this._score.instructions = metadataValue;
                                break;
                            case 'notices':
                                this._score.notices = metadataValue;
                                break;
                            case 'tab':
                                this._score.tab = metadataValue;
                                element = ScoreSubElement.Transcriber;
                                break;
                        }
                        if (element !== ScoreSubElement.ChordDiagramList) {
                            this.headerFooterStyle(element);
                        }
                        break;
                    case 'copyright2':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error(metadataTag, AlphaTexSymbols.String, true);
                        }
                        this.headerFooterStyle(ScoreSubElement.CopyrightSecondLine);
                        anyTopLevelMeta = true;
                        break;
                    case 'wordsandmusic':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error(metadataTag, AlphaTexSymbols.String, true);
                        }
                        this.headerFooterStyle(ScoreSubElement.WordsAndMusic);
                        anyTopLevelMeta = true;
                        break;
                    case 'tempo':
                        this._allowFloat = true;
                        this._sy = this.newSy();
                        this._allowFloat = false;
                        if (this._sy === AlphaTexSymbols.Number) {
                            this._score.tempo = this._syData;
                        }
                        else {
                            this.error('tempo', AlphaTexSymbols.Number, true);
                        }
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.tempoLabel = this._syData;
                            this._sy = this.newSy();
                        }
                        anyTopLevelMeta = true;
                        break;
                    case 'defaultsystemslayout':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.Number) {
                            this._score.defaultSystemsLayout = this._syData;
                            this._sy = this.newSy();
                            anyTopLevelMeta = true;
                        }
                        else {
                            this.error('default-systems-layout', AlphaTexSymbols.Number, true);
                        }
                        break;
                    case 'systemslayout':
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        while (this._sy === AlphaTexSymbols.Number) {
                            this._score.systemsLayout.push(this._syData);
                            this._sy = this.newSy();
                        }
                        break;
                    case 'hidedynamics':
                        this._score.stylesheet.hideDynamics = true;
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'showdynamics':
                        this._score.stylesheet.hideDynamics = false;
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'bracketextendmode':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('bracketExtendMode', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.bracketExtendMode = this.parseBracketExtendMode(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'usesystemsignseparator':
                        this._score.stylesheet.useSystemSignSeparator = true;
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'multibarrest':
                        this._score.stylesheet.multiTrackMultiBarRest = true;
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'singletracktracknamepolicy':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('singleTrackTrackNamePolicy', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.singleTrackTrackNamePolicy = this.parseTrackNamePolicy(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'multitracktracknamepolicy':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('multiTrackTrackNamePolicy', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.multiTrackTrackNamePolicy = this.parseTrackNamePolicy(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'firstsystemtracknamemode':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('firstSystemTrackNameMode', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.firstSystemTrackNameMode = this.parseTrackNameMode(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'othersystemstracknamemode':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('otherSystemsTrackNameMode', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.otherSystemsTrackNameMode = this.parseTrackNameMode(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'firstsystemtracknameorientation':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('firstSystemTrackNameOrientation', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.firstSystemTrackNameOrientation = this.parseTrackNameOrientation(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    case 'othersystemstracknameorientation':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('otherSystemsTrackNameOrientation', AlphaTexSymbols.String, true);
                        }
                        this._score.stylesheet.otherSystemsTrackNameOrientation = this.parseTrackNameOrientation(this._syData);
                        this._sy = this.newSy();
                        anyTopLevelMeta = true;
                        break;
                    default:
                        switch (this.handleStaffMeta()) {
                            case StaffMetaResult.KnownStaffMeta:
                                anyOtherMeta = true;
                                break;
                            case StaffMetaResult.UnknownStaffMeta:
                                if (anyTopLevelMeta || anyOtherMeta) {
                                    // invalid meta encountered
                                    this.error('metaDataTags', AlphaTexSymbols.String, false);
                                }
                                else {
                                    // fall forward to bar meta if unknown score meta was found
                                    continueReading = false;
                                }
                                break;
                            case StaffMetaResult.EndOfMetaDetected:
                                continueReading = false;
                                break;
                        }
                        break;
                }
            }
            if (anyTopLevelMeta) {
                if (this._sy !== AlphaTexSymbols.Dot) {
                    this.error('song', AlphaTexSymbols.Dot, true);
                }
                this._sy = this.newSy();
            }
            else if (this._sy === AlphaTexSymbols.Dot) {
                this._sy = this.newSy();
                anyTopLevelMeta = true; // just to indicate that there is an indication of proper alphaTex
            }
            return anyTopLevelMeta || anyOtherMeta;
        }
        headerFooterStyle(element) {
            const style = ModelUtils.getOrCreateHeaderFooterStyle(this._score, element);
            if (style.isVisible === undefined) {
                style.isVisible = true;
            }
            if (this._sy === AlphaTexSymbols.String) {
                const value = this._syData;
                if (value) {
                    style.template = value;
                }
                else {
                    style.isVisible = false;
                }
                this._sy = this.newSy();
            }
            if (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'left':
                        style.textAlign = TextAlign.Left;
                        break;
                    case 'center':
                        style.textAlign = TextAlign.Center;
                        break;
                    case 'right':
                        style.textAlign = TextAlign.Right;
                        break;
                }
                this._sy = this.newSy();
            }
        }
        parseTrackNamePolicy(v) {
            switch (v.toLowerCase()) {
                case 'hidden':
                    return TrackNamePolicy.Hidden;
                case 'allsystems':
                    return TrackNamePolicy.AllSystems;
                // case 'firstsystem':
                default:
                    return TrackNamePolicy.FirstSystem;
            }
        }
        parseTrackNameMode(v) {
            switch (v.toLowerCase()) {
                case 'fullname':
                    return TrackNameMode.FullName;
                // case 'shortname':
                default:
                    return TrackNameMode.ShortName;
            }
        }
        parseTrackNameOrientation(v) {
            switch (v.toLowerCase()) {
                case 'horizontal':
                    return TrackNameOrientation.Horizontal;
                //case 'vertical':
                default:
                    return TrackNameOrientation.Vertical;
            }
        }
        handleStaffMeta() {
            switch (this._syData.toLowerCase()) {
                case 'capo':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        this._currentStaff.capo = this._syData;
                    }
                    else {
                        this.error('capo', AlphaTexSymbols.Number, true);
                    }
                    this._sy = this.newSy();
                    return StaffMetaResult.KnownStaffMeta;
                case 'tuning':
                    this._sy = this.newSy();
                    const strings = this._currentStaff.tuning.length;
                    this._staffHasExplicitTuning = true;
                    this._staffTuningApplied = false;
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            const text = this._syData.toLowerCase();
                            if (text === 'piano' || text === 'none' || text === 'voice') {
                                this.makeCurrentStaffPitched();
                            }
                            else {
                                this.error('tuning', AlphaTexSymbols.Tuning, true);
                            }
                            this._sy = this.newSy();
                            break;
                        case AlphaTexSymbols.Tuning:
                            const tuning = [];
                            do {
                                const t = this._syData;
                                tuning.push(t.realValue);
                                this._sy = this.newSy();
                            } while (this._sy === AlphaTexSymbols.Tuning);
                            this._currentStaff.stringTuning.tunings = tuning;
                            break;
                        default:
                            this.error('tuning', AlphaTexSymbols.Tuning, true);
                            break;
                    }
                    if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'hide') {
                        if (!this._score.stylesheet.perTrackDisplayTuning) {
                            this._score.stylesheet.perTrackDisplayTuning = new Map();
                        }
                        this._score.stylesheet.perTrackDisplayTuning.set(this._currentTrack.index, false);
                        this._sy = this.newSy();
                    }
                    if (strings !== this._currentStaff.tuning.length && (this._currentStaff.chords?.size ?? 0) > 0) {
                        this.errorMessage('Tuning must be defined before any chord');
                    }
                    return StaffMetaResult.KnownStaffMeta;
                case 'instrument':
                    this._sy = this.newSy();
                    this._staffTuningApplied = false;
                    if (this._sy === AlphaTexSymbols.Number) {
                        const instrument = this._syData;
                        if (instrument >= 0 && instrument <= 127) {
                            this._currentTrack.playbackInfo.program = this._syData;
                        }
                        else {
                            this.error('instrument', AlphaTexSymbols.Number, false);
                        }
                    }
                    else if (this._sy === AlphaTexSymbols.String) {
                        const instrumentName = this._syData.toLowerCase();
                        if (instrumentName === 'percussion') {
                            for (const staff of this._currentTrack.staves) {
                                this.applyPercussionStaff(staff);
                            }
                            this._currentTrack.playbackInfo.primaryChannel = SynthConstants.PercussionChannel;
                            this._currentTrack.playbackInfo.secondaryChannel = SynthConstants.PercussionChannel;
                        }
                        else {
                            this._currentTrack.playbackInfo.program = GeneralMidi.getValue(instrumentName);
                        }
                    }
                    else {
                        this.error('instrument', AlphaTexSymbols.Number, true);
                    }
                    this._sy = this.newSy();
                    return StaffMetaResult.KnownStaffMeta;
                case 'lyrics':
                    this._sy = this.newSy();
                    const lyrics = new Lyrics();
                    lyrics.startBar = 0;
                    lyrics.text = '';
                    if (this._sy === AlphaTexSymbols.Number) {
                        lyrics.startBar = this._syData;
                        this._sy = this.newSy();
                    }
                    if (this._sy === AlphaTexSymbols.String) {
                        lyrics.text = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('lyrics', AlphaTexSymbols.String, true);
                    }
                    this._lyrics.get(this._currentTrack.index).push(lyrics);
                    return StaffMetaResult.KnownStaffMeta;
                case 'chord':
                    this._sy = this.newSy();
                    const chord = new Chord();
                    this.chordProperties(chord);
                    if (this._sy === AlphaTexSymbols.String) {
                        chord.name = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('chord-name', AlphaTexSymbols.String, true);
                    }
                    for (let i = 0; i < this._currentStaff.tuning.length; i++) {
                        if (this._sy === AlphaTexSymbols.Number) {
                            chord.strings.push(this._syData);
                        }
                        else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'x') {
                            chord.strings.push(-1);
                        }
                        this._sy = this.newSy();
                    }
                    this._currentStaff.addChord(this.getChordId(this._currentStaff, chord.name), chord);
                    return StaffMetaResult.KnownStaffMeta;
                case 'articulation':
                    this._sy = this.newSy();
                    let name = '';
                    if (this._sy === AlphaTexSymbols.String) {
                        name = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('articulation-name', AlphaTexSymbols.String, true);
                    }
                    if (name === 'defaults') {
                        for (const [defaultName, defaultValue] of PercussionMapper.instrumentArticulationNames) {
                            this._percussionArticulationNames.set(defaultName.toLowerCase(), defaultValue);
                            this._percussionArticulationNames.set(AlphaTexImporter.toArticulationId(defaultName), defaultValue);
                        }
                        return StaffMetaResult.KnownStaffMeta;
                    }
                    let number = 0;
                    if (this._sy === AlphaTexSymbols.Number) {
                        number = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('articulation-number', AlphaTexSymbols.Number, true);
                    }
                    if (!PercussionMapper.instrumentArticulations.has(number)) {
                        this.errorMessage(`Unknown articulation ${number}. Refer to https://www.alphatab.net/docs/alphatex/percussion for available ids`);
                    }
                    this._percussionArticulationNames.set(name.toLowerCase(), number);
                    return StaffMetaResult.KnownStaffMeta;
                case 'accidentals':
                    this.handleAccidentalMode();
                    return StaffMetaResult.KnownStaffMeta;
                case 'displaytranspose':
                    this._allowNegatives = true;
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        this._currentStaff.displayTranspositionPitch = this._syData * -1;
                        this._staffHasExplicitDisplayTransposition = true;
                    }
                    else {
                        this.error('displaytranspose', AlphaTexSymbols.Number, true);
                    }
                    this._allowNegatives = false;
                    this._sy = this.newSy();
                    return StaffMetaResult.KnownStaffMeta;
                case 'transpose':
                    this._allowNegatives = true;
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        this._currentStaff.transpositionPitch = this._syData * -1;
                    }
                    else {
                        this.error('transpose', AlphaTexSymbols.Number, true);
                    }
                    this._allowNegatives = false;
                    this._sy = this.newSy();
                    return StaffMetaResult.KnownStaffMeta;
                case 'track':
                case 'staff':
                    // on empty staves we need to proceeed when starting directly a new track or staff
                    return StaffMetaResult.EndOfMetaDetected;
                case 'voice':
                    this._sy = this.newSy();
                    if (this.handleNewVoice()) {
                        return StaffMetaResult.EndOfMetaDetected;
                    }
                    return StaffMetaResult.KnownStaffMeta;
                default:
                    return StaffMetaResult.UnknownStaffMeta;
            }
        }
        handleAccidentalMode() {
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.String) {
                this.error('accidental-mode', AlphaTexSymbols.String, true);
            }
            switch (this._syData) {
                case 'auto':
                    this._accidentalMode = AlphaTexAccidentalMode.Auto;
                    break;
                case 'explicit':
                    this._accidentalMode = AlphaTexAccidentalMode.Explicit;
                    break;
            }
            this._sy = this.newSy();
        }
        makeCurrentStaffPitched() {
            // clear tuning
            this._currentStaff.stringTuning.tunings = [];
            if (!this._staffHasExplicitDisplayTransposition) {
                this._currentStaff.displayTranspositionPitch = 0;
            }
        }
        /**
         * Encodes a given string to a shorthand text form without spaces or special characters
         */
        static toArticulationId(plain) {
            return plain.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
        }
        applyPercussionStaff(staff) {
            staff.isPercussion = true;
            staff.showTablature = false;
        }
        chordProperties(chord) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'firstfret':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.Number:
                                chord.firstFret = this._syData;
                                break;
                            default:
                                this.error('chord-firstfret', AlphaTexSymbols.Number, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showdiagram':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showDiagram = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showDiagram = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showdiagram', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showfingering':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showDiagram = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showFingering = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showfingering', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showname':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showName = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showName = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showname', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'barre':
                        this._sy = this.newSy();
                        while (this._sy === AlphaTexSymbols.Number) {
                            chord.barreFrets.push(this._syData);
                            this._sy = this.newSy();
                        }
                        break;
                    default:
                        this.error('chord-properties', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('chord-properties', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        bars() {
            const anyData = this.bar();
            while (this._sy !== AlphaTexSymbols.Eof) {
                // read pipe from last bar
                if (this._sy === AlphaTexSymbols.Pipe) {
                    this._sy = this.newSy();
                    this.bar();
                }
                else if (this._sy === AlphaTexSymbols.MetaCommand) {
                    this.bar();
                }
                else {
                    break;
                }
            }
            return anyData;
        }
        trackStaffMeta() {
            if (this._sy !== AlphaTexSymbols.MetaCommand) {
                return false;
            }
            if (this._syData.toLowerCase() === 'track') {
                this._staffHasExplicitDisplayTransposition = false;
                this._staffHasExplicitTuning = false;
                this._staffTuningApplied = false;
                this._sy = this.newSy();
                // new track starting? - if no masterbars it's the \track of the initial track.
                if (this._score.masterBars.length > 0) {
                    this.newTrack();
                }
                // name
                if (this._sy === AlphaTexSymbols.String) {
                    this._currentTrack.name = this._syData;
                    this._sy = this.newSy();
                }
                // short name
                if (this._sy === AlphaTexSymbols.String) {
                    this._currentTrack.shortName = this._syData;
                    this._sy = this.newSy();
                }
                this.trackProperties();
            }
            if (this._sy === AlphaTexSymbols.MetaCommand && this._syData.toLowerCase() === 'staff') {
                this._staffHasExplicitDisplayTransposition = false;
                this._staffHasExplicitTuning = false;
                this._staffTuningApplied = false;
                this._sy = this.newSy();
                if (this._currentTrack.staves[0].bars.length > 0) {
                    const previousWasPercussion = this._currentStaff.isPercussion;
                    this._currentTrack.ensureStaveCount(this._currentTrack.staves.length + 1);
                    this.beginStaff(this._currentTrack.staves[this._currentTrack.staves.length - 1]);
                    if (previousWasPercussion) {
                        this.applyPercussionStaff(this._currentStaff);
                    }
                    this._currentDynamics = DynamicValue.F;
                }
                this.staffProperties();
            }
            if (this._sy === AlphaTexSymbols.MetaCommand && this._syData.toLowerCase() === 'voice') {
                this._sy = this.newSy();
                this.handleNewVoice();
            }
            return true;
        }
        handleNewVoice() {
            if (this._voiceIndex === 0 &&
                (this._currentStaff.bars.length === 0 ||
                    (this._currentStaff.bars.length === 1 && this._currentStaff.bars[0].isEmpty))) {
                // voice marker on the begining of the first voice without any bar yet?
                // -> ignore
                return false;
            }
            // create directly a new empty voice for all bars
            for (const b of this._currentStaff.bars) {
                const v = new Voice$1();
                b.addVoice(v);
            }
            // start using the new voice (see newBar for details on matching)
            this._voiceIndex++;
            this._barIndex = 0;
            return true;
        }
        beginStaff(staff) {
            this._currentStaff = staff;
            this._slurs.clear();
            this._barIndex = 0;
            this._voiceIndex = 0;
        }
        trackProperties() {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'color':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.String) {
                            this.error('track-color', AlphaTexSymbols.String, true);
                        }
                        this._currentTrack.color = Color.fromJson(this._syData);
                        this._sy = this.newSy();
                        break;
                    case 'defaultsystemslayout':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.Number) {
                            this._currentTrack.defaultSystemsLayout = this._syData;
                            this._sy = this.newSy();
                        }
                        else {
                            this.error('default-systems-layout', AlphaTexSymbols.Number, true);
                        }
                        break;
                    case 'systemslayout':
                        this._sy = this.newSy();
                        while (this._sy === AlphaTexSymbols.Number) {
                            this._currentTrack.systemsLayout.push(this._syData);
                            this._sy = this.newSy();
                        }
                        break;
                    case 'volume':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('track-volume', AlphaTexSymbols.Number, true);
                        }
                        this._currentTrack.playbackInfo.volume = ModelUtils.clamp(this._syData, 0, 16);
                        this._sy = this.newSy();
                        break;
                    case 'balance':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('track-balance', AlphaTexSymbols.Number, true);
                        }
                        this._currentTrack.playbackInfo.balance = ModelUtils.clamp(this._syData, 0, 16);
                        this._sy = this.newSy();
                        break;
                    case 'mute':
                        this._sy = this.newSy();
                        this._currentTrack.playbackInfo.isMute = true;
                        break;
                    case 'solo':
                        this._sy = this.newSy();
                        this._currentTrack.playbackInfo.isSolo = true;
                        break;
                    case 'multibarrest':
                        this._sy = this.newSy();
                        if (!this._score.stylesheet.perTrackMultiBarRest) {
                            this._score.stylesheet.perTrackMultiBarRest = new Set();
                        }
                        this._score.stylesheet.perTrackMultiBarRest.add(this._currentTrack.index);
                        break;
                    default:
                        this.error('track-properties', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('track-properties', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        staffProperties() {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            let showStandardNotation = false;
            let showTabs = false;
            let showSlash = false;
            let showNumbered = false;
            while (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'score':
                        showStandardNotation = true;
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.Number) {
                            this._currentStaff.standardNotationLineCount = this._syData;
                            this._sy = this.newSy();
                        }
                        break;
                    case 'tabs':
                        showTabs = true;
                        this._sy = this.newSy();
                        break;
                    case 'slash':
                        showSlash = true;
                        this._sy = this.newSy();
                        break;
                    case 'numbered':
                        showNumbered = true;
                        this._sy = this.newSy();
                        break;
                    default:
                        this.error('staff-properties', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (showStandardNotation || showTabs || showSlash || showNumbered) {
                this._currentStaff.showStandardNotation = showStandardNotation;
                this._currentStaff.showTablature = showTabs;
                this._currentStaff.showSlash = showSlash;
                this._currentStaff.showNumbered = showNumbered;
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('staff-properties', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        bar() {
            const anyStaffMeta = this.trackStaffMeta();
            const bar = this.newBar(this._currentStaff);
            if (this._currentStaff.bars.length > this._score.masterBars.length) {
                const master = new MasterBar();
                this._score.addMasterBar(master);
                if (master.index > 0) {
                    master.timeSignatureDenominator = master.previousMasterBar.timeSignatureDenominator;
                    master.timeSignatureNumerator = master.previousMasterBar.timeSignatureNumerator;
                    master.tripletFeel = master.previousMasterBar.tripletFeel;
                }
            }
            const anyBarMeta = this.barMeta(bar);
            // detect tuning for staff
            const program = this._currentTrack.playbackInfo.program;
            if (!this._staffTuningApplied && !this._staffHasExplicitTuning) {
                // reset to defaults
                this._currentStaff.stringTuning.tunings = [];
                if (program === 15) {
                    // dulcimer E4 B3 G3 D3 A2 E2
                    this._currentStaff.stringTuning.tunings = Tuning.getDefaultTuningFor(6).tunings;
                }
                else if (program >= 24 && program <= 31) {
                    // guitar E4 B3 G3 D3 A2 E2
                    this._currentStaff.stringTuning.tunings = Tuning.getDefaultTuningFor(6).tunings;
                }
                else if (program >= 32 && program <= 39) {
                    // bass G2 D2 A1 E1
                    this._currentStaff.stringTuning.tunings = [43, 38, 33, 28];
                }
                else if (program === 40 ||
                    program === 44 ||
                    program === 45 ||
                    program === 48 ||
                    program === 49 ||
                    program === 50 ||
                    program === 51) {
                    // violin E3 A3 D3 G2
                    this._currentStaff.stringTuning.tunings = [52, 57, 50, 43];
                }
                else if (program === 41) {
                    // viola A3 D3 G2 C2
                    this._currentStaff.stringTuning.tunings = [57, 50, 43, 36];
                }
                else if (program === 42) {
                    // cello A2 D2 G1 C1
                    this._currentStaff.stringTuning.tunings = [45, 38, 31, 24];
                }
                else if (program === 43) {
                    // contrabass
                    // G2 D2 A1 E1
                    this._currentStaff.stringTuning.tunings = [43, 38, 33, 28];
                }
                else if (program === 105) {
                    // banjo
                    // D3 B2 G2 D2 G3
                    this._currentStaff.stringTuning.tunings = [50, 47, 43, 38, 55];
                }
                else if (program === 106) {
                    // shamisen
                    // A3 E3 A2
                    this._currentStaff.stringTuning.tunings = [57, 52, 45];
                }
                else if (program === 107) {
                    // koto
                    // E3 A2 D2 G1
                    this._currentStaff.stringTuning.tunings = [52, 45, 38, 31];
                }
                else if (program === 110) {
                    // Fiddle
                    // E4 A3 D3 G2
                    this._currentStaff.stringTuning.tunings = [64, 57, 50, 43];
                }
                this._staffTuningApplied = true;
            }
            // display transposition
            if (!this._staffHasExplicitDisplayTransposition) {
                if ((program >= 24 && program <= 31) || // Guitar
                    (program >= 32 && program <= 39) || // Bass
                    program === 43 // Contrabass
                ) {
                    // guitar E4 B3 G3 D3 A2 E2
                    this._currentStaff.displayTranspositionPitch = -12;
                }
                else {
                    this._currentStaff.displayTranspositionPitch = 0;
                }
            }
            let anyBeatData = false;
            const voice = bar.voices[this._voiceIndex];
            // if we have a setup like \track \staff \track \staff (without any notes/beats defined)
            // we are at a track meta at this point and we don't read any beats
            const emptyStaffWithNewStart = this._sy === AlphaTexSymbols.MetaCommand &&
                (this._syData.toLowerCase() === 'track' || this._syData.toLowerCase() === 'staff');
            if (!emptyStaffWithNewStart) {
                while (this._sy !== AlphaTexSymbols.Pipe && this._sy !== AlphaTexSymbols.Eof) {
                    if (!this.beat(voice)) {
                        break;
                    }
                    anyBeatData = true;
                }
            }
            if (voice.beats.length === 0) {
                const emptyBeat = new Beat();
                emptyBeat.isEmpty = true;
                voice.addBeat(emptyBeat);
            }
            return anyStaffMeta || anyBarMeta || anyBeatData;
        }
        newBar(staff) {
            // existing bar? -> e.g. in multi-voice setups where we fill empty voices later
            if (this._barIndex < staff.bars.length) {
                const bar = staff.bars[this._barIndex];
                this._barIndex++;
                return bar;
            }
            const voiceCount = staff.bars.length === 0 ? 1 : staff.bars[0].voices.length;
            // need new bar
            const newBar = new Bar();
            staff.addBar(newBar);
            if (newBar.previousBar) {
                newBar.clef = newBar.previousBar.clef;
                newBar.clefOttava = newBar.previousBar.clefOttava;
                newBar.keySignature = newBar.previousBar.keySignature;
                newBar.keySignatureType = newBar.previousBar.keySignatureType;
            }
            this._barIndex++;
            for (let i = 0; i < voiceCount; i++) {
                const voice = new Voice$1();
                newBar.addVoice(voice);
            }
            return newBar;
        }
        beat(voice) {
            // duration specifier?
            this.beatDuration();
            const beat = new Beat();
            voice.addBeat(beat);
            this._allowTuning = !this._currentStaff.isPercussion;
            // notes
            if (this._sy === AlphaTexSymbols.LParensis) {
                this._sy = this.newSy();
                this.note(beat);
                while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                    this._allowTuning = !this._currentStaff.isPercussion;
                    if (!this.note(beat)) {
                        break;
                    }
                }
                if (this._sy !== AlphaTexSymbols.RParensis) {
                    this.error('note-list', AlphaTexSymbols.RParensis, true);
                }
                this._sy = this.newSy();
            }
            else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'r') {
                // rest voice -> no notes
                this._sy = this.newSy();
            }
            else {
                if (!this.note(beat)) {
                    voice.beats.splice(voice.beats.length - 1, 1);
                    return false;
                }
            }
            // new duration
            if (this._sy === AlphaTexSymbols.Dot) {
                this._allowNegatives = true;
                this._sy = this.newSy();
                this._allowNegatives = false;
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('duration', AlphaTexSymbols.Number, true);
                }
                this._currentDuration = this.parseDuration(this._syData);
                this._sy = this.newSy();
            }
            beat.duration = this._currentDuration;
            beat.dynamics = this._currentDynamics;
            if (this._currentTuplet !== 1 && !beat.hasTuplet) {
                AlphaTexImporter.applyTuplet(beat, this._currentTuplet);
            }
            // beat multiplier (repeat beat n times)
            let beatRepeat = 1;
            if (this._sy === AlphaTexSymbols.Multiply) {
                this._sy = this.newSy();
                // multiplier count
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('multiplier', AlphaTexSymbols.Number, true);
                }
                else {
                    beatRepeat = this._syData;
                }
                this._sy = this.newSy();
            }
            this.beatEffects(beat);
            for (let i = 0; i < beatRepeat - 1; i++) {
                voice.addBeat(BeatCloner.clone(beat));
            }
            return true;
        }
        beatDuration() {
            if (this._sy !== AlphaTexSymbols.DoubleDot) {
                return;
            }
            this._allowNegatives = true;
            this._sy = this.newSy();
            this._allowNegatives = false;
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('duration', AlphaTexSymbols.Number, true);
            }
            this._currentDuration = this.parseDuration(this._syData);
            this._currentTuplet = 1;
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                const effect = this._syData.toLowerCase();
                switch (effect) {
                    case 'tu':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('duration-tuplet', AlphaTexSymbols.Number, true);
                        }
                        this._currentTuplet = this._syData;
                        this._sy = this.newSy();
                        break;
                    default:
                        this.error('beat-duration', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('beat-duration', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        beatEffects(beat) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                if (!this.applyBeatEffect(beat)) {
                    this.error('beat-effects', AlphaTexSymbols.String, false);
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('beat-effects', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        /**
         * Tries to apply a beat effect to the given beat.
         * @returns true if a effect could be applied, otherwise false
         */
        applyBeatEffect(beat) {
            const syData = this._syData.toLowerCase();
            if (syData === 'f') {
                beat.fade = FadeType.FadeIn;
            }
            else if (syData === 'fo') {
                beat.fade = FadeType.FadeOut;
            }
            else if (syData === 'vs') {
                beat.fade = FadeType.VolumeSwell;
            }
            else if (syData === 'v') {
                beat.vibrato = VibratoType.Slight;
            }
            else if (syData === 'vw') {
                beat.vibrato = VibratoType.Wide;
            }
            else if (syData === 's') {
                beat.slap = true;
            }
            else if (syData === 'p') {
                beat.pop = true;
            }
            else if (syData === 'tt') {
                beat.tap = true;
            }
            else if (syData === 'txt') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('beat-text', AlphaTexSymbols.String, true);
                    return false;
                }
                beat.text = this._syData;
            }
            else if (syData === 'dd') {
                beat.dots = 2;
            }
            else if (syData === 'd') {
                beat.dots = 1;
            }
            else if (syData === 'su') {
                beat.pickStroke = PickStroke.Up;
            }
            else if (syData === 'sd') {
                beat.pickStroke = PickStroke.Down;
            }
            else if (syData === 'tu') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('tuplet', AlphaTexSymbols.Number, true);
                    return false;
                }
                const numerator = this._syData;
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.Number) {
                    const denominator = this._syData;
                    this._sy = this.newSy();
                    beat.tupletNumerator = numerator;
                    beat.tupletDenominator = denominator;
                }
                else {
                    AlphaTexImporter.applyTuplet(beat, numerator);
                }
                return true;
            }
            else if (syData === 'tb' || syData === 'tbe') {
                this._sy = this.newSy();
                const exact = syData === 'tbe';
                // Type
                if (this._sy === AlphaTexSymbols.String) {
                    beat.whammyBarType = this.parseWhammyType(this._syData);
                    this._sy = this.newSy();
                }
                // Style
                if (this._sy === AlphaTexSymbols.String) {
                    beat.whammyStyle = this.parseBendStyle(this._syData);
                    this._sy = this.newSy();
                }
                // read points
                if (this._sy !== AlphaTexSymbols.LParensis) {
                    this.error('tremolobar-effect', AlphaTexSymbols.LParensis, true);
                }
                this._allowNegatives = true;
                this._allowFloat = true;
                this._sy = this.newSy();
                while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                    let offset = 0;
                    let value = 0;
                    if (exact) {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        }
                        offset = this._syData;
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        }
                        value = this._syData;
                    }
                    else {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        }
                        offset = 0;
                        value = this._syData;
                    }
                    beat.addWhammyBarPoint(new BendPoint(offset, value));
                    this._sy = this.newSy();
                }
                if (beat.whammyBarPoints != null) {
                    while (beat.whammyBarPoints.length > 60) {
                        beat.removeWhammyBarPoint(beat.whammyBarPoints.length - 1);
                    }
                    // set positions
                    if (!exact) {
                        const count = beat.whammyBarPoints.length;
                        const step = (60 / count) | 0;
                        let i = 0;
                        while (i < count) {
                            beat.whammyBarPoints[i].offset = Math.min(60, i * step);
                            i++;
                        }
                    }
                    else {
                        beat.whammyBarPoints.sort((a, b) => a.offset - b.offset);
                    }
                }
                this._allowNegatives = false;
                this._allowFloat = false;
                if (this._sy !== AlphaTexSymbols.RParensis) {
                    this.error('tremolobar-effect', AlphaTexSymbols.RParensis, true);
                }
            }
            else if (syData === 'bu' || syData === 'bd' || syData === 'au' || syData === 'ad') {
                switch (syData) {
                    case 'bu':
                        beat.brushType = BrushType.BrushUp;
                        break;
                    case 'bd':
                        beat.brushType = BrushType.BrushDown;
                        break;
                    case 'au':
                        beat.brushType = BrushType.ArpeggioUp;
                        break;
                    case 'ad':
                        beat.brushType = BrushType.ArpeggioDown;
                        break;
                }
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.Number) {
                    // explicit duration
                    beat.brushDuration = this._syData;
                    this._sy = this.newSy();
                    return true;
                }
                // default to calcuated duration
                beat.updateDurations();
                if (syData === 'bu' || syData === 'bd') {
                    beat.brushDuration = beat.playbackDuration / 4 / beat.notes.length;
                }
                else if (syData === 'au' || syData === 'ad') {
                    beat.brushDuration = beat.playbackDuration / beat.notes.length;
                }
                return true;
            }
            else if (syData === 'ch') {
                this._sy = this.newSy();
                const chordName = this._syData;
                const chordId = this.getChordId(this._currentStaff, chordName);
                if (!this._currentStaff.hasChord(chordId)) {
                    const chord = new Chord();
                    chord.showDiagram = false;
                    chord.name = chordName;
                    this._currentStaff.addChord(chordId, chord);
                }
                beat.chordId = chordId;
            }
            else if (syData === 'gr') {
                this._sy = this.newSy();
                if (this._syData.toLowerCase() === 'ob') {
                    beat.graceType = GraceType.OnBeat;
                    this._sy = this.newSy();
                }
                else if (this._syData.toLowerCase() === 'b') {
                    beat.graceType = GraceType.BendGrace;
                    this._sy = this.newSy();
                }
                else {
                    beat.graceType = GraceType.BeforeBeat;
                }
                return true;
            }
            else if (syData === 'dy') {
                this._sy = this.newSy();
                const dynamicString = this._syData.toUpperCase();
                switch (dynamicString) {
                    case 'PPP':
                    case 'PP':
                    case 'P':
                    case 'MP':
                    case 'MF':
                    case 'F':
                    case 'FF':
                    case 'FFF':
                    case 'PPPP':
                    case 'PPPPP':
                    case 'PPPPPP':
                    case 'FFFF':
                    case 'FFFFF':
                    case 'FFFFFF':
                    case 'SF':
                    case 'SFP':
                    case 'SFPP':
                    case 'FP':
                    case 'RF':
                    case 'RFZ':
                    case 'SFZ':
                    case 'SFFZ':
                    case 'FZ':
                    case 'N':
                    case 'PF':
                    case 'SFZP':
                        beat.dynamics = DynamicValue[dynamicString];
                        break;
                }
                this._currentDynamics = beat.dynamics;
            }
            else if (syData === 'cre') {
                beat.crescendo = CrescendoType.Crescendo;
            }
            else if (syData === 'dec') {
                beat.crescendo = CrescendoType.Decrescendo;
            }
            else if (syData === 'tempo') {
                // NOTE: playbackRatio is calculated on score finish when playback positions are known
                const tempoAutomation = this.readTempoAutomation();
                beat.automations.push(tempoAutomation);
                beat.voice.bar.masterBar.tempoAutomations.push(tempoAutomation);
                return true;
            }
            else if (syData === 'tp') {
                this._sy = this.newSy();
                beat.tremoloSpeed = Duration.Eighth;
                if (this._sy === AlphaTexSymbols.Number) {
                    switch (this._syData) {
                        case 8:
                            beat.tremoloSpeed = Duration.Eighth;
                            break;
                        case 16:
                            beat.tremoloSpeed = Duration.Sixteenth;
                            break;
                        case 32:
                            beat.tremoloSpeed = Duration.ThirtySecond;
                            break;
                        default:
                            beat.tremoloSpeed = Duration.Eighth;
                            break;
                    }
                    this._sy = this.newSy();
                }
                return true;
            }
            else if (syData === 'spd') {
                const sustainPedal = new SustainPedalMarker();
                sustainPedal.pedalType = SustainPedalMarkerType.Down;
                // exact ratio position will be applied after .finish() when times are known
                sustainPedal.ratioPosition = beat.voice.bar.sustainPedals.length;
                this._sustainPedalToBeat.set(sustainPedal, beat);
                beat.voice.bar.sustainPedals.push(sustainPedal);
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'spu') {
                const sustainPedal = new SustainPedalMarker();
                sustainPedal.pedalType = SustainPedalMarkerType.Up;
                // exact ratio position will be applied after .finish() when times are known
                sustainPedal.ratioPosition = beat.voice.bar.sustainPedals.length;
                this._sustainPedalToBeat.set(sustainPedal, beat);
                beat.voice.bar.sustainPedals.push(sustainPedal);
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'spe') {
                const sustainPedal = new SustainPedalMarker();
                sustainPedal.pedalType = SustainPedalMarkerType.Up;
                sustainPedal.ratioPosition = 1;
                beat.voice.bar.sustainPedals.push(sustainPedal);
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'slashed') {
                beat.slashed = true;
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'ds') {
                beat.deadSlapped = true;
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'glpf') {
                this._sy = this.newSy();
                beat.golpe = GolpeType.Finger;
                return true;
            }
            else if (syData === 'glpt') {
                this._sy = this.newSy();
                beat.golpe = GolpeType.Thumb;
                return true;
            }
            else if (syData === 'waho') {
                this._sy = this.newSy();
                beat.wahPedal = WahPedal.Open;
                return true;
            }
            else if (syData === 'wahc') {
                this._sy = this.newSy();
                beat.wahPedal = WahPedal.Closed;
                return true;
            }
            else if (syData === 'barre') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('beat-barre', AlphaTexSymbols.Number, true);
                }
                beat.barreFret = this._syData;
                beat.barreShape = BarreShape.Full;
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.String) {
                    switch (this._syData.toLowerCase()) {
                        case 'full':
                            beat.barreShape = BarreShape.Full;
                            this._sy = this.newSy();
                            break;
                        case 'half':
                            beat.barreShape = BarreShape.Half;
                            this._sy = this.newSy();
                            break;
                    }
                }
                return true;
            }
            else if (syData === 'rasg') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('rasgueado', AlphaTexSymbols.String, true);
                }
                switch (this._syData.toLowerCase()) {
                    case 'ii':
                        beat.rasgueado = Rasgueado.Ii;
                        break;
                    case 'mi':
                        beat.rasgueado = Rasgueado.Mi;
                        break;
                    case 'miitriplet':
                        beat.rasgueado = Rasgueado.MiiTriplet;
                        break;
                    case 'miianapaest':
                        beat.rasgueado = Rasgueado.MiiAnapaest;
                        break;
                    case 'pmptriplet':
                        beat.rasgueado = Rasgueado.PmpTriplet;
                        break;
                    case 'pmpanapaest':
                        beat.rasgueado = Rasgueado.PmpAnapaest;
                        break;
                    case 'peitriplet':
                        beat.rasgueado = Rasgueado.PeiTriplet;
                        break;
                    case 'peianapaest':
                        beat.rasgueado = Rasgueado.PeiAnapaest;
                        break;
                    case 'paitriplet':
                        beat.rasgueado = Rasgueado.PaiTriplet;
                        break;
                    case 'paianapaest':
                        beat.rasgueado = Rasgueado.PaiAnapaest;
                        break;
                    case 'amitriplet':
                        beat.rasgueado = Rasgueado.AmiTriplet;
                        break;
                    case 'amianapaest':
                        beat.rasgueado = Rasgueado.AmiAnapaest;
                        break;
                    case 'ppp':
                        beat.rasgueado = Rasgueado.Ppp;
                        break;
                    case 'amii':
                        beat.rasgueado = Rasgueado.Amii;
                        break;
                    case 'amip':
                        beat.rasgueado = Rasgueado.Amip;
                        break;
                    case 'eami':
                        beat.rasgueado = Rasgueado.Eami;
                        break;
                    case 'eamii':
                        beat.rasgueado = Rasgueado.Eamii;
                        break;
                    case 'peami':
                        beat.rasgueado = Rasgueado.Peami;
                        break;
                }
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'ot') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('beat-ottava', AlphaTexSymbols.String, true);
                }
                beat.ottava = this.parseClefOttavaFromString(this._syData);
            }
            else if (syData === 'legatoorigin') {
                beat.isLegatoOrigin = true;
            }
            else if (syData === 'instrument') {
                this._sy = this.newSy();
                let program = 0;
                if (this._sy === AlphaTexSymbols.Number) {
                    program = this._syData;
                }
                else if (this._sy === AlphaTexSymbols.String) {
                    program = GeneralMidi.getValue(this._syData);
                }
                else {
                    this.error('instrument-change', AlphaTexSymbols.Number, true);
                }
                const automation = new Automation();
                automation.isLinear = false;
                automation.type = AutomationType.Instrument;
                automation.value = program;
                beat.automations.push(automation);
            }
            else if (syData === 'fermata') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('fermata', AlphaTexSymbols.Number, true);
                }
                const fermata = new Fermata();
                fermata.type = this.parseFermataFromString(this._syData);
                this._allowFloat = true;
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.Number) {
                    fermata.length = this._syData;
                    this._sy = this.newSy();
                }
                this._allowFloat = false;
                beat.fermata = fermata;
                return true;
            }
            else if (syData === 'beam') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('beam', AlphaTexSymbols.Number, true);
                }
                switch (this._syData.toLowerCase()) {
                    case 'invert':
                        beat.invertBeamDirection = true;
                        break;
                    case 'up':
                        beat.preferredBeamDirection = BeamDirection.Up;
                        break;
                    case 'down':
                        beat.preferredBeamDirection = BeamDirection.Down;
                        break;
                    case 'auto':
                        beat.beamingMode = BeatBeamingMode.Auto;
                        break;
                    case 'split':
                        beat.beamingMode = BeatBeamingMode.ForceSplitToNext;
                        break;
                    case 'merge':
                        beat.beamingMode = BeatBeamingMode.ForceMergeWithNext;
                        break;
                    case 'splitsecondary':
                        beat.beamingMode = BeatBeamingMode.ForceSplitOnSecondaryToNext;
                        break;
                }
                this._sy = this.newSy();
                return true;
            }
            else if (syData === 'timer') {
                beat.showTimer = true;
                this._sy = this.newSy();
                return true;
            }
            else {
                // string didn't match any beat effect syntax
                return false;
            }
            // default behaviour when a beat effect above
            // does not handle new symbol + return on its own
            this._sy = this.newSy();
            return true;
        }
        parseBracketExtendMode(str) {
            switch (str.toLowerCase()) {
                case 'nobrackets':
                    return BracketExtendMode.NoBrackets;
                case 'groupstaves':
                    return BracketExtendMode.GroupStaves;
                case 'groupsimilarinstruments':
                    return BracketExtendMode.GroupSimilarInstruments;
                default:
                    return BracketExtendMode.GroupStaves;
            }
        }
        parseFermataFromString(str) {
            switch (str.toLowerCase()) {
                case 'short':
                    return FermataType.Short;
                case 'medium':
                    return FermataType.Medium;
                case 'long':
                    return FermataType.Long;
                default:
                    return FermataType.Medium;
            }
        }
        parseClefOttavaFromString(str) {
            switch (str.toLowerCase()) {
                case '15ma':
                    return Ottavia._15ma;
                case '8va':
                    return Ottavia._8va;
                case 'regular':
                    return Ottavia.Regular;
                case '8vb':
                    return Ottavia._8vb;
                case '15mb':
                    return Ottavia._15mb;
                default:
                    return Ottavia.Regular;
            }
        }
        getChordId(currentStaff, chordName) {
            return chordName.toLowerCase() + currentStaff.index + currentStaff.track.index;
        }
        static applyTuplet(beat, tuplet) {
            switch (tuplet) {
                case 3:
                    beat.tupletNumerator = 3;
                    beat.tupletDenominator = 2;
                    break;
                case 5:
                    beat.tupletNumerator = 5;
                    beat.tupletDenominator = 4;
                    break;
                case 6:
                    beat.tupletNumerator = 6;
                    beat.tupletDenominator = 4;
                    break;
                case 7:
                    beat.tupletNumerator = 7;
                    beat.tupletDenominator = 4;
                    break;
                case 9:
                    beat.tupletNumerator = 9;
                    beat.tupletDenominator = 8;
                    break;
                case 10:
                    beat.tupletNumerator = 10;
                    beat.tupletDenominator = 8;
                    break;
                case 11:
                    beat.tupletNumerator = 11;
                    beat.tupletDenominator = 8;
                    break;
                case 12:
                    beat.tupletNumerator = 12;
                    beat.tupletDenominator = 8;
                    break;
                default:
                    beat.tupletNumerator = 1;
                    beat.tupletDenominator = 1;
                    break;
            }
        }
        isNoteText(txt) {
            return txt === 'x' || txt === '-' || txt === 'r';
        }
        note(beat) {
            // fret.string or TuningWithAccidentals
            let isDead = false;
            let isTie = false;
            let fret = -1;
            let octave = -1;
            let tone = -1;
            let accidentalMode = NoteAccidentalMode.Default;
            switch (this._sy) {
                case AlphaTexSymbols.Number:
                    fret = this._syData;
                    if (this._currentStaff.isPercussion && !PercussionMapper.instrumentArticulations.has(fret)) {
                        this.errorMessage(`Unknown percussion articulation ${fret}`);
                    }
                    break;
                case AlphaTexSymbols.String:
                    if (this._currentStaff.isPercussion) {
                        const articulationName = this._syData.toLowerCase();
                        if (this._percussionArticulationNames.has(articulationName)) {
                            fret = this._percussionArticulationNames.get(articulationName);
                        }
                        else {
                            this.errorMessage(`Unknown percussion articulation '${this._syData}'`);
                        }
                    }
                    else {
                        isDead = this._syData === 'x';
                        isTie = this._syData === '-';
                        if (isTie || isDead) {
                            fret = 0;
                        }
                        else {
                            this.error('note-fret', AlphaTexSymbols.Number, true);
                        }
                    }
                    break;
                case AlphaTexSymbols.Tuning:
                    // auto convert staff
                    if (beat.index === 0 && beat.voice.index === 0 && beat.voice.bar.index === 0) {
                        this.makeCurrentStaffPitched();
                    }
                    const tuning = this._syData;
                    octave = tuning.octave;
                    tone = tuning.tone.noteValue;
                    if (this._accidentalMode === AlphaTexAccidentalMode.Explicit) {
                        accidentalMode = tuning.tone.accidentalMode;
                    }
                    break;
                default:
                    return false;
            }
            this._sy = this.newSy(); // Fret done
            const isFretted = octave === -1 && this._currentStaff.tuning.length > 0 && !this._currentStaff.isPercussion;
            let noteString = -1;
            if (isFretted) {
                // Fret [Dot] String
                if (this._sy !== AlphaTexSymbols.Dot) {
                    this.error('note', AlphaTexSymbols.Dot, true);
                }
                this._sy = this.newSy(); // dot done
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('note-string', AlphaTexSymbols.Number, true);
                }
                noteString = this._syData;
                if (noteString < 1 || noteString > this._currentStaff.tuning.length) {
                    this.error('note-string', AlphaTexSymbols.Number, false);
                }
                this._sy = this.newSy(); // string done
            }
            // read effects
            const note = new Note();
            if (isFretted) {
                note.string = this._currentStaff.tuning.length - (noteString - 1);
                note.isDead = isDead;
                note.isTieDestination = isTie;
                if (!isTie) {
                    note.fret = fret;
                }
            }
            else if (this._currentStaff.isPercussion) {
                const articulationValue = fret;
                let articulationIndex = 0;
                if (this._articulationValueToIndex.has(articulationValue)) {
                    articulationIndex = this._articulationValueToIndex.get(articulationValue);
                }
                else {
                    articulationIndex = this._currentTrack.percussionArticulations.length;
                    const articulation = PercussionMapper.getArticulationByInputMidiNumber(articulationValue);
                    if (articulation === null) {
                        this.errorMessage(`Unknown articulation value ${articulationValue}`);
                    }
                    this._currentTrack.percussionArticulations.push(articulation);
                    this._articulationValueToIndex.set(articulationValue, articulationIndex);
                }
                note.percussionArticulation = articulationIndex;
            }
            else {
                note.octave = octave;
                note.tone = tone;
                note.accidentalMode = accidentalMode;
                note.isTieDestination = isTie;
            }
            beat.addNote(note);
            this.noteEffects(note);
            return true;
        }
        noteEffects(note) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                const syData = this._syData.toLowerCase();
                if (syData === 'b' || syData === 'be') {
                    this._sy = this.newSy();
                    const exact = syData === 'be';
                    // Type
                    if (this._sy === AlphaTexSymbols.String) {
                        note.bendType = this.parseBendType(this._syData);
                        this._sy = this.newSy();
                    }
                    // Style
                    if (this._sy === AlphaTexSymbols.String) {
                        note.bendStyle = this.parseBendStyle(this._syData);
                        this._sy = this.newSy();
                    }
                    // read points
                    if (this._sy !== AlphaTexSymbols.LParensis) {
                        this.error('bend-effect', AlphaTexSymbols.LParensis, true);
                    }
                    this._sy = this.newSy();
                    while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                        let offset = 0;
                        let value = 0;
                        if (exact) {
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            offset = this._syData;
                            this._sy = this.newSy();
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            value = this._syData;
                        }
                        else {
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            value = this._syData;
                        }
                        note.addBendPoint(new BendPoint(offset, value));
                        this._sy = this.newSy();
                    }
                    const points = note.bendPoints;
                    if (points != null) {
                        while (points.length > 60) {
                            points.splice(points.length - 1, 1);
                        }
                        // set positions
                        if (exact) {
                            points.sort((a, b) => {
                                return a.offset - b.offset;
                            });
                        }
                        else {
                            const count = points.length;
                            const step = (60 / (count - 1)) | 0;
                            let i = 0;
                            while (i < count) {
                                points[i].offset = Math.min(60, i * step);
                                i++;
                            }
                        }
                    }
                    if (this._sy !== AlphaTexSymbols.RParensis) {
                        this.error('bend-effect', AlphaTexSymbols.RParensis, true);
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'nh') {
                    note.harmonicType = HarmonicType.Natural;
                    note.harmonicValue = ModelUtils.deltaFretToHarmonicValue(note.fret);
                    this._sy = this.newSy();
                }
                else if (syData === 'ah') {
                    // todo: Artificial Key
                    note.harmonicType = HarmonicType.Artificial;
                    note.harmonicValue = this.harmonicValue(note.harmonicValue);
                }
                else if (syData === 'th') {
                    // todo: store tapped fret in data
                    note.harmonicType = HarmonicType.Tap;
                    note.harmonicValue = this.harmonicValue(note.harmonicValue);
                }
                else if (syData === 'ph') {
                    note.harmonicType = HarmonicType.Pinch;
                    note.harmonicValue = this.harmonicValue(note.harmonicValue);
                }
                else if (syData === 'sh') {
                    note.harmonicType = HarmonicType.Semi;
                    note.harmonicValue = this.harmonicValue(note.harmonicValue);
                }
                else if (syData === 'fh') {
                    note.harmonicType = HarmonicType.Feedback;
                    note.harmonicValue = this.harmonicValue(note.harmonicValue);
                }
                else if (syData === 'tr') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('trill-effect', AlphaTexSymbols.Number, true);
                    }
                    const fret = this._syData;
                    this._sy = this.newSy();
                    let duration = Duration.Sixteenth;
                    if (this._sy === AlphaTexSymbols.Number) {
                        switch (this._syData) {
                            case 16:
                                duration = Duration.Sixteenth;
                                break;
                            case 32:
                                duration = Duration.ThirtySecond;
                                break;
                            case 64:
                                duration = Duration.SixtyFourth;
                                break;
                            default:
                                duration = Duration.Sixteenth;
                                break;
                        }
                        this._sy = this.newSy();
                    }
                    note.trillValue = fret + note.stringTuning;
                    note.trillSpeed = duration;
                }
                else if (syData === 'v') {
                    this._sy = this.newSy();
                    note.vibrato = VibratoType.Slight;
                }
                else if (syData === 'sl') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.Legato;
                }
                else if (syData === 'ss') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.Shift;
                }
                else if (syData === 'sib') {
                    this._sy = this.newSy();
                    note.slideInType = SlideInType.IntoFromBelow;
                }
                else if (syData === 'sia') {
                    this._sy = this.newSy();
                    note.slideInType = SlideInType.IntoFromAbove;
                }
                else if (syData === 'sou') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.OutUp;
                }
                else if (syData === 'sod') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.OutDown;
                }
                else if (syData === 'psd') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.PickSlideDown;
                }
                else if (syData === 'psu') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.PickSlideUp;
                }
                else if (syData === 'h') {
                    this._sy = this.newSy();
                    note.isHammerPullOrigin = true;
                }
                else if (syData === 'lht') {
                    this._sy = this.newSy();
                    note.isLeftHandTapped = true;
                }
                else if (syData === 'g') {
                    this._sy = this.newSy();
                    note.isGhost = true;
                }
                else if (syData === 'ac') {
                    this._sy = this.newSy();
                    note.accentuated = AccentuationType.Normal;
                }
                else if (syData === 'hac') {
                    this._sy = this.newSy();
                    note.accentuated = AccentuationType.Heavy;
                }
                else if (syData === 'ten') {
                    this._sy = this.newSy();
                    note.accentuated = AccentuationType.Tenuto;
                }
                else if (syData === 'pm') {
                    this._sy = this.newSy();
                    note.isPalmMute = true;
                }
                else if (syData === 'st') {
                    this._sy = this.newSy();
                    note.isStaccato = true;
                }
                else if (syData === 'lr') {
                    this._sy = this.newSy();
                    note.isLetRing = true;
                }
                else if (syData === 'x') {
                    this._sy = this.newSy();
                    note.fret = 0;
                    note.isDead = true;
                }
                else if (syData === '-' || syData === 't') {
                    this._sy = this.newSy();
                    note.isTieDestination = true;
                }
                else if (syData === 'lf') {
                    this._sy = this.newSy();
                    let finger = Fingers.Thumb;
                    if (this._sy === AlphaTexSymbols.Number) {
                        finger = this.toFinger(this._syData);
                        this._sy = this.newSy();
                    }
                    note.leftHandFinger = finger;
                }
                else if (syData === 'rf') {
                    this._sy = this.newSy();
                    let finger = Fingers.Thumb;
                    if (this._sy === AlphaTexSymbols.Number) {
                        finger = this.toFinger(this._syData);
                        this._sy = this.newSy();
                    }
                    note.rightHandFinger = finger;
                }
                else if (syData === 'acc') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('note-accidental', AlphaTexSymbols.String, true);
                    }
                    note.accidentalMode = ModelUtils.parseAccidentalMode(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'turn') {
                    this._sy = this.newSy();
                    note.ornament = NoteOrnament.Turn;
                }
                else if (syData === 'iturn') {
                    this._sy = this.newSy();
                    note.ornament = NoteOrnament.InvertedTurn;
                }
                else if (syData === 'umordent') {
                    this._sy = this.newSy();
                    note.ornament = NoteOrnament.UpperMordent;
                }
                else if (syData === 'lmordent') {
                    this._sy = this.newSy();
                    note.ornament = NoteOrnament.LowerMordent;
                }
                else if (syData === 'string') {
                    this._sy = this.newSy();
                    note.showStringNumber = true;
                }
                else if (syData === 'hide') {
                    this._sy = this.newSy();
                    note.isVisible = false;
                }
                else if (syData === 'slur') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('slur', AlphaTexSymbols.String, true);
                    }
                    const slurId = this._syData;
                    if (this._slurs.has(slurId)) {
                        const slurOrigin = this._slurs.get(slurId);
                        slurOrigin.slurDestination = note;
                        note.slurOrigin = slurOrigin;
                        note.isSlurDestination = true;
                    }
                    else {
                        this._slurs.set(slurId, note);
                    }
                    this._sy = this.newSy();
                }
                else if (this.applyBeatEffect(note.beat)) ;
                else {
                    this.error(syData, AlphaTexSymbols.String, false);
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('note-effect', AlphaTexSymbols.RBrace, false);
            }
            this._sy = this.newSy();
        }
        harmonicValue(harmonicValue) {
            this._allowNegatives = true;
            this._allowFloat = true;
            this._sy = this.newSy();
            if (this._sy === AlphaTexSymbols.Number) {
                harmonicValue = this._syData;
                this._sy = this.newSy();
            }
            this._allowNegatives = false;
            this._allowFloat = false;
            return harmonicValue;
        }
        toFinger(num) {
            switch (num) {
                case 1:
                    return Fingers.Thumb;
                case 2:
                    return Fingers.IndexFinger;
                case 3:
                    return Fingers.MiddleFinger;
                case 4:
                    return Fingers.AnnularFinger;
                case 5:
                    return Fingers.LittleFinger;
            }
            return Fingers.Thumb;
        }
        parseDuration(duration) {
            switch (duration) {
                case -4:
                    return Duration.QuadrupleWhole;
                case -2:
                    return Duration.DoubleWhole;
                case 1:
                    return Duration.Whole;
                case 2:
                    return Duration.Half;
                case 4:
                    return Duration.Quarter;
                case 8:
                    return Duration.Eighth;
                case 16:
                    return Duration.Sixteenth;
                case 32:
                    return Duration.ThirtySecond;
                case 64:
                    return Duration.SixtyFourth;
                case 128:
                    return Duration.OneHundredTwentyEighth;
                case 256:
                    return Duration.TwoHundredFiftySixth;
                default:
                    return Duration.Quarter;
            }
        }
        parseBendStyle(str) {
            switch (str.toLowerCase()) {
                case 'gradual':
                    return BendStyle.Gradual;
                case 'fast':
                    return BendStyle.Fast;
                default:
                    return BendStyle.Default;
            }
        }
        parseBendType(str) {
            switch (str.toLowerCase()) {
                case 'none':
                    return BendType.None;
                case 'custom':
                    return BendType.Custom;
                case 'bend':
                    return BendType.Bend;
                case 'release':
                    return BendType.Release;
                case 'bendrelease':
                    return BendType.BendRelease;
                case 'hold':
                    return BendType.Hold;
                case 'prebend':
                    return BendType.Prebend;
                case 'prebendbend':
                    return BendType.PrebendBend;
                case 'prebendrelease':
                    return BendType.PrebendRelease;
                default:
                    return BendType.Custom;
            }
        }
        barMeta(bar) {
            let anyMeta = false;
            const master = bar.masterBar;
            let endOfMeta = false;
            while (!endOfMeta && this._sy === AlphaTexSymbols.MetaCommand) {
                anyMeta = true;
                const syData = this._syData.toLowerCase();
                if (syData === 'ts') {
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        if (this._syData.toLowerCase() === 'common') {
                            master.timeSignatureCommon = true;
                            master.timeSignatureNumerator = 4;
                            master.timeSignatureDenominator = 4;
                            this._sy = this.newSy();
                        }
                        else {
                            this.error('timesignature-numerator', AlphaTexSymbols.String, true);
                        }
                    }
                    else {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('timesignature-numerator', AlphaTexSymbols.Number, true);
                        }
                        master.timeSignatureNumerator = this._syData;
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('timesignature-denominator', AlphaTexSymbols.Number, true);
                        }
                        master.timeSignatureDenominator = this._syData;
                        this._sy = this.newSy();
                    }
                }
                else if (syData === 'ft') {
                    master.isFreeTime = true;
                    this._sy = this.newSy();
                }
                else if (syData === 'ro') {
                    master.isRepeatStart = true;
                    this._sy = this.newSy();
                }
                else if (syData === 'rc') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('repeatclose', AlphaTexSymbols.Number, true);
                    }
                    if (this._syData > 2048) {
                        this.error('repeatclose', AlphaTexSymbols.Number, false);
                    }
                    master.repeatCount = this._syData;
                    this._sy = this.newSy();
                }
                else if (syData === 'ae') {
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.LParensis) {
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('alternateending', AlphaTexSymbols.Number, true);
                        }
                        this.applyAlternateEnding(master);
                        while (this._sy === AlphaTexSymbols.Number) {
                            this.applyAlternateEnding(master);
                        }
                        if (this._sy !== AlphaTexSymbols.RParensis) {
                            this.error('alternateending-list', AlphaTexSymbols.RParensis, true);
                        }
                        this._sy = this.newSy();
                    }
                    else {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('alternateending', AlphaTexSymbols.Number, true);
                        }
                        this.applyAlternateEnding(master);
                    }
                }
                else if (syData === 'ks') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('keysignature', AlphaTexSymbols.String, true);
                    }
                    bar.keySignature = this.parseKeySignature(this._syData);
                    bar.keySignatureType = this.parseKeySignatureType(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'clef') {
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            bar.clef = this.parseClefFromString(this._syData);
                            break;
                        case AlphaTexSymbols.Number:
                            bar.clef = this.parseClefFromInt(this._syData);
                            break;
                        case AlphaTexSymbols.Tuning:
                            const parseResult = this._syData;
                            bar.clef = this.parseClefFromInt(parseResult.realValue);
                            break;
                        default:
                            this.error('clef', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'tempo') {
                    const tempoAutomation = this.readTempoAutomation();
                    master.tempoAutomations.push(tempoAutomation);
                }
                else if (syData === 'section') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('section', AlphaTexSymbols.String, true);
                    }
                    let text = this._syData;
                    this._sy = this.newSy();
                    let marker = '';
                    if (this._sy === AlphaTexSymbols.String && !this.isNoteText(this._syData.toLowerCase())) {
                        marker = text;
                        text = this._syData;
                        this._sy = this.newSy();
                    }
                    const section = new Section();
                    section.marker = marker;
                    section.text = text;
                    master.section = section;
                }
                else if (syData === 'tf') {
                    this._allowTuning = false;
                    this._sy = this.newSy();
                    this._allowTuning = true;
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            master.tripletFeel = this.parseTripletFeelFromString(this._syData);
                            break;
                        case AlphaTexSymbols.Number:
                            master.tripletFeel = this.parseTripletFeelFromInt(this._syData);
                            break;
                        default:
                            this.error('triplet-feel', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'ac') {
                    master.isAnacrusis = true;
                    this._sy = this.newSy();
                }
                else if (syData === 'db') {
                    master.isDoubleBar = true;
                    bar.barLineRight = BarLineStyle.LightLight;
                    this._sy = this.newSy();
                }
                else if (syData === 'barlineleft') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('barlineleft', AlphaTexSymbols.String, true);
                    }
                    bar.barLineLeft = this.parseBarLineStyle(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'barlineright') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('barlineright', AlphaTexSymbols.String, true);
                    }
                    bar.barLineRight = this.parseBarLineStyle(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'accidentals') {
                    this.handleAccidentalMode();
                }
                else if (syData === 'jump') {
                    this.handleDirections(master);
                }
                else if (syData === 'ottava') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('ottava', AlphaTexSymbols.String, true);
                    }
                    bar.clefOttava = this.parseClefOttavaFromString(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'simile') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('simile', AlphaTexSymbols.String, true);
                    }
                    bar.simileMark = this.parseSimileMarkFromString(this._syData);
                    this._sy = this.newSy();
                }
                else if (syData === 'scale') {
                    this._allowFloat = true;
                    this._sy = this.newSy();
                    this._allowFloat = false;
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('scale', AlphaTexSymbols.Number, true);
                    }
                    master.displayScale = this._syData;
                    bar.displayScale = this._syData;
                    this._sy = this.newSy();
                }
                else if (syData === 'width') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('width', AlphaTexSymbols.Number, true);
                    }
                    master.displayWidth = this._syData;
                    bar.displayWidth = this._syData;
                    this._sy = this.newSy();
                }
                else {
                    if (bar.index === 0) {
                        switch (this.handleStaffMeta()) {
                            case StaffMetaResult.KnownStaffMeta:
                                // ok -> Continue
                                break;
                            case StaffMetaResult.UnknownStaffMeta:
                                this.error('measure-effects', AlphaTexSymbols.String, false);
                                break;
                            case StaffMetaResult.EndOfMetaDetected:
                                endOfMeta = true;
                                break;
                        }
                    }
                    else {
                        switch (this.handleStaffMeta()) {
                            case StaffMetaResult.EndOfMetaDetected:
                                endOfMeta = true;
                                break;
                            default:
                                this.error('measure-effects', AlphaTexSymbols.String, false);
                                break;
                        }
                    }
                }
            }
            if (master.index === 0 && master.tempoAutomations.length === 0) {
                const tempoAutomation = new Automation();
                tempoAutomation.isLinear = false;
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = this._score.tempo;
                tempoAutomation.text = this._score.tempoLabel;
                master.tempoAutomations.push(tempoAutomation);
            }
            return anyMeta;
        }
        parseBarLineStyle(v) {
            switch (v.toLowerCase()) {
                case 'automatic':
                    return BarLineStyle.Automatic;
                case 'dashed':
                    return BarLineStyle.Dashed;
                case 'dotted':
                    return BarLineStyle.Dotted;
                case 'heavy':
                    return BarLineStyle.Heavy;
                case 'heavyheavy':
                    return BarLineStyle.HeavyHeavy;
                case 'heavylight':
                    return BarLineStyle.HeavyLight;
                case 'lightheavy':
                    return BarLineStyle.LightHeavy;
                case 'lightlight':
                    return BarLineStyle.LightLight;
                case 'none':
                    return BarLineStyle.None;
                case 'regular':
                    return BarLineStyle.Regular;
                case 'short':
                    return BarLineStyle.Short;
                case 'tick':
                    return BarLineStyle.Tick;
            }
            return BarLineStyle.Automatic;
        }
        parseSimileMarkFromString(str) {
            switch (str.toLowerCase()) {
                case 'none':
                    return SimileMark.None;
                case 'simple':
                    return SimileMark.Simple;
                case 'firstofdouble':
                    return SimileMark.FirstOfDouble;
                case 'secondofdouble':
                    return SimileMark.SecondOfDouble;
                default:
                    return SimileMark.None;
            }
        }
        handleDirections(master) {
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.String) {
                this.error('direction', AlphaTexSymbols.String, true);
            }
            switch (this._syData.toLowerCase()) {
                case 'fine':
                    master.addDirection(Direction.TargetFine);
                    break;
                case 'segno':
                    master.addDirection(Direction.TargetSegno);
                    break;
                case 'segnosegno':
                    master.addDirection(Direction.TargetSegnoSegno);
                    break;
                case 'coda':
                    master.addDirection(Direction.TargetCoda);
                    break;
                case 'doublecoda':
                    master.addDirection(Direction.TargetDoubleCoda);
                    break;
                case 'dacapo':
                    master.addDirection(Direction.JumpDaCapo);
                    break;
                case 'dacapoalcoda':
                    master.addDirection(Direction.JumpDaCapoAlCoda);
                    break;
                case 'dacapoaldoublecoda':
                    master.addDirection(Direction.JumpDaCapoAlDoubleCoda);
                    break;
                case 'dacapoalfine':
                    master.addDirection(Direction.JumpDaCapoAlFine);
                    break;
                case 'dalsegno':
                    master.addDirection(Direction.JumpDalSegno);
                    break;
                case 'dalsegnoalcoda':
                    master.addDirection(Direction.JumpDalSegnoAlCoda);
                    break;
                case 'dalsegnoaldoublecoda':
                    master.addDirection(Direction.JumpDalSegnoAlDoubleCoda);
                    break;
                case 'dalsegnoalfine':
                    master.addDirection(Direction.JumpDalSegnoAlFine);
                    break;
                case 'dalsegnosegno':
                    master.addDirection(Direction.JumpDalSegnoSegno);
                    break;
                case 'dalsegnosegnoalcoda':
                    master.addDirection(Direction.JumpDalSegnoSegnoAlCoda);
                    break;
                case 'dalsegnosegnoaldoublecoda':
                    master.addDirection(Direction.JumpDalSegnoSegnoAlDoubleCoda);
                    break;
                case 'dalsegnosegnoalfine':
                    master.addDirection(Direction.JumpDalSegnoSegnoAlFine);
                    break;
                case 'dacoda':
                    master.addDirection(Direction.JumpDaCoda);
                    break;
                case 'dadoublecoda':
                    master.addDirection(Direction.JumpDaDoubleCoda);
                    break;
                default:
                    this.errorMessage(`Unexpected direction value: '${this._syData}'`);
                    return;
            }
            this._sy = this.newSy();
        }
        readTempoAutomation() {
            this._allowFloat = true;
            this._sy = this.newSy();
            this._allowFloat = false;
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('tempo', AlphaTexSymbols.Number, true);
            }
            const tempoAutomation = new Automation();
            tempoAutomation.isLinear = false;
            tempoAutomation.type = AutomationType.Tempo;
            tempoAutomation.value = this._syData;
            this._sy = this.newSy();
            if (this._sy === AlphaTexSymbols.String) {
                tempoAutomation.text = this._syData;
                this._sy = this.newSy();
            }
            return tempoAutomation;
        }
        applyAlternateEnding(master) {
            const num = this._syData;
            if (num < 1) {
                // Repeat numberings start from 1
                this.error('alternateending', AlphaTexSymbols.Number, true);
            }
            // Alternate endings bitflag starts from 0
            master.alternateEndings |= 1 << (num - 1);
            this._sy = this.newSy();
        }
        parseWhammyType(str) {
            switch (str.toLowerCase()) {
                case 'none':
                    return WhammyType.None;
                case 'custom':
                    return WhammyType.Custom;
                case 'dive':
                    return WhammyType.Dive;
                case 'dip':
                    return WhammyType.Dip;
                case 'hold':
                    return WhammyType.Hold;
                case 'predive':
                    return WhammyType.Predive;
                case 'predivedive':
                    return WhammyType.PrediveDive;
                default:
                    return WhammyType.Custom;
            }
        }
    }
    AlphaTexImporter.Eof = 0;
    //# sourceMappingURL=AlphaTexImporter.js.map

    class Gp3To5Importer extends ScoreImporter {
        constructor() {
            super(...arguments);
            this._versionNumber = 0;
            this._globalTripletFeel = TripletFeel.NoTripletFeel;
            this._lyricsTrack = 0;
            this._lyrics = [];
            this._barCount = 0;
            this._trackCount = 0;
            this._playbackInfos = [];
            this._doubleBars = new Set();
            this._keySignatures = new Map();
            this._beatTextChunksByTrack = new Map();
            this._directionLookup = new Map();
        }
        get name() {
            return 'Guitar Pro 3-5';
        }
        readScore() {
            this._directionLookup.clear();
            this.readVersion();
            this._score = new Score();
            // basic song info
            this.readScoreInformation();
            // triplet feel before Gp5
            if (this._versionNumber < 500) {
                this._globalTripletFeel = GpBinaryHelpers.gpReadBool(this.data)
                    ? TripletFeel.Triplet8th
                    : TripletFeel.NoTripletFeel;
            }
            // beat lyrics
            if (this._versionNumber >= 400) {
                this.readLyrics();
            }
            // rse master settings since GP5.1
            if (this._versionNumber >= 510) {
                // master volume (4)
                // master effect (4)
                // master equalizer (10)
                // master equalizer preset (1)
                this.data.skip(19);
            }
            // page setup since GP5
            if (this._versionNumber >= 500) {
                this.readPageSetup();
                this._score.tempoLabel = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            // tempo stuff
            this._score.tempo = IOHelper.readInt32LE(this.data);
            if (this._versionNumber >= 510) {
                GpBinaryHelpers.gpReadBool(this.data); // hide tempo?
            }
            // keysignature and octave
            IOHelper.readInt32LE(this.data);
            if (this._versionNumber >= 400) {
                this.data.readByte();
            }
            this.readPlaybackInfos();
            // repetition stuff
            if (this._versionNumber >= 500) {
                this.readDirection(Direction.TargetCoda);
                this.readDirection(Direction.TargetDoubleCoda);
                this.readDirection(Direction.TargetSegno);
                this.readDirection(Direction.TargetSegnoSegno);
                this.readDirection(Direction.TargetFine);
                this.readDirection(Direction.JumpDaCapo);
                this.readDirection(Direction.JumpDaCapoAlCoda);
                this.readDirection(Direction.JumpDaCapoAlDoubleCoda);
                this.readDirection(Direction.JumpDaCapoAlFine);
                this.readDirection(Direction.JumpDalSegno);
                this.readDirection(Direction.JumpDalSegnoAlCoda);
                this.readDirection(Direction.JumpDalSegnoAlDoubleCoda);
                this.readDirection(Direction.JumpDalSegnoAlFine);
                this.readDirection(Direction.JumpDalSegnoSegno);
                this.readDirection(Direction.JumpDalSegnoSegnoAlCoda);
                this.readDirection(Direction.JumpDalSegnoSegnoAlDoubleCoda);
                this.readDirection(Direction.JumpDalSegnoSegnoAlFine);
                this.readDirection(Direction.JumpDaCoda);
                this.readDirection(Direction.JumpDaDoubleCoda);
                // unknown (4)
                this.data.skip(4);
            }
            // contents
            this._barCount = IOHelper.readInt32LE(this.data);
            this._trackCount = IOHelper.readInt32LE(this.data);
            this.readMasterBars();
            this.readTracks();
            this.readBars();
            // To be more in line with the GP7 structure we create an
            // initial tempo automation on the first masterbar
            if (this._score.masterBars.length > 0) {
                const automation = Automation.buildTempoAutomation(false, 0, this._score.tempo, 2);
                automation.text = this._score.tempoLabel;
                this._score.masterBars[0].tempoAutomations.push(automation);
            }
            ModelUtils.consolidate(this._score);
            this._score.finish(this.settings);
            if (this._lyrics && this._lyricsTrack >= 0) {
                this._score.tracks[this._lyricsTrack].applyLyrics(this._lyrics);
            }
            return this._score;
        }
        readDirection(direction) {
            let directionIndex = IOHelper.readInt16LE(this.data);
            // direction not set
            if (directionIndex === -1) {
                return;
            }
            // indexes are 1-based in file
            directionIndex--;
            let directionsList;
            if (this._directionLookup.has(directionIndex)) {
                directionsList = this._directionLookup.get(directionIndex);
            }
            else {
                directionsList = [];
                this._directionLookup.set(directionIndex, directionsList);
            }
            directionsList.push(direction);
        }
        readVersion() {
            let version = GpBinaryHelpers.gpReadStringByteLength(this.data, 30, this.settings.importer.encoding);
            if (!version.startsWith(Gp3To5Importer.VersionString)) {
                throw new UnsupportedFormatError('Unsupported format');
            }
            version = version.substr(Gp3To5Importer.VersionString.length + 1);
            const dot = version.indexOf(String.fromCharCode(46));
            this._versionNumber = 100 * Number.parseInt(version.substr(0, dot)) + Number.parseInt(version.substr(dot + 1));
            Logger.debug(this.name, `Guitar Pro version ${version} detected`);
        }
        readScoreInformation() {
            this._score.title = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.subTitle = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.artist = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.album = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.words = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.music =
                this._versionNumber >= 500
                    ? GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)
                    : this._score.words;
            this._score.copyright = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.tab = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.instructions = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            const noticeLines = IOHelper.readInt32LE(this.data);
            let notice = '';
            for (let i = 0; i < noticeLines; i++) {
                if (i > 0) {
                    notice += '\r\n';
                }
                notice += GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)?.toString();
            }
            this._score.notices = notice;
        }
        readLyrics() {
            this._lyrics = [];
            this._lyricsTrack = IOHelper.readInt32LE(this.data) - 1;
            for (let i = 0; i < 5; i++) {
                const lyrics = new Lyrics();
                lyrics.startBar = IOHelper.readInt32LE(this.data) - 1;
                lyrics.text = GpBinaryHelpers.gpReadStringInt(this.data, this.settings.importer.encoding);
                this._lyrics.push(lyrics);
            }
        }
        readPageSetup() {
            // Page Width (4)
            // Page Heigth (4)
            // Padding Left (4)
            // Padding Right (4)
            // Padding Top (4)
            // Padding Bottom (4)
            // Size Proportion(4)
            this.data.skip(28);
            const flags = IOHelper.readInt16LE(this.data);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Title).isVisible =
                (flags & (0x01 << 0)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Title).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.SubTitle).isVisible =
                (flags & (0x01 << 1)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.SubTitle).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Artist).isVisible =
                (flags & (0x01 << 2)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Artist).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Album).isVisible =
                (flags & (0x01 << 3)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Album).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Words).isVisible =
                (flags & (0x01 << 4)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Words).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Music).isVisible =
                (flags & (0x01 << 5)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Music).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.WordsAndMusic).isVisible =
                (flags & (0x01 << 6)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.WordsAndMusic).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Copyright).isVisible =
                (flags & (0x01 << 7)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.Copyright).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.CopyrightSecondLine).isVisible =
                (flags & (0x01 << 7)) !== 0;
            ModelUtils.getOrCreateHeaderFooterStyle(this._score, ScoreSubElement.CopyrightSecondLine).template =
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            // page number format
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
        readPlaybackInfos() {
            this._playbackInfos = [];
            let channel = 0;
            for (let i = 0; i < 64; i++) {
                const info = new PlaybackInformation();
                info.primaryChannel = channel++;
                info.secondaryChannel = channel++;
                info.program = IOHelper.readInt32LE(this.data);
                info.volume = this.data.readByte();
                info.balance = this.data.readByte();
                this.data.skip(6);
                this._playbackInfos.push(info);
            }
        }
        readMasterBars() {
            for (let i = 0; i < this._barCount; i++) {
                this.readMasterBar();
            }
        }
        readMasterBar() {
            let previousMasterBar = null;
            if (this._score.masterBars.length > 0) {
                previousMasterBar = this._score.masterBars[this._score.masterBars.length - 1];
            }
            const newMasterBar = new MasterBar();
            const flags = this.data.readByte();
            // time signature
            if ((flags & 0x01) !== 0) {
                newMasterBar.timeSignatureNumerator = this.data.readByte();
            }
            else if (previousMasterBar) {
                newMasterBar.timeSignatureNumerator = previousMasterBar.timeSignatureNumerator;
            }
            if ((flags & 0x02) !== 0) {
                newMasterBar.timeSignatureDenominator = this.data.readByte();
            }
            else if (previousMasterBar) {
                newMasterBar.timeSignatureDenominator = previousMasterBar.timeSignatureDenominator;
            }
            // repeatings
            newMasterBar.isRepeatStart = (flags & 0x04) !== 0;
            if ((flags & 0x08) !== 0) {
                newMasterBar.repeatCount = this.data.readByte() + (this._versionNumber >= 500 ? 0 : 1);
            }
            // alternate endings (pre GP5)
            if ((flags & 0x10) !== 0 && this._versionNumber < 500) {
                let currentMasterBar = previousMasterBar;
                // get the already existing alternatives to ignore them
                let existentAlternatives = 0;
                while (currentMasterBar) {
                    // found another repeat ending?
                    if (currentMasterBar.isRepeatEnd && currentMasterBar !== previousMasterBar) {
                        break;
                    }
                    // found the opening?
                    if (currentMasterBar.isRepeatStart) {
                        break;
                    }
                    existentAlternatives = existentAlternatives | currentMasterBar.alternateEndings;
                    currentMasterBar = currentMasterBar.previousMasterBar;
                }
                // now calculate the alternative for this bar
                let repeatAlternative = 0;
                const repeatMask = this.data.readByte();
                for (let i = 0; i < 8; i++) {
                    // only add the repeating if it is not existing
                    const repeating = 1 << i;
                    if (repeatMask > i && (existentAlternatives & repeating) === 0) {
                        repeatAlternative = repeatAlternative | repeating;
                    }
                }
                newMasterBar.alternateEndings = repeatAlternative;
            }
            // marker
            if ((flags & 0x20) !== 0) {
                const section = new Section();
                section.text = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                section.marker = '';
                GpBinaryHelpers.gpReadColor(this.data, false);
                newMasterBar.section = section;
            }
            // keysignature
            if ((flags & 0x40) !== 0) {
                this._keySignatures.set(this._score.masterBars.length, [
                    IOHelper.readSInt8(this.data),
                    this.data.readByte()
                ]);
            }
            if (this._versionNumber >= 500 && (flags & 0x03) !== 0) {
                this.data.skip(4);
            }
            // better alternate ending mask in GP5
            if (this._versionNumber >= 500) {
                newMasterBar.alternateEndings = this.data.readByte();
            }
            // tripletfeel
            if (this._versionNumber >= 500) {
                const tripletFeel = this.data.readByte();
                switch (tripletFeel) {
                    case 1:
                        newMasterBar.tripletFeel = TripletFeel.Triplet8th;
                        break;
                    case 2:
                        newMasterBar.tripletFeel = TripletFeel.Triplet16th;
                        break;
                }
                this.data.readByte();
            }
            else {
                newMasterBar.tripletFeel = this._globalTripletFeel;
            }
            const isDoubleBar = (flags & 0x80) !== 0;
            newMasterBar.isDoubleBar = isDoubleBar;
            const barIndexForDirection = this._score.masterBars.length;
            if (this._directionLookup.has(barIndexForDirection)) {
                for (const direction of this._directionLookup.get(barIndexForDirection)) {
                    newMasterBar.addDirection(direction);
                }
            }
            this._score.addMasterBar(newMasterBar);
            if (isDoubleBar) {
                this._doubleBars.add(newMasterBar.index);
            }
        }
        readTracks() {
            for (let i = 0; i < this._trackCount; i++) {
                this.readTrack();
            }
        }
        readTrack() {
            const newTrack = new Track();
            newTrack.ensureStaveCount(1);
            this._score.addTrack(newTrack);
            const mainStaff = newTrack.staves[0];
            // Track Flags:
            // 1   - Percussion Track
            // 2   - 12 Stringed Track
            // 4   - Unknown
            // 8   - Is Visible on Multi Track
            // 16  - Unknown
            // 32  - Unknown
            // 64  - Unknown
            // 128 - Show Tuning
            const flags = this.data.readByte();
            newTrack.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 40, this.settings.importer.encoding);
            if ((flags & 0x01) !== 0) {
                mainStaff.isPercussion = true;
            }
            if (this._versionNumber >= 500) {
                newTrack.isVisibleOnMultiTrack = (flags & 0x08) !== 0;
            }
            if (this._score.stylesheet.perTrackDisplayTuning === null) {
                this._score.stylesheet.perTrackDisplayTuning = new Map();
            }
            this._score.stylesheet.perTrackDisplayTuning.set(newTrack.index, (flags & 0x80) !== 0);
            //
            const stringCount = IOHelper.readInt32LE(this.data);
            const tuning = [];
            for (let i = 0; i < 7; i++) {
                const stringTuning = IOHelper.readInt32LE(this.data);
                if (stringCount > i) {
                    tuning.push(stringTuning);
                }
            }
            mainStaff.stringTuning.tunings = tuning;
            const port = IOHelper.readInt32LE(this.data);
            const index = IOHelper.readInt32LE(this.data) - 1;
            const effectChannel = IOHelper.readInt32LE(this.data) - 1;
            this.data.skip(4); // Fretcount
            if (index >= 0 && index < this._playbackInfos.length) {
                const info = this._playbackInfos[index];
                info.port = port;
                info.isSolo = (flags & 0x10) !== 0;
                info.isMute = (flags & 0x20) !== 0;
                info.secondaryChannel = effectChannel;
                if (GeneralMidi.isGuitar(info.program)) {
                    mainStaff.displayTranspositionPitch = -12;
                }
                newTrack.playbackInfo = info;
            }
            mainStaff.capo = IOHelper.readInt32LE(this.data);
            newTrack.color = GpBinaryHelpers.gpReadColor(this.data, false);
            if (this._versionNumber >= 500) {
                const staveFlags = this.data.readByte();
                mainStaff.showTablature = (staveFlags & 0x01) !== 0;
                mainStaff.showStandardNotation = (staveFlags & 0x02) !== 0;
                const showChordDiagramListOnTopOfScore = (staveFlags & 0x64) !== 0;
                if (this._score.stylesheet.perTrackChordDiagramsOnTop === null) {
                    this._score.stylesheet.perTrackChordDiagramsOnTop = new Map();
                }
                this._score.stylesheet.perTrackChordDiagramsOnTop.set(newTrack.index, showChordDiagramListOnTopOfScore);
                // flags for
                //  0x02 -> auto let ring
                //  0x04 -> auto brush
                this.data.readByte();
                // unknown
                this.data.skip(43);
            }
            // unknown
            if (this._versionNumber >= 510) {
                this.data.skip(4);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
        }
        readBars() {
            for (let i = 0; i < this._barCount; i++) {
                for (let t = 0; t < this._trackCount; t++) {
                    this.readBar(this._score.tracks[t]);
                }
            }
        }
        readBar(track) {
            const newBar = new Bar();
            const mainStaff = track.staves[0];
            if (mainStaff.isPercussion) {
                newBar.clef = Clef.Neutral;
            }
            mainStaff.addBar(newBar);
            if (this._keySignatures.has(newBar.index)) {
                const newKeySignature = this._keySignatures.get(newBar.index);
                newBar.keySignature = newKeySignature[0];
                newBar.keySignatureType = newKeySignature[1];
            }
            else if (newBar.index > 0) {
                newBar.keySignature = newBar.previousBar.keySignature;
                newBar.keySignatureType = newBar.previousBar.keySignatureType;
            }
            if (this._doubleBars.has(newBar.index)) {
                newBar.barLineRight = BarLineStyle.LightLight;
            }
            let voiceCount = 1;
            if (this._versionNumber >= 500) {
                this.data.readByte();
                voiceCount = 2;
            }
            for (let v = 0; v < voiceCount; v++) {
                this.readVoice(track, newBar);
            }
        }
        readVoice(track, bar) {
            const beatCount = IOHelper.readInt32LE(this.data);
            if (beatCount === 0) {
                return;
            }
            const newVoice = new Voice$1();
            bar.addVoice(newVoice);
            for (let i = 0; i < beatCount; i++) {
                this.readBeat(track, bar, newVoice);
            }
        }
        readBeat(track, bar, voice) {
            const newBeat = new Beat();
            const flags = this.data.readByte();
            if ((flags & 0x01) !== 0) {
                newBeat.dots = 1;
            }
            if ((flags & 0x40) !== 0) {
                const type = this.data.readByte();
                newBeat.isEmpty = (type & 0x02) === 0;
            }
            voice.addBeat(newBeat);
            const duration = IOHelper.readSInt8(this.data);
            switch (duration) {
                case -2:
                    newBeat.duration = Duration.Whole;
                    break;
                case -1:
                    newBeat.duration = Duration.Half;
                    break;
                case 0:
                    newBeat.duration = Duration.Quarter;
                    break;
                case 1:
                    newBeat.duration = Duration.Eighth;
                    break;
                case 2:
                    newBeat.duration = Duration.Sixteenth;
                    break;
                case 3:
                    newBeat.duration = Duration.ThirtySecond;
                    break;
                case 4:
                    newBeat.duration = Duration.SixtyFourth;
                    break;
                default:
                    newBeat.duration = Duration.Quarter;
                    break;
            }
            if ((flags & 0x20) !== 0) {
                newBeat.tupletNumerator = IOHelper.readInt32LE(this.data);
                switch (newBeat.tupletNumerator) {
                    case 1:
                        newBeat.tupletDenominator = 1;
                        break;
                    case 3:
                        newBeat.tupletDenominator = 2;
                        break;
                    case 5:
                    case 6:
                    case 7:
                        newBeat.tupletDenominator = 4;
                        break;
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                        newBeat.tupletDenominator = 8;
                        break;
                    case 2:
                    case 4:
                    case 8:
                        break;
                    default:
                        newBeat.tupletNumerator = 1;
                        newBeat.tupletDenominator = 1;
                        break;
                }
            }
            if ((flags & 0x02) !== 0) {
                this.readChord(newBeat);
            }
            const beatTextAsLyrics = this.settings.importer.beatTextAsLyrics && track.index !== this._lyricsTrack; // detect if not lyrics track
            if ((flags & 0x04) !== 0) {
                const text = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
                if (beatTextAsLyrics) {
                    const lyrics = new Lyrics();
                    lyrics.text = text.trim();
                    lyrics.finish(true);
                    // push them in reverse order to the store for applying them
                    // to the next beats being read
                    const beatLyrics = [];
                    for (let i = lyrics.chunks.length - 1; i >= 0; i--) {
                        beatLyrics.push(lyrics.chunks[i]);
                    }
                    this._beatTextChunksByTrack.set(track.index, beatLyrics);
                }
                else {
                    newBeat.text = text;
                }
            }
            let allNoteHarmonicType = HarmonicType.None;
            if ((flags & 0x08) !== 0) {
                allNoteHarmonicType = this.readBeatEffects(newBeat);
            }
            if ((flags & 0x10) !== 0) {
                this.readMixTableChange(newBeat);
            }
            const stringFlags = this.data.readByte();
            for (let i = 6; i >= 0; i--) {
                if ((stringFlags & (1 << i)) !== 0 && 6 - i < bar.staff.tuning.length) {
                    const note = this.readNote(track, bar, voice, newBeat, 6 - i);
                    if (allNoteHarmonicType !== HarmonicType.None) {
                        note.harmonicType = allNoteHarmonicType;
                        if (note.harmonicType === HarmonicType.Natural) {
                            note.harmonicValue = ModelUtils.deltaFretToHarmonicValue(note.fret);
                        }
                    }
                }
            }
            if (this._versionNumber >= 500) {
                // not 100% sure about the bits here but they look good in all test files.
                const flags2 = IOHelper.readInt16LE(this.data);
                // beam flags indicate how to handle beams connected to the previous beat,
                // so we have to set the beaming mode on the previous beat!
                // 1 - Break Beams
                if ((flags2 & 0x01) !== 0) {
                    if (newBeat.index > 0) {
                        voice.beats[newBeat.index - 1].beamingMode = BeatBeamingMode.ForceSplitToNext;
                    }
                }
                // 2 - Force beams down
                // this bit also set if we 'invert' a down-stem, but bit 8 will force the direction to up as both bits are set
                if ((flags2 & 0x02) !== 0) {
                    newBeat.preferredBeamDirection = BeamDirection.Down;
                }
                // 4 - Force Beams
                if ((flags2 & 0x04) !== 0) {
                    if (newBeat.index > 0) {
                        voice.beats[newBeat.index - 1].beamingMode = BeatBeamingMode.ForceMergeWithNext;
                    }
                }
                // 8 - Force beams up
                if ((flags2 & 0x08) !== 0) {
                    newBeat.preferredBeamDirection = BeamDirection.Up;
                }
                // 16 - Ottava 8va
                if ((flags2 & 0x10) !== 0) {
                    newBeat.ottava = Ottavia._8va;
                }
                // 32 - Ottava 8vb
                if ((flags2 & 0x20) !== 0) {
                    newBeat.ottava = Ottavia._8vb;
                }
                // 64 - Ottava 15ma
                if ((flags2 & 0x40) !== 0) {
                    newBeat.ottava = Ottavia._15ma;
                }
                // 128 - Unknown, upper bit of first byte, maybe a placeholder.
                // 256 - Ottava 15mb
                if ((flags2 & 0x100) !== 0) {
                    newBeat.ottava = Ottavia._15mb;
                }
                // 512 - Unknown
                // 1024 - Unknown
                // 2048 - Break Secondary Beams info set? -> read another byte for flag
                if ((flags2 & 0x800) !== 0) {
                    const breakSecondaryBeams = this.data.readByte() !== 0;
                    if (newBeat.index > 0 && breakSecondaryBeams) {
                        voice.beats[newBeat.index - 1].beamingMode = BeatBeamingMode.ForceSplitOnSecondaryToNext;
                    }
                }
            }
            if (beatTextAsLyrics &&
                !newBeat.isRest &&
                this._beatTextChunksByTrack.has(track.index) &&
                this._beatTextChunksByTrack.get(track.index).length > 0) {
                newBeat.lyrics = [this._beatTextChunksByTrack.get(track.index).pop()];
            }
        }
        readChord(beat) {
            const chord = new Chord();
            const chordId = ModelUtils.newGuid();
            if (this._versionNumber >= 500) {
                this.data.skip(17);
                chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
                this.data.skip(4);
                chord.firstFret = IOHelper.readInt32LE(this.data);
                for (let i = 0; i < 7; i++) {
                    const fret = IOHelper.readInt32LE(this.data);
                    if (i < beat.voice.bar.staff.tuning.length) {
                        chord.strings.push(fret);
                    }
                }
                const numberOfBarres = this.data.readByte();
                const barreFrets = new Uint8Array(5);
                this.data.read(barreFrets, 0, barreFrets.length);
                for (let i = 0; i < numberOfBarres; i++) {
                    chord.barreFrets.push(barreFrets[i]);
                }
                this.data.skip(26);
            }
            else {
                if (this.data.readByte() !== 0) {
                    // gp4
                    if (this._versionNumber >= 400) {
                        // Sharp (1)
                        // Unused (3)
                        // Root (1)
                        // Major/Minor (1)
                        // Nin,Eleven or Thirteen (1)
                        // Bass (4)
                        // Diminished/Augmented (4)
                        // Add (1)
                        this.data.skip(16);
                        chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
                        // Unused (2)
                        // Fifth (1)
                        // Ninth (1)
                        // Eleventh (1)
                        this.data.skip(4);
                        chord.firstFret = IOHelper.readInt32LE(this.data);
                        for (let i = 0; i < 7; i++) {
                            const fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                        const numberOfBarres = this.data.readByte();
                        const barreFrets = new Uint8Array(5);
                        this.data.read(barreFrets, 0, barreFrets.length);
                        for (let i = 0; i < numberOfBarres; i++) {
                            chord.barreFrets.push(barreFrets[i]);
                        }
                        // Barree end (5)
                        // Omission1,3,5,7,9,11,13 (7)
                        // Unused (1)
                        // Fingering (7)
                        // Show Diagram Fingering (1)
                        // ??
                        this.data.skip(26);
                    }
                    else {
                        // unknown
                        this.data.skip(25);
                        chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 34, this.settings.importer.encoding);
                        chord.firstFret = IOHelper.readInt32LE(this.data);
                        for (let i = 0; i < 6; i++) {
                            const fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                        // unknown
                        this.data.skip(36);
                    }
                }
                else {
                    const strings = this._versionNumber >= 406 ? 7 : 6;
                    chord.name = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                    chord.firstFret = IOHelper.readInt32LE(this.data);
                    if (chord.firstFret > 0) {
                        for (let i = 0; i < strings; i++) {
                            const fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                    }
                }
            }
            if (chord.name) {
                beat.chordId = chordId;
                beat.voice.bar.staff.addChord(beat.chordId, chord);
            }
        }
        readBeatEffects(beat) {
            const flags = this.data.readByte();
            let flags2 = 0;
            if (this._versionNumber >= 400) {
                flags2 = this.data.readByte();
            }
            if ((flags & 0x10) !== 0) {
                beat.fade = FadeType.FadeIn;
            }
            if ((this._versionNumber < 400 && (flags & 0x01) !== 0) || (flags & 0x02) !== 0) {
                beat.vibrato = VibratoType.Slight;
            }
            if ((flags2 & 0x01) !== 0) {
                beat.rasgueado = Rasgueado.Ii;
            }
            if ((flags & 0x20) !== 0 && this._versionNumber >= 400) {
                const slapPop = IOHelper.readSInt8(this.data);
                switch (slapPop) {
                    case 1:
                        beat.tap = true;
                        break;
                    case 2:
                        beat.slap = true;
                        break;
                    case 3:
                        beat.pop = true;
                        break;
                }
            }
            else if ((flags & 0x20) !== 0) {
                const slapPop = IOHelper.readSInt8(this.data);
                switch (slapPop) {
                    case 1:
                        beat.tap = true;
                        break;
                    case 2:
                        beat.slap = true;
                        break;
                    case 3:
                        beat.pop = true;
                        break;
                }
                this.data.skip(4);
            }
            if ((flags2 & 0x04) !== 0) {
                this.readTremoloBarEffect(beat);
            }
            if ((flags & 0x40) !== 0) {
                let strokeUp = 0;
                let strokeDown = 0;
                if (this._versionNumber < 500) {
                    strokeDown = this.data.readByte();
                    strokeUp = this.data.readByte();
                }
                else {
                    strokeUp = this.data.readByte();
                    strokeDown = this.data.readByte();
                }
                if (strokeUp > 0) {
                    beat.brushType = BrushType.BrushUp;
                    beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeUp);
                }
                else if (strokeDown > 0) {
                    beat.brushType = BrushType.BrushDown;
                    beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeDown);
                }
            }
            if ((flags2 & 0x02) !== 0) {
                switch (IOHelper.readSInt8(this.data)) {
                    case 0:
                        beat.pickStroke = PickStroke.None;
                        break;
                    case 1:
                        beat.pickStroke = PickStroke.Up;
                        break;
                    case 2:
                        beat.pickStroke = PickStroke.Down;
                        break;
                }
            }
            if (this._versionNumber < 400) {
                if ((flags & 0x04) !== 0) {
                    return HarmonicType.Natural;
                }
                if ((flags & 0x08) !== 0) {
                    return HarmonicType.Artificial;
                }
            }
            return HarmonicType.None;
        }
        readTremoloBarEffect(beat) {
            this.data.readByte(); // type
            IOHelper.readInt32LE(this.data); // value
            const pointCount = IOHelper.readInt32LE(this.data);
            if (pointCount > 0) {
                for (let i = 0; i < pointCount; i++) {
                    const point = new BendPoint(0, 0);
                    point.offset = IOHelper.readInt32LE(this.data); // 0...60
                    point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                    GpBinaryHelpers.gpReadBool(this.data); // vibrato
                    beat.addWhammyBarPoint(point);
                }
            }
        }
        static toStrokeValue(value) {
            switch (value) {
                case 1:
                    return 30;
                case 2:
                    return 30;
                case 3:
                    return 60;
                case 4:
                    return 120;
                case 5:
                    return 240;
                case 6:
                    return 480;
                default:
                    return 0;
            }
        }
        readMixTableChange(beat) {
            const tableChange = new MixTableChange();
            tableChange.instrument = IOHelper.readSInt8(this.data);
            if (this._versionNumber >= 500) {
                this.data.skip(16); // Rse Info
            }
            tableChange.volume = IOHelper.readSInt8(this.data);
            tableChange.balance = IOHelper.readSInt8(this.data);
            const chorus = IOHelper.readSInt8(this.data);
            const reverb = IOHelper.readSInt8(this.data);
            const phaser = IOHelper.readSInt8(this.data);
            const tremolo = IOHelper.readSInt8(this.data);
            if (this._versionNumber >= 500) {
                tableChange.tempoName = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            tableChange.tempo = IOHelper.readInt32LE(this.data);
            // durations
            if (tableChange.volume >= 0) {
                this.data.readByte();
            }
            if (tableChange.balance >= 0) {
                this.data.readByte();
            }
            if (chorus >= 0) {
                this.data.readByte();
            }
            if (reverb >= 0) {
                this.data.readByte();
            }
            if (phaser >= 0) {
                this.data.readByte();
            }
            if (tremolo >= 0) {
                this.data.readByte();
            }
            if (tableChange.tempo >= 0) {
                tableChange.duration = IOHelper.readSInt8(this.data);
                if (this._versionNumber >= 510) {
                    this.data.readByte(); // hideTempo (bool)
                }
            }
            if (this._versionNumber >= 400) {
                this.data.readByte(); // mixTableFlags
            }
            if (this._versionNumber >= 500) {
                const wahType = IOHelper.readSInt8(this.data);
                // const showWahWah = (mixTableFlags & 0x80) !== 0;
                // -1 Off (when there is a mixtable but no wah-wah)
                if (wahType >= 100) {
                    beat.wahPedal = WahPedal.Closed;
                }
                else if (wahType >= 0) {
                    beat.wahPedal = WahPedal.Open;
                }
            }
            // unknown
            if (this._versionNumber >= 510) {
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            if (tableChange.volume >= 0) {
                const volumeAutomation = new Automation();
                volumeAutomation.isLinear = true;
                volumeAutomation.type = AutomationType.Volume;
                volumeAutomation.value = tableChange.volume;
                beat.automations.push(volumeAutomation);
            }
            if (tableChange.balance >= 0) {
                const balanceAutomation = new Automation();
                balanceAutomation.isLinear = true;
                balanceAutomation.type = AutomationType.Balance;
                balanceAutomation.value = tableChange.balance;
                beat.automations.push(balanceAutomation);
            }
            if (tableChange.instrument >= 0) {
                const instrumentAutomation = new Automation();
                instrumentAutomation.isLinear = true;
                instrumentAutomation.type = AutomationType.Instrument;
                instrumentAutomation.value = tableChange.instrument;
                beat.automations.push(instrumentAutomation);
            }
            if (tableChange.tempo >= 0) {
                const tempoAutomation = new Automation();
                tempoAutomation.isLinear = true;
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = tableChange.tempo;
                beat.automations.push(tempoAutomation);
                beat.voice.bar.masterBar.tempoAutomations.push(tempoAutomation);
            }
        }
        readNote(track, bar, voice, beat, stringIndex) {
            const newNote = new Note();
            newNote.string = bar.staff.tuning.length - stringIndex;
            const flags = this.data.readByte();
            if ((flags & 0x02) !== 0) {
                newNote.accentuated = AccentuationType.Heavy;
            }
            else if ((flags & 0x40) !== 0) {
                newNote.accentuated = AccentuationType.Normal;
            }
            newNote.isGhost = (flags & 0x04) !== 0;
            if ((flags & 0x20) !== 0) {
                const noteType = this.data.readByte();
                if (noteType === 3) {
                    newNote.isDead = true;
                }
                else if (noteType === 2) {
                    newNote.isTieDestination = true;
                }
            }
            if ((flags & 0x01) !== 0 && this._versionNumber < 500) {
                this.data.readByte(); // duration
                this.data.readByte(); // tuplet
            }
            if ((flags & 0x10) !== 0) {
                const dynamicNumber = IOHelper.readSInt8(this.data);
                newNote.dynamics = this.toDynamicValue(dynamicNumber);
                beat.dynamics = newNote.dynamics;
            }
            if ((flags & 0x20) !== 0) {
                newNote.fret = IOHelper.readSInt8(this.data);
            }
            if ((flags & 0x80) !== 0) {
                newNote.leftHandFinger = IOHelper.readSInt8(this.data);
                newNote.rightHandFinger = IOHelper.readSInt8(this.data);
            }
            let swapAccidentals = false;
            if (this._versionNumber >= 500) {
                if ((flags & 0x01) !== 0) {
                    newNote.durationPercent = IOHelper.readFloat64BE(this.data);
                }
                const flags2 = this.data.readByte();
                swapAccidentals = (flags2 & 0x02) !== 0;
            }
            beat.addNote(newNote);
            if ((flags & 0x08) !== 0) {
                this.readNoteEffects(track, voice, beat, newNote);
            }
            if (bar.staff.isPercussion) {
                newNote.percussionArticulation = newNote.fret;
                newNote.string = -1;
                newNote.fret = -1;
            }
            if (swapAccidentals) {
                const accidental = Tuning.defaultAccidentals[newNote.realValueWithoutHarmonic % 12];
                if (accidental === '#') {
                    newNote.accidentalMode = NoteAccidentalMode.ForceFlat;
                }
                else if (accidental === 'b') {
                    newNote.accidentalMode = NoteAccidentalMode.ForceSharp;
                }
            }
            return newNote;
        }
        toDynamicValue(value) {
            switch (value) {
                case 1:
                    return DynamicValue.PPP;
                case 2:
                    return DynamicValue.PP;
                case 3:
                    return DynamicValue.P;
                case 4:
                    return DynamicValue.MP;
                case 5:
                    return DynamicValue.MF;
                case 6:
                    return DynamicValue.F;
                case 7:
                    return DynamicValue.FF;
                case 8:
                    return DynamicValue.FFF;
                default:
                    return DynamicValue.F;
            }
        }
        readNoteEffects(track, voice, beat, note) {
            const flags = this.data.readByte();
            let flags2 = 0;
            if (this._versionNumber >= 400) {
                flags2 = this.data.readByte();
            }
            if ((flags & 0x01) !== 0) {
                this.readBend(note);
            }
            if ((flags & 0x10) !== 0) {
                this.readGrace(voice, note);
            }
            if ((flags2 & 0x04) !== 0) {
                this.readTremoloPicking(beat);
            }
            if ((flags2 & 0x08) !== 0) {
                this.readSlide(note);
            }
            else if (this._versionNumber < 400) {
                if ((flags & 0x04) !== 0) {
                    note.slideOutType = SlideOutType.Shift;
                }
            }
            if ((flags2 & 0x10) !== 0) {
                this.readArtificialHarmonic(note);
            }
            if ((flags2 & 0x20) !== 0) {
                this.readTrill(note);
            }
            note.isLetRing = (flags & 0x08) !== 0;
            note.isHammerPullOrigin = (flags & 0x02) !== 0;
            if ((flags2 & 0x40) !== 0) {
                note.vibrato = VibratoType.Slight;
            }
            note.isPalmMute = (flags2 & 0x02) !== 0;
            note.isStaccato = (flags2 & 0x01) !== 0;
        }
        readBend(note) {
            this.data.readByte(); // type
            IOHelper.readInt32LE(this.data); // value
            const pointCount = IOHelper.readInt32LE(this.data);
            if (pointCount > 0) {
                for (let i = 0; i < pointCount; i++) {
                    const point = new BendPoint(0, 0);
                    point.offset = IOHelper.readInt32LE(this.data); // 0...60
                    point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                    GpBinaryHelpers.gpReadBool(this.data); // vibrato
                    note.addBendPoint(point);
                }
            }
        }
        readGrace(voice, note) {
            const graceBeat = new Beat();
            const graceNote = new Note();
            graceNote.string = note.string;
            graceNote.fret = IOHelper.readSInt8(this.data);
            graceBeat.duration = Duration.ThirtySecond;
            graceBeat.dynamics = this.toDynamicValue(IOHelper.readSInt8(this.data));
            const transition = IOHelper.readSInt8(this.data);
            switch (transition) {
                case 0:
                    break;
                case 1:
                    graceNote.slideOutType = SlideOutType.Legato;
                    graceNote.slideTarget = note;
                    break;
                case 2:
                    break;
                case 3:
                    graceNote.isHammerPullOrigin = true;
                    break;
            }
            graceNote.dynamics = graceBeat.dynamics;
            this.data.skip(1); // duration
            if (this._versionNumber < 500) {
                graceBeat.graceType = GraceType.BeforeBeat;
            }
            else {
                const flags = this.data.readByte();
                graceNote.isDead = (flags & 0x01) !== 0;
                graceBeat.graceType = (flags & 0x02) !== 0 ? GraceType.OnBeat : GraceType.BeforeBeat;
            }
            voice.addGraceBeat(graceBeat);
            graceBeat.addNote(graceNote);
        }
        readTremoloPicking(beat) {
            const speed = this.data.readByte();
            switch (speed) {
                case 1:
                    beat.tremoloSpeed = Duration.Eighth;
                    break;
                case 2:
                    beat.tremoloSpeed = Duration.Sixteenth;
                    break;
                case 3:
                    beat.tremoloSpeed = Duration.ThirtySecond;
                    break;
            }
        }
        readSlide(note) {
            if (this._versionNumber >= 500) {
                const type = IOHelper.readSInt8(this.data);
                if ((type & 1) !== 0) {
                    note.slideOutType = SlideOutType.Shift;
                }
                else if ((type & 2) !== 0) {
                    note.slideOutType = SlideOutType.Legato;
                }
                else if ((type & 4) !== 0) {
                    note.slideOutType = SlideOutType.OutDown;
                }
                else if ((type & 8) !== 0) {
                    note.slideOutType = SlideOutType.OutUp;
                }
                if ((type & 16) !== 0) {
                    note.slideInType = SlideInType.IntoFromBelow;
                }
                else if ((type & 32) !== 0) {
                    note.slideInType = SlideInType.IntoFromAbove;
                }
            }
            else {
                const type = IOHelper.readSInt8(this.data);
                switch (type) {
                    case 1:
                        note.slideOutType = SlideOutType.Shift;
                        break;
                    case 2:
                        note.slideOutType = SlideOutType.Legato;
                        break;
                    case 3:
                        note.slideOutType = SlideOutType.OutDown;
                        break;
                    case 4:
                        note.slideOutType = SlideOutType.OutUp;
                        break;
                    case -1:
                        note.slideInType = SlideInType.IntoFromBelow;
                        break;
                    case -2:
                        note.slideInType = SlideInType.IntoFromAbove;
                        break;
                }
            }
        }
        readArtificialHarmonic(note) {
            const type = this.data.readByte();
            if (this._versionNumber >= 500) {
                switch (type) {
                    case 1:
                        note.harmonicType = HarmonicType.Natural;
                        note.harmonicValue = ModelUtils.deltaFretToHarmonicValue(note.fret);
                        break;
                    case 2:
                        /*let _harmonicTone: number = */ this.data.readByte();
                        /*let _harmonicKey: number =  */ this.data.readByte();
                        /*let _harmonicOctaveOffset: number = */ this.data.readByte();
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 3:
                        note.harmonicType = HarmonicType.Tap;
                        note.harmonicValue = ModelUtils.deltaFretToHarmonicValue(this.data.readByte());
                        break;
                    case 4:
                        note.harmonicType = HarmonicType.Pinch;
                        note.harmonicValue = 12;
                        break;
                    case 5:
                        note.harmonicType = HarmonicType.Semi;
                        note.harmonicValue = 12;
                        break;
                }
            }
            else if (this._versionNumber >= 400) {
                switch (type) {
                    case 1:
                        note.harmonicType = HarmonicType.Natural;
                        break;
                    case 3:
                        note.harmonicType = HarmonicType.Tap;
                        break;
                    case 4:
                        note.harmonicType = HarmonicType.Pinch;
                        break;
                    case 5:
                        note.harmonicType = HarmonicType.Semi;
                        break;
                    case 15:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 17:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 22:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                }
            }
        }
        readTrill(note) {
            note.trillValue = this.data.readByte() + note.stringTuning;
            switch (this.data.readByte()) {
                case 1:
                    note.trillSpeed = Duration.Sixteenth;
                    break;
                case 2:
                    note.trillSpeed = Duration.ThirtySecond;
                    break;
                case 3:
                    note.trillSpeed = Duration.SixtyFourth;
                    break;
            }
        }
    }
    Gp3To5Importer.VersionString = 'FICHIER GUITAR PRO ';
    Gp3To5Importer.BendStep = 25;
    class GpBinaryHelpers {
        static gpReadColor(data, readAlpha = false) {
            const r = data.readByte();
            const g = data.readByte();
            const b = data.readByte();
            let a = 255;
            if (readAlpha) {
                a = data.readByte();
            }
            else {
                data.skip(1);
            }
            return new Color(r, g, b, a);
        }
        static gpReadBool(data) {
            return data.readByte() !== 0;
        }
        /**
         * Skips an integer (4byte) and reads a string using
         * a bytesize
         */
        static gpReadStringIntUnused(data, encoding) {
            data.skip(4);
            return GpBinaryHelpers.gpReadString(data, data.readByte(), encoding);
        }
        /**
         * Reads an integer as size, and then the string itself
         */
        static gpReadStringInt(data, encoding) {
            return GpBinaryHelpers.gpReadString(data, IOHelper.readInt32LE(data), encoding);
        }
        /**
         * Reads an integer as size, skips a byte and reads the string itself
         */
        static gpReadStringIntByte(data, encoding) {
            const length = IOHelper.readInt32LE(data) - 1;
            data.readByte();
            return GpBinaryHelpers.gpReadString(data, length, encoding);
        }
        static gpReadString(data, length, encoding) {
            const b = new Uint8Array(length);
            data.read(b, 0, b.length);
            return IOHelper.toString(b, encoding);
        }
        static gpWriteString(data, s) {
            const encoded = IOHelper.stringToBytes(s);
            data.writeByte(s.length);
            data.write(encoded, 0, encoded.length);
        }
        /**
         * Reads a byte as size and the string itself.
         * Additionally it is ensured the specified amount of bytes is read.
         * @param data the data to read from.
         * @param length the amount of bytes to read
         * @param encoding The encoding to use to decode the byte into a string
         * @returns
         */
        static gpReadStringByteLength(data, length, encoding) {
            const stringLength = data.readByte();
            const s = GpBinaryHelpers.gpReadString(data, stringLength, encoding);
            if (stringLength < length) {
                data.skip(length - stringLength);
            }
            return s;
        }
    }
    /**
     * A mixtablechange describes several track changes.
     */
    class MixTableChange {
        constructor() {
            this.volume = -1;
            this.balance = -1;
            this.instrument = -1;
            this.tempoName = '';
            this.tempo = -1;
            this.duration = -1;
        }
    }

    /**
     * Represents a rectangular area within the renderer music notation.
     */
    class Bounds {
        constructor() {
            /**
             * Gets or sets the X-position of the rectangle within the music notation.
             */
            this.x = 0;
            /**
             * Gets or sets the Y-position of the rectangle within the music notation.
             */
            this.y = 0;
            /**
             * Gets or sets the width of the rectangle.
             */
            this.w = 0;
            /**
             * Gets or sets the height of the rectangle.
             */
            this.h = 0;
        }
        scaleWith(scale) {
            this.x *= scale;
            this.y *= scale;
            this.w *= scale;
            this.h *= scale;
        }
    }

    var DataType;
    (function (DataType) {
        DataType[DataType["Boolean"] = 0] = "Boolean";
        DataType[DataType["Integer"] = 1] = "Integer";
        DataType[DataType["Float"] = 2] = "Float";
        DataType[DataType["String"] = 3] = "String";
        DataType[DataType["Point"] = 4] = "Point";
        DataType[DataType["Size"] = 5] = "Size";
        DataType[DataType["Rectangle"] = 6] = "Rectangle";
        DataType[DataType["Color"] = 7] = "Color";
    })(DataType || (DataType = {}));
    /**
     * A BinaryStylesheet from Guitar Pro 6 and 7 files.
     * The BinaryStylesheet is a simple binary key-value store for additional settings
     * related to the display of the music sheet.
     *
     * File:
     *     int32 (big endian) | Number of KeyValuePairs
     *     KeyValuePair[]     | The raw records
     *
     * KeyValuePair:
     *     1 Byte  | length of the key
     *     n Bytes | key as utf8 encoded string
     *     1 Byte  | Data Type
     *     n Bytes | Value
     *
     * Values based on Data Type:
     *     0 = bool
     *         0===false
     *     1 = int32 (big endian)
     *     2 = float (big endian, IEEE)
     *     3 = string
     *       int16 (big endian) | length of string
     *       n bytes            | utf-8 encoded string
     *     4 = point
     *       int32 (big endian) | X-coordinate
     *       int32 (big endian) | Y-coordinate
     *     5 = size
     *       int32 (big endian) | Width
     *       int32 (big endian) | Height
     *     6 = rectangle
     *       int32 (big endian) | X-coordinate
     *       int32 (big endian) | Y-coordinate
     *       int32 (big endian) | Width
     *       int32 (big endian) | Height
     *     7 = color
     *       1 byte | Red
     *       1 byte | Green
     *       1 byte | Blue
     *       1 byte | Alpha
     */
    class BinaryStylesheet {
        constructor(data) {
            this._types = new Map();
            this.raw = new Map();
            if (data) {
                this.read(data);
            }
        }
        read(data) {
            // BinaryStylesheet apears to be big-endien
            const readable = ByteBuffer.fromBuffer(data);
            const entryCount = IOHelper.readInt32BE(readable);
            for (let i = 0; i < entryCount; i++) {
                const key = GpBinaryHelpers.gpReadString(readable, readable.readByte(), 'utf-8');
                const type = readable.readByte();
                this._types.set(key, type);
                switch (type) {
                    case DataType.Boolean:
                        const flag = readable.readByte() === 1;
                        this.addValue(key, flag);
                        break;
                    case DataType.Integer:
                        const ivalue = IOHelper.readInt32BE(readable);
                        this.addValue(key, ivalue);
                        break;
                    case DataType.Float:
                        const fvalue = IOHelper.readFloat32BE(readable);
                        this.addValue(key, fvalue);
                        break;
                    case DataType.String:
                        const s = GpBinaryHelpers.gpReadString(readable, IOHelper.readInt16BE(readable), 'utf-8');
                        this.addValue(key, s);
                        break;
                    case DataType.Point:
                        const x = IOHelper.readInt32BE(readable);
                        const y = IOHelper.readInt32BE(readable);
                        this.addValue(key, new BendPoint(x, y));
                        break;
                    case DataType.Size:
                        const width = IOHelper.readInt32BE(readable);
                        const height = IOHelper.readInt32BE(readable);
                        this.addValue(key, new BendPoint(width, height));
                        break;
                    case DataType.Rectangle:
                        const rect = new Bounds();
                        rect.x = IOHelper.readInt32BE(readable);
                        rect.y = IOHelper.readInt32BE(readable);
                        rect.w = IOHelper.readInt32BE(readable);
                        rect.h = IOHelper.readInt32BE(readable);
                        this.addValue(key, rect);
                        break;
                    case DataType.Color:
                        const color = GpBinaryHelpers.gpReadColor(readable, true);
                        this.addValue(key, color);
                        break;
                }
            }
        }
        apply(score) {
            for (const [key, value] of this.raw) {
                switch (key) {
                    case 'StandardNotation/hideDynamics':
                        score.stylesheet.hideDynamics = value;
                        break;
                    case 'System/bracketExtendMode':
                        score.stylesheet.bracketExtendMode = value;
                        break;
                    case 'Global/useSystemSignSeparator':
                        score.stylesheet.useSystemSignSeparator = value;
                        break;
                    case 'Global/DisplayTuning':
                        score.stylesheet.globalDisplayTuning = value;
                        break;
                    case 'Global/DrawChords':
                        score.stylesheet.globalDisplayChordDiagramsOnTop = value;
                        break;
                    case 'System/showTrackNameSingle':
                        if (!value) {
                            score.stylesheet.singleTrackTrackNamePolicy = TrackNamePolicy.Hidden;
                        }
                        break;
                    case 'System/showTrackNameMulti':
                        if (!value) {
                            score.stylesheet.multiTrackTrackNamePolicy = TrackNamePolicy.Hidden;
                        }
                        break;
                    case 'System/trackNameModeSingle':
                        if (score.stylesheet.singleTrackTrackNamePolicy !== TrackNamePolicy.Hidden) {
                            switch (value) {
                                case 0: // First System
                                    score.stylesheet.singleTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
                                    break;
                                case 1: // First System of Each Page
                                    score.stylesheet.singleTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
                                    break;
                                case 2: // All Systems
                                    score.stylesheet.singleTrackTrackNamePolicy = TrackNamePolicy.AllSystems;
                                    break;
                            }
                        }
                        break;
                    case 'System/trackNameModeMulti':
                        if (score.stylesheet.multiTrackTrackNamePolicy !== TrackNamePolicy.Hidden) {
                            switch (value) {
                                case 0: // First System
                                    score.stylesheet.multiTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
                                    break;
                                case 1: // First System of Each Page
                                    score.stylesheet.multiTrackTrackNamePolicy = TrackNamePolicy.FirstSystem;
                                    break;
                                case 2: // All Systems
                                    score.stylesheet.multiTrackTrackNamePolicy = TrackNamePolicy.AllSystems;
                                    break;
                            }
                        }
                        break;
                    case 'System/shortTrackNameOnFirstSystem':
                        if (value) {
                            score.stylesheet.firstSystemTrackNameMode = TrackNameMode.ShortName;
                        }
                        else {
                            score.stylesheet.firstSystemTrackNameMode = TrackNameMode.FullName;
                        }
                        break;
                    case 'System/shortTrackNameOnOtherSystems':
                        if (value) {
                            score.stylesheet.otherSystemsTrackNameMode = TrackNameMode.ShortName;
                        }
                        else {
                            score.stylesheet.otherSystemsTrackNameMode = TrackNameMode.FullName;
                        }
                        break;
                    case 'System/horizontalTrackNameOnFirstSystem':
                        if (value) {
                            score.stylesheet.firstSystemTrackNameOrientation = TrackNameOrientation.Horizontal;
                        }
                        else {
                            score.stylesheet.firstSystemTrackNameOrientation = TrackNameOrientation.Vertical;
                        }
                        break;
                    case 'System/horizontalTrackNameOnOtherSystems':
                        if (value) {
                            score.stylesheet.otherSystemsTrackNameOrientation = TrackNameOrientation.Horizontal;
                        }
                        else {
                            score.stylesheet.otherSystemsTrackNameOrientation = TrackNameOrientation.Vertical;
                        }
                        break;
                    case 'Header/Title':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Title).template = value;
                        break;
                    case 'Header/TitleAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Title).textAlign = this.toTextAlign(value);
                        break;
                    case 'Header/drawTitle':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Title).isVisible = value;
                        break;
                    case 'Header/Subtitle':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.SubTitle).template = value;
                        break;
                    case 'Header/SubtitleAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.SubTitle).textAlign =
                            this.toTextAlign(value);
                        break;
                    case 'Header/drawSubtitle':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.SubTitle).isVisible =
                            value;
                        break;
                    case 'Header/Artist':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Artist).template = value;
                        break;
                    case 'Header/ArtistAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Artist).textAlign = this.toTextAlign(value);
                        break;
                    case 'Header/drawArtist':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Artist).isVisible = value;
                        break;
                    case 'Header/Album':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Album).template = value;
                        break;
                    case 'Header/AlbumAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Album).textAlign = this.toTextAlign(value);
                        break;
                    case 'Header/drawAlbum':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Album).isVisible = value;
                        break;
                    case 'Header/Words':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Words).template = value;
                        break;
                    case 'Header/WordsAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Words).textAlign = this.toTextAlign(value);
                        break;
                    case 'Header/drawWords':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Words).isVisible = value;
                        break;
                    case 'Header/Music':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Music).template = value;
                        break;
                    case 'Header/MusicAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Music).textAlign = this.toTextAlign(value);
                        break;
                    case 'Header/drawMusic':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Music).isVisible = value;
                        break;
                    case 'Header/WordsAndMusic':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.WordsAndMusic).template =
                            value;
                        break;
                    case 'Header/WordsAndMusicAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.WordsAndMusic).textAlign =
                            this.toTextAlign(value);
                        break;
                    case 'Header/drawWordsAndMusic':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.WordsAndMusic).isVisible =
                            value;
                        break;
                    case 'Header/Tabber':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Transcriber).template =
                            value;
                        break;
                    case 'Header/TabberAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Transcriber).textAlign =
                            this.toTextAlign(value);
                        break;
                    case 'Header/drawTabber':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Transcriber).isVisible =
                            value;
                        break;
                    case 'Footer/Copyright':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Copyright).template =
                            value;
                        break;
                    case 'Footer/CopyrightAlignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Copyright).textAlign =
                            this.toTextAlign(value);
                        break;
                    case 'Footer/drawCopyright':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.Copyright).isVisible =
                            value;
                        break;
                    case 'Footer/Copyright2':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.CopyrightSecondLine).template =
                            value;
                        break;
                    case 'Footer/Copyright2Alignment':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.CopyrightSecondLine).textAlign =
                            this.toTextAlign(value);
                        break;
                    case 'Footer/drawCopyright2':
                        ModelUtils.getOrCreateHeaderFooterStyle(score, ScoreSubElement.CopyrightSecondLine).isVisible =
                            value;
                        break;
                }
            }
        }
        toTextAlign(value) {
            switch (value) {
                case 0:
                    return TextAlign.Left;
                case 1:
                    return TextAlign.Center;
                case 2:
                    return TextAlign.Right;
            }
            return TextAlign.Left;
        }
        addValue(key, value, type) {
            this.raw.set(key, value);
            if (type !== undefined) {
                this._types.set(key, type);
            }
        }
        writeTo(writer) {
            IOHelper.writeInt32BE(writer, this.raw.size); // entry count
            for (const [k, v] of this.raw) {
                const dataType = this.getDataType(k, v);
                GpBinaryHelpers.gpWriteString(writer, k);
                writer.writeByte(dataType);
                switch (dataType) {
                    case DataType.Boolean:
                        writer.writeByte(v ? 1 : 0);
                        break;
                    case DataType.Integer:
                        IOHelper.writeInt32BE(writer, v);
                        break;
                    case DataType.Float:
                        IOHelper.writeFloat32BE(writer, v);
                        break;
                    case DataType.String:
                        const encoded = IOHelper.stringToBytes(v);
                        IOHelper.writeInt16BE(writer, encoded.length);
                        writer.write(encoded, 0, encoded.length);
                        break;
                    case DataType.Point:
                        IOHelper.writeInt32BE(writer, v.offset);
                        IOHelper.writeInt32BE(writer, v.value);
                        break;
                    case DataType.Size:
                        IOHelper.writeInt32BE(writer, v.offset);
                        IOHelper.writeInt32BE(writer, v.value);
                        break;
                    case DataType.Rectangle:
                        IOHelper.writeInt32BE(writer, v.x);
                        IOHelper.writeInt32BE(writer, v.y);
                        IOHelper.writeInt32BE(writer, v.w);
                        IOHelper.writeInt32BE(writer, v.h);
                        break;
                    case DataType.Color:
                        writer.writeByte(v.r);
                        writer.writeByte(v.g);
                        writer.writeByte(v.b);
                        writer.writeByte(v.a);
                        break;
                }
            }
        }
        getDataType(key, value) {
            if (this._types.has(key)) {
                return this._types.get(key);
            }
            const type = typeof value;
            switch (typeof value) {
                case 'string':
                    return DataType.String;
                case 'number':
                    const withoutFraction = value | 0;
                    return value === withoutFraction ? DataType.Integer : DataType.Float;
                case 'object':
                    if (value instanceof BendPoint) {
                        return DataType.Point;
                    }
                    if (value instanceof Bounds) {
                        return DataType.Rectangle;
                    }
                    if (value instanceof Color) {
                        return DataType.Color;
                    }
                    break;
            }
            throw new AlphaTabError(exports.AlphaTabErrorType.General, `Unknown value type in BinaryStylesheet: ${type}`);
        }
        static writeForScore(score) {
            const binaryStylesheet = new BinaryStylesheet();
            binaryStylesheet.addValue('StandardNotation/hideDynamics', score.stylesheet.hideDynamics, DataType.Boolean);
            binaryStylesheet.addValue('System/bracketExtendMode', score.stylesheet.bracketExtendMode, DataType.Integer);
            binaryStylesheet.addValue('Global/useSystemSignSeparator', score.stylesheet.useSystemSignSeparator, DataType.Boolean);
            binaryStylesheet.addValue('Global/DisplayTuning', score.stylesheet.globalDisplayTuning, DataType.Boolean);
            binaryStylesheet.addValue('Global/DrawChords', score.stylesheet.globalDisplayChordDiagramsOnTop, DataType.Boolean);
            switch (score.stylesheet.singleTrackTrackNamePolicy) {
                case TrackNamePolicy.Hidden:
                    binaryStylesheet.addValue('System/showTrackNameSingle', false, DataType.Boolean);
                    break;
                case TrackNamePolicy.FirstSystem:
                    binaryStylesheet.addValue('System/trackNameModeSingle', 0, DataType.Integer);
                    break;
                case TrackNamePolicy.AllSystems:
                    binaryStylesheet.addValue('System/trackNameModeSingle', 2, DataType.Integer);
                    break;
            }
            switch (score.stylesheet.multiTrackTrackNamePolicy) {
                case TrackNamePolicy.Hidden:
                    binaryStylesheet.addValue('System/showTrackNameMulti', false, DataType.Boolean);
                    break;
                case TrackNamePolicy.FirstSystem:
                    binaryStylesheet.addValue('System/trackNameModeMulti', 0, DataType.Integer);
                    break;
                case TrackNamePolicy.AllSystems:
                    binaryStylesheet.addValue('System/trackNameModeMulti', 2, DataType.Integer);
                    break;
            }
            switch (score.stylesheet.firstSystemTrackNameMode) {
                case TrackNameMode.FullName:
                    binaryStylesheet.addValue('System/shortTrackNameOnFirstSystem', false, DataType.Boolean);
                    break;
                case TrackNameMode.ShortName:
                    binaryStylesheet.addValue('System/shortTrackNameOnFirstSystem', true, DataType.Boolean);
                    break;
            }
            switch (score.stylesheet.otherSystemsTrackNameMode) {
                case TrackNameMode.FullName:
                    binaryStylesheet.addValue('System/shortTrackNameOnOtherSystems', false, DataType.Boolean);
                    break;
                case TrackNameMode.ShortName:
                    binaryStylesheet.addValue('System/shortTrackNameOnOtherSystems', true, DataType.Boolean);
                    break;
            }
            switch (score.stylesheet.firstSystemTrackNameOrientation) {
                case TrackNameOrientation.Horizontal:
                    binaryStylesheet.addValue('System/horizontalTrackNameOnFirstSystem', true, DataType.Boolean);
                    break;
                case TrackNameOrientation.Vertical:
                    binaryStylesheet.addValue('System/horizontalTrackNameOnFirstSystem', false, DataType.Boolean);
                    break;
            }
            switch (score.stylesheet.otherSystemsTrackNameOrientation) {
                case TrackNameOrientation.Horizontal:
                    binaryStylesheet.addValue('System/horizontalTrackNameOnOtherSystems', true, DataType.Boolean);
                    break;
                case TrackNameOrientation.Vertical:
                    binaryStylesheet.addValue('System/horizontalTrackNameOnOtherSystems', false, DataType.Boolean);
                    break;
            }
            const scoreStyle = score.style;
            if (scoreStyle) {
                for (const [k, v] of scoreStyle.headerAndFooter) {
                    switch (k) {
                        case ScoreSubElement.Title:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Title');
                            break;
                        case ScoreSubElement.SubTitle:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Subtitle');
                            break;
                        case ScoreSubElement.Artist:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Artist');
                            break;
                        case ScoreSubElement.Album:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Album');
                            break;
                        case ScoreSubElement.Words:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Words');
                            break;
                        case ScoreSubElement.Music:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Music');
                            break;
                        case ScoreSubElement.WordsAndMusic:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'WordsAndMusic');
                            break;
                        case ScoreSubElement.Transcriber:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Header/', 'Tabber');
                            break;
                        case ScoreSubElement.Copyright:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Footer/', 'Copyright');
                            break;
                        case ScoreSubElement.CopyrightSecondLine:
                            BinaryStylesheet.addHeaderAndFooter(binaryStylesheet, v, 'Footer/', 'Copyright2');
                            break;
                    }
                }
            }
            const writer = ByteBuffer.withCapacity(128);
            binaryStylesheet.writeTo(writer);
            return writer.toArray();
        }
        static addHeaderAndFooter(binaryStylesheet, style, prefix, name) {
            if (style.template !== undefined) {
                binaryStylesheet.addValue(`${prefix}${name}`, style.template, DataType.String);
            }
            binaryStylesheet.addValue(`${prefix}${name}Alignment`, style.textAlign, DataType.Integer);
            if (style.isVisible !== undefined) {
                binaryStylesheet.addValue(`${prefix}draw${name}`, style.isVisible, DataType.Boolean);
            }
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    var XmlNodeType;
    (function (XmlNodeType) {
        XmlNodeType[XmlNodeType["None"] = 0] = "None";
        XmlNodeType[XmlNodeType["Element"] = 1] = "Element";
        XmlNodeType[XmlNodeType["Text"] = 2] = "Text";
        XmlNodeType[XmlNodeType["CDATA"] = 3] = "CDATA";
        XmlNodeType[XmlNodeType["Document"] = 4] = "Document";
        XmlNodeType[XmlNodeType["DocumentType"] = 5] = "DocumentType";
        XmlNodeType[XmlNodeType["Comment"] = 6] = "Comment";
    })(XmlNodeType || (XmlNodeType = {}));
    class XmlNode {
        constructor() {
            this.nodeType = XmlNodeType.None;
            this.localName = null;
            this.value = null;
            this.childNodes = [];
            this.attributes = new Map();
            this.firstChild = null;
            this.firstElement = null;
        }
        *childElements() {
            for (const c of this.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    yield c;
                }
            }
        }
        addChild(node) {
            this.childNodes.push(node);
            this.firstChild = node;
            if (node.nodeType === XmlNodeType.Element || node.nodeType === XmlNodeType.CDATA) {
                this.firstElement = node;
            }
        }
        getAttribute(name, defaultValue = '') {
            if (this.attributes.has(name)) {
                return this.attributes.get(name);
            }
            return defaultValue;
        }
        getElementsByTagName(name, recursive = false) {
            const tags = [];
            this.searchElementsByTagName(this.childNodes, tags, name, recursive);
            return tags;
        }
        searchElementsByTagName(all, result, name, recursive = false) {
            for (const c of all) {
                if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                    result.push(c);
                }
                if (recursive) {
                    this.searchElementsByTagName(c.childNodes, result, name, true);
                }
            }
        }
        findChildElement(name) {
            for (const c of this.childNodes) {
                if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                    return c;
                }
            }
            return null;
        }
        addElement(name) {
            const newNode = new XmlNode();
            newNode.nodeType = XmlNodeType.Element;
            newNode.localName = name;
            this.addChild(newNode);
            return newNode;
        }
        get innerText() {
            if (this.nodeType === XmlNodeType.Element || this.nodeType === XmlNodeType.Document) {
                if (this.firstElement && this.firstElement.nodeType === XmlNodeType.CDATA) {
                    return this.firstElement.innerText;
                }
                let txt = '';
                for (const c of this.childNodes) {
                    txt += c.innerText?.toString();
                }
                const s = txt;
                return s.trim();
            }
            return this.value ?? '';
        }
        set innerText(value) {
            const textNode = new XmlNode();
            textNode.nodeType = XmlNodeType.Text;
            textNode.value = value;
            this.childNodes = [textNode];
        }
        setCData(s) {
            const textNode = new XmlNode();
            textNode.nodeType = XmlNodeType.CDATA;
            textNode.value = s;
            this.childNodes = [textNode];
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    class XmlError extends AlphaTabError {
        constructor(message, xml, pos) {
            super(exports.AlphaTabErrorType.Format, message);
            this.pos = 0;
            this.xml = xml;
            this.pos = pos;
            Object.setPrototypeOf(this, XmlError.prototype);
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    var XmlState;
    (function (XmlState) {
        XmlState[XmlState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
        XmlState[XmlState["Begin"] = 1] = "Begin";
        XmlState[XmlState["BeginNode"] = 2] = "BeginNode";
        XmlState[XmlState["TagName"] = 3] = "TagName";
        XmlState[XmlState["Body"] = 4] = "Body";
        XmlState[XmlState["AttribName"] = 5] = "AttribName";
        XmlState[XmlState["Equals"] = 6] = "Equals";
        XmlState[XmlState["AttvalBegin"] = 7] = "AttvalBegin";
        XmlState[XmlState["AttribVal"] = 8] = "AttribVal";
        XmlState[XmlState["Childs"] = 9] = "Childs";
        XmlState[XmlState["Close"] = 10] = "Close";
        XmlState[XmlState["WaitEnd"] = 11] = "WaitEnd";
        XmlState[XmlState["WaitEndRet"] = 12] = "WaitEndRet";
        XmlState[XmlState["Pcdata"] = 13] = "Pcdata";
        XmlState[XmlState["Header"] = 14] = "Header";
        XmlState[XmlState["Comment"] = 15] = "Comment";
        XmlState[XmlState["Doctype"] = 16] = "Doctype";
        XmlState[XmlState["Cdata"] = 17] = "Cdata";
        XmlState[XmlState["Escape"] = 18] = "Escape";
    })(XmlState || (XmlState = {}));
    class XmlParser {
        static parse(str, p, parent) {
            let c = str.charCodeAt(p);
            let state = XmlState.Begin;
            let next = XmlState.Begin;
            let start = 0;
            let buf = '';
            let escapeNext = XmlState.Begin;
            let xml = null;
            let aname = null;
            let nbrackets = 0;
            let attrValQuote = 0;
            while (p < str.length) {
                c = str.charCodeAt(p);
                switch (state) {
                    case XmlState.IgnoreSpaces:
                        switch (c) {
                            case XmlParser.CharCodeLF:
                            case XmlParser.CharCodeCR:
                            case XmlParser.CharCodeTab:
                            case XmlParser.CharCodeSpace:
                                break;
                            default:
                                state = next;
                                continue;
                        }
                        break;
                    case XmlState.Begin:
                        switch (c) {
                            case XmlParser.CharCodeLowerThan:
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.BeginNode;
                                break;
                            default:
                                start = p;
                                state = XmlState.Pcdata;
                                continue;
                        }
                        break;
                    case XmlState.Pcdata:
                        if (c === XmlParser.CharCodeLowerThan) {
                            buf += str.substr(start, p - start);
                            const child = new XmlNode();
                            child.nodeType = XmlNodeType.Text;
                            child.value = buf;
                            buf = '';
                            parent.addChild(child);
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.BeginNode;
                        }
                        else if (c === XmlParser.CharCodeAmp) {
                            buf += str.substr(start, p - start);
                            state = XmlState.Escape;
                            escapeNext = XmlState.Pcdata;
                            start = p + 1;
                        }
                        break;
                    case XmlState.Cdata:
                        if (c === XmlParser.CharCodeBrackedClose &&
                            str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedClose &&
                            str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                            // ]]>
                            const child = new XmlNode();
                            child.nodeType = XmlNodeType.CDATA;
                            child.value = str.substr(start, p - start);
                            parent.addChild(child);
                            p += 2;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.BeginNode:
                        switch (c) {
                            case XmlParser.CharCodeExclamation:
                                if (str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedOpen) {
                                    p += 2;
                                    if (str.substr(p, 6).toUpperCase() !== 'CDATA[') {
                                        throw new XmlError('Expected <![CDATA[', str, p);
                                    }
                                    p += 5;
                                    state = XmlState.Cdata;
                                    start = p + 1;
                                }
                                else if (str.charCodeAt(p + 1) === XmlParser.CharCodeUpperD ||
                                    str.charCodeAt(p + 1) === XmlParser.CharCodeLowerD) {
                                    if (str.substr(p + 2, 6).toUpperCase() !== 'OCTYPE') {
                                        throw new XmlError('Expected <!DOCTYPE', str, p);
                                    }
                                    p += 8;
                                    state = XmlState.Doctype;
                                    start = p + 1;
                                }
                                else if (str.charCodeAt(p + 1) !== XmlParser.CharCodeMinus ||
                                    str.charCodeAt(p + 2) !== XmlParser.CharCodeMinus) {
                                    throw new XmlError('Expected <!--', str, p);
                                }
                                else {
                                    p += 2;
                                    state = XmlState.Comment;
                                    start = p + 1;
                                }
                                break;
                            case XmlParser.CharCodeQuestion:
                                state = XmlState.Header;
                                start = p;
                                break;
                            case XmlParser.CharCodeSlash:
                                if (!parent) {
                                    throw new XmlError('Expected node name', str, p);
                                }
                                start = p + 1;
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.Close;
                                break;
                            default:
                                state = XmlState.TagName;
                                start = p;
                                continue;
                        }
                        break;
                    case XmlState.TagName:
                        if (!XmlParser.isValidChar(c)) {
                            if (p === start) {
                                throw new XmlError('Expected node name', str, p);
                            }
                            xml = new XmlNode();
                            xml.nodeType = XmlNodeType.Element;
                            xml.localName = str.substr(start, p - start);
                            parent.addChild(xml);
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.Body;
                            continue;
                        }
                        break;
                    case XmlState.Body:
                        switch (c) {
                            case XmlParser.CharCodeSlash:
                                state = XmlState.WaitEnd;
                                break;
                            case XmlParser.CharCodeGreaterThan:
                                state = XmlState.Childs;
                                break;
                            default:
                                state = XmlState.AttribName;
                                start = p;
                                continue;
                        }
                        break;
                    case XmlState.AttribName:
                        if (!XmlParser.isValidChar(c)) {
                            if (start === p) {
                                throw new XmlError('Expected attribute name', str, p);
                            }
                            const tmp = str.substr(start, p - start);
                            aname = tmp;
                            if (xml.attributes.has(aname)) {
                                throw new XmlError(`Duplicate attribute [${aname}]`, str, p);
                            }
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.Equals;
                            continue;
                        }
                        break;
                    case XmlState.Equals:
                        switch (c) {
                            case XmlParser.CharCodeEquals:
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.AttvalBegin;
                                break;
                            default:
                                throw new XmlError('Expected =', str, p);
                        }
                        break;
                    case XmlState.AttvalBegin:
                        switch (c) {
                            case XmlParser.CharCodeDoubleQuote:
                            case XmlParser.CharCodeSingleQuote:
                                buf = '';
                                state = XmlState.AttribVal;
                                start = p + 1;
                                attrValQuote = c;
                                break;
                        }
                        break;
                    case XmlState.AttribVal:
                        switch (c) {
                            case XmlParser.CharCodeAmp:
                                buf += str.substr(start, p - start);
                                state = XmlState.Escape;
                                escapeNext = XmlState.AttribVal;
                                start = p + 1;
                                break;
                            default:
                                if (c === attrValQuote) {
                                    buf += str.substr(start, p - start);
                                    const value = buf;
                                    buf = '';
                                    xml.attributes.set(aname, value);
                                    state = XmlState.IgnoreSpaces;
                                    next = XmlState.Body;
                                }
                                break;
                        }
                        break;
                    case XmlState.Childs:
                        p = XmlParser.parse(str, p, xml);
                        start = p;
                        state = XmlState.Begin;
                        break;
                    case XmlState.WaitEnd:
                        switch (c) {
                            case XmlParser.CharCodeGreaterThan:
                                state = XmlState.Begin;
                                break;
                            default:
                                throw new XmlError('Expected >', str, p);
                        }
                        break;
                    case XmlState.WaitEndRet:
                        switch (c) {
                            case XmlParser.CharCodeGreaterThan:
                                return p;
                            default:
                                throw new XmlError('Expected >', str, p);
                        }
                    case XmlState.Close:
                        if (!XmlParser.isValidChar(c)) {
                            if (start === p) {
                                throw new XmlError('Expected node name', str, p);
                            }
                            const v = str.substr(start, p - start);
                            if (v !== parent.localName) {
                                throw new XmlError(`Expected </${parent.localName}>`, str, p);
                            }
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.WaitEndRet;
                            continue;
                        }
                        break;
                    case XmlState.Comment:
                        if (c === XmlParser.CharCodeMinus &&
                            str.charCodeAt(p + 1) === XmlParser.CharCodeMinus &&
                            str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                            p += 2;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Doctype:
                        if (c === XmlParser.CharCodeBrackedOpen) {
                            nbrackets++;
                        }
                        else if (c === XmlParser.CharCodeBrackedClose) {
                            nbrackets--;
                        }
                        else if (c === XmlParser.CharCodeGreaterThan && nbrackets === 0) {
                            // >
                            const node = new XmlNode();
                            node.nodeType = XmlNodeType.DocumentType;
                            node.value = str.substr(start, p - start);
                            parent.addChild(node);
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Header:
                        if (c === XmlParser.CharCodeQuestion && str.charCodeAt(p + 1) === XmlParser.CharCodeGreaterThan) {
                            p++;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Escape:
                        if (c === XmlParser.CharCodeSemi) {
                            const s = str.substr(start, p - start);
                            if (s.charCodeAt(0) === XmlParser.CharCodeSharp) {
                                const code = s.charCodeAt(1) === XmlParser.CharCodeLowerX
                                    ? Number.parseInt(`0${s.substr(1, s.length - 1)}`)
                                    : Number.parseInt(s.substr(1, s.length - 1));
                                buf += String.fromCharCode(code);
                            }
                            else if (XmlParser.Escapes.has(s)) {
                                buf += XmlParser.Escapes.get(s);
                            }
                            else {
                                buf += `&${s};`?.toString();
                            }
                            start = p + 1;
                            state = escapeNext;
                        }
                        else if (!XmlParser.isValidChar(c) && c !== XmlParser.CharCodeSharp) {
                            buf += '&';
                            buf += str.substr(start, p - start);
                            p--;
                            start = p + 1;
                            state = escapeNext;
                        }
                        break;
                }
                p++;
            }
            if (state === XmlState.Begin) {
                start = p;
                state = XmlState.Pcdata;
            }
            if (state === XmlState.Pcdata) {
                if (p !== start) {
                    buf += str.substr(start, p - start);
                    const node = new XmlNode();
                    node.nodeType = XmlNodeType.Text;
                    node.value = buf;
                    parent.addChild(node);
                }
                return p;
            }
            if (state === XmlState.Escape && escapeNext === XmlState.Pcdata) {
                buf += '&';
                buf += str.substr(start, p - start);
                const node = new XmlNode();
                node.nodeType = XmlNodeType.Text;
                node.value = buf;
                parent.addChild(node);
                return p;
            }
            throw new XmlError('Unexpected end', str, p);
        }
        static isValidChar(c) {
            return ((c >= XmlParser.CharCodeLowerA && c <= XmlParser.CharCodeLowerZ) ||
                (c >= XmlParser.CharCodeUpperA && c <= XmlParser.CharCodeUpperZ) ||
                (c >= XmlParser.CharCode0 && c <= XmlParser.CharCode9) ||
                c === XmlParser.CharCodeColon ||
                c === XmlParser.CharCodeDot ||
                c === XmlParser.CharCodeUnderscore ||
                c === XmlParser.CharCodeMinus);
        }
    }
    XmlParser.CharCodeLF = 10;
    XmlParser.CharCodeTab = 9;
    XmlParser.CharCodeCR = 13;
    XmlParser.CharCodeSpace = 32;
    XmlParser.CharCodeLowerThan = 60;
    XmlParser.CharCodeAmp = 38;
    XmlParser.CharCodeBrackedClose = 93;
    XmlParser.CharCodeBrackedOpen = 91;
    XmlParser.CharCodeGreaterThan = 62;
    XmlParser.CharCodeExclamation = 33;
    XmlParser.CharCodeUpperD = 68;
    XmlParser.CharCodeLowerD = 100;
    XmlParser.CharCodeMinus = 45;
    XmlParser.CharCodeQuestion = 63;
    XmlParser.CharCodeSlash = 47;
    XmlParser.CharCodeEquals = 61;
    XmlParser.CharCodeDoubleQuote = 34;
    XmlParser.CharCodeSingleQuote = 39;
    XmlParser.CharCodeSharp = 35;
    XmlParser.CharCodeLowerX = 120;
    XmlParser.CharCodeLowerA = 97;
    XmlParser.CharCodeLowerZ = 122;
    XmlParser.CharCodeUpperA = 65;
    XmlParser.CharCodeUpperZ = 90;
    XmlParser.CharCode0 = 48;
    XmlParser.CharCode9 = 57;
    XmlParser.CharCodeColon = 58;
    XmlParser.CharCodeDot = 46;
    XmlParser.CharCodeUnderscore = 95;
    XmlParser.CharCodeSemi = 59;
    XmlParser.Escapes = new Map([
        ['lt', '<'],
        ['gt', '>'],
        ['amp', '&'],
        ['quot', '"'],
        ['apos', "'"]
    ]);

    class XmlWriter {
        static write(xml, indention, xmlHeader) {
            const writer = new XmlWriter(indention, xmlHeader);
            writer.writeNode(xml);
            return writer.toString();
        }
        constructor(indention, xmlHeader) {
            // NOTE: we use the string.join variant rather than the
            // string concatenation for IE performnace concerns
            this._result = [];
            this._indention = indention;
            this._xmlHeader = xmlHeader;
            this._currentIndention = '';
            this._isStartOfLine = true;
        }
        writeNode(xml) {
            switch (xml.nodeType) {
                case XmlNodeType.None:
                    break;
                case XmlNodeType.Element:
                    if (this._result.length > 0) {
                        this.writeLine();
                    }
                    this.write(`<${xml.localName}`);
                    for (const [name, value] of xml.attributes) {
                        this.write(` ${name}="`);
                        this.writeAttributeValue(value);
                        this.write('"');
                    }
                    if (xml.childNodes.length === 0) {
                        this.write('/>');
                    }
                    else {
                        this.write('>');
                        if (xml.childNodes.length === 1 && !xml.firstElement) {
                            this.writeNode(xml.childNodes[0]);
                        }
                        else {
                            this.indent();
                            for (const child of xml.childNodes) {
                                // skip text nodes in case of multiple children
                                if (child.nodeType === XmlNodeType.Element || child.nodeType === XmlNodeType.Comment) {
                                    this.writeNode(child);
                                }
                            }
                            this.unindend();
                            this.writeLine();
                        }
                        this.write(`</${xml.localName}>`);
                    }
                    break;
                case XmlNodeType.Text:
                    if (xml.value) {
                        this.write(xml.value);
                    }
                    break;
                case XmlNodeType.CDATA:
                    if (xml.value !== null) {
                        this.write(`<![CDATA[${xml.value}]]>`);
                    }
                    break;
                case XmlNodeType.Document:
                    if (this._xmlHeader) {
                        this.write('<?xml version="1.0" encoding="utf-8"?>');
                    }
                    for (const child of xml.childNodes) {
                        this.writeNode(child);
                    }
                    break;
                case XmlNodeType.DocumentType:
                    this.write(`<!DOCTYPE ${xml.value}>`);
                    break;
                case XmlNodeType.Comment:
                    this.write(`<!-- ${xml.value} -->`);
                    break;
            }
        }
        unindend() {
            this._currentIndention = this._currentIndention.substr(0, this._currentIndention.length - this._indention.length);
        }
        indent() {
            this._currentIndention += this._indention;
        }
        writeAttributeValue(value) {
            for (let i = 0; i < value.length; i++) {
                const c = value.charAt(i);
                switch (c) {
                    case '<':
                        this._result.push('&lt;');
                        break;
                    case '>':
                        this._result.push('&gt;');
                        break;
                    case '&':
                        this._result.push('&amp;');
                        break;
                    case "'":
                        this._result.push('&apos;');
                        break;
                    case '"':
                        this._result.push('&quot;');
                        break;
                    default:
                        this._result.push(c);
                        break;
                }
            }
        }
        write(s) {
            if (this._isStartOfLine) {
                this._result.push(this._currentIndention);
            }
            this._result.push(s);
            this._isStartOfLine = false;
        }
        writeLine(s = null) {
            if (s) {
                this.write(s);
            }
            if (this._indention.length > 0 && !this._isStartOfLine) {
                this._result.push('\n');
                this._isStartOfLine = true;
            }
        }
        toString() {
            return this._result.join('').trimRight();
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    class XmlDocument extends XmlNode {
        constructor() {
            super();
            this.nodeType = XmlNodeType.Document;
        }
        parse(xml) {
            XmlParser.parse(xml, 0, this);
        }
        toString() {
            return this.toFormattedString();
        }
        toFormattedString(indention = '', xmlHeader = false) {
            return XmlWriter.write(this, indention, xmlHeader);
        }
    }

    /**
     * Holds information about the backing track which can be played instead of synthesized audio.
     * @json
     * @json_strict
     */
    class BackingTrack {
    }

    /**
     * This structure represents a duration within a gpif
     */
    class GpifRhythm {
        constructor() {
            this.id = '';
            this.dots = 0;
            this.tupletDenominator = -1;
            this.tupletNumerator = -1;
            this.value = Duration.Quarter;
        }
    }
    class GpifSound {
        constructor() {
            this.name = '';
            this.path = '';
            this.role = '';
            this.program = 0;
        }
        get uniqueId() {
            return `${this.path};${this.name};${this.role}`;
        }
    }
    /**
     * This class can parse a score.gpif xml file into the model structure
     */
    class GpifParser {
        constructor() {
            this._hasAnacrusis = false;
            this._skipApplyLyrics = false;
            this._backingTrackPadding = 0;
            this._doubleBars = new Set();
            this._keySignatures = new Map();
        }
        parseXml(xml, settings) {
            this._masterTrackAutomations = new Map();
            this._automationsPerTrackIdAndBarIndex = new Map();
            this._sustainPedalsPerTrackIdAndBarIndex = new Map();
            this._tracksMapping = [];
            this._tracksById = new Map();
            this._masterBars = [];
            this._barsOfMasterBar = [];
            this._voicesOfBar = new Map();
            this._barsById = new Map();
            this._voiceById = new Map();
            this._beatsOfVoice = new Map();
            this._beatById = new Map();
            this._rhythmOfBeat = new Map();
            this._rhythmById = new Map();
            this._notesOfBeat = new Map();
            this._noteById = new Map();
            this._tappedNotes = new Map();
            this._lyricsByTrack = new Map();
            this._soundsByTrack = new Map();
            this._skipApplyLyrics = false;
            const dom = new XmlDocument();
            try {
                dom.parse(xml);
            }
            catch (e) {
                throw new UnsupportedFormatError('Could not parse XML', e);
            }
            this.parseDom(dom);
            this.buildModel();
            ModelUtils.consolidate(this.score);
            this.score.finish(settings);
            if (!this._skipApplyLyrics && this._lyricsByTrack.size > 0) {
                for (const [t, lyrics] of this._lyricsByTrack) {
                    const track = this._tracksById.get(t);
                    track.applyLyrics(lyrics);
                }
            }
        }
        parseDom(dom) {
            const root = dom.firstElement;
            if (!root) {
                return;
            }
            // the XML uses IDs for referring elements within the
            //  Therefore we do the parsing in 2 steps:
            // - at first we read all model elements and store them by ID in a lookup table
            // - after that we need to join up the information.
            if (root.localName === 'GPIF') {
                this.score = new Score();
                // parse all children
                for (const n of root.childElements()) {
                    switch (n.localName) {
                        case 'Score':
                            this.parseScoreNode(n);
                            break;
                        case 'MasterTrack':
                            this.parseMasterTrackNode(n);
                            break;
                        case 'BackingTrack':
                            this.parseBackingTrackNode(n);
                            break;
                        case 'Tracks':
                            this.parseTracksNode(n);
                            break;
                        case 'MasterBars':
                            this.parseMasterBarsNode(n);
                            break;
                        case 'Bars':
                            this.parseBars(n);
                            break;
                        case 'Voices':
                            this.parseVoices(n);
                            break;
                        case 'Beats':
                            this.parseBeats(n);
                            break;
                        case 'Notes':
                            this.parseNotes(n);
                            break;
                        case 'Rhythms':
                            this.parseRhythms(n);
                            break;
                        case 'Assets':
                            this.parseAssets(n);
                            break;
                    }
                }
            }
            else {
                throw new UnsupportedFormatError('Root node of XML was not GPIF');
            }
        }
        parseAssets(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'Asset':
                        if (c.getAttribute('id') === this._backingTrackAssetId) {
                            this.parseBackingTrackAsset(c);
                        }
                        break;
                }
            }
        }
        parseBackingTrackAsset(element) {
            let embeddedFilePath = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'EmbeddedFilePath':
                        embeddedFilePath = c.innerText;
                        break;
                }
            }
            const loadAsset = this.loadAsset;
            if (loadAsset) {
                const assetData = loadAsset(embeddedFilePath);
                if (assetData) {
                    this.score.backingTrack.rawAudioFile = assetData;
                }
                else {
                    this.score.backingTrack = undefined;
                }
            }
        }
        //
        // <Score>...</Score>
        //
        parseScoreNode(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'Title':
                        this.score.title = c.innerText;
                        break;
                    case 'SubTitle':
                        this.score.subTitle = c.innerText;
                        break;
                    case 'Artist':
                        this.score.artist = c.innerText;
                        break;
                    case 'Album':
                        this.score.album = c.innerText;
                        break;
                    case 'Words':
                        this.score.words = c.innerText;
                        break;
                    case 'Music':
                        this.score.music = c.innerText;
                        break;
                    case 'WordsAndMusic':
                        const wordsAndMusic = c.innerText;
                        if (wordsAndMusic !== '') {
                            if (wordsAndMusic && !this.score.words) {
                                this.score.words = wordsAndMusic;
                            }
                            if (wordsAndMusic && !this.score.music) {
                                this.score.music = wordsAndMusic;
                            }
                        }
                        break;
                    case 'Copyright':
                        this.score.copyright = c.innerText;
                        break;
                    case 'Tabber':
                        this.score.tab = c.innerText;
                        break;
                    case 'Instructions':
                        this.score.instructions = c.innerText;
                        break;
                    case 'Notices':
                        this.score.notices = c.innerText;
                        break;
                    case 'ScoreSystemsDefaultLayout':
                        this.score.defaultSystemsLayout = GpifParser.parseIntSafe(c.innerText, 4);
                        break;
                    case 'ScoreSystemsLayout':
                        this.score.systemsLayout = GpifParser.splitSafe(c.innerText).map(i => GpifParser.parseIntSafe(i, 4));
                        break;
                }
            }
        }
        static parseIntSafe(text, fallback) {
            if (!text) {
                return fallback;
            }
            const i = Number.parseInt(text);
            if (!Number.isNaN(i)) {
                return i;
            }
            return fallback;
        }
        static parseFloatSafe(text, fallback) {
            if (!text) {
                return fallback;
            }
            const i = Number.parseFloat(text);
            if (!Number.isNaN(i)) {
                return i;
            }
            return fallback;
        }
        static splitSafe(text, separator = ' ') {
            if (!text) {
                return [];
            }
            return text
                .split(separator)
                .map(t => t.trim())
                .filter(t => t.length > 0);
        }
        //
        // <BackingTrack>...</BackingTrack>
        //
        parseBackingTrackNode(node) {
            const backingTrack = new BackingTrack();
            let enabled = false;
            let source = '';
            let assetId = '';
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Enabled':
                        enabled = c.innerText === 'true';
                        break;
                    case 'Source':
                        source = c.innerText;
                        break;
                    case 'AssetId':
                        assetId = c.innerText;
                        break;
                    case 'FramePadding':
                        this._backingTrackPadding = GpifParser.parseIntSafe(c.innerText, 0) / GpifParser.SampleRate * 1000;
                        break;
                }
            }
            // only local (contained backing tracks are supported)
            // remote / youtube links seem to come in future releases according to the gpif tags.
            if (enabled && source === 'Local') {
                this.score.backingTrack = backingTrack;
                this._backingTrackAssetId = assetId; // when the Asset tag is parsed this ID is used to load the raw data
            }
        }
        //
        // <MasterTrack>...</MasterTrack>
        //
        parseMasterTrackNode(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Automations':
                        this.parseAutomations(c, this._masterTrackAutomations, null, null);
                        break;
                    case 'Tracks':
                        this._tracksMapping = GpifParser.splitSafe(c.innerText);
                        break;
                    case 'Anacrusis':
                        this._hasAnacrusis = true;
                        break;
                }
            }
        }
        parseAutomations(node, automations, sounds, sustainPedals) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Automation':
                        this.parseAutomation(c, automations, sounds, sustainPedals);
                        break;
                }
            }
        }
        parseAutomation(node, automations, sounds, sustainPedals) {
            let type = null;
            let isLinear = false;
            let barIndex = -1;
            let ratioPosition = 0;
            let numberValue = 0;
            let textValue = null;
            let reference = 0;
            let text = null;
            let syncPointValue = undefined;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Type':
                        type = c.innerText;
                        break;
                    case 'Linear':
                        isLinear = c.innerText.toLowerCase() === 'true';
                        break;
                    case 'Bar':
                        barIndex = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'Position':
                        ratioPosition = GpifParser.parseFloatSafe(c.innerText, 0);
                        break;
                    case 'Value':
                        if (c.firstElement && c.firstElement.nodeType === XmlNodeType.CDATA) {
                            textValue = c.innerText;
                        }
                        else if (c.firstElement &&
                            c.firstElement.nodeType === XmlNodeType.Element &&
                            type === 'SyncPoint') {
                            syncPointValue = new SyncPointData();
                            for (const vc of c.childElements()) {
                                switch (vc.localName) {
                                    case 'BarIndex':
                                        barIndex = GpifParser.parseIntSafe(vc.innerText, 0);
                                        break;
                                    case 'BarOccurrence':
                                        syncPointValue.barOccurence = GpifParser.parseIntSafe(vc.innerText, 0);
                                        break;
                                    case 'FrameOffset':
                                        const frameOffset = GpifParser.parseFloatSafe(vc.innerText, 0);
                                        syncPointValue.millisecondOffset = (frameOffset / GpifParser.SampleRate) * 1000;
                                        break;
                                }
                            }
                        }
                        else {
                            const parts = GpifParser.splitSafe(c.innerText);
                            // Issue 391: Some GPX files might have
                            // single floating point value.
                            if (parts.length === 1) {
                                numberValue = GpifParser.parseFloatSafe(parts[0], 0);
                                reference = 1;
                            }
                            else {
                                numberValue = GpifParser.parseFloatSafe(parts[0], 0);
                                reference = GpifParser.parseIntSafe(parts[1], 0);
                            }
                        }
                        break;
                    case 'Text':
                        text = c.innerText;
                        break;
                }
            }
            if (!type) {
                return;
            }
            let automation = null;
            switch (type) {
                case 'Tempo':
                    automation = Automation.buildTempoAutomation(isLinear, ratioPosition, numberValue, reference);
                    break;
                case 'SyncPoint':
                    automation = new Automation();
                    automation.type = AutomationType.SyncPoint;
                    automation.isLinear = isLinear;
                    automation.ratioPosition = ratioPosition;
                    automation.syncPointValue = syncPointValue;
                    break;
                case 'Sound':
                    if (textValue && sounds && sounds.has(textValue)) {
                        automation = Automation.buildInstrumentAutomation(isLinear, ratioPosition, sounds.get(textValue).program);
                    }
                    break;
                case 'SustainPedal':
                    // we expect sustain pedals only on track automations
                    if (sustainPedals) {
                        let v;
                        if (sustainPedals.has(barIndex)) {
                            v = sustainPedals.get(barIndex);
                        }
                        else {
                            v = [];
                            sustainPedals.set(barIndex, v);
                        }
                        const sustain = new SustainPedalMarker();
                        sustain.ratioPosition = ratioPosition;
                        switch (reference) {
                            case 1:
                                sustain.pedalType = SustainPedalMarkerType.Down;
                                break;
                            case 3:
                                sustain.pedalType = SustainPedalMarkerType.Up;
                                break;
                        }
                        v.push(sustain);
                    }
                    break;
            }
            if (automation) {
                if (text) {
                    automation.text = text;
                }
                if (barIndex >= 0) {
                    if (!automations.has(barIndex)) {
                        automations.set(barIndex, []);
                    }
                    automations.get(barIndex).push(automation);
                }
            }
        }
        //
        // <Tracks>...</Tracks>
        //
        parseTracksNode(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Track':
                        this.parseTrack(c);
                        break;
                }
            }
        }
        parseTrack(node) {
            this._articulationByName = new Map();
            const track = new Track();
            track.ensureStaveCount(1);
            const staff = track.staves[0];
            staff.showStandardNotation = true;
            const trackId = node.getAttribute('id');
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Name':
                        track.name = c.innerText;
                        break;
                    case 'Color':
                        const parts = GpifParser.splitSafe(c.innerText);
                        if (parts.length >= 3) {
                            const r = GpifParser.parseIntSafe(parts[0], 0);
                            const g = GpifParser.parseIntSafe(parts[1], 0);
                            const b = GpifParser.parseIntSafe(parts[2], 0);
                            track.color = new Color(r, g, b, 0xff);
                        }
                        break;
                    case 'Instrument':
                        const instrumentName = c.getAttribute('ref');
                        if (instrumentName.endsWith('-gs') || instrumentName.endsWith('GrandStaff')) {
                            track.ensureStaveCount(2);
                            track.staves[1].showStandardNotation = true;
                        }
                        break;
                    case 'InstrumentSet':
                        this.parseInstrumentSet(track, c);
                        break;
                    case 'NotationPatch':
                        this.parseNotationPatch(track, c);
                        break;
                    case 'ShortName':
                        track.shortName = c.innerText;
                        break;
                    case 'SystemsDefautLayout': // not a typo by alphaTab, this is a typo in the GPIF files.
                        track.defaultSystemsLayout = GpifParser.parseIntSafe(c.innerText, 4);
                        break;
                    case 'SystemsLayout':
                        track.systemsLayout = GpifParser.splitSafe(c.innerText).map(i => GpifParser.parseIntSafe(i, 4));
                        break;
                    case 'Lyrics':
                        this.parseLyrics(trackId, c);
                        break;
                    case 'Properties':
                        this.parseTrackProperties(track, c);
                        break;
                    case 'GeneralMidi':
                    case 'MidiConnection':
                    case 'MIDISettings':
                        this.parseGeneralMidi(track, c);
                        break;
                    case 'Sounds':
                        this.parseSounds(trackId, track, c);
                        break;
                    case 'PlaybackState':
                        const state = c.innerText;
                        track.playbackInfo.isSolo = state === 'Solo';
                        track.playbackInfo.isMute = state === 'Mute';
                        break;
                    case 'PartSounding':
                        this.parsePartSounding(track, c);
                        break;
                    case 'Staves':
                        this.parseStaves(track, c);
                        break;
                    case 'Transpose':
                        this.parseTranspose(track, c);
                        break;
                    case 'RSE':
                        this.parseRSE(track, c);
                        break;
                    case 'Automations':
                        this.parseTrackAutomations(trackId, c);
                        break;
                }
            }
            this._tracksById.set(trackId, track);
        }
        parseTrackAutomations(trackId, c) {
            const trackAutomations = new Map();
            this._automationsPerTrackIdAndBarIndex.set(trackId, trackAutomations);
            const sustainPedals = new Map();
            this._sustainPedalsPerTrackIdAndBarIndex.set(trackId, sustainPedals);
            this.parseAutomations(c, trackAutomations, this._soundsByTrack.get(trackId), sustainPedals);
        }
        parseNotationPatch(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'LineCount':
                        const lineCount = GpifParser.parseIntSafe(c.innerText, 5);
                        for (const staff of track.staves) {
                            staff.standardNotationLineCount = lineCount;
                        }
                        break;
                    case 'Elements':
                        this.parseElements(track, c);
                        break;
                }
            }
        }
        parseInstrumentSet(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Type':
                        if (c.innerText === 'drumKit') {
                            for (const staff of track.staves) {
                                staff.isPercussion = true;
                            }
                        }
                        break;
                    case 'Elements':
                        this.parseElements(track, c);
                        break;
                    case 'LineCount':
                        const lineCount = GpifParser.parseIntSafe(c.innerText, 5);
                        for (const staff of track.staves) {
                            staff.standardNotationLineCount = lineCount;
                        }
                        break;
                }
            }
        }
        parseElements(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Element':
                        this.parseElement(track, c);
                        break;
                }
            }
        }
        parseElement(track, node) {
            const type = node.findChildElement('Type')?.innerText ?? '';
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Name':
                    case 'Articulations':
                        this.parseArticulations(track, c, type);
                        break;
                }
            }
        }
        parseArticulations(track, node, elementType) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Articulation':
                        this.parseArticulation(track, c, elementType);
                        break;
                }
            }
        }
        parseArticulation(track, node, elementType) {
            const articulation = new InstrumentArticulation();
            articulation.outputMidiNumber = -1;
            articulation.elementType = elementType;
            let name = '';
            for (const c of node.childElements()) {
                const txt = c.innerText;
                switch (c.localName) {
                    case 'Name':
                        name = c.innerText;
                        break;
                    case 'OutputMidiNumber':
                        articulation.outputMidiNumber = GpifParser.parseIntSafe(txt, 0);
                        break;
                    case 'TechniqueSymbol':
                        articulation.techniqueSymbol = this.parseTechniqueSymbol(txt);
                        break;
                    case 'TechniquePlacement':
                        switch (txt) {
                            case 'outside':
                                articulation.techniqueSymbolPlacement = TextBaseline.Bottom;
                                break;
                            case 'inside':
                                articulation.techniqueSymbolPlacement = TextBaseline.Middle;
                                break;
                            case 'above':
                                articulation.techniqueSymbolPlacement = TextBaseline.Bottom;
                                break;
                            case 'below':
                                articulation.techniqueSymbolPlacement = TextBaseline.Top;
                                break;
                        }
                        break;
                    case 'Noteheads':
                        const noteHeadsTxt = GpifParser.splitSafe(txt);
                        if (noteHeadsTxt.length >= 1) {
                            articulation.noteHeadDefault = this.parseNoteHead(noteHeadsTxt[0]);
                        }
                        if (noteHeadsTxt.length >= 2) {
                            articulation.noteHeadHalf = this.parseNoteHead(noteHeadsTxt[1]);
                        }
                        if (noteHeadsTxt.length >= 3) {
                            articulation.noteHeadWhole = this.parseNoteHead(noteHeadsTxt[2]);
                        }
                        if (articulation.noteHeadHalf === MusicFontSymbol.None) {
                            articulation.noteHeadHalf = articulation.noteHeadDefault;
                        }
                        if (articulation.noteHeadWhole === MusicFontSymbol.None) {
                            articulation.noteHeadWhole = articulation.noteHeadDefault;
                        }
                        break;
                    case 'StaffLine':
                        articulation.staffLine = GpifParser.parseIntSafe(txt, 0);
                        break;
                }
            }
            if (articulation.outputMidiNumber !== -1) {
                track.percussionArticulations.push(articulation);
                if (name.length > 0) {
                    this._articulationByName.set(name, articulation);
                }
            }
            else if (name.length > 0 && this._articulationByName.has(name)) {
                this._articulationByName.get(name).staffLine = articulation.staffLine;
            }
        }
        parseTechniqueSymbol(txt) {
            switch (txt) {
                case 'pictEdgeOfCymbal':
                    return MusicFontSymbol.PictEdgeOfCymbal;
                case 'articStaccatoAbove':
                    return MusicFontSymbol.ArticStaccatoAbove;
                case 'noteheadParenthesis':
                    return MusicFontSymbol.NoteheadParenthesis;
                case 'stringsUpBow':
                    return MusicFontSymbol.StringsUpBow;
                case 'stringsDownBow':
                    return MusicFontSymbol.StringsDownBow;
                case 'guitarGolpe':
                    return MusicFontSymbol.GuitarGolpe;
                default:
                    return MusicFontSymbol.None;
            }
        }
        parseNoteHead(txt) {
            switch (txt) {
                case 'noteheadDoubleWholeSquare':
                    return MusicFontSymbol.NoteheadDoubleWholeSquare;
                case 'noteheadDoubleWhole':
                    return MusicFontSymbol.NoteheadDoubleWhole;
                case 'noteheadWhole':
                    return MusicFontSymbol.NoteheadWhole;
                case 'noteheadHalf':
                    return MusicFontSymbol.NoteheadHalf;
                case 'noteheadBlack':
                    return MusicFontSymbol.NoteheadBlack;
                case 'noteheadNull':
                    return MusicFontSymbol.NoteheadNull;
                case 'noteheadXOrnate':
                    return MusicFontSymbol.NoteheadXOrnate;
                case 'noteheadTriangleUpWhole':
                    return MusicFontSymbol.NoteheadTriangleUpWhole;
                case 'noteheadTriangleUpHalf':
                    return MusicFontSymbol.NoteheadTriangleUpHalf;
                case 'noteheadTriangleUpBlack':
                    return MusicFontSymbol.NoteheadTriangleUpBlack;
                case 'noteheadDiamondBlackWide':
                    return MusicFontSymbol.NoteheadDiamondBlackWide;
                case 'noteheadDiamondWhite':
                    return MusicFontSymbol.NoteheadDiamondWhite;
                case 'noteheadDiamondWhiteWide':
                    return MusicFontSymbol.NoteheadDiamondWhiteWide;
                case 'noteheadCircleX':
                    return MusicFontSymbol.NoteheadCircleX;
                case 'noteheadXWhole':
                    return MusicFontSymbol.NoteheadXWhole;
                case 'noteheadXHalf':
                    return MusicFontSymbol.NoteheadXHalf;
                case 'noteheadXBlack':
                    return MusicFontSymbol.NoteheadXBlack;
                case 'noteheadParenthesis':
                    return MusicFontSymbol.NoteheadParenthesis;
                case 'noteheadSlashedBlack2':
                    return MusicFontSymbol.NoteheadSlashedBlack2;
                case 'noteheadCircleSlash':
                    return MusicFontSymbol.NoteheadCircleSlash;
                case 'noteheadHeavyX':
                    return MusicFontSymbol.NoteheadHeavyX;
                case 'noteheadHeavyXHat':
                    return MusicFontSymbol.NoteheadHeavyXHat;
                default:
                    Logger.warning('GPIF', 'Unknown notehead symbol', txt);
                    return MusicFontSymbol.None;
            }
        }
        parseStaves(track, node) {
            let staffIndex = 0;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Staff':
                        track.ensureStaveCount(staffIndex + 1);
                        const staff = track.staves[staffIndex];
                        this.parseStaff(staff, c);
                        staffIndex++;
                        break;
                }
            }
        }
        parseStaff(staff, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Properties':
                        this.parseStaffProperties(staff, c);
                        break;
                }
            }
        }
        parseStaffProperties(staff, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Property':
                        this.parseStaffProperty(staff, c);
                        break;
                }
            }
        }
        parseStaffProperty(staff, node) {
            const propertyName = node.getAttribute('name');
            switch (propertyName) {
                case 'Tuning':
                    for (const c of node.childElements()) {
                        switch (c.localName) {
                            case 'Pitches':
                                const tuningParts = GpifParser.splitSafe(node.findChildElement('Pitches')?.innerText);
                                const tuning = new Array(tuningParts.length);
                                for (let i = 0; i < tuning.length; i++) {
                                    tuning[tuning.length - 1 - i] = GpifParser.parseIntSafe(tuningParts[i], 0);
                                }
                                staff.stringTuning.tunings = tuning;
                                break;
                            case 'Label':
                                staff.stringTuning.name = c.innerText;
                                break;
                        }
                    }
                    if (!staff.isPercussion) {
                        staff.showTablature = true;
                    }
                    break;
                case 'DiagramCollection':
                case 'ChordCollection':
                    this.parseDiagramCollectionForStaff(staff, node);
                    break;
                case 'CapoFret':
                    const capo = GpifParser.parseIntSafe(node.findChildElement('Fret')?.innerText, 0);
                    staff.capo = capo;
                    break;
            }
        }
        parseLyrics(trackId, node) {
            const tracks = [];
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Line':
                        tracks.push(this.parseLyricsLine(c));
                        break;
                }
            }
            this._lyricsByTrack.set(trackId, tracks);
        }
        parseLyricsLine(node) {
            const lyrics = new Lyrics();
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Offset':
                        lyrics.startBar = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'Text':
                        lyrics.text = c.innerText;
                        break;
                }
            }
            return lyrics;
        }
        parseDiagramCollectionForTrack(track, node) {
            const items = node.findChildElement('Items');
            if (items) {
                for (const c of items.childElements()) {
                    switch (c.localName) {
                        case 'Item':
                            this.parseDiagramItemForTrack(track, c);
                            break;
                    }
                }
            }
        }
        parseDiagramCollectionForStaff(staff, node) {
            const items = node.findChildElement('Items');
            if (items) {
                for (const c of items.childElements()) {
                    switch (c.localName) {
                        case 'Item':
                            this.parseDiagramItemForStaff(staff, c);
                            break;
                    }
                }
            }
        }
        parseDiagramItemForTrack(track, node) {
            const chord = new Chord();
            const chordId = node.getAttribute('id');
            for (const staff of track.staves) {
                staff.addChord(chordId, chord);
            }
            this.parseDiagramItemForChord(chord, node);
        }
        parseDiagramItemForStaff(staff, node) {
            const chord = new Chord();
            const chordId = node.getAttribute('id');
            staff.addChord(chordId, chord);
            this.parseDiagramItemForChord(chord, node);
        }
        parseDiagramItemForChord(chord, node) {
            chord.name = node.getAttribute('name');
            const diagram = node.findChildElement('Diagram');
            if (!diagram) {
                chord.showDiagram = false;
                chord.showFingering = false;
                return;
            }
            const stringCount = GpifParser.parseIntSafe(diagram.getAttribute('stringCount'), 6);
            const baseFret = GpifParser.parseIntSafe(diagram.getAttribute('baseFret'), 0);
            chord.firstFret = baseFret + 1;
            for (let i = 0; i < stringCount; i++) {
                chord.strings.push(-1);
            }
            for (const c of diagram.childElements()) {
                switch (c.localName) {
                    case 'Fret':
                        const guitarString = GpifParser.parseIntSafe(c.getAttribute('string'), 0);
                        chord.strings[stringCount - guitarString - 1] =
                            baseFret + GpifParser.parseIntSafe(c.getAttribute('fret'), 0);
                        break;
                    case 'Fingering':
                        const existingFingers = new Map();
                        for (const p of c.childElements()) {
                            switch (p.localName) {
                                case 'Position':
                                    let finger = Fingers.Unknown;
                                    const fret = baseFret + GpifParser.parseIntSafe(p.getAttribute('fret'), 0);
                                    switch (p.getAttribute('finger')) {
                                        case 'Index':
                                            finger = Fingers.IndexFinger;
                                            break;
                                        case 'Middle':
                                            finger = Fingers.MiddleFinger;
                                            break;
                                        case 'Rank':
                                            finger = Fingers.AnnularFinger;
                                            break;
                                        case 'Pinky':
                                            finger = Fingers.LittleFinger;
                                            break;
                                        case 'Thumb':
                                            finger = Fingers.Thumb;
                                            break;
                                    }
                                    if (finger !== Fingers.Unknown) {
                                        if (existingFingers.has(finger)) {
                                            chord.barreFrets.push(fret);
                                        }
                                        else {
                                            existingFingers.set(finger, true);
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case 'Property':
                        switch (c.getAttribute('name')) {
                            case 'ShowName':
                                chord.showName = c.getAttribute('value') === 'true';
                                break;
                            case 'ShowDiagram':
                                chord.showDiagram = c.getAttribute('value') === 'true';
                                break;
                            case 'ShowFingering':
                                chord.showFingering = c.getAttribute('value') === 'true';
                                break;
                        }
                        break;
                }
            }
        }
        parseTrackProperties(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Property':
                        this.parseTrackProperty(track, c);
                        break;
                }
            }
        }
        parseTrackProperty(track, node) {
            const propertyName = node.getAttribute('name');
            switch (propertyName) {
                case 'Tuning':
                    const tuningParts = GpifParser.splitSafe(node.findChildElement('Pitches')?.innerText);
                    const tuning = new Array(tuningParts.length);
                    for (let i = 0; i < tuning.length; i++) {
                        tuning[tuning.length - 1 - i] = GpifParser.parseIntSafe(tuningParts[i], 0);
                    }
                    for (const staff of track.staves) {
                        staff.stringTuning.tunings = tuning;
                        staff.showStandardNotation = true;
                        staff.showTablature = true;
                    }
                    break;
                case 'DiagramCollection':
                case 'ChordCollection':
                    this.parseDiagramCollectionForTrack(track, node);
                    break;
                case 'CapoFret':
                    const capo = GpifParser.parseIntSafe(node.findChildElement('Fret')?.innerText, 0);
                    for (const staff of track.staves) {
                        staff.capo = capo;
                    }
                    break;
            }
        }
        parseGeneralMidi(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Program':
                        track.playbackInfo.program = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'Port':
                        track.playbackInfo.port = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'PrimaryChannel':
                        track.playbackInfo.primaryChannel = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'SecondaryChannel':
                        track.playbackInfo.secondaryChannel = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                }
            }
            const isPercussion = node.getAttribute('table') === 'Percussion';
            if (isPercussion) {
                for (const staff of track.staves) {
                    staff.isPercussion = true;
                }
            }
        }
        parseSounds(trackId, track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Sound':
                        this.parseSound(trackId, track, c);
                        break;
                }
            }
        }
        parseSound(trackId, track, node) {
            const sound = new GpifSound();
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Name':
                        sound.name = c.innerText;
                        break;
                    case 'Path':
                        sound.path = c.innerText;
                        break;
                    case 'Role':
                        sound.role = c.innerText;
                        break;
                    case 'MIDI':
                        this.parseSoundMidi(sound, c);
                        break;
                }
            }
            if (sound.role === 'Factory' || track.playbackInfo.program === 0) {
                track.playbackInfo.program = sound.program;
            }
            if (!this._soundsByTrack.has(trackId)) {
                this._soundsByTrack.set(trackId, new Map());
            }
            this._soundsByTrack.get(trackId).set(sound.uniqueId, sound);
        }
        parseSoundMidi(sound, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Program':
                        sound.program = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                }
            }
        }
        parsePartSounding(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'TranspositionPitch':
                        for (const staff of track.staves) {
                            staff.displayTranspositionPitch = GpifParser.parseIntSafe(c.innerText, 0);
                        }
                        break;
                }
            }
        }
        parseTranspose(track, node) {
            let octave = 0;
            let chromatic = 0;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Chromatic':
                        chromatic = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'Octave':
                        octave = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                }
            }
            for (const staff of track.staves) {
                staff.displayTranspositionPitch = octave * 12 + chromatic;
            }
        }
        parseRSE(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'ChannelStrip':
                        this.parseChannelStrip(track, c);
                        break;
                }
            }
        }
        parseChannelStrip(track, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Parameters':
                        this.parseChannelStripParameters(track, c);
                        break;
                }
            }
        }
        parseChannelStripParameters(track, node) {
            if (node.firstChild && node.firstChild.value) {
                const parameters = GpifParser.splitSafe(node.firstChild.value);
                if (parameters.length >= 12) {
                    track.playbackInfo.balance = Math.floor(GpifParser.parseFloatSafe(parameters[11], 0.5) * 16);
                    track.playbackInfo.volume = Math.floor(GpifParser.parseFloatSafe(parameters[12], 0.9) * 16);
                }
            }
        }
        //
        // <MasterBars>...</MasterBars>
        //
        parseMasterBarsNode(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'MasterBar':
                        this.parseMasterBar(c);
                        break;
                }
            }
        }
        parseMasterBar(node) {
            const masterBar = new MasterBar();
            if (this._masterBars.length === 0 && this._hasAnacrusis) {
                masterBar.isAnacrusis = true;
            }
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Time':
                        const timeParts = c.innerText.split('/');
                        masterBar.timeSignatureNumerator = GpifParser.parseIntSafe(timeParts[0], 4);
                        masterBar.timeSignatureDenominator = GpifParser.parseIntSafe(timeParts[1], 4);
                        break;
                    case 'FreeTime':
                        masterBar.isFreeTime = true;
                        break;
                    case 'DoubleBar':
                        masterBar.isDoubleBar = true;
                        this._doubleBars.add(masterBar);
                        break;
                    case 'Section':
                        masterBar.section = new Section();
                        masterBar.section.marker = c.findChildElement('Letter')?.innerText ?? '';
                        masterBar.section.text = c.findChildElement('Text')?.innerText ?? '';
                        break;
                    case 'Repeat':
                        if (c.getAttribute('start').toLowerCase() === 'true') {
                            masterBar.isRepeatStart = true;
                        }
                        if (c.getAttribute('end').toLowerCase() === 'true' && c.getAttribute('count')) {
                            masterBar.repeatCount = GpifParser.parseIntSafe(c.getAttribute('count'), 1);
                        }
                        break;
                    case 'AlternateEndings':
                        const alternateEndings = GpifParser.splitSafe(c.innerText);
                        let i = 0;
                        for (let k = 0; k < alternateEndings.length; k++) {
                            i = i | (1 << (-1 + GpifParser.parseIntSafe(alternateEndings[k], 0)));
                        }
                        masterBar.alternateEndings = i;
                        break;
                    case 'Bars':
                        this._barsOfMasterBar.push(GpifParser.splitSafe(c.innerText));
                        break;
                    case 'TripletFeel':
                        switch (c.innerText) {
                            case 'NoTripletFeel':
                                masterBar.tripletFeel = TripletFeel.NoTripletFeel;
                                break;
                            case 'Triplet8th':
                                masterBar.tripletFeel = TripletFeel.Triplet8th;
                                break;
                            case 'Triplet16th':
                                masterBar.tripletFeel = TripletFeel.Triplet16th;
                                break;
                            case 'Dotted8th':
                                masterBar.tripletFeel = TripletFeel.Dotted8th;
                                break;
                            case 'Dotted16th':
                                masterBar.tripletFeel = TripletFeel.Dotted16th;
                                break;
                            case 'Scottish8th':
                                masterBar.tripletFeel = TripletFeel.Scottish8th;
                                break;
                            case 'Scottish16th':
                                masterBar.tripletFeel = TripletFeel.Scottish16th;
                                break;
                        }
                        break;
                    case 'Key':
                        const keySignature = GpifParser.parseIntSafe(c.findChildElement('AccidentalCount')?.innerText, 0);
                        const mode = c.findChildElement('Mode');
                        let keySignatureType = KeySignatureType.Major;
                        if (mode) {
                            switch (mode.innerText.toLowerCase()) {
                                case 'major':
                                    keySignatureType = KeySignatureType.Major;
                                    break;
                                case 'minor':
                                    keySignatureType = KeySignatureType.Minor;
                                    break;
                            }
                        }
                        this._keySignatures.set(this._masterBars.length, [keySignature, keySignatureType]);
                        break;
                    case 'Fermatas':
                        this.parseFermatas(masterBar, c);
                        break;
                    case 'XProperties':
                        this.parseMasterBarXProperties(masterBar, c);
                        break;
                    case 'Directions':
                        this.parseDirections(masterBar, c);
                        break;
                }
            }
            this._masterBars.push(masterBar);
        }
        parseDirections(masterBar, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Target':
                        switch (c.innerText) {
                            case 'Coda':
                                masterBar.addDirection(Direction.TargetCoda);
                                break;
                            case 'DoubleCoda':
                                masterBar.addDirection(Direction.TargetDoubleCoda);
                                break;
                            case 'Segno':
                                masterBar.addDirection(Direction.TargetSegno);
                                break;
                            case 'SegnoSegno':
                                masterBar.addDirection(Direction.TargetSegnoSegno);
                                break;
                            case 'Fine':
                                masterBar.addDirection(Direction.TargetFine);
                                break;
                        }
                        break;
                    case 'Jump':
                        switch (c.innerText) {
                            case 'DaCapo':
                                masterBar.addDirection(Direction.JumpDaCapo);
                                break;
                            case 'DaCapoAlCoda':
                                masterBar.addDirection(Direction.JumpDaCapoAlCoda);
                                break;
                            case 'DaCapoAlDoubleCoda':
                                masterBar.addDirection(Direction.JumpDaCapoAlDoubleCoda);
                                break;
                            case 'DaCapoAlFine':
                                masterBar.addDirection(Direction.JumpDaCapoAlFine);
                                break;
                            // Note: no typo on our side, GPIF has wrongly "DaSegno" instead of "DalSegno"
                            case 'DaSegno':
                                masterBar.addDirection(Direction.JumpDalSegno);
                                break;
                            case 'DaSegnoAlCoda':
                                masterBar.addDirection(Direction.JumpDalSegnoAlCoda);
                                break;
                            case 'DaSegnoAlDoubleCoda':
                                masterBar.addDirection(Direction.JumpDalSegnoAlDoubleCoda);
                                break;
                            case 'DaSegnoAlFine':
                                masterBar.addDirection(Direction.JumpDalSegnoAlFine);
                                break;
                            case 'DaSegnoSegno':
                                masterBar.addDirection(Direction.JumpDalSegnoSegno);
                                break;
                            case 'DaSegnoSegnoAlCoda':
                                masterBar.addDirection(Direction.JumpDalSegnoSegnoAlCoda);
                                break;
                            case 'DaSegnoSegnoAlDoubleCoda':
                                masterBar.addDirection(Direction.JumpDalSegnoSegnoAlDoubleCoda);
                                break;
                            case 'DaSegnoSegnoAlFine':
                                masterBar.addDirection(Direction.JumpDalSegnoSegnoAlFine);
                                break;
                            case 'DaCoda':
                                masterBar.addDirection(Direction.JumpDaCoda);
                                break;
                            case 'DaDoubleCoda':
                                masterBar.addDirection(Direction.JumpDaDoubleCoda);
                                break;
                        }
                        break;
                }
            }
        }
        parseFermatas(masterBar, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Fermata':
                        this.parseFermata(masterBar, c);
                        break;
                }
            }
        }
        parseFermata(masterBar, node) {
            let offset = 0;
            const fermata = new Fermata();
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Type':
                        switch (c.innerText) {
                            case 'Short':
                                fermata.type = FermataType.Short;
                                break;
                            case 'Medium':
                                fermata.type = FermataType.Medium;
                                break;
                            case 'Long':
                                fermata.type = FermataType.Long;
                                break;
                        }
                        break;
                    case 'Length':
                        fermata.length = GpifParser.parseFloatSafe(c.innerText, 0);
                        break;
                    case 'Offset':
                        const parts = c.innerText.split('/');
                        if (parts.length === 2) {
                            const numerator = GpifParser.parseIntSafe(parts[0], 4);
                            const denominator = GpifParser.parseIntSafe(parts[1], 4);
                            offset = ((numerator / denominator) * MidiUtils.QuarterTime) | 0;
                        }
                        break;
                }
            }
            masterBar.addFermata(offset, fermata);
        }
        //
        // <Bars>...</Bars>
        //
        parseBars(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Bar':
                        this.parseBar(c);
                        break;
                }
            }
        }
        parseBar(node) {
            const bar = new Bar();
            const barId = node.getAttribute('id');
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Voices':
                        this._voicesOfBar.set(barId, GpifParser.splitSafe(c.innerText));
                        break;
                    case 'Clef':
                        switch (c.innerText) {
                            case 'Neutral':
                                bar.clef = Clef.Neutral;
                                break;
                            case 'G2':
                                bar.clef = Clef.G2;
                                break;
                            case 'F4':
                                bar.clef = Clef.F4;
                                break;
                            case 'C4':
                                bar.clef = Clef.C4;
                                break;
                            case 'C3':
                                bar.clef = Clef.C3;
                                break;
                        }
                        break;
                    case 'Ottavia':
                        switch (c.innerText) {
                            case '8va':
                                bar.clefOttava = Ottavia._8va;
                                break;
                            case '15ma':
                                bar.clefOttava = Ottavia._15ma;
                                break;
                            case '8vb':
                                bar.clefOttava = Ottavia._8vb;
                                break;
                            case '15mb':
                                bar.clefOttava = Ottavia._15mb;
                                break;
                        }
                        break;
                    case 'SimileMark':
                        switch (c.innerText) {
                            case 'Simple':
                                bar.simileMark = SimileMark.Simple;
                                break;
                            case 'FirstOfDouble':
                                bar.simileMark = SimileMark.FirstOfDouble;
                                break;
                            case 'SecondOfDouble':
                                bar.simileMark = SimileMark.SecondOfDouble;
                                break;
                        }
                        break;
                    case 'XProperties':
                        this.parseBarXProperties(c, bar);
                        break;
                }
            }
            this._barsById.set(barId, bar);
        }
        //
        // <Voices>...</Voices>
        //
        parseVoices(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Voice':
                        this.parseVoice(c);
                        break;
                }
            }
        }
        parseVoice(node) {
            const voice = new Voice$1();
            const voiceId = node.getAttribute('id');
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Beats':
                        this._beatsOfVoice.set(voiceId, GpifParser.splitSafe(c.innerText));
                        break;
                }
            }
            this._voiceById.set(voiceId, voice);
        }
        //
        // <Beats>...</Beats>
        //
        parseBeats(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Beat':
                        this.parseBeat(c);
                        break;
                }
            }
        }
        parseBeat(node) {
            const beat = new Beat();
            const beatId = node.getAttribute('id');
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Notes':
                        this._notesOfBeat.set(beatId, GpifParser.splitSafe(c.innerText));
                        break;
                    case 'Rhythm':
                        this._rhythmOfBeat.set(beatId, c.getAttribute('ref'));
                        break;
                    case 'Fadding':
                        switch (c.innerText) {
                            case 'FadeIn':
                                beat.fade = FadeType.FadeIn;
                                break;
                            case 'FadeOut':
                                beat.fade = FadeType.FadeOut;
                                break;
                            case 'VolumeSwell':
                                beat.fade = FadeType.VolumeSwell;
                                break;
                        }
                        break;
                    case 'Tremolo':
                        switch (c.innerText) {
                            case '1/2':
                                beat.tremoloSpeed = Duration.Eighth;
                                break;
                            case '1/4':
                                beat.tremoloSpeed = Duration.Sixteenth;
                                break;
                            case '1/8':
                                beat.tremoloSpeed = Duration.ThirtySecond;
                                break;
                        }
                        break;
                    case 'Chord':
                        beat.chordId = c.innerText;
                        break;
                    case 'Hairpin':
                        switch (c.innerText) {
                            case 'Crescendo':
                                beat.crescendo = CrescendoType.Crescendo;
                                break;
                            case 'Decrescendo':
                                beat.crescendo = CrescendoType.Decrescendo;
                                break;
                        }
                        break;
                    case 'Arpeggio':
                        if (c.innerText === 'Up') {
                            beat.brushType = BrushType.ArpeggioUp;
                        }
                        else {
                            beat.brushType = BrushType.ArpeggioDown;
                        }
                        break;
                    case 'Properties':
                        this.parseBeatProperties(c, beat);
                        break;
                    case 'XProperties':
                        this.parseBeatXProperties(c, beat);
                        break;
                    case 'FreeText':
                        beat.text = c.innerText;
                        break;
                    case 'TransposedPitchStemOrientation':
                        switch (c.innerText) {
                            case 'Upward':
                                beat.preferredBeamDirection = BeamDirection.Up;
                                break;
                            case 'Downward':
                                beat.preferredBeamDirection = BeamDirection.Down;
                                break;
                        }
                        break;
                    case 'Dynamic':
                        switch (c.innerText) {
                            case 'PPP':
                                beat.dynamics = DynamicValue.PPP;
                                break;
                            case 'PP':
                                beat.dynamics = DynamicValue.PP;
                                break;
                            case 'P':
                                beat.dynamics = DynamicValue.P;
                                break;
                            case 'MP':
                                beat.dynamics = DynamicValue.MP;
                                break;
                            case 'MF':
                                beat.dynamics = DynamicValue.MF;
                                break;
                            case 'F':
                                beat.dynamics = DynamicValue.F;
                                break;
                            case 'FF':
                                beat.dynamics = DynamicValue.FF;
                                break;
                            case 'FFF':
                                beat.dynamics = DynamicValue.FFF;
                                break;
                        }
                        break;
                    case 'GraceNotes':
                        switch (c.innerText) {
                            case 'OnBeat':
                                beat.graceType = GraceType.OnBeat;
                                break;
                            case 'BeforeBeat':
                                beat.graceType = GraceType.BeforeBeat;
                                break;
                        }
                        break;
                    case 'Legato':
                        if (c.getAttribute('origin') === 'true') {
                            beat.isLegatoOrigin = true;
                        }
                        break;
                    case 'Whammy':
                        const whammyOrigin = new BendPoint(0, 0);
                        whammyOrigin.value = this.toBendValue(GpifParser.parseFloatSafe(c.getAttribute('originValue'), 0));
                        whammyOrigin.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.getAttribute('originOffset'), 0));
                        beat.addWhammyBarPoint(whammyOrigin);
                        const whammyMiddle1 = new BendPoint(0, 0);
                        whammyMiddle1.value = this.toBendValue(GpifParser.parseFloatSafe(c.getAttribute('middleValue'), 0));
                        whammyMiddle1.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.getAttribute('middleOffset1'), 0));
                        beat.addWhammyBarPoint(whammyMiddle1);
                        const whammyMiddle2 = new BendPoint(0, 0);
                        whammyMiddle2.value = this.toBendValue(GpifParser.parseFloatSafe(c.getAttribute('middleValue'), 0));
                        whammyMiddle2.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.getAttribute('middleOffset2'), 0));
                        beat.addWhammyBarPoint(whammyMiddle2);
                        const whammyDestination = new BendPoint(0, 0);
                        whammyDestination.value = this.toBendValue(GpifParser.parseFloatSafe(c.getAttribute('destinationValue'), 0));
                        whammyDestination.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.getAttribute('destinationOffset'), 0));
                        beat.addWhammyBarPoint(whammyDestination);
                        break;
                    case 'Ottavia':
                        switch (c.innerText) {
                            case '8va':
                                beat.ottava = Ottavia._8va;
                                break;
                            case '8vb':
                                beat.ottava = Ottavia._8vb;
                                break;
                            case '15ma':
                                beat.ottava = Ottavia._15ma;
                                break;
                            case '15mb':
                                beat.ottava = Ottavia._15mb;
                                break;
                        }
                        break;
                    case 'Lyrics':
                        beat.lyrics = this.parseBeatLyrics(c);
                        this._skipApplyLyrics = true;
                        break;
                    case 'Slashed':
                        beat.slashed = true;
                        break;
                    case 'DeadSlapped':
                        beat.deadSlapped = true;
                        break;
                    case 'Golpe':
                        switch (c.innerText) {
                            case 'Finger':
                                beat.golpe = GolpeType.Finger;
                                break;
                            case 'Thumb':
                                beat.golpe = GolpeType.Thumb;
                                break;
                        }
                        break;
                    case 'Wah':
                        switch (c.innerText) {
                            case 'Open':
                                beat.wahPedal = WahPedal.Open;
                                break;
                            case 'Closed':
                                beat.wahPedal = WahPedal.Closed;
                                break;
                        }
                        break;
                    case 'UserTransposedPitchStemOrientation':
                        switch (c.innerText) {
                            case 'Downward':
                                beat.preferredBeamDirection = BeamDirection.Down;
                                break;
                            case 'Upward':
                                beat.preferredBeamDirection = BeamDirection.Up;
                                break;
                        }
                        break;
                    case 'Timer':
                        beat.showTimer = true;
                        beat.timer = GpifParser.parseIntSafe(c.innerText, -1);
                        if (beat.timer < 0) {
                            beat.timer = null;
                        }
                        break;
                }
            }
            this._beatById.set(beatId, beat);
        }
        parseBeatLyrics(node) {
            const lines = [];
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Line':
                        lines.push(c.innerText);
                        break;
                }
            }
            return lines;
        }
        parseBeatXProperties(node, beat) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'XProperty':
                        const id = c.getAttribute('id');
                        let value = 0;
                        switch (id) {
                            case '1124204546':
                                value = GpifParser.parseIntSafe(c.findChildElement('Int')?.innerText, 0);
                                switch (value) {
                                    case 1:
                                        beat.beamingMode = BeatBeamingMode.ForceMergeWithNext;
                                        break;
                                    case 2:
                                        beat.beamingMode = BeatBeamingMode.ForceSplitToNext;
                                        break;
                                }
                                break;
                            case '1124204552':
                                value = GpifParser.parseIntSafe(c.findChildElement('Int')?.innerText, 0);
                                switch (value) {
                                    case 1:
                                        if (beat.beamingMode !== BeatBeamingMode.ForceSplitToNext) {
                                            beat.beamingMode = BeatBeamingMode.ForceSplitOnSecondaryToNext;
                                        }
                                        break;
                                }
                                break;
                            case '1124204545':
                                value = GpifParser.parseIntSafe(c.findChildElement('Int')?.innerText, 0);
                                beat.invertBeamDirection = value === 1;
                                break;
                            case '687935489':
                                value = GpifParser.parseIntSafe(c.findChildElement('Int')?.innerText, 0);
                                beat.brushDuration = value;
                                break;
                        }
                        break;
                }
            }
        }
        parseBarXProperties(node, bar) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'XProperty':
                        const id = c.getAttribute('id');
                        switch (id) {
                            case '1124139520':
                                const childNode = c.findChildElement('Double') ?? c.findChildElement('Float');
                                bar.displayScale = GpifParser.parseFloatSafe(childNode?.innerText, 1);
                                break;
                        }
                        break;
                }
            }
        }
        parseMasterBarXProperties(masterBar, node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'XProperty':
                        const id = c.getAttribute('id');
                        switch (id) {
                            case '1124073984':
                                masterBar.displayScale = GpifParser.parseFloatSafe(c.findChildElement('Double')?.innerText, 1);
                                break;
                        }
                        break;
                }
            }
        }
        parseBeatProperties(node, beat) {
            let isWhammy = false;
            let whammyOrigin = null;
            let whammyMiddleValue = null;
            let whammyMiddleOffset1 = null;
            let whammyMiddleOffset2 = null;
            let whammyDestination = null;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Property':
                        const name = c.getAttribute('name');
                        switch (name) {
                            case 'Brush':
                                if (c.findChildElement('Direction')?.innerText === 'Up') {
                                    beat.brushType = BrushType.BrushUp;
                                }
                                else {
                                    beat.brushType = BrushType.BrushDown;
                                }
                                break;
                            case 'PickStroke':
                                if (c.findChildElement('Direction')?.innerText === 'Up') {
                                    beat.pickStroke = PickStroke.Up;
                                }
                                else {
                                    beat.pickStroke = PickStroke.Down;
                                }
                                break;
                            case 'Slapped':
                                if (c.findChildElement('Enable')) {
                                    beat.slap = true;
                                }
                                break;
                            case 'Popped':
                                if (c.findChildElement('Enable')) {
                                    beat.pop = true;
                                }
                                break;
                            case 'VibratoWTremBar':
                                switch (c.findChildElement('Strength')?.innerText) {
                                    case 'Wide':
                                        beat.vibrato = VibratoType.Wide;
                                        break;
                                    case 'Slight':
                                        beat.vibrato = VibratoType.Slight;
                                        break;
                                }
                                break;
                            case 'WhammyBar':
                                isWhammy = true;
                                break;
                            case 'WhammyBarExtend':
                                // not clear what this is used for
                                break;
                            case 'WhammyBarOriginValue':
                                if (!whammyOrigin) {
                                    whammyOrigin = new BendPoint(0, 0);
                                }
                                whammyOrigin.value = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarOriginOffset':
                                if (!whammyOrigin) {
                                    whammyOrigin = new BendPoint(0, 0);
                                }
                                whammyOrigin.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarMiddleValue':
                                whammyMiddleValue = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarMiddleOffset1':
                                whammyMiddleOffset1 = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarMiddleOffset2':
                                whammyMiddleOffset2 = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarDestinationValue':
                                if (!whammyDestination) {
                                    whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                }
                                whammyDestination.value = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'WhammyBarDestinationOffset':
                                if (!whammyDestination) {
                                    whammyDestination = new BendPoint(0, 0);
                                }
                                whammyDestination.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BarreFret':
                                beat.barreFret = GpifParser.parseIntSafe(c.findChildElement('Fret')?.innerText, 0);
                                break;
                            case 'BarreString':
                                switch (c.findChildElement('String')?.innerText) {
                                    case '0':
                                        beat.barreShape = BarreShape.Full;
                                        break;
                                    case '1':
                                        beat.barreShape = BarreShape.Half;
                                        break;
                                }
                                break;
                            case 'Rasgueado':
                                switch (c.findChildElement('Rasgueado')?.innerText) {
                                    case 'ii_1':
                                        beat.rasgueado = Rasgueado.Ii;
                                        break;
                                    case 'mi_1':
                                        beat.rasgueado = Rasgueado.Mi;
                                        break;
                                    case 'mii_1':
                                        beat.rasgueado = Rasgueado.MiiTriplet;
                                        break;
                                    case 'mii_2':
                                        beat.rasgueado = Rasgueado.MiiAnapaest;
                                        break;
                                    case 'pmp_1':
                                        beat.rasgueado = Rasgueado.PmpTriplet;
                                        break;
                                    case 'pmp_2':
                                        beat.rasgueado = Rasgueado.PmpAnapaest;
                                        break;
                                    case 'pei_1':
                                        beat.rasgueado = Rasgueado.PeiTriplet;
                                        break;
                                    case 'pei_2':
                                        beat.rasgueado = Rasgueado.PeiAnapaest;
                                        break;
                                    case 'pai_1':
                                        beat.rasgueado = Rasgueado.PaiTriplet;
                                        break;
                                    case 'pai_2':
                                        beat.rasgueado = Rasgueado.PaiAnapaest;
                                        break;
                                    case 'ami_1':
                                        beat.rasgueado = Rasgueado.AmiTriplet;
                                        break;
                                    case 'ami_2':
                                        beat.rasgueado = Rasgueado.AmiAnapaest;
                                        break;
                                    case 'ppp_1':
                                        beat.rasgueado = Rasgueado.Ppp;
                                        break;
                                    case 'amii_1':
                                        beat.rasgueado = Rasgueado.Amii;
                                        break;
                                    case 'amip_1':
                                        beat.rasgueado = Rasgueado.Amip;
                                        break;
                                    case 'eami_1':
                                        beat.rasgueado = Rasgueado.Eami;
                                        break;
                                    case 'eamii_1':
                                        beat.rasgueado = Rasgueado.Eamii;
                                        break;
                                    case 'peami_1':
                                        beat.rasgueado = Rasgueado.Peami;
                                        break;
                                }
                                break;
                        }
                        break;
                }
            }
            if (isWhammy) {
                if (!whammyOrigin) {
                    whammyOrigin = new BendPoint(0, 0);
                }
                if (!whammyDestination) {
                    whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
                }
                beat.addWhammyBarPoint(whammyOrigin);
                if (whammyMiddleOffset1 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset1, whammyMiddleValue));
                }
                if (whammyMiddleOffset2 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset2, whammyMiddleValue));
                }
                if (!whammyMiddleOffset1 && !whammyMiddleOffset2 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, whammyMiddleValue));
                }
                beat.addWhammyBarPoint(whammyDestination);
            }
        }
        //
        // <Notes>...</Notes>
        //
        parseNotes(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Note':
                        this.parseNote(c);
                        break;
                }
            }
        }
        parseNote(node) {
            const note = new Note();
            const noteId = node.getAttribute('id');
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Properties':
                        this.parseNoteProperties(c, note, noteId);
                        break;
                    case 'AntiAccent':
                        if (c.innerText.toLowerCase() === 'normal') {
                            note.isGhost = true;
                        }
                        break;
                    case 'LetRing':
                        note.isLetRing = true;
                        break;
                    case 'Trill':
                        note.trillValue = GpifParser.parseIntSafe(c.innerText, -1);
                        note.trillSpeed = Duration.Sixteenth;
                        break;
                    case 'Accent':
                        const accentFlags = GpifParser.parseIntSafe(c.innerText, 0);
                        if ((accentFlags & 0x01) !== 0) {
                            note.isStaccato = true;
                        }
                        if ((accentFlags & 0x04) !== 0) {
                            note.accentuated = AccentuationType.Heavy;
                        }
                        if ((accentFlags & 0x08) !== 0) {
                            note.accentuated = AccentuationType.Normal;
                        }
                        if ((accentFlags & 0x10) !== 0) {
                            note.accentuated = AccentuationType.Tenuto;
                        }
                        break;
                    case 'Tie':
                        if (c.getAttribute('destination').toLowerCase() === 'true') {
                            note.isTieDestination = true;
                        }
                        break;
                    case 'Vibrato':
                        switch (c.innerText) {
                            case 'Slight':
                                note.vibrato = VibratoType.Slight;
                                break;
                            case 'Wide':
                                note.vibrato = VibratoType.Wide;
                                break;
                        }
                        break;
                    case 'LeftFingering':
                        switch (c.innerText) {
                            case 'P':
                                note.leftHandFinger = Fingers.Thumb;
                                break;
                            case 'I':
                                note.leftHandFinger = Fingers.IndexFinger;
                                break;
                            case 'M':
                                note.leftHandFinger = Fingers.MiddleFinger;
                                break;
                            case 'A':
                                note.leftHandFinger = Fingers.AnnularFinger;
                                break;
                            case 'C':
                                note.leftHandFinger = Fingers.LittleFinger;
                                break;
                        }
                        break;
                    case 'RightFingering':
                        switch (c.innerText) {
                            case 'P':
                                note.rightHandFinger = Fingers.Thumb;
                                break;
                            case 'I':
                                note.rightHandFinger = Fingers.IndexFinger;
                                break;
                            case 'M':
                                note.rightHandFinger = Fingers.MiddleFinger;
                                break;
                            case 'A':
                                note.rightHandFinger = Fingers.AnnularFinger;
                                break;
                            case 'C':
                                note.rightHandFinger = Fingers.LittleFinger;
                                break;
                        }
                        break;
                    case 'InstrumentArticulation':
                        note.percussionArticulation = GpifParser.parseIntSafe(c.innerText, 0);
                        break;
                    case 'Ornament':
                        switch (c.innerText) {
                            case 'Turn':
                                note.ornament = NoteOrnament.Turn;
                                break;
                            case 'InvertedTurn':
                                note.ornament = NoteOrnament.InvertedTurn;
                                break;
                            case 'UpperMordent':
                                note.ornament = NoteOrnament.UpperMordent;
                                break;
                            case 'LowerMordent':
                                note.ornament = NoteOrnament.LowerMordent;
                                break;
                        }
                        break;
                }
            }
            this._noteById.set(noteId, note);
        }
        parseNoteProperties(node, note, noteId) {
            let isBended = false;
            let bendOrigin = null;
            let bendMiddleValue = null;
            let bendMiddleOffset1 = null;
            let bendMiddleOffset2 = null;
            let bendDestination = null;
            // GP6 had percussion as element+variation
            let element = -1;
            let variation = -1;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Property':
                        const name = c.getAttribute('name');
                        switch (name) {
                            case 'ShowStringNumber':
                                if (c.findChildElement('Enable')) {
                                    note.showStringNumber = true;
                                }
                                break;
                            case 'String':
                                note.string = GpifParser.parseIntSafe(c.findChildElement('String')?.innerText, 0) + 1;
                                break;
                            case 'Fret':
                                note.fret = GpifParser.parseIntSafe(c.findChildElement('Fret')?.innerText, 0);
                                break;
                            case 'Element':
                                element = GpifParser.parseIntSafe(c.findChildElement('Element')?.innerText, 0);
                                break;
                            case 'Variation':
                                variation = GpifParser.parseIntSafe(c.findChildElement('Variation')?.innerText, 0);
                                break;
                            case 'Tapped':
                                this._tappedNotes.set(noteId, true);
                                break;
                            case 'HarmonicType':
                                const htype = c.findChildElement('HType');
                                if (htype) {
                                    switch (htype.innerText) {
                                        case 'NoHarmonic':
                                            note.harmonicType = HarmonicType.None;
                                            break;
                                        case 'Natural':
                                            note.harmonicType = HarmonicType.Natural;
                                            break;
                                        case 'Artificial':
                                            note.harmonicType = HarmonicType.Artificial;
                                            break;
                                        case 'Pinch':
                                            note.harmonicType = HarmonicType.Pinch;
                                            break;
                                        case 'Tap':
                                            note.harmonicType = HarmonicType.Tap;
                                            break;
                                        case 'Semi':
                                            note.harmonicType = HarmonicType.Semi;
                                            break;
                                        case 'Feedback':
                                            note.harmonicType = HarmonicType.Feedback;
                                            break;
                                    }
                                }
                                break;
                            case 'HarmonicFret':
                                const hfret = c.findChildElement('HFret');
                                if (hfret) {
                                    note.harmonicValue = GpifParser.parseFloatSafe(hfret.innerText, 0);
                                }
                                break;
                            case 'Muted':
                                if (c.findChildElement('Enable')) {
                                    note.isDead = true;
                                }
                                break;
                            case 'PalmMuted':
                                if (c.findChildElement('Enable')) {
                                    note.isPalmMute = true;
                                }
                                break;
                            case 'Octave':
                                note.octave = GpifParser.parseIntSafe(c.findChildElement('Number')?.innerText, 0);
                                // when exporting GP6 from GP7 the tone might be missing
                                if (note.tone === -1) {
                                    note.tone = 0;
                                }
                                break;
                            case 'Tone':
                                note.tone = GpifParser.parseIntSafe(c.findChildElement('Step')?.innerText, 0);
                                break;
                            case 'ConcertPitch':
                                this.parseConcertPitch(c, note);
                                break;
                            case 'Bended':
                                isBended = true;
                                break;
                            case 'BendOriginValue':
                                if (!bendOrigin) {
                                    bendOrigin = new BendPoint(0, 0);
                                }
                                bendOrigin.value = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendOriginOffset':
                                if (!bendOrigin) {
                                    bendOrigin = new BendPoint(0, 0);
                                }
                                bendOrigin.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendMiddleValue':
                                bendMiddleValue = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendMiddleOffset1':
                                bendMiddleOffset1 = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendMiddleOffset2':
                                bendMiddleOffset2 = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendDestinationValue':
                                if (!bendDestination) {
                                    bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                }
                                bendDestination.value = this.toBendValue(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'BendDestinationOffset':
                                if (!bendDestination) {
                                    bendDestination = new BendPoint(0, 0);
                                }
                                bendDestination.offset = this.toBendOffset(GpifParser.parseFloatSafe(c.findChildElement('Float')?.innerText, 0));
                                break;
                            case 'HopoOrigin':
                                if (c.findChildElement('Enable')) {
                                    note.isHammerPullOrigin = true;
                                }
                                break;
                            case 'HopoDestination':
                                // NOTE: gets automatically calculated
                                // if (FindChildElement(node, "Enable"))
                                //     note.isHammerPullDestination = true;
                                break;
                            case 'LeftHandTapped':
                                note.isLeftHandTapped = true;
                                break;
                            case 'Slide':
                                const slideFlags = GpifParser.parseIntSafe(c.findChildElement('Flags')?.innerText, 0);
                                if ((slideFlags & 1) !== 0) {
                                    note.slideOutType = SlideOutType.Shift;
                                }
                                else if ((slideFlags & 2) !== 0) {
                                    note.slideOutType = SlideOutType.Legato;
                                }
                                else if ((slideFlags & 4) !== 0) {
                                    note.slideOutType = SlideOutType.OutDown;
                                }
                                else if ((slideFlags & 8) !== 0) {
                                    note.slideOutType = SlideOutType.OutUp;
                                }
                                if ((slideFlags & 16) !== 0) {
                                    note.slideInType = SlideInType.IntoFromBelow;
                                }
                                else if ((slideFlags & 32) !== 0) {
                                    note.slideInType = SlideInType.IntoFromAbove;
                                }
                                if ((slideFlags & 64) !== 0) {
                                    note.slideOutType = SlideOutType.PickSlideDown;
                                }
                                else if ((slideFlags & 128) !== 0) {
                                    note.slideOutType = SlideOutType.PickSlideUp;
                                }
                                break;
                        }
                        break;
                }
            }
            if (isBended) {
                if (!bendOrigin) {
                    bendOrigin = new BendPoint(0, 0);
                }
                if (!bendDestination) {
                    bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
                }
                note.addBendPoint(bendOrigin);
                if (bendMiddleOffset1 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint(bendMiddleOffset1, bendMiddleValue));
                }
                if (bendMiddleOffset2 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint(bendMiddleOffset2, bendMiddleValue));
                }
                if (!bendMiddleOffset1 && !bendMiddleOffset2 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendMiddleValue));
                }
                note.addBendPoint(bendDestination);
            }
            // map GP6 element and variation combos to midi numbers
            if (element !== -1 && variation !== -1) {
                note.percussionArticulation = PercussionMapper.articulationFromElementVariation(element, variation);
            }
        }
        parseConcertPitch(node, note) {
            const pitch = node.findChildElement('Pitch');
            if (pitch) {
                for (const c of pitch.childElements()) {
                    switch (c.localName) {
                        case 'Accidental':
                            switch (c.innerText) {
                                case 'x':
                                    note.accidentalMode = NoteAccidentalMode.ForceDoubleSharp;
                                    break;
                                case '#':
                                    note.accidentalMode = NoteAccidentalMode.ForceSharp;
                                    break;
                                case 'b':
                                    note.accidentalMode = NoteAccidentalMode.ForceFlat;
                                    break;
                                case 'bb':
                                    note.accidentalMode = NoteAccidentalMode.ForceDoubleFlat;
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        toBendValue(gpxValue) {
            return (gpxValue * GpifParser.BendPointValueFactor) | 0;
        }
        toBendOffset(gpxOffset) {
            return gpxOffset * GpifParser.BendPointPositionFactor;
        }
        parseRhythms(node) {
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'Rhythm':
                        this.parseRhythm(c);
                        break;
                }
            }
        }
        parseRhythm(node) {
            const rhythm = new GpifRhythm();
            const rhythmId = node.getAttribute('id');
            rhythm.id = rhythmId;
            for (const c of node.childElements()) {
                switch (c.localName) {
                    case 'NoteValue':
                        switch (c.innerText) {
                            case 'Long':
                                rhythm.value = Duration.QuadrupleWhole;
                                break;
                            case 'DoubleWhole':
                                rhythm.value = Duration.DoubleWhole;
                                break;
                            case 'Whole':
                                rhythm.value = Duration.Whole;
                                break;
                            case 'Half':
                                rhythm.value = Duration.Half;
                                break;
                            case 'Quarter':
                                rhythm.value = Duration.Quarter;
                                break;
                            case 'Eighth':
                                rhythm.value = Duration.Eighth;
                                break;
                            case '16th':
                                rhythm.value = Duration.Sixteenth;
                                break;
                            case '32nd':
                                rhythm.value = Duration.ThirtySecond;
                                break;
                            case '64th':
                                rhythm.value = Duration.SixtyFourth;
                                break;
                            case '128th':
                                rhythm.value = Duration.OneHundredTwentyEighth;
                                break;
                            case '256th':
                                rhythm.value = Duration.TwoHundredFiftySixth;
                                break;
                        }
                        break;
                    case 'PrimaryTuplet':
                        rhythm.tupletNumerator = GpifParser.parseIntSafe(c.getAttribute('num'), -1);
                        rhythm.tupletDenominator = GpifParser.parseIntSafe(c.getAttribute('den'), -1);
                        break;
                    case 'AugmentationDot':
                        rhythm.dots = GpifParser.parseIntSafe(c.getAttribute('count'), 0);
                        break;
                }
            }
            this._rhythmById.set(rhythmId, rhythm);
        }
        buildModel() {
            // build score
            for (let i = 0, j = this._masterBars.length; i < j; i++) {
                const masterBar = this._masterBars[i];
                this.score.addMasterBar(masterBar);
            }
            // Its a bit wierd. but the last bar might be flagged as "DoubleBar"
            // we have to clear this
            const lastMasterBar = this._masterBars[this._masterBars.length - 1];
            if (this._doubleBars.has(lastMasterBar)) {
                this._doubleBars.delete(lastMasterBar);
                lastMasterBar.isDoubleBar = false;
            }
            // add tracks to score
            for (const trackId of this._tracksMapping) {
                if (!trackId) {
                    continue;
                }
                const track = this._tracksById.get(trackId);
                this.score.addTrack(track);
            }
            // process all masterbars
            let keySignature;
            for (const barIds of this._barsOfMasterBar) {
                // add all bars of masterbar vertically to all tracks
                let staffIndex = 0;
                keySignature = [KeySignature.C, KeySignatureType.Major];
                for (let barIndex = 0, trackIndex = 0; barIndex < barIds.length && trackIndex < this.score.tracks.length; barIndex++) {
                    const barId = barIds[barIndex];
                    if (barId !== GpifParser.InvalidId) {
                        const bar = this._barsById.get(barId);
                        const track = this.score.tracks[trackIndex];
                        const staff = track.staves[staffIndex];
                        staff.addBar(bar);
                        const masterBarIndex = staff.bars.length - 1;
                        if (this._keySignatures.has(masterBarIndex)) {
                            keySignature = this._keySignatures.get(masterBarIndex);
                        }
                        bar.keySignature = keySignature[0];
                        bar.keySignatureType = keySignature[1];
                        if (this._doubleBars.has(bar.masterBar)) {
                            bar.barLineRight = BarLineStyle.LightLight;
                        }
                        if (this._voicesOfBar.has(barId)) {
                            // add voices to bars
                            for (const voiceId of this._voicesOfBar.get(barId)) {
                                if (voiceId !== GpifParser.InvalidId) {
                                    const voice = this._voiceById.get(voiceId);
                                    bar.addVoice(voice);
                                    if (this._beatsOfVoice.has(voiceId)) {
                                        // add beats to voices
                                        for (const beatId of this._beatsOfVoice.get(voiceId)) {
                                            if (beatId !== GpifParser.InvalidId) {
                                                // important! we clone the beat because beats get reused
                                                // in gp6, our model needs to have unique beats.
                                                const beat = BeatCloner.clone(this._beatById.get(beatId));
                                                voice.addBeat(beat);
                                                const rhythmId = this._rhythmOfBeat.get(beatId);
                                                const rhythm = this._rhythmById.get(rhythmId);
                                                // set beat duration
                                                beat.duration = rhythm.value;
                                                beat.dots = rhythm.dots;
                                                beat.tupletNumerator = rhythm.tupletNumerator;
                                                beat.tupletDenominator = rhythm.tupletDenominator;
                                                // add notes to beat
                                                if (this._notesOfBeat.has(beatId)) {
                                                    for (const noteId of this._notesOfBeat.get(beatId)) {
                                                        if (noteId !== GpifParser.InvalidId) {
                                                            const note = NoteCloner.clone(this._noteById.get(noteId));
                                                            // reset midi value for non-percussion staves
                                                            if (staff.isPercussion) {
                                                                note.fret = -1;
                                                                note.string = -1;
                                                            }
                                                            else {
                                                                note.percussionArticulation = -1;
                                                            }
                                                            beat.addNote(note);
                                                            if (this._tappedNotes.has(noteId)) {
                                                                beat.tap = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    // invalid voice -> empty voice
                                    const voice = new Voice$1();
                                    bar.addVoice(voice);
                                    const beat = new Beat();
                                    beat.isEmpty = true;
                                    beat.duration = Duration.Quarter;
                                    voice.addBeat(beat);
                                }
                            }
                        }
                        // stave is full? -> next track
                        if (staffIndex === track.staves.length - 1) {
                            trackIndex++;
                            staffIndex = 0;
                            keySignature = [KeySignature.C, KeySignatureType.Major];
                        }
                        else {
                            staffIndex++;
                            keySignature = [KeySignature.C, KeySignatureType.Major];
                        }
                    }
                    else {
                        // no bar for track
                        trackIndex++;
                    }
                }
            }
            // clear out percussion articulations where not needed
            // and add automations
            for (const trackId of this._tracksMapping) {
                if (!trackId) {
                    continue;
                }
                const track = this._tracksById.get(trackId);
                let hasPercussion = false;
                for (const staff of track.staves) {
                    if (staff.isPercussion) {
                        hasPercussion = true;
                        break;
                    }
                }
                if (!hasPercussion) {
                    track.percussionArticulations = [];
                }
                if (this._automationsPerTrackIdAndBarIndex.has(trackId)) {
                    const trackAutomations = this._automationsPerTrackIdAndBarIndex.get(trackId);
                    for (const [barNumber, automations] of trackAutomations) {
                        if (track.staves.length > 0 && barNumber < track.staves[0].bars.length) {
                            const bar = track.staves[0].bars[barNumber];
                            if (bar.voices.length > 0 && bar.voices[0].beats.length > 0) {
                                const beat = bar.voices[0].beats[0];
                                for (const a of automations) {
                                    // NOTE: currently the automations of a bar are applied to the
                                    // first beat of a bar
                                    beat.automations.push(a);
                                }
                            }
                        }
                    }
                }
                if (this._sustainPedalsPerTrackIdAndBarIndex.has(trackId)) {
                    const sustainPedals = this._sustainPedalsPerTrackIdAndBarIndex.get(trackId);
                    for (const [barNumber, markers] of sustainPedals) {
                        if (track.staves.length > 0 && barNumber < track.staves[0].bars.length) {
                            const bar = track.staves[0].bars[barNumber];
                            bar.sustainPedals = markers;
                        }
                    }
                }
            }
            // build masterbar automations
            for (const [barNumber, automations] of this._masterTrackAutomations) {
                const masterBar = this.score.masterBars[barNumber];
                for (let i = 0, j = automations.length; i < j; i++) {
                    const automation = automations[i];
                    switch (automation.type) {
                        case AutomationType.Tempo:
                            if (barNumber === 0) {
                                this.score.tempo = automation.value | 0;
                                if (automation.text) {
                                    this.score.tempoLabel = automation.text;
                                }
                            }
                            masterBar.tempoAutomations.push(automation);
                            break;
                        case AutomationType.SyncPoint:
                            automation.syncPointValue.millisecondOffset -= this._backingTrackPadding;
                            masterBar.addSyncPoint(automation);
                            break;
                    }
                }
            }
        }
    }
    GpifParser.InvalidId = '-1';
    /**
     * GPX range: 0-100
     * Internal range: 0 - 60
     */
    GpifParser.BendPointPositionFactor = BendPoint.MaxPosition / 100.0;
    /**
     * GPIF: 25 per quarternote
     * Internal Range: 1 per quarter note
     */
    GpifParser.BendPointValueFactor = 1 / 25.0;
    // tests have shown that Guitar Pro seem to always work with 44100hz for the frame offsets,
    // they are NOT using the sample rate of the input file. 
    // Downsampling a 44100hz ogg to 8000hz and using it in as audio track resulted in the same frame offset when placing sync points.
    GpifParser.SampleRate = 44100;

    // PartConfiguration File Format Notes.
    // Based off Guitar Pro 8
    // The file contains a serialized "Score View Collection" filled like this:
    // There is always 1 ScoreView holding a TrackViewGroup for each Track contained in the file. This is the multi-track layout.
    // Additionally there is 1 ScoreView individually for each track with only 1 TrackViewGroup of this Group.
    // The Guitar Pro UI seem to update both the multi-track and the single-track layouts when changing the displayed staves.
    // But technically it would support showing alternating staves in multi-track.
    // For the multi-rest flag the respective TrackViewGroups need to be respected.
    // File:
    //    int32 (big endian) | Number of Score Views
    //    ScoreView[]        | The individual score views
    //    int32 (big endian) | The index to the currently active view
    // ScoreView:
    //    1 byte (boolean)   | "Multi Rest" - Whether multiple bars with rests should be combined (Bar > Multi Rest option)
    //    int32 (big endian) | Number of following tems
    //    TrackViewGroup[]   | The individual track view groups
    // TrackViewGroup:
    //    1 byte             | Track View Group Type Bitflag
    //                       | 0th bit: showStandardNotation
    //                       | 1th bit: showTablature
    //                       | 2nd bit: showSlash
    //                       | 3rd bit: numberedNotation (GP8 feature - jiǎnpǔ  aka Chinese Number Notation)
    //                       | if no bits set -> activate standard notation
    //
    class PartConfigurationScoreView {
        constructor() {
            this.isMultiRest = false;
            this.trackViewGroups = [];
        }
    }
    class PartConfigurationTrackViewGroup {
        constructor() {
            this.showNumbered = false;
            this.showSlash = false;
            this.showStandardNotation = false;
            this.showTablature = false;
        }
    }
    class PartConfiguration {
        apply(score) {
            // for now we only look at the first score view which seem to hold
            // the config for all tracks.
            if (this.scoreViews.length > 0) {
                let trackIndex = 0;
                score.stylesheet.multiTrackMultiBarRest = this.scoreViews[0].isMultiRest;
                for (const trackConfig of this.scoreViews[0].trackViewGroups) {
                    if (trackIndex < score.tracks.length) {
                        const track = score.tracks[trackIndex];
                        for (const staff of track.staves) {
                            staff.showTablature = trackConfig.showTablature;
                            staff.showStandardNotation = trackConfig.showStandardNotation;
                            staff.showSlash = trackConfig.showSlash;
                            staff.showNumbered = trackConfig.showNumbered;
                        }
                    }
                    trackIndex++;
                }
                for (let scoreViewIndex = 1; scoreViewIndex < this.scoreViews.length; scoreViewIndex++) {
                    if (this.scoreViews[scoreViewIndex].isMultiRest) {
                        // lazy init
                        if (!score.stylesheet.perTrackMultiBarRest) {
                            score.stylesheet.perTrackMultiBarRest = new Set();
                        }
                        trackIndex = scoreViewIndex - 1;
                        score.stylesheet.perTrackMultiBarRest.add(trackIndex);
                    }
                }
            }
        }
        constructor(partConfigurationData) {
            this.scoreViews = [];
            const readable = ByteBuffer.fromBuffer(partConfigurationData);
            const scoreViewCount = IOHelper.readInt32BE(readable);
            for (let i = 0; i < scoreViewCount; i++) {
                const scoreView = new PartConfigurationScoreView();
                this.scoreViews.push(scoreView);
                scoreView.isMultiRest = GpBinaryHelpers.gpReadBool(readable);
                const trackViewGroupCount = IOHelper.readInt32BE(readable);
                for (let j = 0; j < trackViewGroupCount; j++) {
                    let flags = readable.readByte();
                    // enable at least standard notation
                    if (flags === 0) {
                        flags = 1;
                    }
                    const trackConfiguration = new PartConfigurationTrackViewGroup();
                    trackConfiguration.showStandardNotation = (flags & 0x01) !== 0;
                    trackConfiguration.showTablature = (flags & 0x02) !== 0;
                    trackConfiguration.showSlash = (flags & 0x04) !== 0;
                    trackConfiguration.showNumbered = (flags & 0x08) !== 0;
                    scoreView.trackViewGroups.push(trackConfiguration);
                }
            }
        }
        static writeForScore(score) {
            const writer = ByteBuffer.withCapacity(128);
            const scoreViews = [
                new PartConfigurationScoreView() // Multi Track Score View
            ];
            scoreViews[0].isMultiRest = score.stylesheet.multiTrackMultiBarRest;
            for (const track of score.tracks) {
                const trackConfiguration = new PartConfigurationTrackViewGroup();
                // NOTE: unclear how multi staff settings are meant in this format
                // in the Guitar Pro UI there is no individual staff config
                trackConfiguration.showStandardNotation = track.staves[0].showStandardNotation;
                trackConfiguration.showTablature = track.staves[0].showTablature;
                trackConfiguration.showSlash = track.staves[0].showSlash;
                trackConfiguration.showNumbered = track.staves[0].showNumbered;
                scoreViews[0].trackViewGroups.push(trackConfiguration);
                const singleTrackScoreView = new PartConfigurationScoreView();
                singleTrackScoreView.isMultiRest = score.stylesheet.perTrackMultiBarRest?.has(track.index) === true;
                singleTrackScoreView.trackViewGroups.push(trackConfiguration);
                scoreViews.push(singleTrackScoreView);
            }
            IOHelper.writeInt32BE(writer, scoreViews.length);
            for (const part of scoreViews) {
                writer.writeByte(part.isMultiRest ? 1 : 0);
                IOHelper.writeInt32BE(writer, part.trackViewGroups.length);
                for (const track of part.trackViewGroups) {
                    let flags = 0;
                    if (track.showStandardNotation) {
                        flags = flags | 0x01;
                    }
                    if (track.showTablature) {
                        flags = flags | 0x02;
                    }
                    if (track.showSlash) {
                        flags = flags | 0x04;
                    }
                    if (track.showNumbered) {
                        flags = flags | 0x08;
                    }
                    writer.writeByte(flags);
                }
            }
            IOHelper.writeInt32BE(writer, 1 /* First Single Track Layout */);
            return writer.toArray();
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    let Huffman$1 = class Huffman {
    };
    class Found extends Huffman$1 {
        constructor(n) {
            super();
            this.n = n;
        }
    }
    class NeedBit extends Huffman$1 {
        constructor(left, right) {
            super();
            this.left = left;
            this.right = right;
        }
    }
    class NeedBits extends Huffman$1 {
        constructor(n, table) {
            super();
            this.n = n;
            this.table = table;
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    // This Inflater is based on the Zip Reader of the Haxe Standard Library (MIT)
    class HuffTools {
        static make(lengths, pos, nlengths, maxbits) {
            const counts = [];
            const tmp = [];
            if (maxbits > 32) {
                throw new FormatError('Invalid huffman');
            }
            for (let i = 0; i < maxbits; i++) {
                counts.push(0);
                tmp.push(0);
            }
            for (let i = 0; i < nlengths; i++) {
                const p = lengths[i + pos];
                if (p >= maxbits) {
                    throw new FormatError('Invalid huffman');
                }
                counts[p]++;
            }
            let code = 0;
            for (let i = 1; i < maxbits - 1; i++) {
                code = (code + counts[i]) << 1;
                tmp[i] = code;
            }
            const bits = new Map();
            for (let i = 0; i < nlengths; i++) {
                const l = lengths[i + pos];
                if (l !== 0) {
                    const n = tmp[l - 1];
                    tmp[l - 1] = n + 1;
                    bits.set((n << 5) | l, i);
                }
            }
            return HuffTools.treeCompress(new NeedBit(HuffTools.treeMake(bits, maxbits, 0, 1), HuffTools.treeMake(bits, maxbits, 1, 1)));
        }
        static treeMake(bits, maxbits, v, len) {
            if (len > maxbits) {
                throw new FormatError('Invalid huffman');
            }
            const idx = (v << 5) | len;
            if (bits.has(idx)) {
                return new Found(bits.get(idx));
            }
            v = v << 1;
            len += 1;
            return new NeedBit(HuffTools.treeMake(bits, maxbits, v, len), HuffTools.treeMake(bits, maxbits, v | 1, len));
        }
        static treeCompress(t) {
            const d = HuffTools.treeDepth(t);
            if (d === 0) {
                return t;
            }
            if (d === 1) {
                if (t instanceof NeedBit) {
                    return new NeedBit(HuffTools.treeCompress(t.left), HuffTools.treeCompress(t.right));
                }
                throw new FormatError('assert');
            }
            const size = 1 << d;
            const table = [];
            for (let i = 0; i < size; i++) {
                table.push(new Found(-1));
            }
            HuffTools.treeWalk(table, 0, 0, d, t);
            return new NeedBits(d, table);
        }
        static treeWalk(table, p, cd, d, t) {
            if (t instanceof NeedBit) {
                if (d > 0) {
                    HuffTools.treeWalk(table, p, cd + 1, d - 1, t.left);
                    HuffTools.treeWalk(table, p | (1 << cd), cd + 1, d - 1, t.right);
                }
                else {
                    table[p] = HuffTools.treeCompress(t);
                }
            }
            else {
                table[p] = HuffTools.treeCompress(t);
            }
        }
        static treeDepth(t) {
            if (t instanceof Found) {
                return 0;
            }
            if (t instanceof NeedBits) {
                throw new FormatError('assert');
            }
            if (t instanceof NeedBit) {
                const da = HuffTools.treeDepth(t.left);
                const db = HuffTools.treeDepth(t.right);
                return 1 + (da < db ? da : db);
            }
            return 0;
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    var InflateState;
    (function (InflateState) {
        InflateState[InflateState["Head"] = 0] = "Head";
        InflateState[InflateState["Block"] = 1] = "Block";
        InflateState[InflateState["CData"] = 2] = "CData";
        InflateState[InflateState["Flat"] = 3] = "Flat";
        InflateState[InflateState["Crc"] = 4] = "Crc";
        InflateState[InflateState["Dist"] = 5] = "Dist";
        InflateState[InflateState["DistOne"] = 6] = "DistOne";
        InflateState[InflateState["Done"] = 7] = "Done";
    })(InflateState || (InflateState = {}));
    class InflateWindow {
        constructor() {
            this.buffer = new Uint8Array(InflateWindow.BufferSize);
            this.pos = 0;
        }
        slide() {
            const b = new Uint8Array(InflateWindow.BufferSize);
            this.pos -= InflateWindow.Size;
            b.set(this.buffer.subarray(InflateWindow.Size, InflateWindow.Size + this.pos), 0);
            this.buffer = b;
        }
        addBytes(b, p, len) {
            if (this.pos + len > InflateWindow.BufferSize) {
                this.slide();
            }
            this.buffer.set(b.subarray(p, p + len), this.pos);
            this.pos += len;
        }
        addByte(c) {
            if (this.pos === InflateWindow.BufferSize) {
                this.slide();
            }
            this.buffer[this.pos] = c;
            this.pos++;
        }
        getLastChar() {
            return this.buffer[this.pos - 1];
        }
        available() {
            return this.pos;
        }
    }
    InflateWindow.Size = 1 << 15;
    InflateWindow.BufferSize = 1 << 16;
    class Inflate {
        static buildFixedHuffman() {
            const a = [];
            for (let n = 0; n < 288; n++) {
                a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
            }
            return HuffTools.make(a, 0, 288, 10);
        }
        constructor(readable) {
            this._nbits = 0;
            this._bits = 0;
            this._state = InflateState.Block;
            this._isFinal = false;
            this._huffman = Inflate._fixedHuffman;
            this._huffdist = null;
            this._len = 0;
            this._dist = 0;
            this._needed = 0;
            this._output = null;
            this._outpos = 0;
            this._lengths = [];
            this._window = new InflateWindow();
            this._input = readable;
            for (let i = 0; i < 19; i++) {
                this._lengths.push(-1);
            }
        }
        readBytes(b, pos, len) {
            this._needed = len;
            this._outpos = pos;
            this._output = b;
            if (len > 0) {
                while (this.inflateLoop()) {
                }
            }
            return len - this._needed;
        }
        inflateLoop() {
            switch (this._state) {
                case InflateState.Head:
                    const cmf = this._input.readByte();
                    const cm = cmf & 15;
                    if (cm !== 8) {
                        throw new FormatError('Invalid data');
                    }
                    const flg = this._input.readByte();
                    // var fcheck = flg & 31;
                    const fdict = (flg & 32) !== 0;
                    // var flevel = flg >> 6;
                    if (((cmf << 8) + flg) % 31 !== 0) {
                        throw new FormatError('Invalid data');
                    }
                    if (fdict) {
                        throw new FormatError('Unsupported dictionary');
                    }
                    this._state = InflateState.Block;
                    return true;
                case InflateState.Crc:
                    this._state = InflateState.Done;
                    return true;
                case InflateState.Done:
                    // nothing
                    return false;
                case InflateState.Block:
                    this._isFinal = this.getBit();
                    switch (this.getBits(2)) {
                        case 0:
                            this._len = IOHelper.readUInt16LE(this._input);
                            const nlen = IOHelper.readUInt16LE(this._input);
                            if (nlen !== 0xffff - this._len) {
                                throw new FormatError('Invalid data');
                            }
                            this._state = InflateState.Flat;
                            const r = this.inflateLoop();
                            this.resetBits();
                            return r;
                        case 1:
                            this._huffman = Inflate._fixedHuffman;
                            this._huffdist = null;
                            this._state = InflateState.CData;
                            return true;
                        case 2:
                            const hlit = this.getBits(5) + 257;
                            const hdist = this.getBits(5) + 1;
                            const hclen = this.getBits(4) + 4;
                            for (let i = 0; i < hclen; i++) {
                                this._lengths[Inflate.CodeLengthsPos[i]] = this.getBits(3);
                            }
                            for (let i = hclen; i < 19; i++) {
                                this._lengths[Inflate.CodeLengthsPos[i]] = 0;
                            }
                            this._huffman = HuffTools.make(this._lengths, 0, 19, 8);
                            const xlengths = [];
                            for (let i = 0; i < hlit + hdist; i++) {
                                xlengths.push(0);
                            }
                            this.inflateLengths(xlengths, hlit + hdist);
                            this._huffdist = HuffTools.make(xlengths, hlit, hdist, 16);
                            this._huffman = HuffTools.make(xlengths, 0, hlit, 16);
                            this._state = InflateState.CData;
                            return true;
                        default:
                            throw new FormatError('Invalid data');
                    }
                case InflateState.Flat: {
                    const rlen = this._len < this._needed ? this._len : this._needed;
                    const bytes = IOHelper.readByteArray(this._input, rlen);
                    this._len -= rlen;
                    this.addBytes(bytes, 0, rlen);
                    if (this._len === 0) {
                        this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                    }
                    return this._needed > 0;
                }
                case InflateState.DistOne: {
                    const rlen = this._len < this._needed ? this._len : this._needed;
                    this.addDistOne(rlen);
                    this._len -= rlen;
                    if (this._len === 0) {
                        this._state = InflateState.CData;
                    }
                    return this._needed > 0;
                }
                case InflateState.Dist:
                    while (this._len > 0 && this._needed > 0) {
                        const rdist = this._len < this._dist ? this._len : this._dist;
                        const rlen = this._needed < rdist ? this._needed : rdist;
                        this.addDist(this._dist, rlen);
                        this._len -= rlen;
                    }
                    if (this._len === 0) {
                        this._state = InflateState.CData;
                    }
                    return this._needed > 0;
                case InflateState.CData:
                    let n = this.applyHuffman(this._huffman);
                    if (n < 256) {
                        this.addByte(n);
                        return this._needed > 0;
                    }
                    if (n === 256) {
                        this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                        return true;
                    }
                    n = (n - 257) & 0xff;
                    let extraBits = Inflate.LenExtraBitsTbl[n];
                    if (extraBits === -1) {
                        throw new FormatError('Invalid data');
                    }
                    this._len = Inflate.LenBaseValTbl[n] + this.getBits(extraBits);
                    const huffdist = this._huffdist;
                    const distCode = !huffdist ? this.getRevBits(5) : this.applyHuffman(huffdist);
                    extraBits = Inflate.DistExtraBitsTbl[distCode];
                    if (extraBits === -1) {
                        throw new FormatError('Invalid data');
                    }
                    this._dist = Inflate.DistBaseValTbl[distCode] + this.getBits(extraBits);
                    if (this._dist > this._window.available()) {
                        throw new FormatError('Invalid data');
                    }
                    this._state = this._dist === 1 ? InflateState.DistOne : InflateState.Dist;
                    return true;
            }
            return false;
        }
        addDistOne(n) {
            const c = this._window.getLastChar();
            for (let i = 0; i < n; i++) {
                this.addByte(c);
            }
        }
        addByte(b) {
            this._window.addByte(b);
            this._output[this._outpos] = b;
            this._needed--;
            this._outpos++;
        }
        addDist(d, len) {
            this.addBytes(this._window.buffer, this._window.pos - d, len);
        }
        getBit() {
            if (this._nbits === 0) {
                this._nbits = 8;
                this._bits = this._input.readByte();
            }
            const b = (this._bits & 1) === 1;
            this._nbits--;
            this._bits = this._bits >> 1;
            return b;
        }
        getBits(n) {
            while (this._nbits < n) {
                this._bits = this._bits | (this._input.readByte() << this._nbits);
                this._nbits += 8;
            }
            const b = this._bits & ((1 << n) - 1);
            this._nbits -= n;
            this._bits = this._bits >> n;
            return b;
        }
        getRevBits(n) {
            return n === 0 ? 0 : this.getBit() ? (1 << (n - 1)) | this.getRevBits(n - 1) : this.getRevBits(n - 1);
        }
        resetBits() {
            this._bits = 0;
            this._nbits = 0;
        }
        addBytes(b, p, len) {
            this._window.addBytes(b, p, len);
            this._output.set(b.subarray(p, p + len), this._outpos);
            this._needed -= len;
            this._outpos += len;
        }
        inflateLengths(a, max) {
            let i = 0;
            let prev = 0;
            while (i < max) {
                const n = this.applyHuffman(this._huffman);
                switch (n) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        prev = n;
                        a[i] = n;
                        i++;
                        break;
                    case 16:
                        const end = i + 3 + this.getBits(2);
                        if (end > max) {
                            throw new FormatError('Invalid data');
                        }
                        while (i < end) {
                            a[i] = prev;
                            i++;
                        }
                        break;
                    case 17:
                        i += 3 + this.getBits(3);
                        if (i > max) {
                            throw new FormatError('Invalid data');
                        }
                        break;
                    case 18:
                        i += 11 + this.getBits(7);
                        if (i > max) {
                            throw new FormatError('Invalid data');
                        }
                        break;
                    default: {
                        throw new FormatError('Invalid data');
                    }
                }
            }
        }
        applyHuffman(h) {
            if (h instanceof Found) {
                return h.n;
            }
            if (h instanceof NeedBit) {
                return this.applyHuffman(this.getBit() ? h.right : h.left);
            }
            if (h instanceof NeedBits) {
                return this.applyHuffman(h.table[this.getBits(h.n)]);
            }
            throw new FormatError('Invalid data');
        }
    }
    // prettier-ignore
    Inflate.LenExtraBitsTbl = [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1
    ];
    // prettier-ignore
    Inflate.LenBaseValTbl = [
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227,
        258
    ];
    // prettier-ignore
    Inflate.DistExtraBitsTbl = [
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1
    ];
    // prettier-ignore
    Inflate.DistBaseValTbl = [
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097,
        6145, 8193, 12289, 16385, 24577
    ];
    // prettier-ignore
    Inflate.CodeLengthsPos = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    Inflate._fixedHuffman = Inflate.buildFixedHuffman();

    class ZipEntry {
        constructor(fullName, data) {
            this.fullName = fullName;
            const i = fullName.lastIndexOf('/');
            this.fileName = i === -1 || i === fullName.length - 1 ? this.fullName : fullName.substr(i + 1);
            this.data = data;
        }
    }
    ZipEntry.OptionalDataDescriptorSignature = 0x08074b50;
    ZipEntry.CompressionMethodDeflate = 8;
    ZipEntry.LocalFileHeaderSignature = 0x04034b50;
    ZipEntry.CentralFileHeaderSignature = 0x02014b50;
    ZipEntry.EndOfCentralDirSignature = 0x06054b50;

    class ZipReader {
        constructor(readable) {
            this._readable = readable;
        }
        read() {
            const entries = [];
            while (true) {
                const e = this.readEntry();
                if (!e) {
                    break;
                }
                entries.push(e);
            }
            return entries;
        }
        readEntry() {
            const readable = this._readable;
            const h = IOHelper.readInt32LE(readable);
            if (h !== ZipEntry.LocalFileHeaderSignature) {
                return null;
            }
            // 4.3.7 local file header
            IOHelper.readUInt16LE(readable); // version
            const flags = IOHelper.readUInt16LE(readable);
            const compressionMethod = IOHelper.readUInt16LE(readable);
            const compressed = compressionMethod !== 0;
            if (compressed && compressionMethod !== ZipEntry.CompressionMethodDeflate) {
                return null;
            }
            IOHelper.readInt16LE(this._readable); // last mod file time
            IOHelper.readInt16LE(this._readable); // last mod file date
            IOHelper.readInt32LE(readable); // crc-32
            IOHelper.readInt32LE(readable); // compressed size
            const uncompressedSize = IOHelper.readInt32LE(readable);
            const fileNameLength = IOHelper.readInt16LE(readable);
            const extraFieldLength = IOHelper.readInt16LE(readable);
            const fname = IOHelper.toString(IOHelper.readByteArray(readable, fileNameLength), 'utf-8');
            readable.skip(extraFieldLength);
            // 4.3.8 File Data
            let data;
            if (compressed) {
                const target = ByteBuffer.empty();
                const z = new Inflate(this._readable);
                const buffer = new Uint8Array(65536);
                while (true) {
                    const bytes = z.readBytes(buffer, 0, buffer.length);
                    target.write(buffer, 0, bytes);
                    if (bytes < buffer.length) {
                        break;
                    }
                }
                data = target.toArray();
            }
            else {
                data = IOHelper.readByteArray(this._readable, uncompressedSize);
            }
            // 4.3.9 Data Descriptor
            // 4.3.9.1
            if ((flags & 8) !== 0) {
                const crc32 = IOHelper.readInt32LE(this._readable);
                // 4.3.9.3
                if (crc32 === ZipEntry.OptionalDataDescriptorSignature) {
                    IOHelper.readInt32LE(this._readable); // real crc
                }
                IOHelper.readInt32LE(this._readable); // compressed size
                IOHelper.readInt32LE(this._readable); // uncompressed size
            }
            return new ZipEntry(fname, data);
        }
    }

    // PartConfiguration File Format Notes.
    // Based off Guitar Pro 8
    // The LayoutConfiguration is aligned with the data in the PartConfiguration.
    // We haven't fully deciphered how they handle everything but its enough for our needs.
    // File:
    //    int32 (big endian) | Zoom Level encoded
    //                       |   25% - 00 00 00 00
    //                       |   50% - 00 00 00 01
    //                       |   75% - 00 00 00 02
    //                       |   90% - 00 00 00 03
    //                       |   100% - 00 00 00 04
    //                       |   110% - 00 00 00 05
    //                       |   125% - 00 00 00 06
    //                       |   150% - 00 00 00 07
    //                       |   200% - 00 00 00 08
    //                       |   300% - 00 00 00 08 (same as 200% -> strange)
    //                       |   400% - 00 00 00 09
    //                       |   800% - 00 00 00 0A
    //                       |   Custom 69% - 00 00 00 02 (same as 75% -> closest match on 25% steps?)
    //                       |   Custom 113% - 00 00 00 05 (same as 110%  -> closest match on 25% steps?)
    //                       |   Fit To Page- 00 00 00 08 (same as 200% -> strange)
    //                       |   Fit To width- 00 00 00 08 (same as 200% -> strange)
    //    1 byte (enum)      | The main score view to use.
    //                       |   0x00 -> Page - Vertical,
    //                       |   0x01 -> Page - Grid,
    //                       |   0x02 -> Page - Parchment,
    //                       |   0x03 -> Screen - Vertical,
    //                       |   0x04 -> Screen - Horizontal,
    //                       |   0x05 -> Page - Horizontal
    //    1 byte (bool)      | MultiVoice Cursor (CTRL+M)
    //    ScoreView[]        | Data for all score views (number is aligned with PartConfiguration)
    // ScoreView:
    //    TrackViewGroup[]   | The individual track view groups (number is aligned with PartConfiguration)
    // TrackViewGroup:
    //    1 byte (bool)      | isVisible (true -> 0xFF, false -> 0x00)
    class LayoutConfigurationScoreView {
        constructor() {
            this.trackViewGroups = [];
        }
    }
    class LayoutConfigurationTrackViewGroup {
        constructor() {
            this.isVisible = false;
        }
    }
    var GuitarProView;
    (function (GuitarProView) {
        GuitarProView[GuitarProView["PageVertical"] = 0] = "PageVertical";
        GuitarProView[GuitarProView["PageGrid"] = 1] = "PageGrid";
        GuitarProView[GuitarProView["PageParchment"] = 2] = "PageParchment";
        GuitarProView[GuitarProView["ScreenVertical"] = 3] = "ScreenVertical";
        GuitarProView[GuitarProView["ScreenHorizontal"] = 4] = "ScreenHorizontal";
        GuitarProView[GuitarProView["PageHorizontal"] = 5] = "PageHorizontal";
    })(GuitarProView || (GuitarProView = {}));
    class LayoutConfiguration {
        constructor(partConfiguration, layoutConfigurationData) {
            this.zoomLevel = 4;
            this.view = GuitarProView.PageVertical;
            this.muiltiVoiceCursor = false;
            this.scoreViews = [];
            const readable = ByteBuffer.fromBuffer(layoutConfigurationData);
            this.zoomLevel = IOHelper.readInt32BE(readable);
            this.view = readable.readByte();
            this.muiltiVoiceCursor = readable.readByte() !== 0;
            const scoreViewCount = partConfiguration.scoreViews.length;
            for (let i = 0; i < scoreViewCount; i++) {
                const scoreView = new LayoutConfigurationScoreView();
                this.scoreViews.push(scoreView);
                const partScoreView = partConfiguration.scoreViews[i];
                for (let j = 0; j < partScoreView.trackViewGroups.length; j++) {
                    const trackViewGroup = new LayoutConfigurationTrackViewGroup();
                    trackViewGroup.isVisible = readable.readByte() !== 0;
                    scoreView.trackViewGroups.push(trackViewGroup);
                }
            }
        }
        apply(score) {
            if (this.scoreViews.length > 0) {
                let trackIndex = 0;
                for (const trackConfig of this.scoreViews[0].trackViewGroups) {
                    if (trackIndex < score.tracks.length) {
                        const track = score.tracks[trackIndex];
                        track.isVisibleOnMultiTrack = trackConfig.isVisible;
                    }
                    trackIndex++;
                }
            }
        }
        static writeForScore(score) {
            const writer = ByteBuffer.withCapacity(128);
            IOHelper.writeInt32BE(writer, 4); // 100% Zoom
            writer.writeByte(0x00); // Page - Vertical
            const isMultiVoice = score.tracks.length > 0 && score.tracks[0].staves[0].bars[0].isMultiVoice;
            writer.writeByte(isMultiVoice ? 0xff : 0x00);
            // ScoreView[0] => Multi Track Score View
            for (const track of score.tracks) {
                writer.writeByte(track.isVisibleOnMultiTrack ? 0xff : 0x00);
            }
            // Single Track Views for each track
            for (const _track of score.tracks) {
                writer.writeByte(0xff);
            }
            return writer.toArray();
        }
    }

    /**
     * This ScoreImporter can read Guitar Pro 7 and 8 (gp) files.
     */
    class Gp7To8Importer extends ScoreImporter {
        get name() {
            return 'Guitar Pro 7-8';
        }
        readScore() {
            // at first we need to load the binary file system
            // from the GPX container
            Logger.debug(this.name, 'Loading ZIP entries');
            const fileSystem = new ZipReader(this.data);
            let entries;
            try {
                entries = fileSystem.read();
            }
            catch (e) {
                throw new UnsupportedFormatError('No Zip archive', e);
            }
            Logger.debug(this.name, 'Zip entries loaded');
            let xml = null;
            let binaryStylesheetData = null;
            let partConfigurationData = null;
            let layoutConfigurationData = null;
            const entryLookup = new Map();
            for (const entry of entries) {
                entryLookup.set(entry.fullName, entry);
                switch (entry.fileName) {
                    case 'score.gpif':
                        xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                        break;
                    case 'BinaryStylesheet':
                        binaryStylesheetData = entry.data;
                        break;
                    case 'PartConfiguration':
                        partConfigurationData = entry.data;
                        break;
                    case 'LayoutConfiguration':
                        layoutConfigurationData = entry.data;
                        break;
                }
            }
            if (!xml) {
                throw new UnsupportedFormatError('No score.gpif found in zip archive');
            }
            // the score.gpif file within this filesystem stores
            // the score information as XML we need to parse.
            Logger.debug(this.name, 'Start Parsing score.gpif');
            const gpifParser = new GpifParser();
            gpifParser.loadAsset = (fileName) => {
                if (entryLookup.has(fileName)) {
                    return entryLookup.get(fileName).data;
                }
                return undefined;
            };
            gpifParser.parseXml(xml, this.settings);
            Logger.debug(this.name, 'score.gpif parsed');
            const score = gpifParser.score;
            if (binaryStylesheetData) {
                Logger.debug(this.name, 'Start Parsing BinaryStylesheet');
                const stylesheet = new BinaryStylesheet(binaryStylesheetData);
                stylesheet.apply(score);
                Logger.debug(this.name, 'BinaryStylesheet parsed');
            }
            let partConfigurationParser = null;
            if (partConfigurationData) {
                Logger.debug(this.name, 'Start Parsing Part Configuration');
                partConfigurationParser = new PartConfiguration(partConfigurationData);
                partConfigurationParser.apply(score);
                Logger.debug(this.name, 'Part Configuration parsed');
            }
            if (layoutConfigurationData && partConfigurationParser != null) {
                Logger.debug(this.name, 'Start Parsing Layout Configuration');
                const layoutConfigurationParser = new LayoutConfiguration(partConfigurationParser, layoutConfigurationData);
                layoutConfigurationParser.apply(score);
                Logger.debug(this.name, 'Layout Configuration parsed');
            }
            return score;
        }
    }

    class EndOfReaderError extends AlphaTabError {
        constructor() {
            super(exports.AlphaTabErrorType.Format, 'Unexpected end of data within reader');
            Object.setPrototypeOf(this, EndOfReaderError.prototype);
        }
    }

    /**
     * This utility public class allows bitwise reading of a stream
     */
    class BitReader {
        constructor(source) {
            this._currentByte = 0;
            this._position = BitReader.ByteSize;
            this._source = source;
        }
        readByte() {
            return this.readBits(8);
        }
        readBytes(count) {
            const bytes = new Uint8Array(count);
            for (let i = 0; i < count; i++) {
                bytes[i] = this.readByte() & 0xff;
            }
            return bytes;
        }
        readBits(count) {
            let bits = 0;
            let i = count - 1;
            while (i >= 0) {
                bits = bits | (this.readBit() << i);
                i--;
            }
            return bits;
        }
        readBitsReversed(count) {
            let bits = 0;
            for (let i = 0; i < count; i++) {
                bits = bits | (this.readBit() << i);
            }
            return bits;
        }
        readBit() {
            // need a new byte?
            if (this._position >= 8) {
                this._currentByte = this._source.readByte();
                if (this._currentByte === -1) {
                    throw new EndOfReaderError();
                }
                this._position = 0;
            }
            // shift the desired byte to the least significant bit and
            // get the value using masking
            const value = (this._currentByte >> (BitReader.ByteSize - this._position - 1)) & 0x01;
            this._position++;
            return value;
        }
        readAll() {
            const all = ByteBuffer.empty();
            try {
                while (true) {
                    all.writeByte(this.readByte() & 0xff);
                }
            }
            catch (e) {
                if (!(e instanceof EndOfReaderError)) {
                    throw e;
                }
            }
            return all.toArray();
        }
    }
    BitReader.ByteSize = 8;

    /**
     * this public class represents a file within the GpxFileSystem
     */
    class GpxFile {
        constructor() {
            this.fileName = '';
            this.fileSize = 0;
            this.data = null;
        }
    }
    /**
     * This public class represents the file system structure
     * stored within a GPX container file.
     */
    class GpxFileSystem {
        /**
         * Creates a new GpxFileSystem instance
         */
        constructor() {
            /**
             * Gets the list of files stored in this FileSystem.
             */
            this.files = [];
            this.files = [];
            this.fileFilter = s => {
                return true;
            };
        }
        /**
         * Load a complete FileSystem to the memory.
         * @param s the binary source to read from.
         * @returns
         */
        load(s) {
            const src = new BitReader(s);
            this.readBlock(src);
        }
        /**
         * Reads the 4 byte header as a string.
         * @param src the BitInput to read from
         * @returns a string with 4 characters representing the header.
         */
        readHeader(src) {
            return this.getString(src.readBytes(4), 0, 4);
        }
        /**
         * Decompresses the given bitinput using the GPX compression format. Only use this method
         * if you are sure the binary data is compressed using the GPX format. Otherwise unexpected
         * behavior can occure.
         * @param src the bitInput to read the data from
         * @param skipHeader true if the header should NOT be included in the result byteset, otherwise false
         * @returns the decompressed byte data. if skipHeader is set to false the BCFS header is included.
         */
        decompress(src, skipHeader = false) {
            const uncompressed = ByteBuffer.empty();
            let buffer;
            const expectedLength = this.getInteger(src.readBytes(4), 0);
            try {
                // as long we reach our expected length we try to decompress, a EOF might occure.
                while (uncompressed.length < expectedLength) {
                    // compression flag
                    const flag = src.readBits(1);
                    if (flag === 1) {
                        // get offset and size of the content we need to read.
                        // compressed does mean we already have read the data and need
                        // to copy it from our uncompressed buffer to the end
                        const wordSize = src.readBits(4);
                        const offset = src.readBitsReversed(wordSize);
                        const size = src.readBitsReversed(wordSize);
                        // the offset is relative to the end
                        const sourcePosition = uncompressed.length - offset;
                        const toRead = Math.min(offset, size);
                        // get the subbuffer storing the data and add it again to the end
                        buffer = uncompressed.getBuffer();
                        uncompressed.write(buffer, sourcePosition, toRead);
                    }
                    else {
                        // on raw content we need to read the data from the source buffer
                        const size = src.readBitsReversed(2);
                        for (let i = 0; i < size; i++) {
                            uncompressed.writeByte(src.readByte());
                        }
                    }
                }
            }
            catch (e) {
                if (!(e instanceof EndOfReaderError)) {
                    throw e;
                }
            }
            buffer = uncompressed.getBuffer();
            const resultOffset = skipHeader ? 4 : 0;
            const resultSize = uncompressed.length - resultOffset;
            const result = new Uint8Array(resultSize);
            const count = resultSize;
            result.set(buffer.subarray(resultOffset, resultOffset + count), 0);
            return result;
        }
        /**
         * Reads a block from the given data source.
         * @param data the data source
         * @returns
         */
        readBlock(data) {
            const header = this.readHeader(data);
            if (header === 'BCFZ') {
                // decompress the data and use this
                // we will skip the header
                this.readUncompressedBlock(this.decompress(data, true));
            }
            else if (header === 'BCFS') {
                this.readUncompressedBlock(data.readAll());
            }
            else {
                throw new UnsupportedFormatError('Unsupported format');
            }
        }
        /**
         * Reads an uncompressed data block into the model.
         * @param data the data store to read from.
         */
        readUncompressedBlock(data) {
            // the uncompressed block contains a list of filesystem entires
            // as long we have data we will try to read more entries
            // the first sector (0x1000 bytes) is empty (filled with 0xFF)
            // so the first sector starts at 0x1000
            // (we already skipped the 4 byte header so we don't have to take care of this)
            const sectorSize = 0x1000;
            let offset = sectorSize;
            // we always need 4 bytes (+3 including offset) to read the type
            while (offset + 3 < data.length) {
                const entryType = this.getInteger(data, offset);
                if (entryType === 2) {
                    // file structure:
                    //   offset |   type   |   size   | what
                    //  --------+----------+----------+------
                    //    0x04  |  string  |  127byte | FileName (zero terminated)
                    //    0x83  |    ?     |    9byte | Unknown
                    //    0x8c  |   int    |    4byte | FileSize
                    //    0x90  |    ?     |    4byte | Unknown
                    //    0x94  |   int[]  |  n*4byte | Indices of the sector containing the data (end is marked with 0)
                    // The sectors marked at 0x94 are absolutely positioned ( 1*0x1000 is sector 1, 2*0x1000 is sector 2,...)
                    const file = new GpxFile();
                    file.fileName = this.getString(data, offset + 0x04, 127);
                    file.fileSize = this.getInteger(data, offset + 0x8c);
                    // store file if needed
                    const storeFile = !this.fileFilter || this.fileFilter(file.fileName);
                    if (storeFile) {
                        this.files.push(file);
                    }
                    // we need to iterate the blocks because we need to move after the last datasector
                    const dataPointerOffset = offset + 0x94;
                    let sector = 0;
                    // this var is storing the sector index
                    let sectorCount = 0;
                    // we're keeping count so we can calculate the offset of the array item
                    // as long we have data blocks we need to iterate them,
                    const fileData = storeFile ? ByteBuffer.withCapacity(file.fileSize) : null;
                    while (true) {
                        sector = this.getInteger(data, dataPointerOffset + 4 * sectorCount++);
                        if (sector !== 0) {
                            // the next file entry starts after the last data sector so we
                            // move the offset along
                            offset = sector * sectorSize;
                            // write data only if needed
                            if (storeFile) {
                                fileData.write(data, offset, sectorSize);
                            }
                        }
                        else {
                            break;
                        }
                    }
                    if (storeFile) {
                        // trim data to filesize if needed
                        file.data = new Uint8Array(Math.min(file.fileSize, fileData.length));
                        // we can use the getBuffer here because we are intelligent and know not to read the empty data.
                        const raw = fileData.toArray();
                        file.data.set(raw.subarray(0, 0 + file.data.length), 0);
                    }
                }
                // let's move to the next sector
                offset += sectorSize;
            }
        }
        /**
         * Reads a zeroterminated ascii string from the given source
         * @param data the data source to read from
         * @param offset the offset to start reading from
         * @param length the max length to read
         * @returns the ascii string read from the datasource.
         */
        getString(data, offset, length) {
            let buf = '';
            for (let i = 0; i < length; i++) {
                const code = data[offset + i] & 0xff;
                if (code === 0) {
                    break;
                }
                buf += String.fromCharCode(code);
            }
            return buf;
        }
        /**
         * Reads an 4 byte signed integer from the given source
         * @param data the data source to read from
         * @param offset offset the offset to start reading from
         * @returns
         */
        getInteger(data, offset) {
            return (data[offset + 3] << 24) | (data[offset + 2] << 16) | (data[offset + 1] << 8) | data[offset];
        }
    }
    GpxFileSystem.HeaderBcFs = 'BCFS';
    GpxFileSystem.HeaderBcFz = 'BCFZ';

    /**
     * This ScoreImporter can read Guitar Pro 6 (gpx) files.
     */
    class GpxImporter extends ScoreImporter {
        get name() {
            return 'Guitar Pro 6';
        }
        readScore() {
            // at first we need to load the binary file system
            // from the GPX container
            Logger.debug(this.name, 'Loading GPX filesystem');
            const fileSystem = new GpxFileSystem();
            fileSystem.fileFilter = s => {
                return (s.endsWith('score.gpif') ||
                    s.endsWith('BinaryStylesheet') ||
                    s.endsWith('PartConfiguration') ||
                    s.endsWith('LayoutConfiguration'));
            };
            fileSystem.load(this.data);
            Logger.debug(this.name, 'GPX filesystem loaded');
            let xml = null;
            let binaryStylesheetData = null;
            let partConfigurationData = null;
            let layoutConfigurationData = null;
            for (const entry of fileSystem.files) {
                switch (entry.fileName) {
                    case 'score.gpif':
                        xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                        break;
                    case 'BinaryStylesheet':
                        binaryStylesheetData = entry.data;
                        break;
                    case 'PartConfiguration':
                        partConfigurationData = entry.data;
                        break;
                    case 'LayoutConfiguration':
                        layoutConfigurationData = entry.data;
                        break;
                }
            }
            if (!xml) {
                throw new UnsupportedFormatError('No score.gpif found in GPX');
            }
            // the score.gpif file within this filesystem stores
            // the score information as XML we need to parse.
            Logger.debug(this.name, 'Start Parsing score.gpif');
            const gpifParser = new GpifParser();
            gpifParser.parseXml(xml, this.settings);
            Logger.debug(this.name, 'score.gpif parsed');
            const score = gpifParser.score;
            if (binaryStylesheetData) {
                Logger.debug(this.name, 'Start Parsing BinaryStylesheet');
                const binaryStylesheet = new BinaryStylesheet(binaryStylesheetData);
                binaryStylesheet.apply(score);
                Logger.debug(this.name, 'BinaryStylesheet parsed');
            }
            let partConfigurationParser = null;
            if (partConfigurationData) {
                Logger.debug(this.name, 'Start Parsing Part Configuration');
                partConfigurationParser = new PartConfiguration(partConfigurationData);
                partConfigurationParser.apply(score);
                Logger.debug(this.name, 'Part Configuration parsed');
            }
            if (layoutConfigurationData && partConfigurationParser != null) {
                Logger.debug(this.name, 'Start Parsing Layout Configuration');
                const layoutConfigurationParser = new LayoutConfiguration(partConfigurationParser, layoutConfigurationData);
                layoutConfigurationParser.apply(score);
                Logger.debug(this.name, 'Layout Configuration parsed');
            }
            return score;
        }
    }

    /**
     * Defines all possible accidentals for notes.
     */
    var AccidentalType;
    (function (AccidentalType) {
        /**
         * No accidental
         */
        AccidentalType[AccidentalType["None"] = 0] = "None";
        /**
         * Naturalize
         */
        AccidentalType[AccidentalType["Natural"] = 1] = "Natural";
        /**
         * Sharp
         */
        AccidentalType[AccidentalType["Sharp"] = 2] = "Sharp";
        /**
         * Flat
         */
        AccidentalType[AccidentalType["Flat"] = 3] = "Flat";
        /**
         * Natural for smear bends
         */
        AccidentalType[AccidentalType["NaturalQuarterNoteUp"] = 4] = "NaturalQuarterNoteUp";
        /**
         * Sharp for smear bends
         */
        AccidentalType[AccidentalType["SharpQuarterNoteUp"] = 5] = "SharpQuarterNoteUp";
        /**
         * Flat for smear bends
         */
        AccidentalType[AccidentalType["FlatQuarterNoteUp"] = 6] = "FlatQuarterNoteUp";
        /**
         * Double Sharp, indicated by an 'x'
         */
        AccidentalType[AccidentalType["DoubleSharp"] = 7] = "DoubleSharp";
        /**
         * Double Flat, indicated by 'bb'
         */
        AccidentalType[AccidentalType["DoubleFlat"] = 8] = "DoubleFlat";
    })(AccidentalType || (AccidentalType = {}));

    class BeatLines {
        constructor() {
            this.maxLine = -1e3;
            this.minLine = -1e3;
        }
    }
    /**
     * This small utilty public class allows the assignment of accidentals within a
     * desired scope.
     */
    class AccidentalHelper {
        constructor(barRenderer) {
            this._registeredAccidentals = new Map();
            this._appliedScoreLines = new Map();
            this._appliedScoreLinesByValue = new Map();
            this._notesByValue = new Map();
            this._beatLines = new Map();
            /**
             * The beat on which the highest note of this helper was added.
             * Used together with beaming helper to calculate overflow.
             */
            this.maxLineBeat = null;
            /**
             * The beat on which the lowest note of this helper was added.
             * Used together with beaming helper to calculate overflow.
             */
            this.minLineBeat = null;
            /**
             * The line of the highest note added to this helper.
             */
            this.maxLine = -1e3;
            /**
             * The line of the lowest note added to this helper.
             */
            this.minLine = -1e3;
            this._barRenderer = barRenderer;
            this._bar = barRenderer.bar;
        }
        static getPercussionLine(bar, noteValue) {
            if (noteValue < bar.staff.track.percussionArticulations.length) {
                return bar.staff.track.percussionArticulations[noteValue].staffLine;
            }
            return PercussionMapper.getArticulationByInputMidiNumber(noteValue)?.staffLine ?? 0;
        }
        static getNoteValue(note) {
            if (note.isPercussion) {
                return note.percussionArticulation;
            }
            let noteValue = note.displayValue;
            // adjust note height according to accidentals enforced
            switch (note.accidentalMode) {
                case NoteAccidentalMode.ForceDoubleFlat:
                    noteValue += 2;
                    break;
                case NoteAccidentalMode.ForceDoubleSharp:
                    noteValue -= 2;
                    break;
                case NoteAccidentalMode.ForceFlat:
                    noteValue += 1;
                    break;
                case NoteAccidentalMode.ForceSharp:
                    noteValue -= 1;
                    break;
            }
            return noteValue;
        }
        /**
         * Calculates the accidental for the given note and assignes the value to it.
         * The new accidental type is also registered within the current scope
         * @param note
         * @returns
         */
        applyAccidental(note) {
            const noteValue = AccidentalHelper.getNoteValue(note);
            const quarterBend = note.hasQuarterToneOffset;
            return this.getAccidental(noteValue, quarterBend, note.beat, false, note);
        }
        /**
         * Calculates the accidental for the given note value and assignes the value to it.
         * The new accidental type is also registered within the current scope
         * @param relatedBeat
         * @param noteValue
         * @param quarterBend
         * @param isHelperNote true if the note registered via this call, is a small helper note (e.g. for bends) or false if it is a main note head (e.g. for harmonics)
         * @returns
         */
        applyAccidentalForValue(relatedBeat, noteValue, quarterBend, isHelperNote) {
            return this.getAccidental(noteValue, quarterBend, relatedBeat, isHelperNote, null);
        }
        static computeLineWithoutAccidentals(bar, note) {
            let line = 0;
            const noteValue = AccidentalHelper.getNoteValue(note);
            if (note.isPercussion) {
                line = AccidentalHelper.getPercussionLine(bar, noteValue);
            }
            else {
                line = AccidentalHelper.calculateNoteSteps(bar.keySignature, bar.clef, noteValue);
            }
            return line;
        }
        static computeAccidental(keySignature, accidentalMode, noteValue, quarterBend, currentAccidental = null) {
            const ks = keySignature;
            const ksi = ks + 7;
            const index = noteValue % 12;
            const accidentalForKeySignature = ksi < 7 ? AccidentalType.Flat : AccidentalType.Sharp;
            const hasKeySignatureAccidentalSetForNote = AccidentalHelper.KeySignatureLookup[ksi][index];
            const hasNoteAccidentalWithinOctave = AccidentalHelper.AccidentalNotes[index];
            // the general logic is like this:
            // - we check if the key signature has an accidental defined
            // - we calculate which accidental a note needs according to its index in the octave
            // - if the accidental is already placed at this line, nothing needs to be done, otherwise we place it
            // - if there should not be an accidental, but there is one in the key signature, we clear it.
            // the exceptions are:
            // - for quarter bends we just place the corresponding accidental
            // - the accidental mode can enforce the accidentals for the note
            let accidentalToSet = AccidentalType.None;
            if (quarterBend) {
                accidentalToSet = hasNoteAccidentalWithinOctave ? accidentalForKeySignature : AccidentalType.Natural;
                switch (accidentalToSet) {
                    case AccidentalType.Natural:
                        accidentalToSet = AccidentalType.NaturalQuarterNoteUp;
                        break;
                    case AccidentalType.Sharp:
                        accidentalToSet = AccidentalType.SharpQuarterNoteUp;
                        break;
                    case AccidentalType.Flat:
                        accidentalToSet = AccidentalType.FlatQuarterNoteUp;
                        break;
                }
            }
            else {
                // define which accidental should be shown ignoring what might be set on the KS already
                switch (accidentalMode) {
                    case NoteAccidentalMode.ForceSharp:
                        accidentalToSet = AccidentalType.Sharp;
                        break;
                    case NoteAccidentalMode.ForceDoubleSharp:
                        accidentalToSet = AccidentalType.DoubleSharp;
                        break;
                    case NoteAccidentalMode.ForceFlat:
                        accidentalToSet = AccidentalType.Flat;
                        break;
                    case NoteAccidentalMode.ForceDoubleFlat:
                        accidentalToSet = AccidentalType.DoubleFlat;
                        break;
                    default:
                        // if note has an accidental in the octave, we place a symbol
                        // according to the Key Signature
                        if (hasNoteAccidentalWithinOctave) {
                            accidentalToSet = accidentalForKeySignature;
                        }
                        else if (hasKeySignatureAccidentalSetForNote) {
                            // note does not get an accidental, but KS defines one -> Naturalize
                            accidentalToSet = AccidentalType.Natural;
                        }
                        break;
                }
                // do we need an accidental on the note?
                if (accidentalToSet !== AccidentalType.None) {
                    // if there is no accidental on the line, and the key signature has it set already, we clear it on the note
                    if (currentAccidental != null) {
                        if (currentAccidental === accidentalToSet) {
                            accidentalToSet = AccidentalType.None;
                        }
                    }
                    else if (hasKeySignatureAccidentalSetForNote && accidentalToSet === accidentalForKeySignature) {
                        accidentalToSet = AccidentalType.None;
                    }
                }
                else {
                    // if we don't want an accidental, but there is already one applied, we place a naturalize accidental
                    // and clear the registration
                    if (currentAccidental !== null) {
                        if (currentAccidental === AccidentalType.Natural) {
                            accidentalToSet = AccidentalType.None;
                        }
                        else {
                            accidentalToSet = AccidentalType.Natural;
                        }
                    }
                }
            }
            return accidentalToSet;
        }
        getAccidental(noteValue, quarterBend, relatedBeat, isHelperNote, note = null) {
            let steps = 0;
            let accidentalToSet = AccidentalType.None;
            const isPercussion = note != null ? note.isPercussion : this._bar.staff.isPercussion;
            if (isPercussion) {
                steps = AccidentalHelper.getPercussionLine(this._bar, noteValue);
            }
            else {
                const accidentalMode = note ? note.accidentalMode : NoteAccidentalMode.Default;
                steps = AccidentalHelper.calculateNoteSteps(this._bar.keySignature, this._bar.clef, noteValue);
                const currentAccidental = this._registeredAccidentals.has(steps)
                    ? this._registeredAccidentals.get(steps)
                    : null;
                accidentalToSet = AccidentalHelper.computeAccidental(this._bar.keySignature, accidentalMode, noteValue, quarterBend, currentAccidental);
                let skipAccidental = false;
                switch (accidentalToSet) {
                    case AccidentalType.NaturalQuarterNoteUp:
                    case AccidentalType.SharpQuarterNoteUp:
                    case AccidentalType.FlatQuarterNoteUp:
                        // quarter notes are always set and not compared with lines
                        break;
                    default:
                        // Issue #472: Tied notes across bars do not show the accidentals but also
                        // do not register them.
                        // https://ultimatemusictheory.com/tied-notes-with-accidentals/
                        if (note && note.isTieDestination && note.beat.index === 0) {
                            // candidate for skip, check further if start note is on the same line
                            const tieOriginBarRenderer = this._barRenderer.scoreRenderer.layout?.getRendererForBar(this._barRenderer.staff.staffId, note.tieOrigin.beat.voice.bar);
                            if (tieOriginBarRenderer && tieOriginBarRenderer.staff === this._barRenderer.staff) {
                                const tieOriginLine = tieOriginBarRenderer.accidentalHelper.getNoteLine(note.tieOrigin);
                                if (tieOriginLine === steps) {
                                    skipAccidental = true;
                                }
                            }
                        }
                        if (skipAccidental) {
                            accidentalToSet = AccidentalType.None;
                        }
                        else {
                            // do we need an accidental on the note?
                            if (accidentalToSet !== AccidentalType.None) {
                                this._registeredAccidentals.set(steps, accidentalToSet);
                            }
                        }
                        break;
                }
            }
            if (note) {
                this._appliedScoreLines.set(note.id, steps);
                this._notesByValue.set(noteValue, note);
            }
            else {
                this._appliedScoreLinesByValue.set(noteValue, steps);
            }
            if (this.minLine === -1e3 || this.minLine < steps) {
                this.minLine = steps;
                this.minLineBeat = relatedBeat;
            }
            if (this.maxLine === -1e3 || this.maxLine > steps) {
                this.maxLine = steps;
                this.maxLineBeat = relatedBeat;
            }
            if (!isHelperNote) {
                this.registerLine(relatedBeat, steps);
            }
            return accidentalToSet;
        }
        registerLine(relatedBeat, line) {
            let lines;
            if (this._beatLines.has(relatedBeat.id)) {
                lines = this._beatLines.get(relatedBeat.id);
            }
            else {
                lines = new BeatLines();
                this._beatLines.set(relatedBeat.id, lines);
            }
            if (lines.minLine === -1e3 || line < lines.minLine) {
                lines.minLine = line;
            }
            if (lines.minLine === -1e3 || line > lines.maxLine) {
                lines.maxLine = line;
            }
        }
        getMaxLine(b) {
            return this._beatLines.has(b.id) ? this._beatLines.get(b.id).maxLine : 0;
        }
        getMinLine(b) {
            return this._beatLines.has(b.id) ? this._beatLines.get(b.id).minLine : 0;
        }
        static calculateNoteSteps(keySignature, clef, noteValue) {
            const value = noteValue;
            const ks = keySignature;
            const clefValue = clef;
            const index = value % 12;
            const octave = ((value / 12) | 0) - 1;
            // Initial Position
            let steps = AccidentalHelper.OctaveSteps[clefValue];
            // Move to Octave
            steps -= octave * AccidentalHelper.StepsPerOctave;
            // get the step list for the current keySignature
            const stepList = ModelUtils.keySignatureIsSharp(ks) || ModelUtils.keySignatureIsNatural(ks)
                ? AccidentalHelper.SharpNoteSteps
                : AccidentalHelper.FlatNoteSteps;
            steps -= stepList[index];
            return steps;
        }
        getNoteLine(n) {
            return this._appliedScoreLines.get(n.id);
        }
        getNoteLineForValue(rawValue, searchForNote = false) {
            if (this._appliedScoreLinesByValue.has(rawValue)) {
                return this._appliedScoreLinesByValue.get(rawValue);
            }
            if (searchForNote && this._notesByValue.has(rawValue)) {
                return this.getNoteLine(this._notesByValue.get(rawValue));
            }
            return 0;
        }
    }
    /**
     * a lookup list containing an info whether the notes within an octave
     * need an accidental rendered. the accidental symbol is determined based on the type of key signature.
     */
    AccidentalHelper.KeySignatureLookup = [
        // Flats (where the value is true, a flat accidental is required for the notes)
        [true, true, true, true, true, true, true, true, true, true, true, true],
        [true, true, true, true, true, false, true, true, true, true, true, true],
        [false, true, true, true, true, false, true, true, true, true, true, true],
        [false, true, true, true, true, false, false, false, true, true, true, true],
        [false, false, false, true, true, false, false, false, true, true, true, true],
        [false, false, false, true, true, false, false, false, false, false, true, true],
        [false, false, false, false, false, false, false, false, false, false, true, true],
        // natural
        [false, false, false, false, false, false, false, false, false, false, false, false],
        // sharps  (where the value is true, a flat accidental is required for the notes)
        [false, false, false, false, false, true, true, false, false, false, false, false],
        [true, true, false, false, false, true, true, false, false, false, false, false],
        [true, true, false, false, false, true, true, true, true, false, false, false],
        [true, true, true, true, false, true, true, true, true, false, false, false],
        [true, true, true, true, false, true, true, true, true, true, true, false],
        [true, true, true, true, true, true, true, true, true, true, true, false],
        [true, true, true, true, true, true, true, true, true, true, true, true]
    ];
    /**
     * Contains the list of notes within an octave have accidentals set.
     */
    // prettier-ignore
    AccidentalHelper.AccidentalNotes = [
        false,
        true,
        false,
        true,
        false,
        false,
        true,
        false,
        true,
        false,
        true,
        false
    ];
    /**
     * We always have 7 steps per octave.
     * (by a step the offsets inbetween score lines is meant,
     *      0 steps is on the first line (counting from top)
     *      1 steps is on the space inbetween the first and the second line
     */
    AccidentalHelper.StepsPerOctave = 7;
    /**
     * Those are the amount of steps for the different clefs in case of a note value 0
     * [Neutral, C3, C4, F4, G2]
     */
    AccidentalHelper.OctaveSteps = [38, 32, 30, 26, 38];
    /**
     * The step offsets of the notes within an octave in case of for sharp keysignatures
     */
    AccidentalHelper.SharpNoteSteps = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];
    /**
     * The step offsets of the notes within an octave in case of for flat keysignatures
     */
    AccidentalHelper.FlatNoteSteps = [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6];

    class StaffContext {
        constructor() {
            this.currentDynamics = DynamicValue.F;
            this.slideOrigins = new Map();
            this.transpose = 0;
            this.isExplicitlyBeamed = false;
            this.tieStarts = new Set();
            this.tieStartIds = new Map();
            this.slideOrigins = new Map();
            this.slurStarts = new Map();
        }
    }
    class InstrumentArticulationWithPlaybackInfo extends InstrumentArticulation {
        constructor() {
            super(...arguments);
            /**
             * The midi channel number to use when playing the note (-1 if using the default track channels).
             */
            this.outputMidiChannel = -1;
            /**
             * The midi channel program to use when playing the note (-1 if using the default track program).
             */
            this.outputMidiProgram = -1;
            /**
             * The volume to use when playing the note (-1 if using the default track volume).
             */
            this.outputVolume = -1;
            /**
             * The balance to use when playing the note (-1 if using the default track balance).
             */
            this.outputBalance = -1;
        }
    }
    class TrackInfo {
        constructor(track) {
            this.instruments = new Map();
            this._instrumentIdToArticulationIndex = new Map();
            this._lyricsLine = 0;
            this._lyricsLines = new Map();
            this.track = track;
        }
        getLyricLine(number) {
            if (this._lyricsLines.has(number)) {
                return this._lyricsLines.get(number);
            }
            const line = this._lyricsLine;
            this._lyricsLines.set(number, line);
            this._lyricsLine++;
            return line;
        }
        getOrCreateArticulation(instrumentId, note) {
            const noteValue = note.octave * 12 + note.tone;
            const lookup = `${instrumentId}_${noteValue}`;
            if (this._instrumentIdToArticulationIndex.has(lookup)) {
                return this._instrumentIdToArticulationIndex.get(lookup);
            }
            let articulation;
            if (this.instruments.has(instrumentId)) {
                articulation = this.instruments.get(instrumentId);
            }
            else {
                articulation = TrackInfo.defaultNoteArticulation;
            }
            const index = this.track.percussionArticulations.length;
            const bar = note.beat.voice.bar;
            // the calculation in the AccidentalHelper assumes a standard 5-line staff.
            let musicXmlStaffSteps;
            if (noteValue === 0) {
                // no display pitch defined?
                musicXmlStaffSteps = 4; // middle of bar
            }
            else {
                musicXmlStaffSteps = AccidentalHelper.calculateNoteSteps(bar.keySignature, bar.clef, noteValue);
            }
            // to translate this into the "staffLine" semantics we need to subtract additionally the steps "missing" from the absent lines
            const actualSteps = note.beat.voice.bar.staff.standardNotationLineCount * 2 - 1;
            const fiveLineSteps = 5 * 2 - 1;
            const stepDifference = fiveLineSteps - actualSteps;
            const staffLine = musicXmlStaffSteps - stepDifference;
            const newArticulation = new InstrumentArticulation(articulation.elementType, staffLine, articulation.outputMidiNumber, articulation.noteHeadDefault, articulation.noteHeadHalf, articulation.noteHeadWhole, articulation.techniqueSymbol, articulation.techniqueSymbolPlacement);
            this._instrumentIdToArticulationIndex.set(lookup, index);
            this.track.percussionArticulations.push(newArticulation);
            return index;
        }
    }
    TrackInfo.defaultNoteArticulation = new InstrumentArticulation('Default', 0, 0, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole);
    class MusicXmlImporter extends ScoreImporter {
        constructor() {
            super(...arguments);
            this._idToTrackInfo = new Map();
            this._indexToTrackInfo = new Map();
            this._staffToContext = new Map();
            this._divisionsPerQuarterNote = 1;
            this._currentDynamics = DynamicValue.F;
            // current measure state
            /**
             * The current musical position within the bar.
             */
            this._musicalPosition = 0;
            /**
             * The last known beat which was parsed. Might be used
             * to access the current voice/staff (e.g. on rests when we don't have notes)
             */
            this._lastBeat = null;
            this._nextMasterBarRepeatEnding = 0;
            this._nextBeatAutomations = null;
            this._nextBeatChord = null;
            this._nextBeatCrescendo = null;
            this._nextBeatLetRing = false;
            this._nextBeatPalmMute = false;
            this._nextBeatOttavia = null;
            this._nextBeatText = null;
            this._simileMarkAllStaves = null;
            this._simileMarkPerStaff = null;
            this._isBeatSlash = false;
            this._keyAllStaves = null;
            this._currentTrillStep = -1;
        }
        get name() {
            return 'MusicXML';
        }
        readScore() {
            const xml = this.extractMusicXml();
            const dom = new XmlDocument();
            try {
                dom.parse(xml);
            }
            catch (e) {
                throw new UnsupportedFormatError('Unsupported format', e);
            }
            this._score = new Score();
            this._score.tempo = 120;
            this._score.stylesheet.hideDynamics = true;
            this.parseDom(dom);
            ModelUtils.consolidate(this._score);
            this._score.finish(this.settings);
            this._score.rebuildRepeatGroups();
            return this._score;
        }
        extractMusicXml() {
            const zip = new ZipReader(this.data);
            let entries;
            try {
                entries = zip.read();
            }
            catch (e) {
                entries = [];
            }
            // no compressed MusicXML, try raw
            if (entries.length === 0) {
                this.data.reset();
                return IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
            }
            const container = entries.find(e => e.fullName === 'META-INF/container.xml');
            if (!container) {
                throw new UnsupportedFormatError('No compressed MusicXML');
            }
            const containerDom = new XmlDocument();
            try {
                containerDom.parse(IOHelper.toString(container.data, this.settings.importer.encoding));
            }
            catch (e) {
                throw new UnsupportedFormatError('Malformed container.xml, could not parse as XML', e);
            }
            const root = containerDom.firstElement;
            if (!root || root.localName !== 'container') {
                throw new UnsupportedFormatError("Malformed container.xml, root element not 'container'");
            }
            const rootFiles = root.findChildElement('rootfiles');
            if (!rootFiles) {
                throw new UnsupportedFormatError("Malformed container.xml, 'container/rootfiles' not found");
            }
            let uncompressedFileFullPath = '';
            for (const c of rootFiles.childElements()) {
                if (c.localName === 'rootfile') {
                    // The MusicXML root must be described in the first <rootfile> element.
                    // https://www.w3.org/2021/06/musicxml40/tutorial/compressed-mxl-files/
                    uncompressedFileFullPath = c.getAttribute('full-path');
                    break;
                }
            }
            if (!uncompressedFileFullPath) {
                throw new UnsupportedFormatError('Unsupported compressed MusicXML, missing rootfile');
            }
            const file = entries.find(e => e.fullName === uncompressedFileFullPath);
            if (!file) {
                throw new UnsupportedFormatError(`Malformed container.xml, '${uncompressedFileFullPath}' not contained in zip`);
            }
            return IOHelper.toString(file.data, this.settings.importer.encoding);
        }
        parseDom(dom) {
            const root = dom.firstElement;
            if (!root) {
                throw new UnsupportedFormatError('Unsupported format');
            }
            switch (root.localName) {
                case 'score-partwise':
                    this.parsePartwise(root);
                    break;
                case 'score-timewise':
                    this.parseTimewise(root);
                    break;
                default:
                    throw new UnsupportedFormatError('Unsupported format');
            }
        }
        parsePartwise(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'credit':
                        this.parseCredit(c);
                        break;
                    // case 'defaults': Ignored (see below)
                    case 'identification':
                        this.parseIdentification(c);
                        break;
                    // case 'movement-number': Ignored
                    case 'movement-title':
                        this.parseMovementTitle(c);
                        break;
                    case 'part':
                        this.parsePartwisePart(c);
                        break;
                    case 'part-list':
                        this.parsePartList(c);
                        break;
                    case 'work':
                        this.parseWork(c);
                        break;
                }
            }
        }
        parseTimewise(element) {
            let index = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'credit':
                        this.parseCredit(c);
                        break;
                    // case 'defaults': Ignored (see below)
                    case 'identification':
                        this.parseIdentification(c);
                        break;
                    // case 'movement-number': Ignored
                    case 'movement-title':
                        this.parseMovementTitle(c);
                        break;
                    case 'part-list':
                        this.parsePartList(c);
                        break;
                    case 'work':
                        this.parseWork(c);
                        break;
                    case 'measure':
                        this.parseTimewiseMeasure(c, index);
                        index++;
                        break;
                }
            }
        }
        parseCredit(element) {
            // credit texts are absolutely positioned texts which we don't support
            // but it is very common to place song information in there,
            // we do our best to parse information into our song details
            // only consider first page info
            if (element.getAttribute('page', '1') !== '1') {
                return;
            }
            const creditTypes = [];
            let firstWords = null;
            let fullText = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'credit-type':
                        creditTypes.push(c.innerText);
                        break;
                    // case 'link': Ignored
                    // case 'bookmark': Ignored
                    // case 'credit-image': Not supported
                    case 'credit-words':
                        if (firstWords === null) {
                            firstWords = c;
                        }
                        fullText += c.innerText;
                        break;
                    // case 'credit-symbol' Not supported
                }
            }
            // we have types defined? awesome, no need to guess
            if (creditTypes.length > 0) {
                for (const type of creditTypes) {
                    switch (type) {
                        case 'title':
                            this._score.title = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                        case 'subtitle':
                            this._score.subTitle = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                        case 'composer':
                            this._score.artist = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                        case 'arranger':
                            this._score.artist = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                        case 'lyricist':
                            this._score.words = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                        case 'rights':
                            this._score.copyright = MusicXmlImporter.sanitizeDisplay(fullText);
                            break;
                    }
                }
            }
            else if (firstWords) {
                // here comes the hard part, guessing the credits.
                // position (relative to bottom(!) left)
                //const defaultX = parseInt(firstWords.getAttribute('default-x', '0'));
                //const defaultY = parseInt(firstWords.getAttribute('default-y', '0'));
                //const fontSize = parseInt(firstWords.getAttribute('font-size', '0'));
                const justify = firstWords.getAttribute('font-size', '0');
                const valign = firstWords.getAttribute('font-size', 'top');
                const halign = firstWords.getAttribute('halign', 'left');
                // titles are typically centered on top, use it there if
                // there is no info about it yet
                if (valign === 'top') {
                    // indicator for copyright? so be it
                    if (fullText.includes('copyright') ||
                        fullText.includes('Copyright') ||
                        fullText.includes('©') ||
                        fullText.includes('(c)') ||
                        fullText.includes('(C)')) {
                        this._score.copyright = MusicXmlImporter.sanitizeDisplay(fullText);
                        return;
                    }
                    // title and subtitle are typically centered,
                    // use the typical alphaTab placement as reference for valid props
                    if (halign === 'center' || justify === 'center') {
                        if (this._score.title.length === 0) {
                            this._score.title = MusicXmlImporter.sanitizeDisplay(fullText);
                            return;
                        }
                        if (this._score.subTitle.length === 0) {
                            this._score.subTitle = MusicXmlImporter.sanitizeDisplay(fullText);
                            return;
                        }
                        if (this._score.album.length === 0) {
                            this._score.album = MusicXmlImporter.sanitizeDisplay(fullText);
                            return;
                        }
                    }
                    else if (halign === 'right' || justify === 'right') {
                        // in alphaTab only `music` is right
                        if (this._score.music.length === 0) {
                            this._score.music = MusicXmlImporter.sanitizeDisplay(fullText);
                            return;
                        }
                    }
                    // from here we simply fallback to filling any remaining information (first one wins approach)
                    if (this._score.artist.length === 0) {
                        this._score.artist = MusicXmlImporter.sanitizeDisplay(fullText);
                        return;
                    }
                    if (this._score.words.length === 0) {
                        this._score.words = MusicXmlImporter.sanitizeDisplay(fullText);
                        return;
                    }
                }
            }
        }
        static sanitizeDisplay(text) {
            // no newlines or tabs, and non-breaking spaces
            return text.replaceAll('\r', '').replaceAll('\n', ' ').replaceAll('\t', '\xA0\xA0').replaceAll(' ', '\xA0');
        }
        // visual aspects of credits are ignored
        // private parseCredit(element: XmlNode) { }
        // visual aspects of music notation are ignored.
        // with https://github.com/CoderLine/alphaTab/issues/1949 we could use some more information
        // but we also need the "real" page layout (or parchment) for some alignment aspects.
        // also for some styling stuff we need the settings as part of the renderstylesheet.
        // private parseDefaults(element: XmlNode) {
        //     for (const c of element.childElements()) {
        //         switch (c.localName) {
        //             // case 'scaling':
        //             // case 'concert-score':
        //             // case 'page-layout':
        //             // case 'system-layout':
        //             // case 'staff-layout':
        //             // case 'appearance':
        //             // case 'music-font':
        //             // case 'word-font':
        //             // case 'lyric-font':
        //             // case 'lyric-language':
        //         }
        //     }
        // }
        parseIdentification(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'creator':
                        if (c.attributes.has('type')) {
                            switch (c.attributes.get('type')) {
                                case 'composer':
                                    this._score.artist = MusicXmlImporter.sanitizeDisplay(c.innerText);
                                    break;
                                case 'lyricist':
                                    this._score.words = MusicXmlImporter.sanitizeDisplay(c.innerText);
                                    break;
                                case 'arranger':
                                    this._score.music = MusicXmlImporter.sanitizeDisplay(c.innerText);
                                    break;
                            }
                        }
                        else {
                            this._score.artist = MusicXmlImporter.sanitizeDisplay(c.innerText);
                        }
                        break;
                    case 'rights':
                        if (this._score.copyright.length > 0) {
                            this._score.copyright += ', ';
                        }
                        this._score.copyright += c.innerText;
                        if (c.attributes.has('type')) {
                            this._score.copyright += ` (${c.attributes.get('type')})`;
                        }
                        break;
                    case 'encoding':
                        this.parseEncoding(c);
                        break;
                    // case 'source': Ignored
                    // case 'relation': Ignored
                    // case 'miscellaneous': Ignored
                }
            }
        }
        parseEncoding(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'encoding-date': Ignored
                    case 'encoder':
                        if (this._score.tab.length > 0) {
                            this._score.tab += ', ';
                        }
                        this._score.tab += c.innerText;
                        if (c.attributes.has('type')) {
                            this._score.tab += ` (${c.attributes.get('type')})`;
                        }
                        break;
                    // case 'software': Ignored
                    case 'encoding-description':
                        this._score.notices += MusicXmlImporter.sanitizeDisplay(c.innerText);
                        break;
                    // case 'supports': Ignored
                }
            }
        }
        parseMovementTitle(element) {
            if (this._score.title.length === 0) {
                // we have no "work title", then use the "movement title" as main title
                this._score.title = MusicXmlImporter.sanitizeDisplay(element.innerText);
            }
            else {
                // we have a "work title", then use the "movement title" as subtitle
                this._score.subTitle = MusicXmlImporter.sanitizeDisplay(element.innerText);
            }
        }
        parsePartList(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'part-group': Ignore
                    // We currently ignore information from part-group
                    // The Track > Staff structure is handled by the <staff /> element on measure level
                    // we only support automatic placement of brackets/braces, not explicit.
                    case 'score-part':
                        this.parseScorePart(c);
                        break;
                }
            }
        }
        parseScorePart(element) {
            const track = new Track();
            track.ensureStaveCount(1);
            this._score.addTrack(track);
            const id = element.attributes.get('id');
            const trackInfo = new TrackInfo(track);
            this._idToTrackInfo.set(id, trackInfo);
            this._indexToTrackInfo.set(track.index, trackInfo);
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'identification': Ignored, no part-wise information.
                    // case 'part-link': Not supported
                    case 'part-name':
                        track.name = MusicXmlImporter.sanitizeDisplay(c.innerText);
                        break;
                    case 'part-name-display':
                        track.name = this.parsePartDisplayAsText(c);
                        break;
                    case 'part-abbreviation':
                        track.shortName = MusicXmlImporter.sanitizeDisplay(c.innerText);
                        break;
                    case 'part-abbreviation-display':
                        track.shortName = this.parsePartDisplayAsText(c);
                        break;
                    // case 'group': Ignored
                    case 'score-instrument':
                        this.parseScoreInstrument(c, trackInfo);
                        break;
                    // case 'player': Ignored
                    case 'midi-device':
                        if (c.attributes.has('port')) {
                            track.playbackInfo.port = Number.parseInt(c.attributes.get('port'), 10);
                        }
                        break;
                    case 'midi-instrument':
                        this.parseScorePartMidiInstrument(c, trackInfo);
                        break;
                }
            }
            if (trackInfo.firstArticulation) {
                if (trackInfo.firstArticulation.outputMidiProgram >= 0) {
                    track.playbackInfo.program = trackInfo.firstArticulation.outputMidiProgram;
                }
                if (trackInfo.firstArticulation.outputBalance >= 0) {
                    track.playbackInfo.balance = trackInfo.firstArticulation.outputBalance;
                }
                if (trackInfo.firstArticulation.outputVolume >= 0) {
                    track.playbackInfo.volume = trackInfo.firstArticulation.outputVolume;
                }
                if (trackInfo.firstArticulation.outputMidiChannel >= 0) {
                    track.playbackInfo.primaryChannel = trackInfo.firstArticulation.outputMidiChannel;
                    track.playbackInfo.secondaryChannel = trackInfo.firstArticulation.outputMidiChannel;
                }
            }
        }
        parseScoreInstrument(element, trackInfo) {
            const articulation = new InstrumentArticulationWithPlaybackInfo();
            if (!trackInfo.firstArticulation) {
                trackInfo.firstArticulation = articulation;
            }
            trackInfo.instruments.set(element.getAttribute('id', ''), articulation);
        }
        parseScorePartMidiInstrument(element, trackInfo) {
            const id = element.getAttribute('id', '');
            if (!trackInfo.instruments.has(id)) {
                return;
            }
            const articulation = trackInfo.instruments.get(id);
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'midi-channel':
                        articulation.outputMidiChannel = Number.parseInt(c.innerText) - 1;
                        break;
                    // case 'midi-name': Ignored
                    // case 'midi-bank': Not supported (https://github.com/CoderLine/alphaTab/issues/1986)
                    case 'midi-program':
                        articulation.outputMidiProgram = Number.parseInt(c.innerText) - 1;
                        break;
                    case 'midi-unpitched':
                        articulation.outputMidiNumber = Number.parseInt(c.innerText) - 1;
                        break;
                    case 'volume':
                        articulation.outputVolume = MusicXmlImporter.interpolatePercent(Number.parseFloat(c.innerText));
                        break;
                    case 'pan':
                        articulation.outputBalance = MusicXmlImporter.interpolatePan(Number.parseFloat(c.innerText));
                        break;
                    // case 'elevation': Ignored
                }
            }
        }
        static interpolatePercent(value) {
            return MusicXmlImporter.interpolate(0, 100, 0, 16, value) | 0;
        }
        static interpolatePan(value) {
            return MusicXmlImporter.interpolate(-90, 90, 0, 16, value) | 0;
        }
        static interpolate(inputStart, inputEnd, outputStart, outputEnd, value) {
            const t = (value - inputStart) / (inputEnd - inputStart);
            return outputStart + (outputEnd - outputStart) * t;
        }
        parsePartDisplayAsText(element) {
            let text = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'display-text':
                        text += c.innerText;
                        break;
                    case 'accidental-text':
                        // to our best to have a plain text accidental using the unicode blocks
                        // we don't have a SmuFL Text font in place there to use MusicFontSymbols
                        switch (c.innerText) {
                            case 'sharp':
                                text += '♯';
                                break;
                            case 'natural':
                                text += '♮';
                                break;
                            case 'flat':
                                text += '♭';
                                break;
                            case 'double-sharp':
                                text += '𝄪';
                                break;
                            case 'sharp-sharp':
                                text += '♯♯';
                                break;
                            case 'flat-flat':
                                text += '𝄫';
                                break;
                            case 'natural-sharp':
                                text += '♮♯';
                                break;
                            case 'natural-flat':
                                text += '♮♭';
                                break;
                            // case 'quarter-flat': Not supported
                            // case 'quarter-sharp': Not supported
                            // case 'three-quarters-flat': Not supported
                            // case 'three-quarters-sharp': Not supported
                            case 'sharp-down':
                                text += '𝄱';
                                break;
                            case 'sharp-up':
                                text += '𝄰';
                                break;
                            case 'natural-down':
                                text += '𝄯';
                                break;
                            case 'natural-up':
                                text += '𝄮';
                                break;
                            case 'flat-down':
                                text += '𝄭';
                                break;
                            case 'flat-up':
                                text += '𝄬';
                                break;
                            // case 'double-sharp-down': Not supported
                            // case 'double-sharp-up': Not supported
                            // case 'flat-flat-down': Not supported
                            // case 'flat-flat-up': Not supported
                            case 'arrow-down':
                                text += '↓';
                                break;
                            case 'arrow-up':
                                text += '↑';
                                break;
                            case 'triple-sharp':
                                text += '♯𝄪';
                                break;
                            case 'triple-flat':
                                text += '𝄬𝄬𝄬';
                                break;
                            // case 'slash-quarter-sharp': Not supported
                            // case 'slash-sharp': Not supported
                            // case 'slash-flat': Not supported
                            // case 'double-slash-flat': Not supported
                            case 'sharp-1':
                                text += '♯¹';
                                break;
                            case 'sharp-2':
                                text += '♯²';
                                break;
                            case 'sharp-3':
                                text += '♯³';
                                break;
                            case 'sharp-4':
                                text += '♯⁴';
                                break;
                            case 'sharp-5':
                                text += '♯⁵';
                                break;
                            case 'flat-1':
                                text += '♭¹';
                                break;
                            case 'flat-2':
                                text += '♭²';
                                break;
                            case 'flat-3':
                                text += '♭³';
                                break;
                            case 'flat-4':
                                text += '♭⁴';
                                break;
                            case 'flat-5':
                                text += '♭⁵';
                                break;
                            // case 'sori': Not supported
                            // case 'kokon': Not supported
                            // case 'other': Not supported
                        }
                        break;
                }
            }
            return MusicXmlImporter.sanitizeDisplay(text);
        }
        parseWork(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'work-number': Ignored
                    // case 'opus': Ignored
                    case 'work-title':
                        this._score.title = MusicXmlImporter.sanitizeDisplay(c.innerText);
                        break;
                }
            }
        }
        parsePartwisePart(element) {
            const id = element.attributes.get('id');
            if (!id || !this._idToTrackInfo.has(id)) {
                return;
            }
            const track = this._idToTrackInfo.get(id).track;
            let index = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'measure':
                        this.parsePartwiseMeasure(c, track, index);
                        index++;
                        break;
                }
            }
        }
        parsePartwiseMeasure(element, track, index) {
            const masterBar = this.getOrCreateMasterBar(element, index);
            this.parsePartMeasure(element, masterBar, track);
        }
        parseTimewiseMeasure(element, index) {
            const masterBar = this.getOrCreateMasterBar(element, index);
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'part':
                        this.parseTimewisePart(c, masterBar);
                        break;
                }
            }
        }
        getOrCreateMasterBar(element, index) {
            const implicit = element.attributes.get('implicit') === 'yes';
            while (this._score.masterBars.length <= index) {
                const newMasterBar = new MasterBar();
                if (implicit) {
                    newMasterBar.isAnacrusis = true;
                }
                this._score.addMasterBar(newMasterBar);
                if (newMasterBar.index > 0) {
                    newMasterBar.timeSignatureDenominator = newMasterBar.previousMasterBar.timeSignatureDenominator;
                    newMasterBar.timeSignatureNumerator = newMasterBar.previousMasterBar.timeSignatureNumerator;
                    newMasterBar.tripletFeel = newMasterBar.previousMasterBar.tripletFeel;
                }
            }
            const masterBar = this._score.masterBars[index];
            return masterBar;
        }
        parseTimewisePart(element, masterBar) {
            const id = element.attributes.get('id');
            if (!id || !this._idToTrackInfo.has(id)) {
                return;
            }
            const track = this._idToTrackInfo.get(id).track;
            this.parsePartMeasure(element, masterBar, track);
        }
        parsePartMeasure(element, masterBar, track) {
            this._musicalPosition = 0;
            this._lastBeat = null;
            masterBar.alternateEndings = this._nextMasterBarRepeatEnding;
            const barLines = [];
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'note':
                        this.parseNote(c, masterBar, track);
                        break;
                    case 'backup':
                        this.parseBackup(c);
                        break;
                    case 'forward':
                        this.parseForward(c);
                        break;
                    case 'direction':
                        this.parseDirection(c, masterBar, track);
                        break;
                    case 'attributes':
                        this.parseAttributes(c, masterBar, track);
                        break;
                    case 'harmony':
                        this.parseHarmony(c, track);
                        break;
                    // case 'figured-bass': Not supported
                    case 'print':
                        this.parsePrint(c, masterBar, track);
                        break;
                    case 'sound':
                        this.parseSound(c, masterBar, track);
                        break;
                    // case 'listening': Ignored
                    case 'barline':
                        barLines.push(c); // delayed
                        break;
                    // case 'grouping': Ignored
                    // case 'link': Not supported
                    // case 'bookmark': Not supported
                }
            }
            // parse barline at end of bar (to apply style to all bars of all staves)
            for (const barLine of barLines) {
                this.parseBarLine(barLine, masterBar, track);
            }
            this.applySimileMarks(masterBar, track);
            // initial empty staff and voice (if no other elements created something already)
            const staff = this.getOrCreateStaff(track, 0);
            this.getOrCreateBar(staff, masterBar);
            // clear measure attribute
            this._keyAllStaves = null;
        }
        parsePrint(element, masterBar, track) {
            if (element.getAttribute('new-system', 'no') === 'yes') {
                track.addLineBreaks(masterBar.index);
            }
            else if (element.getAttribute('new-page', 'no') === 'yes') {
                track.addLineBreaks(masterBar.index);
            }
        }
        applySimileMarks(masterBar, track) {
            if (this._simileMarkAllStaves !== null) {
                for (const s of track.staves) {
                    const bar = this.getOrCreateBar(s, masterBar);
                    bar.simileMark = this._simileMarkAllStaves;
                    if (bar.simileMark !== SimileMark.None) {
                        this.clearBar(bar);
                    }
                }
                if (this._simileMarkAllStaves === SimileMark.FirstOfDouble) {
                    this._simileMarkAllStaves = SimileMark.SecondOfDouble;
                }
                else {
                    this._simileMarkAllStaves = null;
                }
            }
            if (this._simileMarkPerStaff !== null) {
                const keys = Array.from(this._simileMarkPerStaff.keys());
                for (const i of keys) {
                    const s = this.getOrCreateStaff(track, i);
                    const bar = this.getOrCreateBar(s, masterBar);
                    bar.simileMark = this._simileMarkPerStaff.get(i);
                    if (bar.simileMark !== SimileMark.None) {
                        this.clearBar(bar);
                    }
                    if (bar.simileMark === SimileMark.FirstOfDouble) {
                        this._simileMarkPerStaff.set(i, SimileMark.SecondOfDouble);
                    }
                    else {
                        this._simileMarkPerStaff.delete(i);
                    }
                }
                if (this._simileMarkPerStaff.size === 0) {
                    this._simileMarkPerStaff = null;
                }
            }
        }
        clearBar(bar) {
            for (const v of bar.voices) {
                const emptyBeat = new Beat();
                emptyBeat.isEmpty = true;
                v.addBeat(emptyBeat);
            }
        }
        parseBarLine(element, masterBar, track) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'bar-style':
                        this.parseBarStyle(c, masterBar, track, element.getAttribute('location', 'right'));
                        break;
                    // case 'footnote' Ignored
                    // case 'level' Ignored
                    // case 'wavy-line' Ignored
                    // case 'segno': Ignored (use directions)
                    // case 'coda': Ignored (use directions)
                    // case 'fermata': Ignored (on barline, they exist on beat notations)
                    case 'ending':
                        this.parseEnding(c, masterBar);
                        break;
                    case 'repeat':
                        this.parseRepeat(c, masterBar);
                        break;
                }
            }
        }
        parseRepeat(element, masterBar) {
            const direction = element.getAttribute('direction');
            let times = Number.parseInt(element.getAttribute('times'));
            if (times < 0 || Number.isNaN(times)) {
                times = 2;
            }
            if (direction === 'backward') {
                masterBar.repeatCount = times;
            }
            else if (direction === 'forward') {
                masterBar.isRepeatStart = true;
            }
        }
        parseEnding(element, masterBar) {
            const numbers = element
                .getAttribute('number')
                .split(',')
                .map(v => Number.parseInt(v));
            let flags = 0;
            for (const num of numbers) {
                flags = flags | ((0x01 << (num - 1)) & 0xff);
            }
            masterBar.alternateEndings = flags;
            switch (element.getAttribute('type', '')) {
                case 'start':
                    this._nextMasterBarRepeatEnding = this._nextMasterBarRepeatEnding | flags;
                    break;
                case 'stop':
                case 'discontinue':
                    this._nextMasterBarRepeatEnding = this._nextMasterBarRepeatEnding & ~flags;
                    break;
            }
        }
        parseBarStyle(element, masterBar, track, location) {
            let style = BarLineStyle.Automatic;
            switch (element.innerText) {
                case 'dashed':
                    style = BarLineStyle.Dashed;
                    break;
                case 'dotted':
                    style = BarLineStyle.Dotted;
                    break;
                case 'heavy':
                    style = BarLineStyle.Heavy;
                    break;
                case 'heavy-heavy':
                    style = BarLineStyle.HeavyHeavy;
                    break;
                case 'heavy-light':
                    style = BarLineStyle.HeavyLight;
                    break;
                case 'light-heavy':
                    style = BarLineStyle.LightHeavy;
                    break;
                case 'light-light':
                    style = BarLineStyle.LightLight;
                    break;
                case 'none':
                    style = BarLineStyle.None;
                    break;
                case 'regular':
                    style = BarLineStyle.Regular;
                    break;
                case 'short':
                    style = BarLineStyle.Short;
                    break;
                case 'tick':
                    style = BarLineStyle.Tick;
                    break;
            }
            for (const s of track.staves) {
                const bar = this.getOrCreateBar(s, masterBar);
                switch (location) {
                    case 'left':
                        bar.barLineLeft = style;
                        break;
                    case 'right':
                        bar.barLineRight = style;
                        break;
                }
            }
        }
        parseSound(element, masterBar, track) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'instrument-change': Ignored
                    // case 'midi-device': Ignored
                    case 'midi-instrument':
                        this.parseSoundMidiInstrument(c, masterBar);
                        break;
                    // case 'play': Ignored
                    case 'swing':
                        this.parseSwing(c, masterBar);
                        break;
                }
            }
            if (element.attributes.has('coda')) {
                masterBar.addDirection(Direction.TargetCoda);
            }
            if (element.attributes.has('tocoda')) {
                masterBar.addDirection(Direction.JumpDaCoda);
            }
            if (element.attributes.has('dacapo')) {
                masterBar.addDirection(Direction.JumpDaCapo);
            }
            if (element.attributes.has('dalsegno')) {
                masterBar.addDirection(Direction.JumpDalSegno);
            }
            if (element.attributes.has('fine')) {
                masterBar.addDirection(Direction.TargetFine);
            }
            if (element.attributes.has('segno')) {
                masterBar.addDirection(Direction.TargetSegno);
            }
            // damper-pedal="" Ignored -> Handled via pedal direction
            // dynamics="" Ignored -> Handled via dynamics direction
            // elevation="" Ignored
            // forward-repeat="" Ignored
            // pizzicato="" Ignored
            // pizzicato="" Ignored
            // soft-pedal="" Ignored
            // sostenuto-pedal="" Ignored
            // time-only="" Ignored
            if (element.attributes.has('pan')) {
                if (!this._nextBeatAutomations) {
                    this._nextBeatAutomations = [];
                }
                const automation = new Automation();
                automation.type = AutomationType.Balance;
                automation.value = MusicXmlImporter.interpolatePan(Number.parseFloat(element.attributes.get('pan')));
                this._nextBeatAutomations.push(automation);
            }
            if (element.attributes.has('tempo')) {
                if (!this._nextBeatAutomations) {
                    this._nextBeatAutomations = [];
                }
                const automation = new Automation();
                automation.type = AutomationType.Tempo;
                automation.value = MusicXmlImporter.interpolatePercent(Number.parseFloat(element.attributes.get('tempo')));
                this._nextBeatAutomations.push(automation);
            }
        }
        parseSwing(element, masterBar) {
            let first = 0;
            let second = 0;
            let swingType = null;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'straight':
                        masterBar.tripletFeel = TripletFeel.NoTripletFeel;
                        return;
                    case 'first':
                        first = Number.parseInt(c.innerText);
                        break;
                    case 'second':
                        second = Number.parseInt(c.innerText);
                        break;
                    case 'swing-type':
                        swingType = this.parseBeatDuration(c);
                        break;
                    // case 'swing-style': Ignored
                }
            }
            // spec is a bit vague here
            if (!swingType) {
                swingType = Duration.Eighth;
            }
            if (swingType === Duration.Eighth) {
                if (first === 2 && second === 1) {
                    masterBar.tripletFeel = TripletFeel.Triplet8th;
                }
                else if (first === 3 && second === 1) {
                    masterBar.tripletFeel = TripletFeel.Dotted8th;
                }
                else if (first === 1 && second === 3) {
                    masterBar.tripletFeel = TripletFeel.Scottish8th;
                }
            }
            else if (swingType === Duration.Sixteenth) {
                if (first === 2 && second === 1) {
                    masterBar.tripletFeel = TripletFeel.Triplet16th;
                }
                else if (first === 3 && second === 1) {
                    masterBar.tripletFeel = TripletFeel.Dotted16th;
                }
                else if (first === 1 && second === 3) {
                    masterBar.tripletFeel = TripletFeel.Scottish16th;
                }
            }
        }
        parseSoundMidiInstrument(element, masterBar) {
            let automation;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'midi-channel': Ignored
                    // case 'midi-name': Ignored
                    // case 'midi-bank': Ignored
                    case 'midi-program':
                        if (!this._nextBeatAutomations) {
                            this._nextBeatAutomations = [];
                        }
                        automation = new Automation();
                        automation.type = AutomationType.Instrument;
                        automation.value = Number.parseInt(c.innerText) - 1;
                        this._nextBeatAutomations.push(automation);
                        break;
                    // case 'midi-unpitched': Ignored
                    case 'volume':
                        if (!this._nextBeatAutomations) {
                            this._nextBeatAutomations = [];
                        }
                        automation = new Automation();
                        automation.type = AutomationType.Volume;
                        automation.value = MusicXmlImporter.interpolatePercent(Number.parseFloat(c.innerText));
                        this._nextBeatAutomations.push(automation);
                        break;
                    case 'pan':
                        if (!this._nextBeatAutomations) {
                            this._nextBeatAutomations = [];
                        }
                        automation = new Automation();
                        automation.type = AutomationType.Balance;
                        automation.value = MusicXmlImporter.interpolatePan(Number.parseFloat(c.innerText));
                        this._nextBeatAutomations.push(automation);
                        break;
                    // case 'elevation': Ignored
                }
            }
        }
        parseHarmony(element, track) {
            const chord = new Chord();
            let degreeParenthesis = false;
            let degree = '';
            for (const childNode of element.childElements()) {
                switch (childNode.localName) {
                    case 'root':
                        chord.name = this.parseHarmonyRoot(childNode);
                        break;
                    case 'kind':
                        chord.name = chord.name + this.parseHarmonyKind(childNode);
                        if (childNode.getAttribute('parentheses-degrees', 'no') === 'yes') {
                            degreeParenthesis = true;
                        }
                        break;
                    case 'frame':
                        this.parseHarmonyFrame(childNode, chord);
                        break;
                    case 'degree':
                        degree += this.parseDegree(childNode);
                        break;
                }
            }
            if (degree) {
                chord.name += degreeParenthesis ? `(${degree})` : degree;
            }
            if (this._nextBeatChord === null) {
                this._nextBeatChord = chord;
            }
        }
        parseDegree(element) {
            let value = '';
            let alter = '';
            let type = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'degree-value':
                        value = c.innerText;
                        break;
                    case 'degree-alter':
                        switch (c.innerText) {
                            case '-1':
                                alter = '♭';
                                break;
                            case '1':
                                alter = '♯';
                                break;
                        }
                        break;
                    case 'degree-type':
                        type += c.getAttribute('text', '');
                        break;
                }
            }
            return `${type}${alter}${value}`;
        }
        parseHarmonyRoot(element) {
            let rootStep = '';
            let rootAlter = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'root-step':
                        rootStep = c.innerText;
                        break;
                    case 'root-alter':
                        switch (Number.parseFloat(c.innerText)) {
                            case -2:
                                rootAlter = 'bb';
                                break;
                            case -1:
                                rootAlter = 'b';
                                break;
                            case 0:
                                rootAlter = '';
                                break;
                            case 1:
                                rootAlter = '#';
                                break;
                            case 2:
                                rootAlter = '##';
                                break;
                        }
                        break;
                }
            }
            return rootStep + rootAlter;
        }
        parseHarmonyKind(xmlNode) {
            const kindText = xmlNode.getAttribute('text');
            let resultKind = '';
            if (kindText) {
                // the abbreviation is already provided
                resultKind = kindText;
            }
            else {
                const kindContent = xmlNode.innerText;
                switch (kindContent) {
                    // triads
                    case 'major':
                        resultKind = '';
                        break;
                    case 'minor':
                        resultKind = 'm';
                        break;
                    // Sevenths
                    case 'augmented':
                        resultKind = '+';
                        break;
                    case 'diminished':
                        resultKind = '\u25CB';
                        break;
                    case 'dominant':
                        resultKind = '7';
                        break;
                    case 'major-seventh':
                        resultKind = '7M';
                        break;
                    case 'minor-seventh':
                        resultKind = 'm7';
                        break;
                    case 'diminished-seventh':
                        resultKind = '\u25CB7';
                        break;
                    case 'augmented-seventh':
                        resultKind = '+7';
                        break;
                    case 'half-diminished':
                        resultKind = '\u2349';
                        break;
                    case 'major-minor':
                        resultKind = 'mMaj';
                        break;
                    // Sixths
                    case 'major-sixth':
                        resultKind = 'maj6';
                        break;
                    case 'minor-sixth':
                        resultKind = 'm6';
                        break;
                    // Ninths
                    case 'dominant-ninth':
                        resultKind = '9';
                        break;
                    case 'major-ninth':
                        resultKind = 'maj9';
                        break;
                    case 'minor-ninth':
                        resultKind = 'm9';
                        break;
                    // 11ths
                    case 'dominant-11th':
                        resultKind = '11';
                        break;
                    case 'major-11th':
                        resultKind = 'maj11';
                        break;
                    case 'minor-11th':
                        resultKind = 'm11';
                        break;
                    // 13ths
                    case 'dominant-13th':
                        resultKind = '13';
                        break;
                    case 'major-13th':
                        resultKind = 'maj13';
                        break;
                    case 'minor-13th':
                        resultKind = 'm13';
                        break;
                    // Suspended
                    case 'suspended-second':
                        resultKind = 'sus2';
                        break;
                    case 'suspended-fourth':
                        resultKind = 'sus4';
                        break;
                    case 'Neapolitan':
                        resultKind = '♭II';
                        break;
                    case 'Italian':
                        resultKind = 'It⁺⁶';
                        break;
                    case 'French':
                        resultKind = 'Fr⁺⁶';
                        break;
                    case 'German':
                        resultKind = 'Fr⁺⁶';
                        break;
                    default:
                        resultKind = kindContent;
                        break;
                }
            }
            return resultKind;
        }
        parseHarmonyFrame(xmlNode, chord) {
            for (const frameChild of xmlNode.childElements()) {
                switch (frameChild.localName) {
                    case 'frame-strings':
                        const stringsCount = Number.parseInt(frameChild.innerText);
                        chord.strings = new Array(stringsCount);
                        for (let i = 0; i < stringsCount; i++) {
                            // set strings unplayed as default
                            chord.strings[i] = -1;
                        }
                        break;
                    case 'first-fret':
                        chord.firstFret = Number.parseInt(frameChild.innerText);
                        break;
                    case 'frame-note':
                        let stringNo = null;
                        let fretNo = null;
                        for (const noteChild of frameChild.childElements()) {
                            switch (noteChild.localName) {
                                case 'string':
                                    stringNo = Number.parseInt(noteChild.innerText);
                                    break;
                                case 'fret':
                                    fretNo = Number.parseInt(noteChild.innerText);
                                    if (stringNo && fretNo >= 0) {
                                        chord.strings[stringNo - 1] = fretNo;
                                    }
                                    break;
                                case 'barre':
                                    if (stringNo && fretNo && noteChild.getAttribute('type') === 'start') {
                                        chord.barreFrets.push(fretNo);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        parseAttributes(element, masterBar, track) {
            let staffIndex;
            let staff;
            let bar;
            if (this._lastBeat == null) {
                // attributes directly at the start of the bar
                for (const c of element.childElements()) {
                    switch (c.localName) {
                        // case 'footnote': Ignored
                        // case 'level': Ignored
                        case 'divisions':
                            this._divisionsPerQuarterNote = Number.parseFloat(c.innerText);
                            break;
                        case 'key':
                            this.parseKey(c, masterBar, track);
                            break;
                        case 'time':
                            this.parseTime(c, masterBar);
                            break;
                        case 'staves':
                            // will create staves
                            track.ensureStaveCount(Number.parseInt(c.innerText));
                            break;
                        // case 'part-symbol': Ignored (https://github.com/CoderLine/alphaTab/issues/1989)
                        // case 'instruments': Ignored, auto-detected via `note/instrument` and handled via instrument articulations
                        case 'clef':
                            staffIndex = Number.parseInt(c.getAttribute('number', '1')) - 1;
                            staff = this.getOrCreateStaff(track, staffIndex);
                            bar = this.getOrCreateBar(staff, masterBar);
                            this.parseClef(c, bar);
                            break;
                        case 'staff-details':
                            staffIndex = Number.parseInt(c.getAttribute('number', '1')) - 1;
                            staff = this.getOrCreateStaff(track, staffIndex);
                            this.parseStaffDetails(c, staff);
                            break;
                        case 'transpose':
                            this.parseTranspose(c, track);
                            break;
                        // case 'for-part': not supported
                        // case 'directive': Ignored
                        case 'measure-style':
                            this.parseMeasureStyle(c, track, false);
                            break;
                    }
                }
            }
            else {
                // attribute changes during bar
                for (const c of element.childElements()) {
                    switch (c.localName) {
                        // case 'footnote': Ignored
                        // case 'level': Ignored
                        case 'divisions':
                            this._divisionsPerQuarterNote = Number.parseFloat(c.innerText);
                            break;
                        // https://github.com/CoderLine/alphaTab/issues/1991
                        // case 'key': Not supported
                        // case 'time': Not supported
                        // case 'part-symbol': Not supported
                        // case 'instruments': Ignored
                        // case 'clef': Not supported
                        // case 'staff-details': Not supported
                        // case 'transpose': Not supported
                        // case 'for-part': not supported
                        // case 'directive': Ignored
                        case 'measure-style':
                            this.parseMeasureStyle(c, track, true);
                            break;
                    }
                }
            }
        }
        parseMeasureStyle(element, track, midBar) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'multiple-rest': Ignored, when multibar rests are enabled for rendering this info shouldn't matter.
                    case 'measure-repeat':
                        if (!midBar) {
                            let simileMark = null;
                            switch (c.getAttribute('type')) {
                                case 'start':
                                    switch (Number.parseInt(c.getAttribute('slashes', '1'))) {
                                        case 1:
                                            simileMark = SimileMark.Simple;
                                            break;
                                        case 2:
                                            simileMark = SimileMark.FirstOfDouble;
                                            break;
                                    }
                                    break;
                                case 'stop':
                                    simileMark = null;
                                    break;
                            }
                            if (element.attributes.has('number')) {
                                this._simileMarkPerStaff = this._simileMarkPerStaff ?? new Map();
                                const staff = Number.parseInt(element.attributes.get('number')) - 1;
                                if (simileMark == null) {
                                    this._simileMarkPerStaff.delete(staff);
                                }
                                else {
                                    this._simileMarkPerStaff.set(staff, simileMark);
                                }
                            }
                            else {
                                this._simileMarkAllStaves = simileMark;
                            }
                        }
                        break;
                    // case 'beat-repeat': Not supported
                    case 'slash':
                        // use-stems: not supported
                        switch (c.getAttribute('type')) {
                            case 'start':
                                this._isBeatSlash = true;
                                break;
                            case 'stop':
                                this._isBeatSlash = false;
                                break;
                        }
                        break;
                }
            }
        }
        parseTranspose(element, track) {
            let semitones = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'diatonic': Not supported
                    case 'chromatic':
                        semitones += Number.parseFloat(c.innerText);
                        break;
                    case 'octave-change':
                        semitones += Number.parseFloat(c.innerText) * 12;
                        break;
                    // case 'double': Not supported
                }
            }
            if (element.attributes.has('number')) {
                const staff = this.getOrCreateStaff(track, Number.parseInt(element.attributes.get('number')) - 1);
                this.getStaffContext(staff).transpose = semitones;
                staff.displayTranspositionPitch = semitones;
            }
            else {
                for (const staff of track.staves) {
                    this.getStaffContext(staff).transpose = semitones;
                    staff.displayTranspositionPitch = semitones;
                }
            }
        }
        parseStaffDetails(element, staff) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'staff-type': Ignored
                    case 'staff-lines':
                        staff.standardNotationLineCount = Number.parseInt(c.innerText);
                        break;
                    // case 'line-detail': Not supported
                    case 'staff-tuning':
                        this.parseStaffTuning(c, staff);
                        break;
                    case 'capo':
                        staff.capo = Number.parseInt(c.innerText);
                        break;
                    // case 'staff-size': Not supported
                }
            }
        }
        parseStaffTuning(element, staff) {
            if (staff.stringTuning.tunings.length === 0) {
                staff.showTablature = true;
                staff.showStandardNotation = false;
                staff.stringTuning.tunings = new Array(staff.standardNotationLineCount).fill(0);
            }
            const line = Number.parseInt(element.getAttribute('line'));
            let tuningStep = 'C';
            let tuningOctave = '';
            let tuningAlter = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'tuning-step':
                        tuningStep = c.innerText;
                        break;
                    case 'tuning-alter':
                        tuningAlter = Number.parseFloat(c.innerText);
                        break;
                    case 'tuning-octave':
                        tuningOctave = c.innerText;
                        break;
                }
            }
            const tuning = ModelUtils.getTuningForText(tuningStep + tuningOctave) + tuningAlter;
            staff.tuning[staff.tuning.length - line] = tuning;
        }
        parseClef(element, bar) {
            let sign = 's';
            let line = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'sign':
                        sign = c.innerText.toLowerCase();
                        break;
                    case 'line':
                        line = Number.parseInt(c.innerText);
                        break;
                    case 'clef-octave-change':
                        switch (Number.parseInt(c.innerText)) {
                            case -2:
                                bar.clefOttava = Ottavia._15mb;
                                break;
                            case -1:
                                bar.clefOttava = Ottavia._8vb;
                                break;
                            case 1:
                                bar.clefOttava = Ottavia._8va;
                                break;
                            case 2:
                                bar.clefOttava = Ottavia._15mb;
                                break;
                        }
                        break;
                }
            }
            switch (sign) {
                case 'g':
                    bar.clef = Clef.G2;
                    break;
                case 'f':
                    bar.clef = Clef.F4;
                    break;
                case 'c':
                    if (line === 3) {
                        bar.clef = Clef.C3;
                    }
                    else {
                        bar.clef = Clef.C4;
                    }
                    break;
                case 'percussion':
                    bar.clef = Clef.Neutral;
                    bar.staff.isPercussion = true;
                    break;
                case 'tab':
                    bar.clef = Clef.G2;
                    bar.staff.showTablature = true;
                    break;
                default:
                    bar.clef = Clef.G2;
                    break;
            }
        }
        parseTime(element, masterBar) {
            let beatsParsed = false;
            let beatTypeParsed = false;
            for (const c of element.childElements()) {
                const v = c.innerText;
                switch (c.localName) {
                    case 'beats':
                        if (!beatsParsed) {
                            if (v.indexOf('+') === -1) {
                                masterBar.timeSignatureNumerator = Number.parseInt(v);
                            }
                            else {
                                masterBar.timeSignatureNumerator = v
                                    .split('+')
                                    .map(v => Number.parseInt(v))
                                    .reduce((sum, v) => v + sum, 0);
                            }
                            beatsParsed = true;
                        }
                        break;
                    case 'beat-type':
                        if (!beatTypeParsed) {
                            if (v.indexOf('+') === -1) {
                                masterBar.timeSignatureDenominator = Number.parseInt(v);
                            }
                            else {
                                masterBar.timeSignatureDenominator = v
                                    .split('+')
                                    .map(v => Number.parseInt(v))
                                    .reduce((sum, v) => v + sum, 0);
                            }
                            beatTypeParsed = true;
                        }
                        break;
                    // case 'interchangeable': Not supported
                    // case 'senza-misura': Not supported
                }
            }
            switch (element.getAttribute('symbol', '')) {
                case 'common':
                case 'cut':
                    masterBar.timeSignatureCommon = true;
                    break;
                // case 'dotted-note': Not supported
                // case 'normal': implicit
                // case 'note': Not supported
                // case 'single-number': Not supported
            }
        }
        parseKey(element, masterBar, track) {
            let fifths = -KeySignature.C;
            let mode = '';
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'cancel': not supported
                    case 'fifths':
                        fifths = Number.parseInt(c.innerText);
                        break;
                    case 'mode':
                        mode = c.innerText;
                        break;
                    // case 'key-step': Not supported
                    // case 'key-alter': Not supported
                    // case 'key-accidental': Not supported
                    // case 'key-octave': Not supported
                }
            }
            let keySignature;
            if (-7 <= fifths && fifths <= 7) {
                keySignature = fifths;
            }
            else {
                keySignature = KeySignature.C;
            }
            let keySignatureType;
            if (mode === 'minor') {
                keySignatureType = KeySignatureType.Minor;
            }
            else {
                keySignatureType = KeySignatureType.Major;
            }
            if (element.attributes.has('number')) {
                const staff = this.getOrCreateStaff(track, Number.parseInt(element.attributes.get('number')) - 1);
                const bar = this.getOrCreateBar(staff, masterBar);
                bar.keySignature = keySignature;
                bar.keySignatureType = keySignatureType;
            }
            else {
                // remember for bars which will be created
                this._keyAllStaves = [keySignature, keySignatureType];
                // apply to potentially created bars
                for (const s of track.staves) {
                    if (s.bars.length > masterBar.index) {
                        s.bars[masterBar.index].keySignature = keySignature;
                        s.bars[masterBar.index].keySignatureType = keySignatureType;
                    }
                }
            }
        }
        parseDirection(element, masterBar, track) {
            const directionTypes = [];
            let offset = null;
            // let voiceIndex = -1;
            let staffIndex = -1;
            let tempo = -1;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'direction-type':
                        // See https://github.com/CoderLine/alphaTab/issues/2102
                        const type = c.firstElement;
                        if (type) {
                            directionTypes.push(type);
                        }
                        break;
                    case 'offset':
                        offset = Number.parseFloat(c.innerText);
                        break;
                    // case 'footnote': Ignored
                    // case 'level': Ignored
                    case 'voice':
                        // voiceIndex = parseInt(c.innerText) - 1;
                        break;
                    case 'staff':
                        staffIndex = Number.parseInt(c.innerText) - 1;
                        break;
                    case 'sound':
                        if (c.attributes.has('tempo')) {
                            tempo = Number.parseFloat(c.attributes.get('tempo'));
                        }
                        break;
                    // case 'listening': Ignored
                }
            }
            let staff = null;
            if (staffIndex >= 0) {
                staff = this.getOrCreateStaff(track, staffIndex);
            }
            else if (this._lastBeat !== null) {
                staff = this._lastBeat.voice.bar.staff;
            }
            else {
                staff = this.getOrCreateStaff(track, 0);
            }
            const bar = staff ? this.getOrCreateBar(staff, masterBar) : null;
            const getRatioPosition = () => {
                let timelyPosition = this._musicalPosition;
                if (offset !== null) {
                    timelyPosition += offset;
                }
                const totalDuration = masterBar.calculateDuration(false);
                return timelyPosition / totalDuration;
            };
            if (tempo > 0) {
                const tempoAutomation = new Automation();
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = tempo;
                tempoAutomation.ratioPosition = getRatioPosition();
                if (!this.hasSameTempo(masterBar, tempoAutomation)) {
                    masterBar.tempoAutomations.push(tempoAutomation);
                    if (masterBar.index === 0) {
                        masterBar.score.tempo = tempoAutomation.value;
                    }
                }
            }
            let previousWords = '';
            for (const direction of directionTypes) {
                switch (direction.localName) {
                    case 'rehearsal':
                        masterBar.section = new Section();
                        masterBar.section.marker = direction.innerText;
                        break;
                    case 'segno':
                        masterBar.addDirection(Direction.TargetSegno);
                        break;
                    case 'coda':
                        masterBar.addDirection(Direction.TargetCoda);
                        break;
                    case 'words':
                        previousWords = direction.innerText;
                        break;
                    // case 'symbol': Not supported
                    case 'wedge':
                        switch (direction.getAttribute('type')) {
                            case 'crescendo':
                                this._nextBeatCrescendo = CrescendoType.Crescendo;
                                break;
                            case 'diminuendo':
                                this._nextBeatCrescendo = CrescendoType.Decrescendo;
                                break;
                            // case 'continue': Ignore
                            case 'stop':
                                this._nextBeatCrescendo = null;
                                break;
                        }
                        break;
                    case 'dynamics':
                        const newDynamics = this.parseDynamics(direction);
                        if (newDynamics !== null) {
                            this._currentDynamics = newDynamics;
                            this._score.stylesheet.hideDynamics = false;
                        }
                        break;
                    case 'dashes':
                        const type = direction.getAttribute('type', 'start');
                        switch (previousWords) {
                            case 'LetRing':
                                this._nextBeatLetRing = type === 'start' || type === 'continue';
                                break;
                            case 'P.M.':
                                this._nextBeatPalmMute = type === 'start' || type === 'continue';
                                break;
                        }
                        previousWords = '';
                        break;
                    // case 'bracket': Ignored
                    case 'pedal':
                        const pedal = this.parsePedal(direction);
                        if (pedal && bar) {
                            pedal.ratioPosition = getRatioPosition();
                            // up or holds without a previous down/hold?
                            const canHaveUp = bar.sustainPedals.length > 0 &&
                                bar.sustainPedals[bar.sustainPedals.length - 1].pedalType !== SustainPedalMarkerType.Up;
                            if (pedal.pedalType !== SustainPedalMarkerType.Up || canHaveUp) {
                                bar.sustainPedals.push(pedal);
                            }
                        }
                        break;
                    case 'metronome':
                        this.parseMetronome(direction, masterBar, getRatioPosition());
                        break;
                    case 'octave-shift':
                        this._nextBeatOttavia = this.parseOctaveShift(direction);
                        break;
                    // case 'harp-pedals': Not supported
                    // case 'damp': Not supported
                    // case 'damp-all': Not supported
                    // case 'eyeglasses': Not supported
                    // case 'string-mute': Not supported
                    // case 'scordatura': Not supported
                    // case 'image': Not supported
                    // case 'principal-voice': Not supported
                    // case 'percussion': Not supported
                    // case 'accordion-registration': Not supported
                    // case 'staff-divide': Not supported
                    // case 'other-direction': Not supported
                }
            }
            if (previousWords) {
                this._nextBeatText = previousWords;
            }
        }
        parseOctaveShift(element) {
            const type = element.getAttribute('type');
            const size = Number.parseInt(element.getAttribute('size', '8'));
            switch (size) {
                case 15:
                    switch (type) {
                        case 'up':
                            return Ottavia._15mb;
                        case 'down':
                            return Ottavia._15ma;
                        case 'stop':
                            return Ottavia.Regular;
                        case 'continue':
                            return this._nextBeatOttavia;
                    }
                    break;
                case 8:
                    switch (type) {
                        case 'up':
                            return Ottavia._8vb;
                        case 'down':
                            return Ottavia._8va;
                        case 'stop':
                            return Ottavia.Regular;
                        case 'continue':
                            return this._nextBeatOttavia;
                    }
                    break;
            }
            return null;
        }
        parseMetronome(element, masterBar, ratioPosition) {
            let unit = null;
            let perMinute = -1;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'beat-unit':
                        unit = this.parseBeatDuration(c);
                        break;
                    //  case 'beat-unit-dot' not supported
                    //  case 'beat-unit-tied' not supported
                    case 'per-minute':
                        perMinute = Number.parseFloat(c.innerText);
                        break;
                    // case 'metronome-arrows': not supported
                    // case 'metronome-note': not supported
                    // case 'metronome-relation': not supported
                }
            }
            if (unit !== null && perMinute > 0) {
                const tempoAutomation = new Automation();
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = (perMinute * (unit / 4)) | 0;
                tempoAutomation.ratioPosition = ratioPosition;
                if (!this.hasSameTempo(masterBar, tempoAutomation)) {
                    masterBar.tempoAutomations.push(tempoAutomation);
                    if (masterBar.index === 0) {
                        masterBar.score.tempo = tempoAutomation.value;
                    }
                }
            }
        }
        hasSameTempo(masterBar, tempoAutomation) {
            for (const existing of masterBar.tempoAutomations) {
                if (tempoAutomation.ratioPosition === existing.ratioPosition && tempoAutomation.value === existing.value) {
                    return true;
                }
            }
            return false;
        }
        parsePedal(element) {
            const marker = new SustainPedalMarker();
            switch (element.getAttribute('type')) {
                case 'start':
                    marker.pedalType = SustainPedalMarkerType.Down;
                    break;
                case 'stop':
                    marker.pedalType = SustainPedalMarkerType.Up;
                    break;
                // case 'sostenuto': Not supported
                // case 'change': Not supported
                case 'continue':
                    marker.pedalType = SustainPedalMarkerType.Hold;
                    break;
                // case 'discontinue': Not supported
                // case 'resume': Not supported
                default:
                    return null;
            }
            return marker;
        }
        parseDynamics(element) {
            for (const c of element.childElements()) {
                // we are having the same enum names as MusicXML uses as tagnames
                const dynamicString = c.localName.toUpperCase();
                switch (dynamicString) {
                    case 'PPP':
                    case 'PP':
                    case 'P':
                    case 'MP':
                    case 'MF':
                    case 'F':
                    case 'FF':
                    case 'FFF':
                    case 'PPPP':
                    case 'PPPPP':
                    case 'PPPPPP':
                    case 'FFFF':
                    case 'FFFFF':
                    case 'FFFFFF':
                    case 'SF':
                    case 'SFP':
                    case 'SFPP':
                    case 'FP':
                    case 'RF':
                    case 'RFZ':
                    case 'SFZ':
                    case 'SFFZ':
                    case 'FZ':
                    case 'N':
                    case 'PF':
                    case 'SFZP':
                        return DynamicValue[dynamicString];
                    // case 'other-dynamics': not supported
                }
            }
            return null;
        }
        parseForward(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'duration':
                        this._musicalPosition += this.musicXmlDivisionsToAlphaTabTicks(Number.parseFloat(c.innerText));
                        break;
                    // case 'footnote': Ignored
                    // case 'level': Ignored
                    // case 'voice': Not supported, spec is quite vague how to this should behave, we keep it simple for now
                    // case 'staff': Not supported, spec is quite vague how to this should behave, we keep it simple for now
                }
            }
        }
        parseBackup(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'duration':
                        const beat = this._lastBeat;
                        if (beat) {
                            let musicalPosition = this._musicalPosition;
                            musicalPosition -= this.musicXmlDivisionsToAlphaTabTicks(Number.parseFloat(c.innerText));
                            if (musicalPosition < 0) {
                                musicalPosition = 0;
                            }
                            this._musicalPosition = musicalPosition;
                        }
                        break;
                    // case 'footnote': Ignored
                    // case 'level': Ignored
                }
            }
        }
        getOrCreateStaff(track, staffIndex) {
            while (track.staves.length <= staffIndex) {
                const staff = new Staff();
                track.addStaff(staff);
                // ensure bars on new staff
                if (this._score.masterBars.length > 0) {
                    this.getOrCreateBar(staff, this._score.masterBars[this._score.masterBars.length - 1]);
                }
            }
            return track.staves[staffIndex];
        }
        getOrCreateBar(staff, masterBar) {
            const voiceCount = staff.bars.length === 0 ? 1 : staff.bars[0].voices.length;
            while (staff.bars.length <= masterBar.index) {
                const newBar = new Bar();
                staff.addBar(newBar);
                if (newBar.previousBar) {
                    newBar.clef = newBar.previousBar.clef;
                    newBar.clefOttava = newBar.previousBar.clefOttava;
                    newBar.keySignature = newBar.previousBar.keySignature;
                    newBar.keySignatureType = newBar.previousBar.keySignatureType;
                }
                if (this._keyAllStaves != null) {
                    newBar.keySignature = this._keyAllStaves[0];
                    newBar.keySignatureType = this._keyAllStaves[1];
                }
                for (let i = 0; i < voiceCount; i++) {
                    const voice = new Voice$1();
                    newBar.addVoice(voice);
                }
            }
            return staff.bars[masterBar.index];
        }
        getOrCreateVoice(bar, voiceIndex) {
            let voicesCreated = false;
            while (bar.voices.length <= voiceIndex) {
                bar.addVoice(new Voice$1());
                voicesCreated = true;
            }
            // ensure voices on all bars
            if (voicesCreated) {
                for (const b of bar.staff.bars) {
                    while (b.voices.length <= voiceIndex) {
                        b.addVoice(new Voice$1());
                    }
                }
            }
            return bar.voices[voiceIndex];
        }
        parseNote(element, masterBar, track) {
            // Beat level information
            let beat = null;
            let graceType = GraceType.None;
            let graceDurationInDivisions = 0;
            let beamMode = null;
            // let graceTimeStealPrevious = 0;
            // let graceTimeStealFollowing = 0;
            let isChord = false;
            let staffIndex = 0;
            let voiceIndex = 0;
            let durationInTicks = -1;
            let beatDuration = null;
            let dots = 0;
            let tupletNumerator = -1;
            let tupletDenominator = -1;
            let preferredBeamDirection = null;
            // Note level
            let note = null;
            let isPitched = false;
            let instrumentId = null;
            const noteIsVisible = element.getAttribute('print-object', 'yes') !== 'no';
            // will create new beat with all information in the correct tree
            // or add the note to an existing beat if specified accordingly.
            const ensureBeat = () => {
                if (beat !== null) {
                    return;
                }
                if (isChord && !this._lastBeat) {
                    Logger.warning('MusicXML', 'Malformed MusicXML, <chord /> cannot be set on the first note of a measure');
                    isChord = false;
                }
                if (isChord && !note) {
                    Logger.warning('MusicXML', 'Cannot mix <chord /> and <rest />');
                    isChord = false;
                }
                const staff = this.getOrCreateStaff(track, staffIndex);
                if (isChord) {
                    beat = this._lastBeat;
                    beat.addNote(note);
                    return;
                }
                const bar = this.getOrCreateBar(staff, masterBar);
                const voice = this.getOrCreateVoice(bar, voiceIndex);
                const actualMusicalPosition = voice.beats.length === 0 ? 0 : voice.beats[voice.beats.length - 1].displayEnd;
                let gap = this._musicalPosition - actualMusicalPosition;
                if (gap > 0) {
                    // we do not support cross staff beams yet and its a bigger thing to implement
                    // until then we try to detect whether we have a beam-group
                    // which starts at this staff, swaps to another, and comes back.
                    // then we create matching rests here
                    if (
                    // Previously created beat has forced beams and is on another stuff
                    this._lastBeat &&
                        this._lastBeat.beamingMode === BeatBeamingMode.ForceMergeWithNext &&
                        this._lastBeat.voice.bar.staff.index !== staffIndex &&
                        // previous beat on this staff is also forced
                        voice.beats.length > 0 &&
                        voice.beats[voice.beats.length - 1].beamingMode === BeatBeamingMode.ForceMergeWithNext) {
                        // chances are high that we have notes like this
                        // staff1Note -> staff2Note -> staff2Note -> staff1Note
                        // in this case we create rests for the gap caused by the staff2Notes
                        const preferredDuration = voice.beats[voice.beats.length - 1].duration;
                        while (gap > 0) {
                            const restGap = this.createRestForGap(gap, preferredDuration);
                            if (restGap !== null) {
                                this.insertBeatToVoice(restGap, voice);
                                gap -= restGap.playbackDuration;
                            }
                            else {
                                break;
                            }
                        }
                    }
                    // need an empty placeholder beat for the gap
                    if (gap > 0) {
                        const placeholder = new Beat();
                        placeholder.dynamics = this._currentDynamics;
                        placeholder.isEmpty = true;
                        placeholder.duration = Duration.TwoHundredFiftySixth; // smallest we have
                        placeholder.overrideDisplayDuration = gap;
                        placeholder.updateDurations();
                        this.insertBeatToVoice(placeholder, voice);
                    }
                }
                else if (gap < 0) {
                    Logger.error('MusicXML', 'Unsupported forward/backup detected. Cannot fill new beats into already filled area of voice');
                }
                if (durationInTicks < 0 && beatDuration !== null) {
                    durationInTicks = MidiUtils.toTicks(beatDuration);
                    if (dots > 0) {
                        durationInTicks = MidiUtils.applyDot(durationInTicks, dots === 2);
                    }
                }
                const newBeat = new Beat();
                beat = newBeat;
                if (beamMode === null) {
                    newBeat.beamingMode = this.getStaffContext(staff).isExplicitlyBeamed
                        ? BeatBeamingMode.ForceSplitToNext
                        : BeatBeamingMode.Auto;
                }
                else {
                    newBeat.beamingMode = beamMode;
                    this.getStaffContext(staff).isExplicitlyBeamed = true;
                }
                newBeat.isEmpty = false;
                newBeat.dynamics = this._currentDynamics;
                if (this._isBeatSlash) {
                    newBeat.slashed = true;
                }
                const automations = this._nextBeatAutomations;
                this._nextBeatAutomations = null;
                if (automations !== null) {
                    for (const automation of automations) {
                        newBeat.automations.push(automation);
                    }
                }
                const chord = this._nextBeatChord;
                this._nextBeatChord = null;
                if (chord !== null) {
                    newBeat.chordId = chord.uniqueId;
                    if (!voice.bar.staff.hasChord(chord.uniqueId)) {
                        voice.bar.staff.addChord(newBeat.chordId, chord);
                    }
                }
                const crescendo = this._nextBeatCrescendo;
                // Don't reset until 'stop' this._nextBeatCrescendo = null;
                if (crescendo !== null) {
                    newBeat.crescendo = crescendo;
                }
                const ottavia = this._nextBeatOttavia;
                // Don't set until 'stop'
                if (ottavia !== null) {
                    newBeat.ottava = ottavia;
                }
                newBeat.isLetRing = this._nextBeatLetRing;
                newBeat.isPalmMute = this._nextBeatPalmMute;
                if (this._nextBeatText) {
                    newBeat.text = this._nextBeatText;
                    this._nextBeatText = null;
                }
                if (note !== null) {
                    newBeat.addNote(note);
                }
                this.insertBeatToVoice(newBeat, voice);
                if (note !== null) {
                    note.isVisible = noteIsVisible;
                    const trackInfo = this._indexToTrackInfo.get(track.index);
                    if (instrumentId !== null) {
                        note.percussionArticulation = trackInfo.getOrCreateArticulation(instrumentId, note);
                    }
                    else if (!isPitched) {
                        note.percussionArticulation = trackInfo.getOrCreateArticulation('', note);
                    }
                }
                // duration only after we added it into the tree
                if (graceType !== GraceType.None) {
                    newBeat.graceType = graceType;
                    this.applyBeatDurationFromTicks(newBeat, graceDurationInDivisions, null, false);
                }
                else {
                    newBeat.tupletNumerator = tupletNumerator;
                    newBeat.tupletDenominator = tupletDenominator;
                    newBeat.dots = dots;
                    newBeat.preferredBeamDirection = preferredBeamDirection;
                    this.applyBeatDurationFromTicks(newBeat, durationInTicks, beatDuration, true);
                }
                this._musicalPosition = newBeat.displayEnd;
                this._lastBeat = newBeat;
            };
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'grace':
                        const makeTime = Number.parseFloat(c.getAttribute('make-time', '-1'));
                        if (makeTime >= 0) {
                            graceDurationInDivisions = this.musicXmlDivisionsToAlphaTabTicks(makeTime);
                            graceType = GraceType.BeforeBeat;
                        }
                        else {
                            graceType = GraceType.OnBeat;
                        }
                        if (c.getAttribute('slash') === 'yes') {
                            graceType = GraceType.BeforeBeat;
                        }
                        // graceTimeStealPrevious = parseInt(c.getAttribute('steal-time-following', '0')) / 100.0;
                        // graceTimeStealFollowing = parseInt(c.getAttribute('steal-time-previous', '0')) / 100.0;
                        break;
                    case 'chord':
                        isChord = true;
                        break;
                    case 'cue':
                        // not supported
                        // as they are meant to not be played, we skip them completely
                        // instead of handling them wrong.
                        return;
                    case 'pitch':
                        note = this.parsePitch(c);
                        isPitched = true;
                        break;
                    case 'unpitched':
                        note = this.parseUnpitched(c, track);
                        break;
                    case 'rest':
                        note = null; // rest beat
                        if (beatDuration === null) {
                            beatDuration = Duration.Whole;
                        }
                        break;
                    case 'duration':
                        durationInTicks = this.parseDuration(c);
                        break;
                    // case 'tie': Ignored -> "tie" is sound, "tied" is notation
                    case 'instrument':
                        instrumentId = c.getAttribute('id', '');
                        break;
                    // case 'footnote': Ignored
                    // case 'level': Ignored
                    case 'voice':
                        voiceIndex = Number.parseInt(c.innerText);
                        if (Number.isNaN(voiceIndex)) {
                            Logger.warning('MusicXML', 'Voices need to be specified as numbers');
                            voiceIndex = 0;
                        }
                        else {
                            voiceIndex = voiceIndex - 1;
                        }
                        break;
                    case 'type':
                        beatDuration = this.parseBeatDuration(c);
                        break;
                    case 'dot':
                        dots++;
                        break;
                    case 'accidental':
                        if (note === null) {
                            Logger.warning('MusicXML', 'Malformed MusicXML, missing pitch or unpitched for note');
                        }
                        else {
                            this.parseAccidental(c, note);
                        }
                        break;
                    case 'time-modification':
                        for (const tmc of c.childElements()) {
                            switch (tmc.localName) {
                                case 'actual-notes':
                                    tupletNumerator = Number.parseInt(tmc.innerText);
                                    break;
                                case 'normal-notes':
                                    tupletDenominator = Number.parseInt(tmc.innerText);
                                    break;
                                // case 'normal-type': not supported
                                // case 'normal-dot': not supported
                            }
                        }
                        break;
                    case 'stem':
                        preferredBeamDirection = this.parseStem(c);
                        break;
                    case 'notehead':
                        if (note === null) {
                            Logger.warning('MusicXML', 'Malformed MusicXML, missing pitch or unpitched for note');
                        }
                        else {
                            this.parseNoteHead(c, note, beatDuration ?? Duration.Quarter, preferredBeamDirection ?? this.estimateBeamDirection(note));
                        }
                        break;
                    // case 'notehead-text': Not supported
                    case 'staff':
                        staffIndex = Number.parseInt(c.innerText) - 1;
                        break;
                    case 'beam':
                        // use the first beam as indicator whether to beam or split
                        if (c.getAttribute('number', '1') === '1') {
                            switch (c.innerText) {
                                case 'begin':
                                    beamMode = BeatBeamingMode.ForceMergeWithNext;
                                    break;
                                case 'continue':
                                    beamMode = BeatBeamingMode.ForceMergeWithNext;
                                    break;
                                case 'end':
                                    beamMode = BeatBeamingMode.ForceSplitToNext;
                                    break;
                            }
                        }
                        break;
                    case 'notations':
                        ensureBeat();
                        this.parseNotations(c, note, beat);
                        break;
                    case 'lyric':
                        ensureBeat();
                        this.parseLyric(c, beat, track);
                        break;
                    case 'play':
                        this.parsePlay(c, note);
                        break;
                    // case 'listen': Ignored
                }
            }
            if (isPitched) {
                const staff = this.getOrCreateStaff(track, staffIndex);
                const transpose = this.getStaffContext(staff).transpose;
                if (transpose !== 0) {
                    const value = note.octave * 12 + note.tone + transpose;
                    note.octave = (value / 12) | 0;
                    note.tone = value - note.octave * 12;
                }
            }
            // if not yet created do it befor we exit to ensure we created the beat/note
            ensureBeat();
        }
        parsePlay(element, note) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'ipa': Ignored
                    case 'mute':
                        if (note && c.innerText === 'palm') {
                            note.isPalmMute = true;
                        }
                        break;
                    // case 'other-play': Ignored
                }
            }
        }
        estimateBeamDirection(note) {
            return note.calculateRealValue(false, false) < MusicXmlImporter.B4Value ? BeamDirection.Down : BeamDirection.Up;
        }
        parseNoteHead(element, note, beatDuration, beamDirection) {
            if (element.getAttribute('parentheses', 'no') === 'yes') {
                note.isGhost = true;
            }
            const filled = element.getAttribute('filled', '');
            let forceFill = undefined;
            if (filled === 'yes') {
                forceFill = true;
            }
            else if (filled === 'no') {
                forceFill = false;
            }
            note.style = new NoteStyle();
            switch (element.innerText) {
                case 'arrow down':
                    note.style.noteHeadCenterOnStem = true;
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadTriangleDownDoubleWhole, MusicFontSymbol.NoteheadTriangleDownWhole, MusicFontSymbol.NoteheadTriangleDownHalf, MusicFontSymbol.NoteheadTriangleDownBlack);
                    break;
                case 'arrow up':
                    note.style.noteHeadCenterOnStem = true;
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadTriangleUpDoubleWhole, MusicFontSymbol.NoteheadTriangleUpWhole, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpBlack);
                    break;
                case 'back slashed':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadSlashedDoubleWhole2, MusicFontSymbol.NoteheadSlashedWhole2, MusicFontSymbol.NoteheadSlashedHalf2, MusicFontSymbol.NoteheadSlashedBlack2);
                    break;
                case 'circle dot':
                    note.style.noteHead = MusicFontSymbol.NoteheadRoundWhiteWithDot;
                    break;
                case 'circle-x':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadCircleXDoubleWhole, MusicFontSymbol.NoteheadCircleXWhole, MusicFontSymbol.NoteheadCircleXHalf, MusicFontSymbol.NoteheadCircleX);
                    break;
                case 'circled':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadCircledDoubleWhole, MusicFontSymbol.NoteheadCircledWhole, MusicFontSymbol.NoteheadCircledHalf, MusicFontSymbol.NoteheadCircledBlack);
                    break;
                case 'cluster':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadClusterDoubleWhole3rd, MusicFontSymbol.NoteheadClusterWhole3rd, MusicFontSymbol.NoteheadClusterHalf3rd, MusicFontSymbol.NoteheadClusterQuarter3rd);
                    break;
                case 'cross':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadPlusDoubleWhole, MusicFontSymbol.NoteheadPlusWhole, MusicFontSymbol.NoteheadPlusHalf, MusicFontSymbol.NoteheadPlusBlack);
                    break;
                case 'diamond':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadDiamondDoubleWhole, MusicFontSymbol.NoteheadDiamondWhole, MusicFontSymbol.NoteheadDiamondHalf, MusicFontSymbol.NoteheadDiamondBlack);
                    break;
                case 'do':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeTriangleUpWhite, MusicFontSymbol.NoteShapeTriangleUpWhite, MusicFontSymbol.NoteShapeTriangleUpWhite, MusicFontSymbol.NoteShapeTriangleUpBlack);
                    break;
                case 'fa':
                    if (beamDirection === BeamDirection.Up) {
                        this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeTriangleRightWhite, MusicFontSymbol.NoteShapeTriangleRightWhite, MusicFontSymbol.NoteShapeTriangleRightWhite, MusicFontSymbol.NoteShapeTriangleRightBlack);
                    }
                    else {
                        this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftBlack);
                    }
                    break;
                case 'fa up':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftWhite, MusicFontSymbol.NoteShapeTriangleLeftBlack);
                    break;
                case 'inverted triangle':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadTriangleDownDoubleWhole, MusicFontSymbol.NoteheadTriangleDownWhole, MusicFontSymbol.NoteheadTriangleDownHalf, MusicFontSymbol.NoteheadTriangleDownBlack);
                    break;
                case 'la':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareBlack);
                    break;
                case 'left triangle':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadTriangleRightWhite, MusicFontSymbol.NoteheadTriangleRightWhite, MusicFontSymbol.NoteheadTriangleRightWhite, MusicFontSymbol.NoteheadTriangleRightBlack);
                    break;
                case 'mi':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeDiamondWhite, MusicFontSymbol.NoteShapeDiamondWhite, MusicFontSymbol.NoteShapeDiamondWhite, MusicFontSymbol.NoteShapeDiamondBlack);
                    break;
                case 'none':
                    note.style.noteHead = MusicFontSymbol.NoteheadNull;
                    break;
                case 'normal':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadDoubleWhole, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadBlack);
                    break;
                case 're':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeMoonWhite, MusicFontSymbol.NoteShapeMoonWhite, MusicFontSymbol.NoteShapeMoonWhite, MusicFontSymbol.NoteShapeMoonBlack);
                    break;
                case 'rectangle':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadSquareWhite, MusicFontSymbol.NoteheadSquareWhite, MusicFontSymbol.NoteheadSquareWhite, MusicFontSymbol.NoteheadSquareBlack);
                    break;
                case 'slash':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadSlashWhiteWhole, MusicFontSymbol.NoteheadSlashWhiteWhole, MusicFontSymbol.NoteheadSlashWhiteHalf, MusicFontSymbol.NoteheadSlashVerticalEnds);
                    break;
                case 'slashed':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadSlashedDoubleWhole1, MusicFontSymbol.NoteheadSlashedWhole1, MusicFontSymbol.NoteheadSlashedHalf1, MusicFontSymbol.NoteheadSlashedBlack1);
                    break;
                case 'so':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeRoundWhite, MusicFontSymbol.NoteShapeRoundWhite, MusicFontSymbol.NoteShapeRoundWhite, MusicFontSymbol.NoteShapeRoundBlack);
                    break;
                case 'square':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareWhite, MusicFontSymbol.NoteShapeSquareBlack);
                    break;
                case 'ti':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteShapeTriangleRoundWhite, MusicFontSymbol.NoteShapeTriangleRoundWhite, MusicFontSymbol.NoteShapeTriangleRoundWhite, MusicFontSymbol.NoteShapeTriangleRoundBlack);
                    break;
                case 'triangle':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadTriangleUpDoubleWhole, MusicFontSymbol.NoteheadTriangleUpWhole, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpBlack);
                    break;
                case 'x':
                    this.applyNoteHead(note, beatDuration, forceFill, MusicFontSymbol.NoteheadXDoubleWhole, MusicFontSymbol.NoteheadXWhole, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXBlack);
                    break;
            }
        }
        createRestForGap(gap, preferredDuration) {
            let preferredDurationTicks = MidiUtils.toTicks(preferredDuration);
            // shorten the beat duration until we fit
            while (preferredDurationTicks > gap) {
                if (preferredDuration === Duration.TwoHundredFiftySixth) {
                    return null; // cannot get shorter
                }
                preferredDuration = (preferredDuration * 2);
                preferredDurationTicks = MidiUtils.toTicks(preferredDuration);
            }
            const placeholder = new Beat();
            placeholder.dynamics = this._currentDynamics;
            placeholder.isEmpty = false;
            placeholder.duration = preferredDuration;
            placeholder.overrideDisplayDuration = preferredDurationTicks;
            placeholder.updateDurations();
            return placeholder;
        }
        insertBeatToVoice(newBeat, voice) {
            // for handling the correct musical position we already need to do some basic beat linking
            // and assignments of start/durations as we progress.
            if (voice.beats.length > 0) {
                const lastBeat = voice.beats[voice.beats.length - 1];
                // chain beats already
                lastBeat.nextBeat = newBeat;
                newBeat.previousBeat = lastBeat;
                // find display start from previous non-grace beat,
                // reminder: we give grace a display position of 0, that's why we skip them.
                // visually they 'stick' to their next beat.
                let previousNonGraceBeat = lastBeat;
                while (previousNonGraceBeat !== null) {
                    if (previousNonGraceBeat.graceType === GraceType.None) {
                        // found
                        break;
                    }
                    if (previousNonGraceBeat.index > 0) {
                        previousNonGraceBeat = previousNonGraceBeat.previousBeat;
                    }
                    else {
                        previousNonGraceBeat = null;
                    }
                }
                if (previousNonGraceBeat !== null) {
                    newBeat.displayStart = previousNonGraceBeat.displayEnd;
                }
            }
            voice.addBeat(newBeat);
        }
        musicXmlDivisionsToAlphaTabTicks(divisions) {
            // we translate the Divisions-per-quarter-note of the MusicXML to our fixed MidiUtils.QuarterTime
            return (divisions * MidiUtils.QuarterTime) / this._divisionsPerQuarterNote;
        }
        parseBeatDuration(element) {
            switch (element.innerText) {
                case '1024th': // not supported
                    return Duration.TwoHundredFiftySixth;
                case '512th': // not supported
                    return Duration.TwoHundredFiftySixth;
                case '256th':
                    return Duration.TwoHundredFiftySixth;
                case '128th':
                    return Duration.OneHundredTwentyEighth;
                case '64th':
                    return Duration.SixtyFourth;
                case '32nd':
                    return Duration.ThirtySecond;
                case '16th':
                    return Duration.Sixteenth;
                case 'eighth':
                    return Duration.Eighth;
                case 'quarter':
                    return Duration.Quarter;
                case 'half':
                    return Duration.Half;
                case 'whole':
                    return Duration.Whole;
                case 'breve':
                    return Duration.DoubleWhole;
                case 'long':
                    return Duration.QuadrupleWhole;
                // case "maxima": not supported
            }
            return null;
        }
        applyBeatDurationFromTicks(newBeat, ticks, beatDuration, applyDisplayDuration) {
            if (!beatDuration) {
                for (let i = 0; i < MusicXmlImporter.allDurations.length; i++) {
                    const dt = MusicXmlImporter.allDurationTicks[i];
                    if (ticks >= dt) {
                        beatDuration = MusicXmlImporter.allDurations[i];
                    }
                    else {
                        break;
                    }
                }
            }
            newBeat.duration = beatDuration ?? Duration.Sixteenth;
            if (applyDisplayDuration) {
                newBeat.overrideDisplayDuration = ticks;
            }
            newBeat.updateDurations();
        }
        parseLyric(element, beat, track) {
            const info = this._indexToTrackInfo.get(track.index);
            const index = info.getLyricLine(element.getAttribute('number', ''));
            if (beat.lyrics === null) {
                beat.lyrics = [];
            }
            while (beat.lyrics.length <= index) {
                beat.lyrics.push('');
            }
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'syllabic' not supported
                    case 'text':
                        if (beat.lyrics[index]) {
                            beat.lyrics[index] += ` ${c.innerText}`;
                        }
                        else {
                            beat.lyrics[index] = c.innerText;
                        }
                        break;
                    case 'elision':
                        beat.lyrics[index] += c.innerText;
                        break;
                }
            }
        }
        parseNotations(element, note, beat) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // case 'footnote': Ignored
                    // case 'level': Ignored
                    case 'tied':
                        if (note) {
                            this.parseTied(c, note, beat.voice.bar.staff);
                        }
                        break;
                    case 'slur':
                        if (note) {
                            this.parseSlur(c, note);
                        }
                        break;
                    // case 'tuplet': Handled via time-modification
                    case 'glissando':
                        if (note) {
                            this.parseGlissando(c, note);
                        }
                        break;
                    case 'slide':
                        if (note) {
                            this.parseSlide(c, note);
                        }
                        break;
                    case 'ornaments':
                        if (note) {
                            this.parseOrnaments(c, note);
                        }
                        break;
                    case 'technical':
                        this.parseTechnical(c, note, beat);
                        break;
                    case 'articulations':
                        if (note) {
                            this.parseArticulations(c, note);
                        }
                        break;
                    case 'dynamics':
                        const dynamics = this.parseDynamics(c);
                        if (dynamics !== null) {
                            beat.dynamics = dynamics;
                            this._currentDynamics = dynamics;
                        }
                        break;
                    case 'fermata':
                        this.parseFermata(c, beat);
                        break;
                    case 'arpeggiate':
                        this.parseArpeggiate(c, beat);
                        break;
                    // case 'non-arpeggiate': Not supported
                    // case 'accidental-mark': Not supported
                    // case 'other-notation': Not supported
                }
            }
        }
        getStaffContext(staff) {
            if (!this._staffToContext.has(staff)) {
                const context = new StaffContext();
                this._staffToContext.set(staff, context);
                return context;
            }
            return this._staffToContext.get(staff);
        }
        parseGlissando(element, note) {
            const type = element.getAttribute('type');
            const number = element.getAttribute('number', '1');
            const context = this.getStaffContext(note.beat.voice.bar.staff);
            switch (type) {
                case 'start':
                    context.slideOrigins.set(number, note);
                    break;
                case 'stop':
                    if (context.slideOrigins.has(number)) {
                        const origin = context.slideOrigins.get(number);
                        origin.slideTarget = note;
                        note.slideOrigin = origin;
                        origin.slideOutType = SlideOutType.Shift; // TODO: wavy lines
                    }
                    break;
            }
        }
        parseSlur(element, note) {
            const slurNumber = element.getAttribute('number', '1');
            const context = this.getStaffContext(note.beat.voice.bar.staff);
            switch (element.getAttribute('type')) {
                case 'start':
                    context.slurStarts.set(slurNumber, note);
                    break;
                case 'stop':
                    if (context.slurStarts.has(slurNumber)) {
                        note.isSlurDestination = true;
                        const slurStart = context.slurStarts.get(slurNumber);
                        slurStart.slurDestination = note;
                        note.slurOrigin = slurStart;
                        context.slurStarts.delete(slurNumber);
                    }
                    break;
            }
        }
        parseArpeggiate(element, beat) {
            const direction = element.getAttribute('direction', 'down');
            switch (direction) {
                case 'down':
                    beat.brushType = BrushType.ArpeggioDown;
                    break;
                case 'up':
                    beat.brushType = BrushType.ArpeggioUp;
                    break;
            }
        }
        parseFermata(element, beat) {
            let fermata;
            switch (element.innerText) {
                case 'normal':
                    fermata = FermataType.Medium;
                    break;
                case 'angled':
                    fermata = FermataType.Short;
                    break;
                case 'square':
                    fermata = FermataType.Long;
                    break;
                // case 'double-angled': Not Supported
                // case 'double-square': Not Supported
                // case 'double-dot': Not Supported
                // case 'half-curve': Not Supported
                // case 'curlew': Not Supported
                default:
                    fermata = FermataType.Medium;
                    break;
            }
            beat.fermata = new Fermata();
            beat.fermata.type = fermata;
        }
        parseArticulations(element, note) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'accent':
                        note.accentuated = AccentuationType.Normal;
                        break;
                    case 'strong-accent':
                        note.accentuated = AccentuationType.Heavy;
                        break;
                    case 'staccato':
                        note.isStaccato = true;
                        break;
                    case 'tenuto':
                        note.accentuated = AccentuationType.Tenuto;
                        break;
                    // case 'detached-legato': Not Supported
                    // case 'staccatissimo': Not Supported
                    // case 'spiccato': Not Supported
                    // case 'scoop': Not Supported
                    // case 'plop': Not Supported
                    // case 'doit': Not Supported
                    // case 'falloff': Not Supported
                    // case 'breath-mark': Not Supported
                    // case 'caesura': Not Supported
                    // case 'stress': Not Supported
                    // case 'unstress': Not Supported
                    // case 'soft-accent': Not Supported
                    // case 'other-articulation': Not Supported
                }
            }
        }
        parseTechnical(element, note, beat) {
            const bends = [];
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'up-bow':
                        beat.pickStroke = PickStroke.Up;
                        break;
                    case 'down-bow':
                        beat.pickStroke = PickStroke.Down;
                        break;
                    case 'harmonic':
                        break;
                    // case 'open-string': Not supported
                    // case 'thumb-position': Not supported
                    case 'fingering':
                        if (note) {
                            note.leftHandFinger = this.parseFingering(c);
                        }
                        break;
                    case 'pluck':
                        if (note) {
                            note.rightHandFinger = this.parseFingering(c);
                        }
                        break;
                    // case 'double-tongue': Not supported
                    // case 'triple-tongue': Not supported
                    // case 'stopped':  Not supported
                    // case 'snap-pizzicato':  Not supported
                    case 'fret':
                        if (note) {
                            note.fret = Number.parseInt(c.innerText);
                        }
                        break;
                    case 'string':
                        if (note) {
                            note.string = beat.voice.bar.staff.tuning.length - Number.parseInt(c.innerText) + 1;
                        }
                        break;
                    case 'hammer-on':
                    case 'pull-off':
                        if (note) {
                            note.isHammerPullOrigin = true;
                        }
                        break;
                    case 'bend':
                        bends.push(c);
                        break;
                    case 'tap':
                        beat.tap = true;
                        break;
                    // case 'heel': Not supported
                    // case 'toe': Not supported
                    // case 'fingernails': Not supported
                    // case 'hole': Not supported
                    // case 'arrow': Not supported
                    // case 'handbell': Not supported
                    // case 'brass-bend': Not supported
                    // case 'flip': Not supported
                    case 'smear':
                        if (note) {
                            note.vibrato = VibratoType.Slight;
                        }
                        break;
                    // case 'open': Not supported
                    // case 'half-muted': Not supported
                    // case 'harmon-mute': Not supported
                    case 'golpe':
                        switch (c.getAttribute('placement', 'above')) {
                            case 'above':
                                beat.golpe = GolpeType.Finger;
                                break;
                            case 'below':
                                beat.golpe = GolpeType.Thumb;
                                break;
                        }
                        break;
                    // case 'other-technical': Not supported
                }
            }
            if (note && bends.length > 0) {
                this.parseBends(bends, note);
            }
        }
        parseBends(elements, note) {
            const baseOffset = BendPoint.MaxPosition / elements.length;
            let currentValue = 0; // stores the current pitch alter when going through the bends (in 1/4 tones)
            let currentOffset = 0; // stores the current offset when going through the bends (from 0 to 60)
            let isFirstBend = true;
            for (const bend of elements) {
                const bendAlterElement = bend.findChildElement('bend-alter');
                if (bendAlterElement) {
                    const absValue = Math.round(Math.abs(Number.parseFloat(bendAlterElement.innerText)) * 2);
                    if (bend.findChildElement('pre-bend')) {
                        if (isFirstBend) {
                            currentValue += absValue;
                            note.addBendPoint(new BendPoint(currentOffset, currentValue));
                            currentOffset += baseOffset;
                            note.addBendPoint(new BendPoint(currentOffset, currentValue));
                            isFirstBend = false;
                        }
                        else {
                            currentOffset += baseOffset;
                        }
                    }
                    else if (bend.findChildElement('release')) {
                        if (isFirstBend) {
                            currentValue += absValue;
                        }
                        note.addBendPoint(new BendPoint(currentOffset, currentValue));
                        currentOffset += baseOffset;
                        currentValue -= absValue;
                        note.addBendPoint(new BendPoint(currentOffset, currentValue));
                        isFirstBend = false;
                    }
                    else {
                        // "regular" bend
                        note.addBendPoint(new BendPoint(currentOffset, currentValue));
                        currentValue += absValue;
                        currentOffset += baseOffset;
                        note.addBendPoint(new BendPoint(currentOffset, currentValue));
                        isFirstBend = false;
                    }
                }
            }
        }
        parseFingering(c) {
            switch (c.innerText) {
                case '0':
                    return Fingers.NoOrDead;
                case '1':
                case 'p':
                case 't':
                    return Fingers.Thumb;
                case '2':
                case 'i':
                    return Fingers.IndexFinger;
                case '3':
                case 'm':
                    return Fingers.MiddleFinger;
                case '4':
                case 'a':
                    return Fingers.AnnularFinger;
                case '5':
                case 'c':
                    return Fingers.LittleFinger;
            }
            return Fingers.Unknown;
        }
        parseOrnaments(element, note) {
            let currentTrillStep = -1;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'trill-mark':
                        currentTrillStep = Number.parseInt(c.getAttribute('trill-step', '2'));
                        if (note.isStringed) {
                            note.trillValue = note.stringTuning + currentTrillStep;
                        }
                        else if (!note.isPercussion) {
                            note.trillValue = note.calculateRealValue(false, false) + currentTrillStep;
                        }
                        break;
                    case 'turn':
                        note.ornament = NoteOrnament.Turn;
                        break;
                    // case 'delayed-turn': Not supported
                    case 'inverted-turn':
                        note.ornament = NoteOrnament.InvertedTurn;
                        break;
                    // case 'delayed-inverted-turn': Not supported
                    // case 'vertical-turn': Not supported
                    // case 'inverted-vertical-turn': Not supported
                    // case 'shake': Not supported
                    case 'wavy-line':
                        if (currentTrillStep > 0) {
                            if (c.getAttribute('type') === 'start') {
                                this._currentTrillStep = currentTrillStep;
                            }
                        }
                        else if (this._currentTrillStep > 0) {
                            if (c.getAttribute('type') === 'stop') {
                                this._currentTrillStep = -1;
                            }
                            else if (note.isStringed) {
                                note.trillValue = note.stringTuning + this._currentTrillStep;
                            }
                            else if (!note.isPercussion) {
                                note.trillValue = note.calculateRealValue(false, false) + this._currentTrillStep;
                            }
                        }
                        else {
                            note.vibrato = VibratoType.Slight;
                        }
                        break;
                    case 'mordent':
                        note.ornament = NoteOrnament.LowerMordent;
                        break;
                    case 'inverted-mordent':
                        note.ornament = NoteOrnament.UpperMordent;
                        break;
                    // case 'schleifer': Not supported
                    case 'tremolo':
                        switch (c.innerText) {
                            case '1':
                                note.beat.tremoloSpeed = Duration.Eighth;
                                break;
                            case '2':
                                note.beat.tremoloSpeed = Duration.Sixteenth;
                                break;
                            case '3':
                                note.beat.tremoloSpeed = Duration.ThirtySecond;
                                break;
                        }
                        break;
                    // case 'haydn': Not supported
                    // case 'other-element': Not supported
                }
            }
        }
        parseSlide(element, note) {
            const type = element.getAttribute('type');
            const number = element.getAttribute('number', '1');
            const context = this.getStaffContext(note.beat.voice.bar.staff);
            switch (type) {
                case 'start':
                    context.slideOrigins.set(number, note);
                    break;
                case 'stop':
                    if (context.slideOrigins.has(number)) {
                        const origin = context.slideOrigins.get(number);
                        origin.slideTarget = note;
                        note.slideOrigin = origin;
                        origin.slideOutType = SlideOutType.Shift;
                    }
                    break;
            }
        }
        parseTied(element, note, staff) {
            const type = element.getAttribute('type');
            const number = element.getAttribute('number', '');
            const context = this.getStaffContext(staff);
            if (type === 'start') {
                if (number) {
                    // start without end
                    if (context.tieStartIds.has(number)) {
                        const unclosed = context.tieStartIds.get(number);
                        context.tieStarts.delete(unclosed);
                    }
                    context.tieStartIds.set(number, note);
                }
                context.tieStarts.add(note);
            }
            else if (type === 'stop' && !note.isTieDestination) {
                let tieOrigin = null;
                if (number) {
                    if (!context.tieStartIds.has(number)) {
                        return;
                    }
                    tieOrigin = context.tieStartIds.get(number);
                    context.tieStartIds.delete(number);
                    context.tieStarts.delete(note);
                }
                else {
                    const realValue = this.calculatePitchedNoteValue(note);
                    for (const t of context.tieStarts) {
                        if (this.calculatePitchedNoteValue(t) === realValue) {
                            tieOrigin = t;
                            context.tieStarts.delete(tieOrigin);
                            break;
                        }
                    }
                }
                if (!tieOrigin) {
                    return;
                }
                note.isTieDestination = true;
                note.tieOrigin = tieOrigin;
            }
        }
        parseStem(element) {
            switch (element.innerText) {
                case 'down':
                    return BeamDirection.Down;
                case 'up':
                    return BeamDirection.Up;
                // case 'none':
                default:
                    return null;
            }
        }
        parseAccidental(element, note) {
            // NOTE: this can currently lead to wrong notes shown,
            // TODO: check partwise-complex-measures.xml where accidentals and notes get wrong
            // in combination with key signatures
            switch (element.innerText) {
                case 'sharp':
                    note.accidentalMode = NoteAccidentalMode.ForceSharp;
                    break;
                case 'natural':
                    note.accidentalMode = NoteAccidentalMode.ForceNatural;
                    break;
                case 'flat':
                    note.accidentalMode = NoteAccidentalMode.ForceFlat;
                    break;
                case 'double-sharp':
                    note.accidentalMode = NoteAccidentalMode.ForceDoubleSharp;
                    break;
                case 'flat-flat':
                    note.accidentalMode = NoteAccidentalMode.ForceDoubleFlat;
                    break;
                // case 'sharp-sharp': Not supported
                // case 'natural-sharp': Not supported
                // case 'natural-flat': Not supported
                // case 'quarter-flat': Not supported
                // case 'quarter-sharp': Not supported
                // case 'three-quarters-flat': Not supported
                // case 'three-quarters-sharp': Not supported
                // case 'sharp-down':
                // case 'sharp-up':
                // case 'natural-down':
                // case 'natural-up':
                // case 'flat-down':
                // case 'flat-up':
                // case 'double-sharp-down': Not supported
                // case 'double-sharp-up': Not supported
                // case 'flat-flat-down': Not supported
                // case 'flat-flat-up': Not supported
                // case 'arrow-down':
                // case 'arrow-up':
                // case 'triple-sharp':
                // case 'triple-flat':
                // case 'slash-quarter-sharp': Not supported
                // case 'slash-sharp': Not supported
                // case 'slash-flat': Not supported
                // case 'double-slash-flat': Not supported
                // case 'sharp-1':
                // case 'sharp-2':
                // case 'sharp-3':
                // case 'sharp-4':
                // case 'sharp-5':
                // case 'flat-1':
                // case 'flat-2':
                // case 'flat-3':
                // case 'flat-4':
                // case 'flat-5':
                // case 'sori': Not supported
                // case 'kokon': Not supported
                // case 'other': Not supported
                // default:
                //     Logger.warning('MusicXML', `Unsupported accidental ${element.innerText}`);
                //     break;
            }
        }
        calculatePitchedNoteValue(note) {
            return note.octave * 12 + note.tone;
        }
        parseDuration(element) {
            return this.musicXmlDivisionsToAlphaTabTicks(Number.parseFloat(element.innerText));
        }
        parseUnpitched(element, track) {
            let step = '';
            let octave = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'display-step':
                        step = c.innerText;
                        break;
                    case 'display-octave':
                        // 0-9, 4 for middle C
                        octave = Number.parseInt(c.innerText) + 1;
                        break;
                }
            }
            // if no display information -> middle of staff (handled in getOrCreateArticulation)
            const note = new Note();
            if (step === '') {
                note.octave = 0;
                note.tone = 0;
            }
            else {
                const value = octave * 12 + ModelUtils.getToneForText(step).noteValue;
                note.octave = (value / 12) | 0;
                note.tone = value - note.octave * 12;
            }
            return note;
        }
        parsePitch(element) {
            let step = '';
            let semitones = 0;
            let octave = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'step':
                        step = c.innerText;
                        break;
                    case 'alter':
                        semitones = Number.parseFloat(c.innerText);
                        if (Number.isNaN(semitones)) {
                            semitones = 0;
                        }
                        break;
                    case 'octave':
                        // 0-9, 4 for middle C
                        octave = Number.parseInt(c.innerText) + 1;
                        break;
                }
            }
            semitones = semitones | 0; // no microtones supported
            const value = octave * 12 + ModelUtils.getToneForText(step).noteValue + semitones;
            const note = new Note();
            note.octave = (value / 12) | 0;
            note.tone = value - note.octave * 12;
            return note;
        }
        applyNoteHead(note, beatDuration, forceFill, doubleWhole, whole, half, filled) {
            if (forceFill === undefined) {
                switch (beatDuration) {
                    case Duration.QuadrupleWhole:
                    case Duration.DoubleWhole:
                        note.style.noteHead = doubleWhole;
                        break;
                    case Duration.Whole:
                        note.style.noteHead = whole;
                        break;
                    case Duration.Half:
                        note.style.noteHead = half;
                        break;
                    default:
                        note.style.noteHead = filled;
                        break;
                }
            }
            else if (forceFill === true) {
                note.style.noteHead = filled;
            }
            else {
                switch (beatDuration) {
                    case Duration.QuadrupleWhole:
                    case Duration.DoubleWhole:
                        note.style.noteHead = doubleWhole;
                        break;
                    case Duration.Whole:
                        note.style.noteHead = whole;
                        break;
                    case Duration.Half:
                        note.style.noteHead = half;
                        break;
                    default:
                        note.style.noteHead = half;
                        break;
                }
            }
        }
    }
    MusicXmlImporter.B4Value = 71;
    MusicXmlImporter.allDurations = [
        Duration.TwoHundredFiftySixth,
        Duration.OneHundredTwentyEighth,
        Duration.SixtyFourth,
        Duration.ThirtySecond,
        Duration.Sixteenth,
        Duration.Eighth,
        Duration.Quarter,
        Duration.Half,
        Duration.Whole,
        Duration.DoubleWhole,
        Duration.QuadrupleWhole
    ];
    MusicXmlImporter.allDurationTicks = MusicXmlImporter.allDurations.map(d => MidiUtils.toTicks(d));

    /**
     * Lists the different midi file formats which are supported for export.
     */
    var MidiFileFormat;
    (function (MidiFileFormat) {
        /**
         * A single track multi channel file (SMF Type 0)
         */
        MidiFileFormat[MidiFileFormat["SingleTrackMultiChannel"] = 0] = "SingleTrackMultiChannel";
        /**
         * A multi track file (SMF Type 1)
         */
        MidiFileFormat[MidiFileFormat["MultiTrack"] = 1] = "MultiTrack";
    })(MidiFileFormat || (MidiFileFormat = {}));
    class MidiTrack {
        constructor() {
            /**
             * Gets a list of midi events sorted by time.
             */
            this.events = [];
        }
        /**
         * Adds the given midi event a the correct time position into the file.
         */
        addEvent(e) {
            if (this.events.length === 0 || e.tick >= this.events[this.events.length - 1].tick) {
                this.events.push(e);
            }
            else {
                let insertPos = this.events.length;
                while (insertPos > 0) {
                    const prevItem = this.events[insertPos - 1];
                    if (prevItem.tick > e.tick) {
                        insertPos--;
                    }
                    else {
                        break;
                    }
                }
                this.events.splice(insertPos, 0, e);
            }
        }
        /**
         * Writes the midi track as binary into the given stream.
         * @returns The stream to write to.
         */
        writeTo(s) {
            // build track data first
            const trackData = ByteBuffer.empty();
            let previousTick = 0;
            for (const midiEvent of this.events) {
                const delta = midiEvent.tick - previousTick;
                MidiFile.writeVariableInt(trackData, delta);
                midiEvent.writeTo(trackData);
                previousTick = midiEvent.tick;
            }
            // end of track
            // magic number "MTrk" (0x4D54726B)
            const b = new Uint8Array([0x4d, 0x54, 0x72, 0x6b]);
            s.write(b, 0, b.length);
            // size as integer
            const data = trackData.toArray();
            IOHelper.writeInt32BE(s, data.length);
            s.write(data, 0, data.length);
        }
    }
    /**
     * Represents a midi file with a single track that can be played via {@link AlphaSynth}
     */
    class MidiFile {
        constructor() {
            /**
             * Gets or sets the midi file format to use.
             */
            this.format = MidiFileFormat.SingleTrackMultiChannel;
            /**
             * Gets or sets the division per quarter notes.
             */
            this.division = MidiUtils.QuarterTime;
            /**
             * Gets a list of midi tracks.
             */
            this.tracks = [];
        }
        /**
         * Gets a list of midi events sorted by time.
         */
        get events() {
            if (this.tracks.length === 1) {
                return this.tracks[0].events;
            }
            const events = [];
            for (const t of this.tracks) {
                this.events.push(...t.events);
            }
            events.sort((a, b) => a.tick - b.tick);
            return events;
        }
        ensureTracks(trackCount) {
            while (this.tracks.length < trackCount) {
                this.tracks.push(new MidiTrack());
            }
        }
        /**
         * Adds the given midi event a the correct time position into the file.
         */
        addEvent(e) {
            if (this.format === MidiFileFormat.SingleTrackMultiChannel) {
                this.ensureTracks(1);
                this.tracks[0].addEvent(e);
            }
            else {
                this.ensureTracks(e.track + 1);
                this.tracks[e.track].addEvent(e);
            }
        }
        /**
         * Writes the midi file into a binary format.
         * @returns The binary midi file.
         */
        toBinary() {
            const data = ByteBuffer.empty();
            this.writeTo(data);
            return data.toArray();
        }
        /**
         * Writes the midi file as binary into the given stream.
         * @returns The stream to write to.
         */
        writeTo(s) {
            // magic number "MThd" (0x4D546864)
            const b = new Uint8Array([0x4d, 0x54, 0x68, 0x64]);
            s.write(b, 0, b.length);
            // Header Length 6 (0x00000006)
            IOHelper.writeInt32BE(s, 6);
            // format (single multi channel track)
            IOHelper.writeInt16BE(s, this.format);
            // number of tracks (1)
            IOHelper.writeInt16BE(s, this.tracks.length);
            // division
            IOHelper.writeInt16BE(s, this.division);
            for (const track of this.tracks) {
                track.writeTo(s);
            }
        }
        static writeVariableInt(s, value) {
            const array = new Uint8Array(4);
            let n = 0;
            do {
                array[n++] = value & 0x7f;
                value >>= 7;
            } while (value > 0);
            while (n > 0) {
                n--;
                if (n > 0) {
                    s.writeByte(array[n] | 0x80);
                }
                else {
                    s.writeByte(array[n]);
                }
            }
        }
    }

    /**
     * Lists all midi event types. Based on the type the instance is a specific subclass.
     */
    var MidiEventType;
    (function (MidiEventType) {
        // NOTE: the values try to be backwards compatible with alphaTab 1.2.
        // Some values are aligned with the MIDI1.0 bytes while some others
        // try to resemble the kind (e.g. 0xF1 -> 0xF0 as system exclusive, and +1 for the first event we define)
        // For the custom values we try to not overlap with real MIDI values.
        MidiEventType[MidiEventType["TimeSignature"] = 88] = "TimeSignature";
        MidiEventType[MidiEventType["NoteOn"] = 128] = "NoteOn";
        MidiEventType[MidiEventType["NoteOff"] = 144] = "NoteOff";
        MidiEventType[MidiEventType["ControlChange"] = 176] = "ControlChange";
        MidiEventType[MidiEventType["ProgramChange"] = 192] = "ProgramChange";
        MidiEventType[MidiEventType["TempoChange"] = 81] = "TempoChange";
        MidiEventType[MidiEventType["PitchBend"] = 224] = "PitchBend";
        MidiEventType[MidiEventType["PerNotePitchBend"] = 96] = "PerNotePitchBend";
        MidiEventType[MidiEventType["EndOfTrack"] = 47] = "EndOfTrack";
        MidiEventType[MidiEventType["AlphaTabRest"] = 241] = "AlphaTabRest";
        MidiEventType[MidiEventType["AlphaTabMetronome"] = 242] = "AlphaTabMetronome";
        // deprecated events
        /**
         * @deprecated Not used anymore internally. move to the other concrete types.
         */
        MidiEventType[MidiEventType["SystemExclusive"] = 240] = "SystemExclusive";
        /**
         * @deprecated Not used anymore internally. move to the other concrete types.
         */
        MidiEventType[MidiEventType["SystemExclusive2"] = 247] = "SystemExclusive2";
        /**
         * @deprecated Not used anymore internally. move to the other concrete types.
         */
        MidiEventType[MidiEventType["Meta"] = 255] = "Meta"; // Aligned with Midi 1.0
    })(MidiEventType || (MidiEventType = {}));
    /**
     * Represents a midi event.
     */
    class MidiEvent {
        /**
         * Initializes a new instance of the {@link MidiEvent} class.
         * @param track The track this event belongs to.
         * @param tick The absolute midi ticks of this event.
         * @param command The type of this event.
         */
        constructor(track, tick, command) {
            this.track = track;
            this.tick = tick;
            this.type = command;
        }
        // for backwards compatibility
        /**
         * @deprecated Change to `type`
         */
        get command() {
            return this.type;
        }
        /**
         * The 32-bit encoded raw midi message. Deprecated {@since 1.3.0}. Use the properties of the subclasses instead.
         * @deprecated Use individual properties to access data.
         */
        get message() {
            return 0;
        }
        /**
         * The first data byte. Meaning depends on midi event type. (Deprecated {@since 1.3.0}, use the specific properties of the midi event depending on type)
         * @deprecated Use individual properties to access data.
         */
        get data1() {
            return 0;
        }
        /**
         * The second data byte Meaning depends on midi event type. (Deprecated {@since 1.3.0}, use the specific properties of the midi event depending on type)
         * @deprecated Use individual properties to access data.
         */
        get data2() {
            return 0;
        }
    }
    /**
     * Represents a time signature change event.
     */
    class TimeSignatureEvent extends MidiEvent {
        constructor(track, tick, numerator, denominatorIndex, midiClocksPerMetronomeClick, thirtySecondNodesInQuarter) {
            super(track, tick, MidiEventType.TimeSignature);
            this.track = track;
            this.tick = tick;
            this.numerator = numerator;
            this.denominatorIndex = denominatorIndex;
            this.midiClocksPerMetronomeClick = midiClocksPerMetronomeClick;
            this.thirtySecondNodesInQuarter = thirtySecondNodesInQuarter;
        }
        writeTo(s) {
            // meta header
            s.writeByte(0xff);
            // time signature
            s.writeByte(0x58);
            // size
            MidiFile.writeVariableInt(s, 4);
            // Data
            s.writeByte(this.numerator & 0xff);
            s.writeByte(this.denominatorIndex & 0xff);
            s.writeByte(this.midiClocksPerMetronomeClick & 0xff);
            s.writeByte(this.thirtySecondNodesInQuarter & 0xff);
        }
    }
    /**
     * The base class for alphaTab specific midi events (like metronomes and rests).
     */
    class AlphaTabSysExEvent extends MidiEvent {
        writeTo(s) {
            // sysex
            s.writeByte(0xf0);
            // data
            const data = ByteBuffer.withCapacity(16);
            data.writeByte(AlphaTabSysExEvent.AlphaTabManufacturerId);
            this.writeEventData(data);
            // syntactic sysex end
            data.writeByte(0xf7);
            MidiFile.writeVariableInt(s, data.length);
            data.copyTo(s);
        }
    }
    AlphaTabSysExEvent.AlphaTabManufacturerId = 0x7d;
    AlphaTabSysExEvent.MetronomeEventId = 0x00;
    AlphaTabSysExEvent.RestEventId = 0x01;
    /**
     * Represents a metronome event. This event is emitted by the synthesizer only during playback and
     * is typically not part of the midi file itself.
     */
    class AlphaTabMetronomeEvent extends AlphaTabSysExEvent {
        constructor(track, tick, counter, durationInTicks, durationInMillis) {
            super(track, tick, MidiEventType.AlphaTabMetronome);
            // for backwards compatibility.
            /**
             * Gets a value indicating whether the current event is a metronome event.
             */
            this.isMetronome = true;
            this.metronomeNumerator = counter;
            this.metronomeDurationInMilliseconds = durationInMillis;
            this.metronomeDurationInTicks = durationInTicks;
        }
        writeEventData(s) {
            s.writeByte(AlphaTabSysExEvent.MetronomeEventId);
            s.writeByte(this.metronomeNumerator);
            IOHelper.writeInt32LE(s, this.metronomeDurationInTicks);
            IOHelper.writeInt32LE(s, this.metronomeDurationInMilliseconds);
        }
    }
    /**
     * Represents a REST beat being 'played'. This event supports alphaTab in placing the cursor.
     */
    class AlphaTabRestEvent extends AlphaTabSysExEvent {
        constructor(track, tick, channel) {
            super(track, tick, MidiEventType.AlphaTabRest);
            this.channel = channel;
        }
        writeEventData(s) {
            s.writeByte(AlphaTabSysExEvent.RestEventId);
            s.writeByte(this.channel);
        }
    }
    /**
     * The base class for note related events.
     */
    class NoteEvent extends MidiEvent {
        constructor(track, tick, type, channel, noteKey, noteVelocity) {
            super(track, tick, type);
            this.channel = channel;
            this.noteKey = noteKey;
            this.noteVelocity = noteVelocity;
        }
        get data1() {
            return this.noteKey;
        }
        get data2() {
            return this.noteVelocity;
        }
    }
    /**
     * Represents a note being played
     */
    class NoteOnEvent extends NoteEvent {
        constructor(track, tick, channel, noteKey, noteVelocity) {
            super(track, tick, MidiEventType.NoteOn, channel, noteKey, noteVelocity);
        }
        writeTo(s) {
            // status byte
            s.writeByte((this.channel & 0x0f) | 0x90);
            s.writeByte(this.noteKey & 0xff);
            s.writeByte(this.noteVelocity & 0xff);
        }
    }
    /**
     * Represents a note stop being played.
     */
    class NoteOffEvent extends NoteEvent {
        constructor(track, tick, channel, noteKey, noteVelocity) {
            super(track, tick, MidiEventType.NoteOff, channel, noteKey, noteVelocity);
        }
        writeTo(s) {
            // status byte
            s.writeByte((this.channel & 0x0f) | 0x80);
            s.writeByte(this.noteKey & 0xff);
            s.writeByte(this.noteVelocity & 0xff);
        }
    }
    /**
     * Represents the change of a value on a midi controller.
     */
    class ControlChangeEvent extends MidiEvent {
        constructor(track, tick, channel, controller, value) {
            super(track, tick, MidiEventType.ControlChange);
            this.channel = channel;
            this.controller = controller;
            this.value = value;
        }
        writeTo(s) {
            s.writeByte((this.channel & 0x0f) | 0xb0);
            s.writeByte(this.controller & 0xff);
            s.writeByte(this.value & 0xff);
        }
        get data1() {
            return this.controller;
        }
        get data2() {
            return this.value;
        }
    }
    /**
     * Represents the change of the midi program on a channel.
     */
    class ProgramChangeEvent extends MidiEvent {
        constructor(track, tick, channel, program) {
            super(track, tick, MidiEventType.ProgramChange);
            this.channel = channel;
            this.program = program;
        }
        writeTo(s) {
            s.writeByte((this.channel & 0x0f) | 0xc0);
            s.writeByte(this.program & 0xff);
        }
        get data1() {
            return this.program;
        }
    }
    /**
     * Represents a change of the tempo in the song.
     */
    class TempoChangeEvent extends MidiEvent {
        /**
         * The tempo in microseconds per quarter note (aka USQ). A time format typically for midi.
         */
        get microSecondsPerQuarterNote() {
            return 60000000 / this.beatsPerMinute;
        }
        /**
             * The tempo in microseconds per quarter note (aka USQ). A time format typically for midi.
             */
        set microSecondsPerQuarterNote(value) {
            this.beatsPerMinute = 60000000 / value;
        }
        constructor(tick, microSecondsPerQuarterNote) {
            super(0, tick, MidiEventType.TempoChange);
            /**
             * The tempo in beats per minute
             */
            this.beatsPerMinute = 0;
            this.microSecondsPerQuarterNote = microSecondsPerQuarterNote;
        }
        writeTo(s) {
            // meta
            s.writeByte(0xff);
            // set tempo
            s.writeByte(0x51);
            // size
            s.writeByte(0x03);
            // tempo
            s.writeByte((this.microSecondsPerQuarterNote >> 16) & 0xff);
            s.writeByte((this.microSecondsPerQuarterNote >> 8) & 0xff);
            s.writeByte(this.microSecondsPerQuarterNote & 0xff);
        }
    }
    /**
     * Represents a change of the pitch bend (aka. pitch wheel) on a specific channel.
     */
    class PitchBendEvent extends MidiEvent {
        constructor(track, tick, channel, value) {
            super(track, tick, MidiEventType.PitchBend);
            this.channel = channel;
            this.value = value;
        }
        writeTo(s) {
            s.writeByte((this.channel & 0x0f) | 0xe0);
            s.writeByte(this.value & 0x7f);
            s.writeByte((this.value >> 7) & 0x7f);
        }
        get data1() {
            return this.value & 0x7f;
        }
        get data2() {
            return (this.value >> 7) & 0x7f;
        }
    }
    /**
     * Represents a single note pitch bend change.
     */
    class NoteBendEvent extends MidiEvent {
        constructor(track, tick, channel, noteKey, value) {
            super(track, tick, MidiEventType.PerNotePitchBend);
            this.channel = channel;
            this.noteKey = noteKey;
            this.value = value;
        }
        writeTo(s) {
            throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Note Bend (Midi2.0) events cannot be exported to SMF1.0');
        }
    }
    /**
     * Represents the end of the track indicating that no more events for this track follow.
     */
    class EndOfTrackEvent extends MidiEvent {
        constructor(track, tick) {
            super(track, tick, MidiEventType.EndOfTrack);
        }
        writeTo(s) {
            s.writeByte(0xff);
            s.writeByte(0x2f);
            s.writeByte(0x00);
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class SynthEvent {
        constructor(eventIndex, e) {
            this.time = 0;
            this.eventIndex = eventIndex;
            this.event = e;
            this.isMetronome = this.event.type === MidiEventType.AlphaTabMetronome;
        }
        static newMetronomeEvent(eventIndex, tick, counter, durationInTicks, durationInMillis) {
            const evt = new AlphaTabMetronomeEvent(0, tick, counter, durationInTicks, durationInMillis);
            const x = new SynthEvent(eventIndex, evt);
            return x;
        }
    }

    /**
     * Rerpresents a point to sync the alphaTab time axis with an external backing track.
     */
    class BackingTrackSyncPoint {
        constructor() {
            /**
             * The index of the masterbar to which this sync point belongs to.
             * @remarks
             * This property is purely informative for external use like in editors.
             * It has no impact to the synchronization itself.
             */
            this.masterBarIndex = 0;
            /**
             * The occurence of the masterbar to which this sync point belongs to. The occurence
             * is 0-based and increases with every repeated play of a masterbar (e.g. on repeats or jumps).
             * @remarks
             * This property is purely informative for external use like in editors.
             * It has no impact to the synchronization itself.
             */
            this.masterBarOccurence = 0;
            /**
             * The BPM the synthesizer has at the exact tick position of this sync point.
             */
            this.synthBpm = 0;
            /**
             * The millisecond time position of the synthesizer when this sync point is reached.
             */
            this.synthTime = 0;
            /**
             * The midi tick position of the synthesizer when this sync point is reached.
             */
            this.synthTick = 0;
            /**
             * The millisecond time in the external media marking the synchronization point.
             */
            this.syncTime = 0;
            /**
             * The BPM the song will have virtually after this sync point to align the external media time axis
             * with the one from the synthesizer.
             */
            this.syncBpm = 0;
        }
        /**
         * Updates the synchronization BPM that will apply after this sync point.
         * @param nextSyncPointSynthTime The synthesizer time of the next sync point after this one.
         * @param nextSyncPointSyncTime The synchronization time of the next sync point after this one.
         */
        updateSyncBpm(nextSyncPointSynthTime, nextSyncPointSyncTime) {
            const synthDuration = nextSyncPointSynthTime - this.synthTime;
            const syncedDuration = nextSyncPointSyncTime - this.syncTime;
            const modifiedTempo = (synthDuration / syncedDuration) * this.synthBpm;
            this.syncBpm = modifiedTempo;
        }
    }

    class MidiFileSequencerTempoChange {
        constructor(bpm, ticks, time) {
            this.bpm = bpm;
            this.ticks = ticks;
            this.time = time;
        }
    }
    class MidiSequencerState {
        constructor() {
            this.tempoChanges = [];
            this.tempoChangeIndex = 0;
            this.syncPoints = [];
            this.firstProgramEventPerChannel = new Map();
            this.firstTimeSignatureNumerator = 0;
            this.firstTimeSignatureDenominator = 0;
            this.synthData = [];
            this.division = MidiUtils.QuarterTime;
            this.eventIndex = 0;
            this.currentTime = 0;
            this.syncPointIndex = 0;
            this.playbackRange = null;
            this.playbackRangeStartTime = 0;
            this.playbackRangeEndTime = 0;
            this.endTick = 0;
            this.endTime = 0;
            this.currentTempo = 0;
            this.syncPointTempo = 0;
        }
    }
    /**
     * This sequencer dispatches midi events to the synthesizer based on the current
     * synthesize position. The sequencer does not consider the playback speed.
     */
    class MidiFileSequencer {
        get isPlayingMain() {
            return this._currentState === this._mainState;
        }
        get isPlayingOneTimeMidi() {
            return this._currentState === this._oneTimeState;
        }
        get isPlayingCountIn() {
            return this._currentState === this._countInState;
        }
        constructor(synthesizer) {
            this._oneTimeState = null;
            this._countInState = null;
            this.isLooping = false;
            /**
             * Gets or sets the playback speed.
             */
            this.playbackSpeed = 1;
            this.instrumentPrograms = new Set();
            this.percussionKeys = new Set();
            this._synthesizer = synthesizer;
            this._mainState = new MidiSequencerState();
            this._currentState = this._mainState;
        }
        get mainPlaybackRange() {
            return this._mainState.playbackRange;
        }
        set mainPlaybackRange(value) {
            this._mainState.playbackRange = value;
            if (value) {
                this._mainState.playbackRangeStartTime = this.tickPositionToTimePositionWithSpeed(this._mainState, value.startTick, 1);
                this._mainState.playbackRangeEndTime = this.tickPositionToTimePositionWithSpeed(this._mainState, value.endTick, 1);
            }
        }
        get currentTime() {
            return this._currentState.currentTime / this.playbackSpeed;
        }
        /**
         * Gets the duration of the song in ticks.
         */
        get currentEndTick() {
            return this._currentState.endTick;
        }
        get currentEndTime() {
            return this._currentState.endTime / this.playbackSpeed;
        }
        get currentTempo() {
            return this._currentState.currentTempo;
        }
        get modifiedTempo() {
            return this._currentState.syncPointTempo * this.playbackSpeed;
        }
        get syncPointTempo() {
            return this._currentState.syncPointTempo;
        }
        get currentSyncPoints() {
            return this._currentState.syncPoints;
        }
        mainSeek(timePosition) {
            // map to speed=1
            timePosition *= this.playbackSpeed;
            // ensure playback range
            if (this.mainPlaybackRange) {
                if (timePosition < this._mainState.playbackRangeStartTime) {
                    timePosition = this._mainState.playbackRangeStartTime;
                }
                else if (timePosition > this._mainState.playbackRangeEndTime) {
                    timePosition = this._mainState.playbackRangeEndTime;
                }
            }
            if (timePosition > this._mainState.currentTime) {
                this.mainSilentProcess(timePosition - this._mainState.currentTime);
            }
            else if (timePosition < this._mainState.currentTime) {
                // we have to restart the midi to make sure we get the right state: instruments, volume, pan, etc
                this._mainState.currentTime = 0;
                this._mainState.eventIndex = 0;
                this._mainState.syncPointIndex = 0;
                this._mainState.tempoChangeIndex = 0;
                this._mainState.currentTempo = this._mainState.tempoChanges[0].bpm;
                this._mainState.syncPointTempo =
                    this._mainState.syncPoints.length > 0
                        ? this._mainState.syncPoints[0].syncBpm
                        : this._mainState.currentTempo;
                if (this.isPlayingMain) {
                    const metronomeVolume = this._synthesizer.metronomeVolume;
                    this._synthesizer.noteOffAll(true);
                    this._synthesizer.resetSoft();
                    this._synthesizer.setupMetronomeChannel(metronomeVolume);
                }
                this.mainSilentProcess(timePosition);
            }
        }
        mainSilentProcess(milliseconds) {
            if (milliseconds <= 0) {
                return;
            }
            const start = Date.now();
            const finalTime = this._mainState.currentTime + milliseconds;
            if (this.isPlayingMain) {
                while (this._mainState.currentTime < finalTime) {
                    if (this.fillMidiEventQueueLimited(finalTime - this._mainState.currentTime)) {
                        this._synthesizer.synthesizeSilent(SynthConstants.MicroBufferSize);
                    }
                }
            }
            this._mainState.currentTime = finalTime;
            const duration = Date.now() - start;
            Logger.debug('Sequencer', `Silent seek finished in ${duration}ms (main)`);
        }
        loadOneTimeMidi(midiFile) {
            this._oneTimeState = this.createStateFromFile(midiFile);
            this._currentState = this._oneTimeState;
        }
        loadMidi(midiFile) {
            this.instrumentPrograms.clear();
            this.percussionKeys.clear();
            this._mainState = this.createStateFromFile(midiFile);
            this._currentState = this._mainState;
        }
        createStateFromFile(midiFile) {
            const state = new MidiSequencerState();
            this.percussionKeys.add(SynthConstants.MetronomeKey); // Metronome
            state.tempoChanges = [];
            state.division = midiFile.division;
            state.eventIndex = 0;
            state.currentTime = 0;
            // build synth events.
            state.synthData = [];
            // Converts midi to milliseconds for easy sequencing
            let bpm = 120;
            let absTick = 0;
            let absTime = 0.0;
            let metronomeCount = 0;
            let metronomeLengthInTicks = 0;
            let metronomeLengthInMillis = 0;
            let metronomeTick = 0;
            let metronomeTime = 0.0;
            let previousTick = 0;
            for (const mEvent of midiFile.events) {
                const synthData = new SynthEvent(state.synthData.length, mEvent);
                state.synthData.push(synthData);
                const deltaTick = mEvent.tick - previousTick;
                absTick += deltaTick;
                absTime += deltaTick * (60000.0 / (bpm * midiFile.division));
                synthData.time = absTime;
                previousTick = mEvent.tick;
                if (metronomeLengthInTicks > 0) {
                    while (metronomeTick < absTick) {
                        const metronome = SynthEvent.newMetronomeEvent(state.synthData.length, metronomeTick, Math.floor(metronomeTick / metronomeLengthInTicks) % metronomeCount, metronomeLengthInTicks, metronomeLengthInMillis);
                        state.synthData.push(metronome);
                        metronome.time = metronomeTime;
                        metronomeTick += metronomeLengthInTicks;
                        metronomeTime += metronomeLengthInMillis;
                    }
                }
                if (mEvent.type === MidiEventType.TempoChange) {
                    const meta = mEvent;
                    bpm = meta.beatsPerMinute;
                    state.tempoChanges.push(new MidiFileSequencerTempoChange(bpm, absTick, absTime));
                    metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * midiFile.division));
                }
                else if (mEvent.type === MidiEventType.TimeSignature) {
                    const meta = mEvent;
                    const timeSignatureDenominator = Math.pow(2, meta.denominatorIndex);
                    metronomeCount = meta.numerator;
                    metronomeLengthInTicks = (state.division * (4.0 / timeSignatureDenominator)) | 0;
                    metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * midiFile.division));
                    if (state.firstTimeSignatureDenominator === 0) {
                        state.firstTimeSignatureNumerator = meta.numerator;
                        state.firstTimeSignatureDenominator = timeSignatureDenominator;
                    }
                }
                else if (mEvent.type === MidiEventType.ProgramChange) {
                    const programChange = mEvent;
                    const channel = programChange.channel;
                    if (!state.firstProgramEventPerChannel.has(channel)) {
                        state.firstProgramEventPerChannel.set(channel, synthData);
                    }
                    const isPercussion = channel === SynthConstants.PercussionChannel;
                    if (!isPercussion) {
                        this.instrumentPrograms.add(programChange.program);
                    }
                }
                else if (mEvent.type === MidiEventType.NoteOn) {
                    const noteOn = mEvent;
                    const isPercussion = noteOn.channel === SynthConstants.PercussionChannel;
                    if (isPercussion) {
                        this.percussionKeys.add(noteOn.noteKey);
                    }
                }
            }
            state.currentTempo = state.tempoChanges.length > 0 ? state.tempoChanges[0].bpm : bpm;
            state.syncPointTempo = state.currentTempo;
            state.synthData.sort((a, b) => {
                if (a.time > b.time) {
                    return 1;
                }
                if (a.time < b.time) {
                    return -1;
                }
                return a.eventIndex - b.eventIndex;
            });
            state.endTime = absTime;
            state.endTick = absTick;
            return state;
        }
        fillMidiEventQueue() {
            return this.fillMidiEventQueueLimited(-1);
        }
        fillMidiEventQueueToEndTime(endTime) {
            while (this._mainState.currentTime < endTime) {
                if (this.fillMidiEventQueueLimited(endTime - this._mainState.currentTime)) {
                    this._synthesizer.synthesizeSilent(SynthConstants.MicroBufferSize);
                }
            }
            let anyEventsDispatched = false;
            this._currentState.currentTime = endTime;
            while (this._currentState.eventIndex < this._currentState.synthData.length &&
                this._currentState.synthData[this._currentState.eventIndex].time < this._currentState.currentTime) {
                const synthEvent = this._currentState.synthData[this._currentState.eventIndex];
                this._synthesizer.dispatchEvent(synthEvent);
                this._currentState.eventIndex++;
                anyEventsDispatched = true;
            }
            return anyEventsDispatched;
        }
        fillMidiEventQueueLimited(maxMilliseconds) {
            let millisecondsPerBuffer = (SynthConstants.MicroBufferSize / this._synthesizer.outSampleRate) * 1000 * this.playbackSpeed;
            let endTime = this.internalEndTime;
            if (maxMilliseconds > 0) {
                // ensure that first microbuffer does not already exceed max time
                if (maxMilliseconds < millisecondsPerBuffer) {
                    millisecondsPerBuffer = maxMilliseconds;
                }
                endTime = Math.min(this.internalEndTime, this._currentState.currentTime + maxMilliseconds);
            }
            let anyEventsDispatched = false;
            this._currentState.currentTime += millisecondsPerBuffer;
            while (this._currentState.eventIndex < this._currentState.synthData.length &&
                this._currentState.synthData[this._currentState.eventIndex].time < this._currentState.currentTime &&
                this._currentState.currentTime < endTime) {
                this._synthesizer.dispatchEvent(this._currentState.synthData[this._currentState.eventIndex]);
                this._currentState.eventIndex++;
                anyEventsDispatched = true;
            }
            return anyEventsDispatched;
        }
        mainTickPositionToTimePosition(tickPosition) {
            return this.tickPositionToTimePositionWithSpeed(this._mainState, tickPosition, this.playbackSpeed);
        }
        mainUpdateSyncPoints(syncPoints) {
            const state = this._mainState;
            syncPoints.sort((a, b) => a.synthTick - b.synthTick); // just in case
            state.syncPoints = [];
            if (syncPoints.length >= 0) {
                let bpm = 120;
                let absTick = 0;
                let absTime = 0.0;
                let tempoChangeIndex = 0;
                for (let i = 0; i < syncPoints.length; i++) {
                    const p = syncPoints[i];
                    let deltaTick = 0;
                    // TODO: merge interpolation into MidiFileGenerator where we already play through
                    // the time axis.
                    // remember state from previous sync point (or start). to handle linear interpolation
                    let previousModifiedTempo;
                    let previousMillisecondOffset;
                    let previousTick;
                    if (i === 0) {
                        previousModifiedTempo = bpm;
                        previousMillisecondOffset = 0;
                        previousTick = 0;
                    }
                    else {
                        const previousSyncPoint = syncPoints[i - 1];
                        previousModifiedTempo = previousSyncPoint.syncBpm;
                        previousMillisecondOffset = previousSyncPoint.syncTime;
                        previousTick = previousSyncPoint.synthTick;
                    }
                    // process time until sync point
                    // here it gets a bit tricky. if we have tempo changes on the synthesizer time axis (inbetween two sync points)
                    // we have to calculate a interpolated sync point on the alphaTab time axis.
                    // otherwise the linear interpolation later in the lookup will fail.
                    // goal is to have always a linear increase between two points, no matter if the time axis is sliced by tempo changes or sync points
                    while (tempoChangeIndex < state.tempoChanges.length &&
                        state.tempoChanges[tempoChangeIndex].ticks <= p.synthTick) {
                        deltaTick = state.tempoChanges[tempoChangeIndex].ticks - absTick;
                        if (deltaTick > 0) {
                            absTick += deltaTick;
                            absTime += deltaTick * (60000.0 / (bpm * state.division));
                            const millisPerTick = (p.syncTime - previousMillisecondOffset) / (p.synthTick - previousTick);
                            const interpolatedMillisecondOffset = (absTick - previousTick) * millisPerTick + previousMillisecondOffset;
                            const syncPoint = new BackingTrackSyncPoint();
                            syncPoint.synthTick = absTick;
                            syncPoint.synthBpm = bpm;
                            syncPoint.synthTime = absTime;
                            syncPoint.syncTime = interpolatedMillisecondOffset;
                            syncPoint.syncBpm = previousModifiedTempo;
                        }
                        bpm = state.tempoChanges[tempoChangeIndex].bpm;
                        tempoChangeIndex++;
                    }
                    deltaTick = p.synthTick - absTick;
                    absTick += deltaTick;
                    absTime += deltaTick * (60000.0 / (bpm * state.division));
                    state.syncPoints.push(p);
                }
            }
            state.syncPointIndex = 0;
            state.syncPointTempo = state.syncPoints.length > 0 ? state.syncPoints[0].syncBpm : state.currentTempo;
        }
        currentTimePositionToTickPosition(timePosition) {
            const state = this._currentState;
            if (state.tempoChanges.length === 0) {
                return 0;
            }
            timePosition *= this.playbackSpeed;
            this.updateCurrentTempo(state, timePosition);
            const lastTempoChange = state.tempoChanges[state.tempoChangeIndex];
            const timeDiff = timePosition - lastTempoChange.time;
            const ticks = (timeDiff / (60000.0 / (lastTempoChange.bpm * state.division))) | 0;
            // we add 1 for possible rounding errors.(floating point issuses)
            return lastTempoChange.ticks + ticks + 1;
        }
        currentUpdateCurrentTempo(timePosition) {
            this.updateCurrentTempo(this._mainState, timePosition * this.playbackSpeed);
        }
        updateCurrentTempo(state, timePosition) {
            let tempoChangeIndex = state.tempoChangeIndex;
            if (timePosition < state.tempoChanges[tempoChangeIndex].time) {
                tempoChangeIndex = 0;
            }
            while (tempoChangeIndex + 1 < state.tempoChanges.length &&
                state.tempoChanges[tempoChangeIndex + 1].time <= timePosition) {
                tempoChangeIndex++;
            }
            if (tempoChangeIndex !== state.tempoChangeIndex) {
                state.tempoChangeIndex = tempoChangeIndex;
                state.currentTempo = state.tempoChanges[state.tempoChangeIndex].bpm;
                if (state.syncPoints.length === 0) {
                    state.syncPointTempo = state.currentTempo;
                }
            }
        }
        currentUpdateSyncPoints(timePosition) {
            this.updateSyncPoints(this._mainState, timePosition);
        }
        updateSyncPoints(state, timePosition) {
            const syncPoints = state.syncPoints;
            if (syncPoints.length > 0) {
                let syncPointIndex = Math.min(state.syncPointIndex, syncPoints.length - 1);
                if (timePosition < syncPoints[syncPointIndex].syncTime) {
                    syncPointIndex = 0;
                }
                while (syncPointIndex + 1 < syncPoints.length && syncPoints[syncPointIndex + 1].syncTime <= timePosition) {
                    syncPointIndex++;
                }
                if (syncPointIndex !== state.syncPointIndex) {
                    state.syncPointIndex = syncPointIndex;
                    state.syncPointTempo = syncPoints[syncPointIndex].syncBpm;
                }
            }
            else {
                state.syncPointTempo = state.currentTempo;
            }
        }
        mainTimePositionFromBackingTrack(timePosition, backingTrackLength) {
            const mainState = this._mainState;
            const syncPoints = mainState.syncPoints;
            if (timePosition < 0 || syncPoints.length === 0) {
                return timePosition;
            }
            this.updateSyncPoints(this._mainState, timePosition);
            const syncPointIndex = Math.min(mainState.syncPointIndex, syncPoints.length - 1);
            const currentSyncPoint = syncPoints[syncPointIndex];
            const timeDiff = timePosition - currentSyncPoint.syncTime;
            let alphaTabTimeDiff;
            if (syncPointIndex + 1 < syncPoints.length) {
                const nextSyncPoint = syncPoints[syncPointIndex + 1];
                const relativeTimeDiff = timeDiff / (nextSyncPoint.syncTime - currentSyncPoint.syncTime);
                alphaTabTimeDiff = (nextSyncPoint.synthTime - currentSyncPoint.synthTime) * relativeTimeDiff;
            }
            else {
                const relativeTimeDiff = timeDiff / (backingTrackLength - currentSyncPoint.syncTime);
                alphaTabTimeDiff = (mainState.endTime - currentSyncPoint.synthTime) * relativeTimeDiff;
            }
            return (currentSyncPoint.synthTime + alphaTabTimeDiff) / this.playbackSpeed;
        }
        mainTimePositionToBackingTrack(timePosition, backingTrackLength) {
            const mainState = this._mainState;
            const syncPoints = mainState.syncPoints;
            if (timePosition < 0 || syncPoints.length === 0) {
                return timePosition;
            }
            timePosition *= this.playbackSpeed;
            let syncPointIndex = Math.min(mainState.syncPointIndex, syncPoints.length - 1);
            if (timePosition < syncPoints[syncPointIndex].synthTime) {
                syncPointIndex = 0;
            }
            while (syncPointIndex + 1 < syncPoints.length && syncPoints[syncPointIndex + 1].synthTime <= timePosition) {
                syncPointIndex++;
            }
            // NOTE: this logic heavily relies on the interpolation done in mainUpdateSyncPoints
            // we ensure that we have a linear increase between two points
            const currentSyncPoint = syncPoints[syncPointIndex];
            const alphaTabTimeDiff = timePosition - currentSyncPoint.synthTime;
            let backingTrackPos;
            if (syncPointIndex + 1 < syncPoints.length) {
                const nextSyncPoint = syncPoints[syncPointIndex + 1];
                const relativeAlphaTabTimeDiff = alphaTabTimeDiff / (nextSyncPoint.synthTime - currentSyncPoint.synthTime);
                const backingTrackDiff = nextSyncPoint.syncTime - currentSyncPoint.syncTime;
                backingTrackPos = currentSyncPoint.syncTime + backingTrackDiff * relativeAlphaTabTimeDiff;
            }
            else {
                const relativeAlphaTabTimeDiff = alphaTabTimeDiff / (mainState.endTime - currentSyncPoint.synthTime);
                const frameDiff = backingTrackLength - currentSyncPoint.syncTime;
                backingTrackPos = currentSyncPoint.syncTime + frameDiff * relativeAlphaTabTimeDiff;
            }
            return backingTrackPos;
        }
        tickPositionToTimePositionWithSpeed(state, tickPosition, playbackSpeed) {
            let timePosition = 0.0;
            let bpm = 120.0;
            let lastChange = 0;
            // find start and bpm of last tempo change before time
            for (const c of state.tempoChanges) {
                if (tickPosition < c.ticks) {
                    break;
                }
                timePosition = c.time;
                bpm = c.bpm;
                lastChange = c.ticks;
            }
            // add the missing millis
            tickPosition -= lastChange;
            timePosition += tickPosition * (60000.0 / (bpm * state.division));
            return timePosition / playbackSpeed;
        }
        get internalEndTime() {
            if (this.isPlayingMain) {
                return !this.mainPlaybackRange ? this._currentState.endTime : this._currentState.playbackRangeEndTime;
            }
            return this._currentState.endTime;
        }
        get isFinished() {
            return this._currentState.currentTime >= this.internalEndTime;
        }
        stop() {
            if (this.isPlayingMain && this.mainPlaybackRange) {
                this._currentState.currentTime = this.mainPlaybackRange.startTick;
            }
            else {
                this._currentState.currentTime = 0;
            }
            this._currentState.eventIndex = 0;
        }
        resetOneTimeMidi() {
            this._oneTimeState = null;
            this._currentState = this._mainState;
        }
        resetCountIn() {
            this._countInState = null;
            this._currentState = this._mainState;
        }
        startCountIn() {
            this.generateCountInMidi();
            this._currentState = this._countInState;
            this.stop();
            this._synthesizer.noteOffAll(true);
        }
        generateCountInMidi() {
            const state = new MidiSequencerState();
            state.division = this._mainState.division;
            let bpm = 120;
            let timeSignatureNumerator = 4;
            let timeSignatureDenominator = 4;
            if (this._mainState.eventIndex === 0) {
                bpm = this._mainState.tempoChanges[0].bpm;
                timeSignatureNumerator = this._mainState.firstTimeSignatureNumerator;
                timeSignatureDenominator = this._mainState.firstTimeSignatureDenominator;
            }
            else {
                bpm = this._synthesizer.currentTempo;
                timeSignatureNumerator = this._synthesizer.timeSignatureNumerator;
                timeSignatureDenominator = this._synthesizer.timeSignatureDenominator;
            }
            state.tempoChanges.push(new MidiFileSequencerTempoChange(bpm, 0, 0));
            const metronomeLengthInTicks = (state.division * (4.0 / timeSignatureDenominator)) | 0;
            const metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * this._mainState.division));
            let metronomeTick = 0;
            let metronomeTime = 0.0;
            for (let i = 0; i < timeSignatureNumerator; i++) {
                const metronome = SynthEvent.newMetronomeEvent(state.synthData.length, metronomeTick, i, metronomeLengthInTicks, metronomeLengthInMillis);
                state.synthData.push(metronome);
                metronome.time = metronomeTime;
                metronomeTick += metronomeLengthInTicks;
                metronomeTime += metronomeLengthInMillis;
            }
            state.synthData.sort((a, b) => {
                if (a.time > b.time) {
                    return 1;
                }
                if (a.time < b.time) {
                    return -1;
                }
                return a.eventIndex - b.eventIndex;
            });
            state.endTime = metronomeTime;
            state.endTick = metronomeTick;
            state.currentTempo = bpm;
            state.syncPointTempo = bpm;
            this._countInState = state;
        }
    }

    /**
     * Lists the different states of the player
     */
    var PlayerState;
    (function (PlayerState) {
        /**
         * Player is paused
         */
        PlayerState[PlayerState["Paused"] = 0] = "Paused";
        /**
         * Player is playing
         */
        PlayerState[PlayerState["Playing"] = 1] = "Playing";
    })(PlayerState || (PlayerState = {}));

    /**
     * Represents the info when the player state changes.
     */
    class PlayerStateChangedEventArgs {
        /**
         * Initializes a new instance of the {@link PlayerStateChangedEventArgs} class.
         * @param state The state.
         */
        constructor(state, stopped) {
            this.state = state;
            this.stopped = stopped;
        }
    }

    /**
     * Represents the info when the time in the synthesizer changes.
     */
    class PositionChangedEventArgs {
        /**
         * Initializes a new instance of the {@link PositionChangedEventArgs} class.
         * @param currentTime The current time.
         * @param endTime The end time.
         * @param currentTick The current tick.
         * @param endTick The end tick.
         * @param isSeek Whether the time was seeked.
         */
        constructor(currentTime, endTime, currentTick, endTick, isSeek, originalTempo, modifiedTempo) {
            /**
             * The original tempo in which alphaTab internally would be playing right now.
             */
            this.originalTempo = 0;
            /**
             * The modified tempo in which the actual playback is happening (e.g. due to playback speed or external audio synchronization)
             */
            this.modifiedTempo = 0;
            this.currentTime = currentTime;
            this.endTime = endTime;
            this.currentTick = currentTick;
            this.endTick = endTick;
            this.isSeek = isSeek;
            this.originalTempo = originalTempo;
            this.modifiedTempo = modifiedTempo;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class RiffChunk {
        constructor() {
            this.id = '';
            this.size = 0;
        }
        static load(parent, chunk, stream) {
            if (parent && RiffChunk.HeaderSize > parent.size) {
                return false;
            }
            if (stream.position + RiffChunk.HeaderSize >= stream.length) {
                return false;
            }
            chunk.id = IOHelper.read8BitStringLength(stream, 4);
            if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
                return false;
            }
            chunk.size = IOHelper.readUInt32LE(stream);
            if (parent && RiffChunk.HeaderSize + chunk.size > parent.size) {
                return false;
            }
            if (parent) {
                parent.size -= RiffChunk.HeaderSize + chunk.size;
            }
            const isRiff = chunk.id === 'RIFF';
            const isList = chunk.id === 'LIST';
            if (isRiff && parent) {
                // not allowed
                return false;
            }
            if (!isRiff && !isList) {
                // custom type without sub type
                return true;
            }
            // for lists unwrap the list type
            chunk.id = IOHelper.read8BitStringLength(stream, 4);
            if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
                return false;
            }
            chunk.size -= 4;
            return true;
        }
    }
    RiffChunk.HeaderSize = 4 /*FourCC*/ + 4 /*Size*/;

    class OggPacket {
        constructor(data, isBeginOfStream, isEndOfStream, granulePosition) {
            this.packetData = data;
            this.isBeginningOfStream = isBeginOfStream;
            this.isEndOfStream = isEndOfStream;
            this.granulePosition = isEndOfStream ? granulePosition : null;
        }
        addData(newData) {
            const oldData = this.packetData;
            const newBuffer = new Uint8Array(oldData.length + newData.length);
            newBuffer.set(oldData, 0);
            newBuffer.set(newData, oldData.length);
        }
    }
    var PageFlags;
    (function (PageFlags) {
        PageFlags[PageFlags["ContinuesPacket"] = 1] = "ContinuesPacket";
        PageFlags[PageFlags["BeginningOfStream"] = 2] = "BeginningOfStream";
        PageFlags[PageFlags["EndOfStream"] = 4] = "EndOfStream";
    })(PageFlags || (PageFlags = {}));
    class OggReader {
        constructor(readable) {
            this._readable = readable;
        }
        read() {
            const packets = [];
            while (this.findAndReadPage(packets)) {
            }
            return packets;
        }
        findAndReadPage(packets) {
            if (!this.seekPageHeader()) {
                return false;
            }
            return this.readPage(packets);
        }
        seekPageHeader() {
            // search for sync byte (max 64KB)
            for (let i = 0; i < 65536; i++) {
                const magic = IOHelper.readInt32LE(this._readable);
                if (magic === 0x5367674f) {
                    return true;
                }
                this._readable.position -= 3;
            }
            return false;
        }
        readPage(packets) {
            const version = this._readable.readByte();
            if (version === -1 || version !== 0) {
                return false;
            }
            const pageFlags = this._readable.readByte();
            const pageGranulePosition = IOHelper.readInt64LE(this._readable); // GranulePosition
            this._readable.skip(4); // StreamSerial
            this._readable.skip(4); // SequenceNumber
            this._readable.skip(4); // Crc
            const segmentCount = this._readable.readByte();
            if (segmentCount === -1) {
                return false;
            }
            const packetSizes = [];
            let packetIndex = 0;
            for (let i = 0; i < segmentCount; i++) {
                const size = this._readable.readByte();
                // ensure packet size exists and add size
                if (packetIndex === packetSizes.length) {
                    packetSizes.push(0);
                }
                packetSizes[packetIndex] += size;
                // net packet if current one was not full
                if (size < 255) {
                    packetIndex++;
                }
            }
            for (let i = 0; i < packetSizes.length; i++) {
                const packetData = new Uint8Array(packetSizes[i]);
                const c = this._readable.read(packetData, 0, packetData.length);
                if (c !== packetData.length) {
                    return false;
                }
                if ((pageFlags & PageFlags.ContinuesPacket) !== 0) {
                    if (packets.length === 0) {
                        throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'OGG: Continuation page without any previous packets');
                    }
                    packets[packets.length - 1].addData(packetData);
                }
                else {
                    const packet = new OggPacket(packetData, (pageFlags & PageFlags.BeginningOfStream) !== 0 && i === 0, (pageFlags & PageFlags.EndOfStream) !== 0 && i === packetSizes.length - 1, pageGranulePosition);
                    packets.push(packet);
                }
            }
            return true;
        }
    }

    class VorbisStream {
        constructor() {
            this.audioChannels = 0;
            this.audioSampleRate = 0;
            this.samples = new Float32Array(0);
            this.bitrateMaximum = 0;
            this.bitrateNominal = 0;
            this.bitrateMinimum = 0;
            this.blocksize0 = 0;
            this.blocksize1 = 0;
        }
    }

    /*
     * This part of the Vorbis Decoder is adopted from NVorbis and then simplified for alphaTab
     * https://github.com/NVorbis/NVorbis
     *
     * MIT License
     *
     * Copyright (c) 2020 Andrew Ward
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    class IntBitReaderReadResult {
        constructor() {
            this.value = 0;
            this.bitsRead = 0;
        }
    }
    class IntBitReader {
        constructor(source) {
            this._bitBucket = 0n; // 8
            this._bitCount = 0n; // 4
            this._overflowBits = 0n; // 1
            this._source = source;
        }
        readByte() {
            return this.readBits(IntBitReader.ByteSize);
        }
        readBit() {
            return this.readBits(1) === 1;
        }
        readBytes(count) {
            const bytes = new Uint8Array(count);
            for (let i = 0; i < count; i++) {
                bytes[i] = this.readByte() & 0xff;
            }
            return bytes;
        }
        readBits(count) {
            // short-circuit 0
            if (count === 0) {
                return 0;
            }
            const result = this.tryPeekBits(count);
            this.skipBits(count);
            return result.value;
        }
        tryPeekBits(count) {
            if (count < 0 || count > 32) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'IO: Cannot read more than 32 bits in one go');
            }
            if (count === 0) {
                return new IntBitReaderReadResult();
            }
            const result = new IntBitReaderReadResult();
            while (this._bitCount < count) {
                const val = BigInt(this._source.readByte());
                if (val === -1n) {
                    result.bitsRead = Number(this._bitCount);
                    result.value = Number(this._bitBucket);
                    this._bitBucket = 0n;
                    this._bitCount = 0n;
                    return result;
                }
                this._bitBucket = ((val & 0xffn) << this._bitCount) | this._bitBucket;
                this._bitCount += 8n;
                if (this._bitCount > 32) {
                    this._overflowBits = (val >> (40n - this._bitCount)) & 0xffn;
                }
            }
            let bitBucket = this._bitBucket;
            if (count < 64) {
                bitBucket = bitBucket & ((1n << BigInt(count)) - 1n);
            }
            result.value = Number(bitBucket);
            result.bitsRead = count;
            return result;
        }
        skipBits(count) {
            let bigCount = BigInt(count);
            if (count === 0) ;
            else if (this._bitCount > bigCount) {
                // we still have bits left over...
                if (count > 31) {
                    this._bitBucket = 0n;
                }
                else {
                    this._bitBucket = this._bitBucket >> bigCount;
                }
                if (this._bitCount > 32) {
                    const overflowCount = this._bitCount - 32n;
                    this._bitBucket = this._bitBucket | (this._overflowBits << (this._bitCount - bigCount - overflowCount));
                    if (overflowCount > count) {
                        // ugh, we have to keep bits in overflow
                        this._overflowBits = (this._overflowBits >> bigCount) & 0xffn;
                    }
                }
                this._bitCount -= bigCount;
            }
            else if (this._bitCount === bigCount) {
                this._bitBucket = 0n;
                this._bitCount = 0n;
            }
            else {
                // we have to move more bits than we have available...
                bigCount -= this._bitCount;
                this._bitCount = 0n;
                this._bitBucket = 0n;
                while (bigCount > 8) {
                    if (this._source.readByte() === -1) {
                        bigCount = 0n;
                        break;
                    }
                    bigCount -= 8n;
                }
                if (bigCount > 0) {
                    const temp = BigInt(this._source.readByte());
                    if (temp === -1n) ;
                    else {
                        this._bitBucket = temp >> bigCount;
                        this._bitCount = 8n - bigCount;
                    }
                }
            }
        }
    }
    IntBitReader.ByteSize = 8; // size of byte in bits

    /*
     * This part of the Vorbis Decoder is adopted from NVorbis and then simplified for alphaTab
     * https://github.com/NVorbis/NVorbis
     *
     * MIT License
     *
     * Copyright (c) 2020 Andrew Ward
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    class VorbisSetupHeader {
        constructor() {
            this.codebooks = [];
            this.timeDomainTransforms = [];
            this.floors = [];
            this.residues = [];
            this.mappings = [];
            this.modes = [];
        }
    }
    class VorbisUtils {
        static ilog(x) {
            let cnt = 0;
            while (x > 0) {
                ++cnt;
                x >>= 1; // this is safe because we'll never get here if the sign bit is set
            }
            return cnt;
        }
        static bitReverse(on, bits = 32) {
            let bn = BigInt(on);
            bn = ((bn & BigInt(0xaaaaaaaa)) >> 1n) | ((bn & BigInt(0x55555555)) << 1n);
            bn = ((bn & BigInt(0xcccccccc)) >> 2n) | ((bn & BigInt(0x33333333)) << 2n);
            bn = ((bn & BigInt(0xf0f0f0f0)) >> 4n) | ((bn & BigInt(0x0f0f0f0f)) << 4n);
            bn = ((bn & BigInt(0xff00ff00)) >> 8n) | ((bn & BigInt(0x00ff00ff)) << 8n);
            bn = ((bn >> 16n) | (bn << 16n)) >> (32n - BigInt(bits));
            const x = Number(BigInt.asUintN(32, bn));
            return x;
        }
        static convertFromVorbisFloat32(bits) {
            // https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-1200009.2.2
            const big = BigInt(bits);
            let bmantissa = big & BigInt(0x1fffff);
            const bsign = big & BigInt(0x80000000);
            const bexponent = (big & BigInt(0x7fe00000)) >> 21n;
            if (bsign !== 0n) {
                bmantissa = -bmantissa;
            }
            return Number(bmantissa) * Math.pow(2.0, Number(bexponent) - 788);
        }
    }
    class FastListArray {
        constructor(data) {
            this._data = data;
        }
        get(index) {
            return this._data[index];
        }
    }
    class FastRange {
        get(index) {
            return index;
        }
    }
    FastRange.instance = new FastRange();
    class VorbisCodebook {
        constructor(packet, huffman) {
            this._maxBits = 0;
            this._overflowList = null;
            this._prefixList = null;
            this._prefixBitLength = 0;
            this.dimensions = 0;
            this.entries = 0;
            this.mapType = 0;
            // first, check the sync pattern
            const chkVal = packet.readBits(24);
            if (chkVal !== 0x564342) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Book header had invalid signature!');
            }
            // get the counts
            this.dimensions = packet.readBits(16);
            this.entries = packet.readBits(24);
            // init the storage
            this._lengths = new Int32Array(this.entries);
            this.initTree(packet, huffman);
            this.initLookupTable(packet);
        }
        get(entry, dim) {
            return this._lookupTable[entry * this.dimensions + dim];
        }
        decodeScalar(packet) {
            let data = packet.tryPeekBits(this._prefixBitLength);
            if (data.bitsRead === 0) {
                return -1;
            }
            // try to get the value from the prefix list...
            let node = this._prefixList[data.value];
            if (node != null) {
                packet.skipBits(node.length);
                return node.value;
            }
            // nope, not possible... run through the overflow nodes
            data = packet.tryPeekBits(this._maxBits);
            if (this._overflowList !== null) {
                for (let i = 0; i < this._overflowList.length; i++) {
                    node = this._overflowList[i];
                    const bits = data.value & node.mask;
                    if (node.bits === bits) {
                        packet.skipBits(node.length);
                        return node.value;
                    }
                }
            }
            return -1;
        }
        initTree(packet, huffman) {
            let sparse;
            let total = 0;
            let maxLen;
            if (packet.readBit()) {
                // ordered
                let len = packet.readBits(5) + 1;
                for (let i = 0; i < this.entries;) {
                    let cnt = packet.readBits(VorbisUtils.ilog(this.entries - i));
                    while (--cnt >= 0) {
                        this._lengths[i++] = len;
                    }
                    ++len;
                }
                total = 0;
                sparse = false;
                maxLen = len;
            }
            else {
                // unordered
                maxLen = -1;
                sparse = packet.readBit();
                for (let i = 0; i < this.entries; i++) {
                    if (!sparse || packet.readBit()) {
                        this._lengths[i] = packet.readBits(5) + 1;
                        ++total;
                    }
                    else {
                        // mark the entry as unused
                        this._lengths[i] = -1;
                    }
                    if (this._lengths[i] > maxLen) {
                        maxLen = this._lengths[i];
                    }
                }
            }
            // figure out the maximum bit size; if all are unused, don't do anything else
            this._maxBits = maxLen;
            if (maxLen > -1) {
                let codewordLengths = null;
                if (sparse && total >= this.entries >> 2) {
                    codewordLengths = new Int32Array(this.entries);
                    codewordLengths.set(this._lengths.subarray(0, this.entries), 0);
                    sparse = false;
                }
                let sortedCount;
                // compute size of sorted tables
                if (sparse) {
                    sortedCount = total;
                }
                else {
                    sortedCount = 0;
                }
                let values = null;
                let codewords = null;
                if (!sparse) {
                    codewords = new Int32Array(this.entries);
                }
                else if (sortedCount !== 0) {
                    codewordLengths = new Int32Array(sortedCount);
                    codewords = new Int32Array(sortedCount);
                    values = new Int32Array(sortedCount);
                }
                if (!this.computeCodewords(sparse, codewords, codewordLengths, this._lengths, this.entries, values)) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Failed to compute codewords');
                }
                const valueList = values == null ? FastRange.instance : new FastListArray(values);
                huffman.generateTable(valueList, codewordLengths ?? this._lengths, codewords);
                this._prefixList = huffman.prefixTree;
                this._prefixBitLength = huffman.tableBits;
                this._overflowList = huffman.overflowList;
            }
        }
        computeCodewords(sparse, codewords, codewordLengths, len, n, values) {
            const available = new Uint32Array(32);
            let k = 0;
            let m = 0;
            for (k = 0; k < n; ++k) {
                if (len[k] > 0) {
                    break;
                }
            }
            if (k === n) {
                return true;
            }
            this.addEntry(sparse, codewords, codewordLengths, 0, k, m++, len[k], values);
            for (let i = 1; i <= len[k]; ++i) {
                available[i] = 1 << (32 - i);
            }
            for (let i = k + 1; i < n; ++i) {
                let z = len[i];
                if (z <= 0) {
                    continue;
                }
                while (z > 0 && available[z] === 0) {
                    --z;
                }
                if (z === 0) {
                    return false;
                }
                const res = available[z];
                available[z] = 0;
                this.addEntry(sparse, codewords, codewordLengths, VorbisUtils.bitReverse(res), i, m++, len[i], values);
                if (z !== len[i]) {
                    for (let y = len[i]; y > z; --y) {
                        available[y] = res + (1 << (32 - y));
                    }
                }
            }
            return true;
        }
        addEntry(sparse, codewords, codewordLengths, huffCode, symbol, count, len, values) {
            if (sparse) {
                codewords[count] = huffCode;
                codewordLengths[count] = len;
                values[count] = symbol;
            }
            else {
                codewords[symbol] = huffCode;
            }
        }
        initLookupTable(packet) {
            this.mapType = packet.readBits(4);
            if (this.mapType === 0) {
                return;
            }
            const minValue = VorbisUtils.convertFromVorbisFloat32(packet.readBits(32));
            const deltaValue = VorbisUtils.convertFromVorbisFloat32(packet.readBits(32));
            const valueBits = packet.readBits(4) + 1;
            const sequence_p = packet.readBit();
            let lookupValueCount = this.entries * this.dimensions;
            const lookupTable = new Float32Array(lookupValueCount);
            if (this.mapType === 1) {
                lookupValueCount = this.lookup1Values();
            }
            const multiplicands = new Uint32Array(lookupValueCount);
            for (let i = 0; i < lookupValueCount; i++) {
                multiplicands[i] = packet.readBits(valueBits);
            }
            // now that we have the initial data read in, calculate the entry tree
            if (this.mapType === 1) {
                for (let idx = 0; idx < this.entries; idx++) {
                    let last = 0.0;
                    let idxDiv = 1;
                    for (let i = 0; i < this.dimensions; i++) {
                        const moff = ((idx / idxDiv) % lookupValueCount) | 0;
                        const value = multiplicands[moff] * deltaValue + minValue + last;
                        lookupTable[idx * this.dimensions + i] = value;
                        if (sequence_p) {
                            last = value;
                        }
                        idxDiv *= lookupValueCount;
                    }
                }
            }
            else {
                for (let idx = 0; idx < this.entries; idx++) {
                    let last = 0.0;
                    let moff = idx * this.dimensions;
                    for (let i = 0; i < this.dimensions; i++) {
                        const value = multiplicands[moff] * deltaValue + minValue + last;
                        lookupTable[idx * this.dimensions + i] = value;
                        if (sequence_p) {
                            last = value;
                        }
                        ++moff;
                    }
                }
            }
            this._lookupTable = lookupTable;
        }
        lookup1Values() {
            let r = Math.floor(Math.exp(Math.log(this.entries) / this.dimensions));
            if (Math.floor(Math.pow(r + 1, this.dimensions)) <= this.entries) {
                ++r;
            }
            return r;
        }
    }
    class HuffmanListNode {
        constructor() {
            this.value = 0;
            this.length = 0;
            this.bits = 0;
            this.mask = 0;
        }
    }
    class Huffman {
        constructor() {
            this.tableBits = 0;
            this.prefixTree = [];
            this.overflowList = null;
        }
        generateTable(values, lengthList, codeList) {
            const list = new Array(lengthList.length);
            let maxLen = 0;
            for (let i = 0; i < list.length; i++) {
                const node = new HuffmanListNode();
                node.value = values.get(i);
                node.length = lengthList[i] <= 0 ? 99999 : lengthList[i];
                node.bits = codeList[i];
                node.mask = (1 << lengthList[i]) - 1;
                list[i] = node;
                if (lengthList[i] > 0 && maxLen < lengthList[i]) {
                    maxLen = lengthList[i];
                }
            }
            list.sort((a, b) => {
                const len = a.length - b.length;
                if (len === 0) {
                    return a.bits - b.bits;
                }
                return len;
            });
            const tableBits = maxLen > Huffman.MAX_TABLE_BITS ? Huffman.MAX_TABLE_BITS : maxLen;
            const prefixList = [];
            let overflowList = null;
            for (let i = 0; i < list.length && list[i].length < 99999; i++) {
                const itemBits = list[i].length;
                if (itemBits > tableBits) {
                    overflowList = [];
                    for (; i < list.length && list[i].length < 99999; i++) {
                        overflowList.push(list[i]);
                    }
                }
                else {
                    const maxVal = 1 << (tableBits - itemBits);
                    const item = list[i];
                    for (let j = 0; j < maxVal; j++) {
                        const idx = (j << itemBits) | item.bits;
                        while (prefixList.length <= idx) {
                            prefixList.push(null);
                        }
                        prefixList[idx] = item;
                    }
                }
            }
            while (prefixList.length < 1 << tableBits) {
                prefixList.push(null);
            }
            this.tableBits = tableBits;
            this.prefixTree = prefixList;
            this.overflowList = overflowList;
        }
    }
    Huffman.MAX_TABLE_BITS = 10;
    class VorbisTimeDomainTransform {
        constructor(packet) {
            packet.readBits(16);
        }
    }
    class VorbisFloorData0 {
        get executeChannel() {
            return (this.forceEnergy || this.amp > 0) && !this.forceNoEnergy;
        }
        constructor(coeff) {
            this.amp = 0;
            this.forceEnergy = false;
            this.forceNoEnergy = false;
            this.coeff = coeff;
        }
    }
    class VorbisFloor0 {
        constructor(packet, block0Size, block1Size, codebooks) {
            this._order = packet.readBits(8);
            this._rate = packet.readBits(16);
            this._bark_map_size = packet.readBits(16);
            this._ampBits = packet.readBits(6);
            this._ampOfs = packet.readBits(8);
            this._books = new Array(packet.readBits(4) + 1);
            if (this._order < 1 || this._rate < 1 || this._bark_map_size < 1 || this._books.length === 0) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Floor0 Data');
            }
            this._ampDiv = (1 << this._ampBits) - 1;
            for (let i = 0; i < this._books.length; i++) {
                const num = packet.readBits(8);
                if (num < 0 || num >= codebooks.length) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Floor0 Data');
                }
                const book = codebooks[num];
                if (book.mapType === 0 || book.dimensions < 1) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Floor0 Data');
                }
                this._books[i] = book;
            }
            this._bookBits = VorbisUtils.ilog(this._books.length);
            this._barkMaps = new Map([
                [block0Size, this.synthesizeBarkCurve(block0Size / 2)],
                [block1Size, this.synthesizeBarkCurve(block1Size / 2)]
            ]);
            this._wMap = new Map([
                [block0Size, this.synthesizeWDelMap(block0Size / 2)],
                [block1Size, this.synthesizeWDelMap(block1Size / 2)]
            ]);
        }
        synthesizeBarkCurve(n) {
            const scale = this._bark_map_size / VorbisFloor0.toBARK(this._rate / 2);
            const map = new Int32Array(n + 1);
            for (let i = 0; i < n - 1; i++) {
                map[i] = Math.min(this._bark_map_size - 1, Math.floor(VorbisFloor0.toBARK((this._rate / 2 / n) * i) * scale));
            }
            map[n] = -1;
            return map;
        }
        static toBARK(lsp) {
            return 13.1 * Math.atan(0.00074 * lsp) + 2.24 * Math.atan(0.0000000185 * lsp * lsp) + 0.0001 * lsp;
        }
        synthesizeWDelMap(n) {
            const wdel = Math.PI / this._bark_map_size;
            const map = new Float32Array(n);
            for (let i = 0; i < n; i++) {
                map[i] = 2 * Math.cos(wdel * i);
            }
            return map;
        }
        unpack(packet, blockSize, channel) {
            const data = new VorbisFloorData0(new Float32Array(this._order + 1));
            data.amp = packet.readBits(this._ampBits);
            if (data.amp > 0) {
                data.amp = (data.amp / this._ampDiv) * this._ampOfs;
                const bookNum = packet.readBits(this._bookBits);
                if (bookNum >= this._books.length) {
                    // we ran out of data or the packet is corrupt...  0 the floor and return
                    data.amp = 0;
                    return data;
                }
                const book = this._books[bookNum];
                // first, the book decode...
                for (let i = 0; i < this._order;) {
                    const entry = book.decodeScalar(packet);
                    if (entry === -1) {
                        // we ran out of data or the packet is corrupt...  0 the floor and return
                        data.amp = 0;
                        return data;
                    }
                    for (let j = 0; i < this._order && j < book.dimensions; j++, i++) {
                        data.coeff[i] = book.get(entry, j);
                    }
                }
                // then, the "averaging"
                let last = 0;
                for (let j = 0; j < this._order;) {
                    for (let k = 0; j < this._order && k < book.dimensions; j++, k++) {
                        data.coeff[j] += last;
                    }
                    last = data.coeff[j - 1];
                }
            }
            return data;
        }
        apply(floorData, blockSize, residue) {
            const data = floorData;
            const n = blockSize / 2;
            if (data.amp > 0) {
                // this is pretty well stolen directly from libvorbis...  BSD license
                const barkMap = this._barkMaps.get(blockSize);
                const wMap = this._wMap.get(blockSize);
                let i = 0;
                for (i = 0; i < this._order; i++) {
                    data.coeff[i] = 2 * Math.cos(data.coeff[i]);
                }
                i = 0;
                while (i < n) {
                    let j = 0;
                    const k = barkMap[i];
                    let p = 0.5;
                    let q = 0.5;
                    const w = wMap[k];
                    for (j = 1; j < this._order; j += 2) {
                        q *= w - data.coeff[j - 1];
                        p *= w - data.coeff[j];
                    }
                    if (j === this._order) {
                        // odd order filter; slightly assymetric
                        q *= w - data.coeff[j - 1];
                        // biome-ignore lint/suspicious/noMisrefactoredShorthandAssign: Correct calculation here
                        p *= p * (4 - w * w);
                        q *= q;
                    }
                    else {
                        // even order filter; still symetric
                        // biome-ignore lint/suspicious/noMisrefactoredShorthandAssign: Correct calculation here
                        p *= p * (2 - w);
                        // biome-ignore lint/suspicious/noMisrefactoredShorthandAssign: Correct calculation here
                        q *= q * (2 + w);
                    }
                    // calc the dB of this bark section
                    q = data.amp / Math.sqrt(p + q) - this._ampOfs;
                    // now convert to a linear sample multiplier
                    q = Math.exp(q * 0.11512925);
                    residue[i] *= q;
                    while (barkMap[++i] === k) {
                        residue[i] *= q;
                    }
                }
            }
            else {
                residue.fill(0, 0, n);
            }
        }
    }
    class VorbisFloor1Data {
        constructor() {
            this.posts = new Int32Array(64);
            this.postCount = 0;
            this.forceEnergy = false;
            this.forceNoEnergy = false;
        }
        get executeChannel() {
            return (this.forceEnergy || this.postCount > 0) && !this.forceNoEnergy;
        }
    }
    class VorbisFloor1 {
        constructor(packet, codebooks) {
            let maximum_class = -1;
            this._partitionClass = new Int32Array(packet.readBits(5));
            for (let i = 0; i < this._partitionClass.length; i++) {
                this._partitionClass[i] = packet.readBits(4);
                if (this._partitionClass[i] > maximum_class) {
                    maximum_class = this._partitionClass[i];
                }
            }
            ++maximum_class;
            this._classDimensions = new Int32Array(maximum_class);
            this._classSubclasses = new Int32Array(maximum_class);
            this._classMasterbooks = new Array(maximum_class);
            this._classMasterBookIndex = new Int32Array(maximum_class);
            this._subclassBooks = new Array(maximum_class);
            this._subclassBookIndex = new Array(maximum_class);
            for (let i = 0; i < maximum_class; i++) {
                this._classDimensions[i] = packet.readBits(3) + 1;
                this._classSubclasses[i] = packet.readBits(2);
                if (this._classSubclasses[i] > 0) {
                    this._classMasterBookIndex[i] = packet.readBits(8);
                    this._classMasterbooks[i] = codebooks[this._classMasterBookIndex[i]];
                }
                this._subclassBooks[i] = new Array(1 << this._classSubclasses[i]);
                this._subclassBookIndex[i] = new Int32Array(this._subclassBooks[i].length);
                for (let j = 0; j < this._subclassBooks[i].length; j++) {
                    const bookNum = packet.readBits(8) - 1;
                    if (bookNum >= 0) {
                        this._subclassBooks[i][j] = codebooks[bookNum];
                    }
                    this._subclassBookIndex[i][j] = bookNum;
                }
            }
            this._multiplier = packet.readBits(2);
            this._range = VorbisFloor1._rangeLookup[this._multiplier];
            this._yBits = VorbisFloor1._yBitsLookup[this._multiplier];
            ++this._multiplier;
            const rangeBits = packet.readBits(4);
            const xList = [];
            xList.push(0);
            xList.push(1 << rangeBits);
            for (let i = 0; i < this._partitionClass.length; i++) {
                const classNum = this._partitionClass[i];
                for (let j = 0; j < this._classDimensions[classNum]; j++) {
                    xList.push(packet.readBits(rangeBits));
                }
            }
            this._xList = new Int32Array(xList);
            // precalc the low and high neighbors (and init the sort table)
            this._lNeigh = new Int32Array(xList.length);
            this._hNeigh = new Int32Array(xList.length);
            this._sortIdx = new Int32Array(xList.length);
            this._sortIdx[0] = 0;
            this._sortIdx[1] = 1;
            for (let i = 2; i < this._lNeigh.length; i++) {
                this._lNeigh[i] = 0;
                this._hNeigh[i] = 1;
                this._sortIdx[i] = i;
                for (let j = 2; j < i; j++) {
                    const temp = this._xList[j];
                    if (temp < this._xList[i]) {
                        if (temp > this._xList[this._lNeigh[i]]) {
                            this._lNeigh[i] = j;
                        }
                    }
                    else {
                        if (temp < this._xList[this._hNeigh[i]]) {
                            this._hNeigh[i] = j;
                        }
                    }
                }
            }
            // precalc the sort table
            for (let i = 0; i < this._sortIdx.length - 1; i++) {
                for (let j = i + 1; j < this._sortIdx.length; j++) {
                    if (this._xList[i] === this._xList[j]) {
                        throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Floor1 Data');
                    }
                    if (this._xList[this._sortIdx[i]] > this._xList[this._sortIdx[j]]) {
                        // swap the sort indexes
                        const temp = this._sortIdx[i];
                        this._sortIdx[i] = this._sortIdx[j];
                        this._sortIdx[j] = temp;
                    }
                }
            }
        }
        unpack(packet, blockSize, channel) {
            const data = new VorbisFloor1Data();
            // hoist ReadPosts to here since that's all we're doing...
            if (packet.readBit()) {
                let postCount = 2;
                data.posts[0] = packet.readBits(this._yBits);
                data.posts[1] = packet.readBits(this._yBits);
                for (let i = 0; i < this._partitionClass.length; i++) {
                    const clsNum = this._partitionClass[i];
                    const cdim = this._classDimensions[clsNum];
                    const cbits = this._classSubclasses[clsNum];
                    const csub = (1 << cbits) - 1;
                    let cval = 0;
                    if (cbits > 0) {
                        cval = this._classMasterbooks[clsNum].decodeScalar(packet);
                        if (cval === -1) {
                            // we read a bad value...  bail
                            postCount = 0;
                            break;
                        }
                    }
                    for (let j = 0; j < cdim; j++) {
                        const book = this._subclassBooks[clsNum][cval & csub];
                        cval = cval >> cbits;
                        if (book != null) {
                            data.posts[postCount] = book.decodeScalar(packet);
                            if (data.posts[postCount] === -1) {
                                // we read a bad value... bail
                                postCount = 0;
                                i = this._partitionClass.length;
                                break;
                            }
                        }
                        ++postCount;
                    }
                }
                data.postCount = postCount;
            }
            return data;
        }
        apply(floorData, blockSize, residue) {
            const data = floorData;
            const n = blockSize / 2;
            if (data.postCount > 0) {
                const stepFlags = this.unwrapPosts(data);
                let lx = 0;
                let ly = data.posts[0] * this._multiplier;
                for (let i = 1; i < data.postCount; i++) {
                    const idx = this._sortIdx[i];
                    if (stepFlags[idx]) {
                        const hx = this._xList[idx];
                        const hy = data.posts[idx] * this._multiplier;
                        if (lx < n) {
                            this.renderLineMulti(lx, ly, Math.min(hx, n), hy, residue);
                        }
                        lx = hx;
                        ly = hy;
                    }
                    if (lx >= n) {
                        break;
                    }
                }
                if (lx < n) {
                    this.renderLineMulti(lx, ly, n, ly, residue);
                }
            }
            else {
                residue.fill(0, 0, n);
            }
        }
        unwrapPosts(data) {
            const stepFlags = new Array(64);
            stepFlags.fill(false);
            stepFlags[0] = true;
            stepFlags[1] = true;
            const finalY = new Int32Array(64);
            finalY[0] = data.posts[0];
            finalY[1] = data.posts[1];
            for (let i = 2; i < data.postCount; i++) {
                const lowOfs = this._lNeigh[i];
                const highOfs = this._hNeigh[i];
                const predicted = this.renderPoint(this._xList[lowOfs], finalY[lowOfs], this._xList[highOfs], finalY[highOfs], this._xList[i]);
                const val = data.posts[i];
                const highroom = this._range - predicted;
                const lowroom = predicted;
                let room;
                if (highroom < lowroom) {
                    room = highroom * 2;
                }
                else {
                    room = lowroom * 2;
                }
                if (val !== 0) {
                    stepFlags[lowOfs] = true;
                    stepFlags[highOfs] = true;
                    stepFlags[i] = true;
                    if (val >= room) {
                        if (highroom > lowroom) {
                            finalY[i] = val - lowroom + predicted;
                        }
                        else {
                            finalY[i] = predicted - val + highroom - 1;
                        }
                    }
                    else {
                        if (val % 2 === 1) {
                            // odd
                            finalY[i] = predicted - (val + 1) / 2;
                        }
                        else {
                            // even
                            finalY[i] = predicted + val / 2;
                        }
                    }
                }
                else {
                    stepFlags[i] = false;
                    finalY[i] = predicted;
                }
            }
            for (let i = 0; i < data.postCount; i++) {
                data.posts[i] = finalY[i];
            }
            return stepFlags;
        }
        renderPoint(x0, y0, x1, y1, X) {
            const dy = y1 - y0;
            const adx = x1 - x0;
            const ady = Math.abs(dy);
            const err = ady * (X - x0);
            const off = (err / adx) | 0;
            if (dy < 0) {
                return y0 - off;
            }
            return y0 + off;
        }
        renderLineMulti(x0, y0, x1, y1, v) {
            const dy = y1 - y0;
            const adx = x1 - x0;
            let ady = Math.abs(dy);
            const sy = 1 - ((dy >> 31) & 1) * 2;
            const b = (dy / adx) | 0;
            let x = x0;
            let y = y0;
            let err = -adx;
            v[x0] *= VorbisFloor1.inverse_dB_table[y0];
            ady -= Math.abs(b) * adx;
            while (++x < x1) {
                y += b;
                err += ady;
                if (err >= 0) {
                    err -= adx;
                    y += sy;
                }
                v[x] *= VorbisFloor1.inverse_dB_table[y];
            }
        }
    }
    VorbisFloor1._rangeLookup = [256, 128, 86, 64];
    VorbisFloor1._yBitsLookup = [8, 7, 7, 6];
    // prettier-ignore
    VorbisFloor1.inverse_dB_table = new Float32Array([
        1.0649863e-7, 1.1341951e-7, 1.2079015e-7, 1.2863978e-7, 1.3699951e-7, 1.4590251e-7, 1.5538408e-7, 1.6548181e-7,
        1.7623575e-7, 1.8768855e-7, 1.9988561e-7, 2.128753e-7, 2.2670913e-7, 2.4144197e-7, 2.5713223e-7, 2.7384213e-7,
        2.9163793e-7, 3.1059021e-7, 3.3077411e-7, 3.5226968e-7, 3.7516214e-7, 3.9954229e-7, 4.255068e-7, 4.5315863e-7,
        4.8260743e-7, 5.1396998e-7, 5.4737065e-7, 5.8294187e-7, 6.2082472e-7, 6.6116941e-7, 7.0413592e-7, 7.4989464e-7,
        7.9862701e-7, 8.505263e-7, 9.0579828e-7, 9.6466216e-7, 1.0273513e-6, 1.0941144e-6, 1.1652161e-6, 1.2409384e-6,
        1.3215816e-6, 1.4074654e-6, 1.4989305e-6, 1.5963394e-6, 1.7000785e-6, 1.8105592e-6, 1.9282195e-6, 2.0535261e-6,
        2.1869758e-6, 2.3290978e-6, 2.4804557e-6, 2.6416497e-6, 2.813319e-6, 2.9961443e-6, 3.1908506e-6, 3.3982101e-6,
        3.6190449e-6, 3.8542308e-6, 4.1047004e-6, 4.371447e-6, 4.6555282e-6, 4.9580707e-6, 5.280274e-6, 5.623416e-6,
        5.9888572e-6, 6.3780469e-6, 6.7925283e-6, 7.2339451e-6, 7.7040476e-6, 8.2047e-6, 8.7378876e-6, 9.3057248e-6,
        9.9104632e-6, 1.0554501e-5, 1.1240392e-5, 1.1970856e-5, 1.2748789e-5, 1.3577278e-5, 1.4459606e-5, 1.5399272e-5,
        1.6400004e-5, 1.7465768e-5, 1.8600792e-5, 1.9809576e-5, 2.1096914e-5, 2.2467911e-5, 2.3928002e-5, 2.5482978e-5,
        2.7139006e-5, 2.8902651e-5, 3.0780908e-5, 3.2781225e-5, 3.4911534e-5, 3.7180282e-5, 3.9596466e-5, 4.2169667e-5,
        4.491009e-5, 4.7828601e-5, 5.0936773e-5, 5.4246931e-5, 5.7772202e-5, 6.1526565e-5, 6.5524908e-5, 6.9783085e-5,
        7.4317983e-5, 7.9147585e-5, 8.429104e-5, 8.9768747e-5, 9.5602426e-5, 0.00010181521, 0.00010843174,
        0.00011547824, 0.00012298267, 0.00013097477, 0.00013948625, 0.00014855085, 0.00015820453, 0.00016848555,
        0.00017943469, 0.00019109536, 0.00020351382, 0.00021673929, 0.00023082423, 0.00024582449, 0.00026179955,
        0.00027881276, 0.00029693158, 0.00031622787, 0.00033677814, 0.00035866388, 0.00038197188, 0.00040679456,
        0.00043323036, 0.00046138411, 0.00049136745, 0.00052329927, 0.00055730621, 0.00059352311, 0.00063209358,
        0.00067317058, 0.000716917, 0.0007635063, 0.00081312324, 0.00086596457, 0.00092223983, 0.00098217216,
        0.0010459992, 0.0011139742, 0.0011863665, 0.0012634633, 0.0013455702, 0.0014330129, 0.0015261382, 0.0016253153,
        0.0017309374, 0.0018434235, 0.0019632195, 0.0020908006, 0.0022266726, 0.0023713743, 0.0025254795, 0.0026895994,
        0.0028643847, 0.0030505286, 0.0032487691, 0.0034598925, 0.0036847358, 0.0039241906, 0.0041792066, 0.004450795,
        0.0047400328, 0.0050480668, 0.0053761186, 0.0057254891, 0.0060975636, 0.0064938176, 0.0069158225, 0.0073652516,
        0.0078438871, 0.0083536271, 0.0088964928, 0.009474637, 0.010090352, 0.01074608, 0.011444421, 0.012188144,
        0.012980198, 0.013823725, 0.014722068, 0.015678791, 0.016697687, 0.017782797, 0.018938423, 0.020169149,
        0.021479854, 0.022875735, 0.02436233, 0.025945531, 0.027631618, 0.029427276, 0.031339626, 0.033376252,
        0.035545228, 0.037855157, 0.040315199, 0.042935108, 0.045725273, 0.048696758, 0.051861348, 0.055231591,
        0.05882085, 0.062643361, 0.066714279, 0.071049749, 0.075666962, 0.080584227, 0.085821044, 0.091398179,
        0.097337747, 0.1036633, 0.11039993, 0.11757434, 0.12521498, 0.13335215, 0.14201813, 0.15124727, 0.16107617,
        0.1715438, 0.18269168, 0.19456402, 0.20720788, 0.22067342, 0.23501402, 0.25028656, 0.26655159, 0.28387361,
        0.30232132, 0.32196786, 0.34289114, 0.36517414, 0.38890521, 0.41417847, 0.44109412, 0.4697589, 0.50028648,
        0.53279791, 0.56742212, 0.6042964, 0.64356699, 0.68538959, 0.72993007, 0.77736504, 0.8278826, 0.88168307,
        0.9389798, 1.0
    ]);
    class VorbisFloor {
        constructor(packet, block0Size, block1Size, codebooks) {
            const type = packet.readBits(16);
            switch (type) {
                case 0:
                    this.floor = new VorbisFloor0(packet, block0Size, block1Size, codebooks);
                    break;
                case 1:
                    this.floor = new VorbisFloor1(packet, codebooks);
                    break;
                default:
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, `Vorbis: Invalid Floor type: ${type}`);
            }
        }
        apply(floorData, blockSize, residue) {
            this.floor.apply(floorData, blockSize, residue);
        }
        unpack(packet, blockSize, channel) {
            return this.floor.unpack(packet, blockSize, channel);
        }
    }
    class VorbisResidue0 {
        constructor(packet, channels, codebooks) {
            this._begin = packet.readBits(24);
            this._end = packet.readBits(24);
            this._partitionSize = packet.readBits(24) + 1;
            this._classifications = packet.readBits(6) + 1;
            this._classBook = codebooks[packet.readBits(8)];
            this._cascade = new Int32Array(this._classifications);
            let acc = 0;
            for (let i = 0; i < this._classifications; i++) {
                const low_bits = packet.readBits(3);
                if (packet.readBit()) {
                    this._cascade[i] = (packet.readBits(5) << 3) | low_bits;
                }
                else {
                    this._cascade[i] = low_bits;
                }
                acc += VorbisResidue0.icount(this._cascade[i]);
            }
            const bookNums = new Int32Array(acc);
            for (let i = 0; i < acc; i++) {
                bookNums[i] = packet.readBits(8);
                if (codebooks[bookNums[i]].mapType === 0) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Residue 0');
                }
            }
            const entries = this._classBook.entries;
            let dim = this._classBook.dimensions;
            let partvals = 1;
            while (dim > 0) {
                partvals *= this._classifications;
                if (partvals > entries) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid Residue 0');
                }
                --dim;
            }
            // now the lookups
            this._books = new Array(this._classifications);
            acc = 0;
            let maxstage = 0;
            let stages;
            for (let j = 0; j < this._classifications; j++) {
                stages = VorbisUtils.ilog(this._cascade[j]);
                this._books[j] = new Array(stages);
                if (stages > 0) {
                    maxstage = Math.max(maxstage, stages);
                    for (let k = 0; k < stages; k++) {
                        if ((this._cascade[j] & (1 << k)) > 0) {
                            this._books[j][k] = codebooks[bookNums[acc++]];
                        }
                    }
                }
            }
            this._maxStages = maxstage;
            this._decodeMap = new Array(partvals);
            for (let j = 0; j < partvals; j++) {
                let val = j;
                let mult = (partvals / this._classifications) | 0;
                this._decodeMap[j] = new Int32Array(this._classBook.dimensions);
                for (let k = 0; k < this._classBook.dimensions; k++) {
                    const deco = (val / mult) | 0;
                    val -= deco * mult;
                    mult = (mult / this._classifications) | 0;
                    this._decodeMap[j][k] = deco;
                }
            }
            this._channels = channels;
        }
        static icount(v) {
            let ret = 0;
            while (v !== 0) {
                ret += v & 1;
                v >>= 1;
            }
            return ret;
        }
        decode(packet, doNotDecodeChannel, blockSize, buffer) {
            const end = this._end < blockSize / 2 ? this._end : blockSize / 2;
            const n = end - this._begin;
            if (n > 0 && doNotDecodeChannel.indexOf(false) !== -1) {
                const partitionCount = n / this._partitionSize;
                const partitionWords = ((partitionCount + this._classBook.dimensions - 1) / this._classBook.dimensions) | 0;
                const partWordCache = [];
                for (let i = 0; i < this._channels; i++) {
                    partWordCache.push(new Array(partitionWords));
                }
                for (let stage = 0; stage < this._maxStages; stage++) {
                    for (let partitionIdx = 0, entryIdx = 0; partitionIdx < partitionCount; entryIdx++) {
                        if (stage === 0) {
                            for (let ch = 0; ch < this._channels; ch++) {
                                const idx = this._classBook.decodeScalar(packet);
                                if (idx >= 0 && idx < this._decodeMap.length) {
                                    partWordCache[ch][entryIdx] = this._decodeMap[idx];
                                }
                                else {
                                    partitionIdx = partitionCount;
                                    stage = this._maxStages;
                                    break;
                                }
                            }
                        }
                        for (let dimensionIdx = 0; partitionIdx < partitionCount && dimensionIdx < this._classBook.dimensions; dimensionIdx++, partitionIdx++) {
                            const offset = this._begin + partitionIdx * this._partitionSize;
                            for (let ch = 0; ch < this._channels; ch++) {
                                const idx = partWordCache[ch][entryIdx][dimensionIdx];
                                if ((this._cascade[idx] & (1 << stage)) !== 0) {
                                    const book = this._books[idx][stage];
                                    if (book) {
                                        if (this.writeVectors(book, packet, buffer, ch, offset, this._partitionSize)) {
                                            // bad packet...  exit now and try to use what we already have
                                            partitionIdx = partitionCount;
                                            stage = this._maxStages;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        writeVectors(codebook, packet, residue, channel, offset, partitionSize) {
            const res = residue[channel];
            const steps = partitionSize / codebook.dimensions;
            const entryCache = new Int32Array(steps);
            for (let i = 0; i < steps; i++) {
                entryCache[i] = codebook.decodeScalar(packet);
                if (entryCache[i] === -1) {
                    return true;
                }
            }
            for (let dim = 0; dim < codebook.dimensions; dim++) {
                for (let step = 0; step < steps; step++, offset++) {
                    res[offset] += codebook.get(entryCache[step], dim);
                }
            }
            return false;
        }
    }
    class VorbisResidue1 extends VorbisResidue0 {
        writeVectors(codebook, packet, residue, channel, offset, partitionSize) {
            const res = residue[channel];
            for (let i = 0; i < partitionSize;) {
                const entry = codebook.decodeScalar(packet);
                if (entry === -1) {
                    return true;
                }
                for (let j = 0; j < codebook.dimensions; i++, j++) {
                    res[offset + i] += codebook.get(entry, j);
                }
            }
            return false;
        }
    }
    class VorbisResidue2 extends VorbisResidue0 {
        constructor(packet, channels, codebooks) {
            super(packet, 1, codebooks);
            this._realChannels = channels;
        }
        decode(packet, doNotDecodeChannel, blockSize, buffer) {
            // since we're doing all channels in a single pass, the block size has to be multiplied.
            // otherwise this is just a pass-through call
            super.decode(packet, doNotDecodeChannel, blockSize * this._realChannels, buffer);
        }
        writeVectors(codebook, packet, residue, channel, offset, partitionSize) {
            let chPtr = 0;
            offset /= this._realChannels;
            for (let c = 0; c < partitionSize;) {
                const entry = codebook.decodeScalar(packet);
                if (entry === -1) {
                    return true;
                }
                for (let d = 0; d < codebook.dimensions; d++, c++) {
                    residue[chPtr][offset] += codebook.get(entry, d);
                    if (++chPtr === this._realChannels) {
                        chPtr = 0;
                        offset++;
                    }
                }
            }
            return false;
        }
    }
    class VorbisResidue {
        constructor(packet, channels, codebooks) {
            const type = packet.readBits(16);
            switch (type) {
                case 0:
                    this.residue = new VorbisResidue0(packet, channels, codebooks);
                    break;
                case 1:
                    this.residue = new VorbisResidue1(packet, channels, codebooks);
                    break;
                case 2:
                    this.residue = new VorbisResidue2(packet, channels, codebooks);
                    break;
                default:
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, `Vorbis: Invalid Residue type: ${type}`);
            }
        }
        decode(packet, doNotDecodeChannel, blockSize, buffer) {
            this.residue.decode(packet, doNotDecodeChannel, blockSize, buffer);
        }
    }
    class VorbisMapping {
        constructor(packet, channels, floors, residues, mdct) {
            const mappingType = packet.readBits(16);
            if (mappingType !== 0) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid mapping type!');
            }
            let submapCount = 1;
            if (packet.readBit()) {
                submapCount += packet.readBits(4);
            }
            // square polar mapping
            let couplingSteps = 0;
            if (packet.readBit()) {
                couplingSteps = packet.readBits(8) + 1;
            }
            const couplingBits = VorbisUtils.ilog(channels - 1);
            this._couplingAngle = new Int32Array(couplingSteps);
            this._couplingMangitude = new Int32Array(couplingSteps);
            for (let j = 0; j < couplingSteps; j++) {
                const magnitude = packet.readBits(couplingBits);
                const angle = packet.readBits(couplingBits);
                if (magnitude === angle || magnitude > channels - 1 || angle > channels - 1) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid magnitude or angle in mapping header!');
                }
                this._couplingAngle[j] = angle;
                this._couplingMangitude[j] = magnitude;
            }
            if (packet.readBits(2) !== 0) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Reserved bits not 0 in mapping header.');
            }
            const mux = new Int32Array(channels);
            if (submapCount > 1) {
                for (let c = 0; c < channels; c++) {
                    mux[c] = packet.readBits(4);
                    if (mux[c] > submapCount) {
                        throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid channel mux submap index in mapping header!');
                    }
                }
            }
            this._submapFloor = new Array(submapCount);
            this._submapResidue = new Array(submapCount);
            for (let j = 0; j < submapCount; j++) {
                packet.skipBits(8); // unused placeholder
                const floorNum = packet.readBits(8);
                if (floorNum >= floors.length) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid floor number in mapping header!');
                }
                const residueNum = packet.readBits(8);
                if (residueNum >= residues.length) {
                    throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Invalid residue number in mapping header!');
                }
                this._submapFloor[j] = floors[floorNum];
                this._submapResidue[j] = residues[residueNum];
            }
            this._channelFloor = new Array(channels);
            this._channelResidue = new Array(channels);
            for (let c = 0; c < channels; c++) {
                this._channelFloor[c] = this._submapFloor[mux[c]];
                this._channelResidue[c] = this._submapResidue[mux[c]];
            }
            this._mdct = mdct;
        }
        decodePacket(packet, blockSize, buffer) {
            const halfBlockSize = blockSize >> 1;
            // read the noise floor data
            const floorData = new Array(this._channelFloor.length);
            const noExecuteChannel = new Array(this._channelFloor.length);
            noExecuteChannel.fill(false);
            for (let i = 0; i < this._channelFloor.length; i++) {
                floorData[i] = this._channelFloor[i].unpack(packet, blockSize, i);
                noExecuteChannel[i] = !floorData[i].executeChannel;
                // pre-clear the residue buffers
                buffer[i].fill(0, 0, halfBlockSize);
            }
            // make sure we handle no-energy channels correctly given the couplings..
            for (let i = 0; i < this._couplingAngle.length; i++) {
                if (floorData[this._couplingAngle[i]].executeChannel ||
                    floorData[this._couplingMangitude[i]].executeChannel) {
                    floorData[this._couplingAngle[i]].forceEnergy = true;
                    floorData[this._couplingMangitude[i]].forceEnergy = true;
                }
            }
            // decode the submaps into the residue buffer
            for (let i = 0; i < this._submapFloor.length; i++) {
                for (let j = 0; j < this._channelFloor.length; j++) {
                    if (this._submapFloor[i] !== this._channelFloor[j] ||
                        this._submapResidue[i] !== this._channelResidue[j]) {
                        // the submap doesn't match, so this floor doesn't contribute
                        floorData[j].forceNoEnergy = true;
                    }
                }
                this._submapResidue[i].decode(packet, noExecuteChannel, blockSize, buffer);
            }
            // inverse coupling
            for (let i = this._couplingAngle.length - 1; i >= 0; i--) {
                if (floorData[this._couplingAngle[i]].executeChannel ||
                    floorData[this._couplingMangitude[i]].executeChannel) {
                    const magnitude = buffer[this._couplingMangitude[i]];
                    const angle = buffer[this._couplingAngle[i]];
                    // we only have to do the first half; MDCT ignores the last half
                    for (let j = 0; j < halfBlockSize; j++) {
                        let newM;
                        let newA;
                        const oldM = magnitude[j];
                        const oldA = angle[j];
                        if (oldM > 0) {
                            if (oldA > 0) {
                                newM = oldM;
                                newA = oldM - oldA;
                            }
                            else {
                                newA = oldM;
                                newM = oldM + oldA;
                            }
                        }
                        else {
                            if (oldA > 0) {
                                newM = oldM;
                                newA = oldM + oldA;
                            }
                            else {
                                newA = oldM;
                                newM = oldM - oldA;
                            }
                        }
                        magnitude[j] = newM;
                        angle[j] = newA;
                    }
                }
            }
            // apply floor / dot product / MDCT (only run if we have sound energy in that channel)
            for (let c = 0; c < this._channelFloor.length; c++) {
                if (floorData[c].executeChannel) {
                    this._channelFloor[c].apply(floorData[c], blockSize, buffer[c]);
                    this._mdct.reverse(buffer[c], blockSize);
                }
                else {
                    // since we aren't doing the IMDCT, we have to explicitly clear the back half of the block
                    buffer[c].fill(0, halfBlockSize, halfBlockSize * 2);
                }
            }
        }
    }
    class VorbisModeOverlapInfo {
        constructor() {
            this.packetStartIndex = 0;
            this.packetTotalLength = 0;
            this.packetValidLength = 0;
        }
    }
    class VorbisModePacketInfo {
        constructor() {
            this.overlapInfo = new VorbisModeOverlapInfo();
            this.windowIndex = 0;
        }
    }
    class VorbisReadNextPacketResult {
        constructor(samplePosition = null) {
            this.samplePosition = null;
            this.samplePosition = samplePosition;
        }
    }
    class VorbisMode {
        constructor(packet, channels, block0Size, block1Size, mappings) {
            this._overlapInfo = null;
            this._channels = channels;
            this._blockFlag = packet.readBit();
            if (0 !== packet.readBits(32)) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Mode header had invalid window or transform type!');
            }
            const mappingIdx = packet.readBits(8);
            if (mappingIdx >= mappings.length) {
                throw new AlphaTabError(exports.AlphaTabErrorType.Format, 'Vorbis: Mode header had invalid mapping index!');
            }
            this._mapping = mappings[mappingIdx];
            if (this._blockFlag) {
                this._blockSize = block1Size;
                this._windows = [
                    VorbisMode.calcWindow(block0Size, block1Size, block0Size),
                    VorbisMode.calcWindow(block1Size, block1Size, block0Size),
                    VorbisMode.calcWindow(block0Size, block1Size, block1Size),
                    VorbisMode.calcWindow(block1Size, block1Size, block1Size)
                ];
                this._overlapInfo = [
                    VorbisMode.calcOverlap(block0Size, block1Size, block0Size),
                    VorbisMode.calcOverlap(block1Size, block1Size, block0Size),
                    VorbisMode.calcOverlap(block0Size, block1Size, block1Size),
                    VorbisMode.calcOverlap(block1Size, block1Size, block1Size)
                ];
            }
            else {
                this._blockSize = block0Size;
                this._windows = [VorbisMode.calcWindow(block0Size, block0Size, block0Size)];
            }
        }
        decode(reader, buffer) {
            const info = this.getPacketInfo(reader);
            this._mapping.decodePacket(reader, this._blockSize, buffer);
            const window = this._windows[info.windowIndex];
            for (let i = 0; i < this._blockSize; i++) {
                for (let ch = 0; ch < this._channels; ch++) {
                    buffer[ch][i] *= window[i];
                }
            }
            return info.overlapInfo;
        }
        getPacketInfo(reader) {
            const info = new VorbisModePacketInfo();
            if (this._blockFlag) {
                const prevFlag = reader.readBit();
                const nextFlag = reader.readBit();
                info.windowIndex = (prevFlag ? 1 : 0) + (nextFlag ? 2 : 0);
                const overlapInfo = this._overlapInfo[info.windowIndex];
                info.overlapInfo.packetStartIndex = overlapInfo.packetStartIndex;
                info.overlapInfo.packetValidLength = overlapInfo.packetValidLength;
                info.overlapInfo.packetTotalLength = overlapInfo.packetTotalLength;
            }
            else {
                info.windowIndex = 0;
                info.overlapInfo.packetStartIndex = 0;
                info.overlapInfo.packetValidLength = this._blockSize / 2;
                info.overlapInfo.packetTotalLength = this._blockSize;
            }
            return info;
        }
        static calcWindow(prevBlockSize, blockSize, nextBlockSize) {
            const array = new Float32Array(blockSize);
            const left = prevBlockSize / 2;
            const wnd = blockSize;
            const right = nextBlockSize / 2;
            const leftbegin = wnd / 4 - left / 2;
            const rightbegin = wnd - wnd / 4 - right / 2;
            for (let i = 0; i < left; i++) {
                let x = Math.sin(((i + 0.5) / left) * VorbisMode.M_PI2);
                x *= x;
                array[leftbegin + i] = Math.sin(x * VorbisMode.M_PI2);
            }
            for (let i = leftbegin + left; i < rightbegin; i++) {
                array[i] = 1.0;
            }
            for (let i = 0; i < right; i++) {
                let x = Math.sin(((right - i - 0.5) / right) * VorbisMode.M_PI2);
                x *= x;
                array[rightbegin + i] = Math.sin(x * VorbisMode.M_PI2);
            }
            return array;
        }
        static calcOverlap(prevBlockSize, blockSize, nextBlockSize) {
            const leftOverlapHalfSize = prevBlockSize / 4;
            const rightOverlapHalfSize = nextBlockSize / 4;
            const packetStartIndex = blockSize / 4 - leftOverlapHalfSize;
            const packetTotalLength = (blockSize / 4) * 3 + rightOverlapHalfSize;
            const packetValidLength = packetTotalLength - rightOverlapHalfSize * 2;
            const info = new VorbisModeOverlapInfo();
            info.packetStartIndex = packetStartIndex;
            info.packetValidLength = packetValidLength;
            info.packetTotalLength = packetTotalLength;
            return info;
        }
    }
    VorbisMode.M_PI2 = 3.1415926539 / 2;
    class MdctImpl {
        constructor(n) {
            this._n = n;
            this._n2 = n >> 1;
            this._n4 = this._n2 >> 1;
            this._n8 = this._n4 >> 1;
            this._ld = VorbisUtils.ilog(n) - 1;
            // first, calc the "twiddle factors"
            this._a = new Float32Array(this._n2);
            this._b = new Float32Array(this._n2);
            this._c = new Float32Array(this._n4);
            let k = 0;
            let k2 = 0;
            for (; k < this._n4; ++k, k2 += 2) {
                this._a[k2] = Math.cos((4 * k * MdctImpl.M_PI) / n);
                this._a[k2 + 1] = -Math.sin((4 * k * MdctImpl.M_PI) / n);
                this._b[k2] = Math.cos(((k2 + 1) * MdctImpl.M_PI) / n / 2) * 0.5;
                this._b[k2 + 1] = Math.sin(((k2 + 1) * MdctImpl.M_PI) / n / 2) * 0.5;
            }
            k = 0;
            k2 = 0;
            for (; k < this._n8; ++k, k2 += 2) {
                this._c[k2] = Math.cos((2 * (k2 + 1) * MdctImpl.M_PI) / n);
                this._c[k2 + 1] = -Math.sin((2 * (k2 + 1) * MdctImpl.M_PI) / n);
            }
            // now, calc the bit reverse table
            this._bitrev = new Uint16Array(this._n8);
            for (let i = 0; i < this._n8; ++i) {
                this._bitrev[i] = TypeConversions.int32ToUint16(VorbisUtils.bitReverse(i, this._ld - 3) << 2);
            }
        }
        calcReverse(buffer) {
            let u;
            let v;
            const buf2 = new Float32Array(this._n2);
            {
                let d = this._n2 - 2; // buf2
                let AA = 0; // A
                let e = 0; // buffer
                const e_stop = this._n2; // buffer
                while (e !== e_stop) {
                    buf2[d + 1] = buffer[e] * this._a[AA] - buffer[e + 2] * this._a[AA + 1];
                    buf2[d] = buffer[e] * this._a[AA + 1] + buffer[e + 2] * this._a[AA];
                    d -= 2;
                    AA += 2;
                    e += 4;
                }
                e = this._n2 - 3;
                while (d >= 0) {
                    buf2[d + 1] = -buffer[e + 2] * this._a[AA] - -buffer[e] * this._a[AA + 1];
                    buf2[d] = -buffer[e + 2] * this._a[AA + 1] + -buffer[e] * this._a[AA];
                    d -= 2;
                    AA += 2;
                    e -= 4;
                }
            }
            // apply "symbolic" names
            u = buffer;
            v = buf2;
            {
                let AA = this._n2 - 8; // A
                let e0 = this._n4; // v
                let e1 = 0; // v
                let d0 = this._n4; // u
                let d1 = 0; // u
                while (AA >= 0) {
                    let v40_20;
                    let v41_21;
                    v41_21 = v[e0 + 1] - v[e1 + 1];
                    v40_20 = v[e0] - v[e1];
                    u[d0 + 1] = v[e0 + 1] + v[e1 + 1];
                    u[d0] = v[e0] + v[e1];
                    u[d1 + 1] = v41_21 * this._a[AA + 4] - v40_20 * this._a[AA + 5];
                    u[d1] = v40_20 * this._a[AA + 4] + v41_21 * this._a[AA + 5];
                    v41_21 = v[e0 + 3] - v[e1 + 3];
                    v40_20 = v[e0 + 2] - v[e1 + 2];
                    u[d0 + 3] = v[e0 + 3] + v[e1 + 3];
                    u[d0 + 2] = v[e0 + 2] + v[e1 + 2];
                    u[d1 + 3] = v41_21 * this._a[AA] - v40_20 * this._a[AA + 1];
                    u[d1 + 2] = v40_20 * this._a[AA] + v41_21 * this._a[AA + 1];
                    AA -= 8;
                    d0 += 4;
                    d1 += 4;
                    e0 += 4;
                    e1 += 4;
                }
            }
            // step 3
            // iteration 0
            this.step3_iter0_loop(this._n >> 4, u, this._n2 - 1 - this._n4 * 0, -this._n8);
            this.step3_iter0_loop(this._n >> 4, u, this._n2 - 1 - this._n4 * 1, -this._n8);
            // iteration 1
            this.step3_inner_r_loop(this._n >> 5, u, this._n2 - 1 - this._n8 * 0, -(this._n >> 4), 16);
            this.step3_inner_r_loop(this._n >> 5, u, this._n2 - 1 - this._n8 * 1, -(this._n >> 4), 16);
            this.step3_inner_r_loop(this._n >> 5, u, this._n2 - 1 - this._n8 * 2, -(this._n >> 4), 16);
            this.step3_inner_r_loop(this._n >> 5, u, this._n2 - 1 - this._n8 * 3, -(this._n >> 4), 16);
            // iterations 2 ... x
            let l = 2;
            for (; l < (this._ld - 3) >> 1; ++l) {
                const k0 = this._n >> (l + 2);
                const k0_2 = k0 >> 1;
                const lim = 1 << (l + 1);
                for (let i = 0; i < lim; ++i) {
                    this.step3_inner_r_loop(this._n >> (l + 4), u, this._n2 - 1 - k0 * i, -k0_2, 1 << (l + 3));
                }
            }
            // iterations x ... end
            for (; l < this._ld - 6; ++l) {
                const k0 = this._n >> (l + 2);
                const k1 = 1 << (l + 3);
                const k0_2 = k0 >> 1;
                const rlim = this._n >> (l + 6);
                const lim = 1 << (l + 1);
                let i_off = this._n2 - 1;
                let A0 = 0;
                for (let r = rlim; r > 0; --r) {
                    this.step3_inner_s_loop(lim, u, i_off, -k0_2, A0, k1, k0);
                    A0 += k1 * 4;
                    i_off -= 8;
                }
            }
            // combine some iteration steps...
            this.step3_inner_s_loop_ld654(this._n >> 5, u, this._n2 - 1, this._n);
            {
                let bit = 0;
                let d0 = this._n4 - 4; // v
                let d1 = this._n2 - 4; // v
                while (d0 >= 0) {
                    let k4;
                    k4 = this._bitrev[bit];
                    v[d1 + 3] = u[k4];
                    v[d1 + 2] = u[k4 + 1];
                    v[d0 + 3] = u[k4 + 2];
                    v[d0 + 2] = u[k4 + 3];
                    k4 = this._bitrev[bit + 1];
                    v[d1 + 1] = u[k4];
                    v[d1] = u[k4 + 1];
                    v[d0 + 1] = u[k4 + 2];
                    v[d0] = u[k4 + 3];
                    d0 -= 4;
                    d1 -= 4;
                    bit += 2;
                }
            }
            {
                let c = 0; // C
                let d = 0; // v
                let e = this._n2 - 4; // v
                while (d < e) {
                    let a02;
                    let a11;
                    let b0;
                    let b1;
                    let b2;
                    let b3;
                    a02 = v[d] - v[e + 2];
                    a11 = v[d + 1] + v[e + 3];
                    b0 = this._c[c + 1] * a02 + this._c[c] * a11;
                    b1 = this._c[c + 1] * a11 - this._c[c] * a02;
                    b2 = v[d] + v[e + 2];
                    b3 = v[d + 1] - v[e + 3];
                    v[d] = b2 + b0;
                    v[d + 1] = b3 + b1;
                    v[e + 2] = b2 - b0;
                    v[e + 3] = b1 - b3;
                    a02 = v[d + 2] - v[e];
                    a11 = v[d + 3] + v[e + 1];
                    b0 = this._c[c + 3] * a02 + this._c[c + 2] * a11;
                    b1 = this._c[c + 3] * a11 - this._c[c + 2] * a02;
                    b2 = v[d + 2] + v[e];
                    b3 = v[d + 3] - v[e + 1];
                    v[d + 2] = b2 + b0;
                    v[d + 3] = b3 + b1;
                    v[e] = b2 - b0;
                    v[e + 1] = b1 - b3;
                    c += 4;
                    d += 4;
                    e -= 4;
                }
            }
            {
                let b = this._n2 - 8; // B
                let e = this._n2 - 8; // buf2
                let d0 = 0; // buffer
                let d1 = this._n2 - 4; // buffer
                let d2 = this._n2; // buffer
                let d3 = this._n - 4; // buffer
                while (e >= 0) {
                    let p0;
                    let p1;
                    let p2;
                    let p3;
                    p3 = buf2[e + 6] * this._b[b + 7] - buf2[e + 7] * this._b[b + 6];
                    p2 = -buf2[e + 6] * this._b[b + 6] - buf2[e + 7] * this._b[b + 7];
                    buffer[d0] = p3;
                    buffer[d1 + 3] = -p3;
                    buffer[d2] = p2;
                    buffer[d3 + 3] = p2;
                    p1 = buf2[e + 4] * this._b[b + 5] - buf2[e + 5] * this._b[b + 4];
                    p0 = -buf2[e + 4] * this._b[b + 4] - buf2[e + 5] * this._b[b + 5];
                    buffer[d0 + 1] = p1;
                    buffer[d1 + 2] = -p1;
                    buffer[d2 + 1] = p0;
                    buffer[d3 + 2] = p0;
                    p3 = buf2[e + 2] * this._b[b + 3] - buf2[e + 3] * this._b[b + 2];
                    p2 = -buf2[e + 2] * this._b[b + 2] - buf2[e + 3] * this._b[b + 3];
                    buffer[d0 + 2] = p3;
                    buffer[d1 + 1] = -p3;
                    buffer[d2 + 2] = p2;
                    buffer[d3 + 1] = p2;
                    p1 = buf2[e] * this._b[b + 1] - buf2[e + 1] * this._b[b];
                    p0 = -buf2[e] * this._b[b] - buf2[e + 1] * this._b[b + 1];
                    buffer[d0 + 3] = p1;
                    buffer[d1] = -p1;
                    buffer[d2 + 3] = p0;
                    buffer[d3] = p0;
                    b -= 8;
                    e -= 8;
                    d0 += 4;
                    d2 += 4;
                    d1 -= 4;
                    d3 -= 4;
                }
            }
        }
        step3_inner_r_loop(lim, e, d0, k_off, k1) {
            let k00_20;
            let k01_21;
            let e0 = d0; // e
            let e2 = e0 + k_off; // e
            let a = 0;
            for (let i = lim >> 2; i > 0; --i) {
                k00_20 = e[e0] - e[e2];
                k01_21 = e[e0 - 1] - e[e2 - 1];
                e[e0] += e[e2];
                e[e0 - 1] += e[e2 - 1];
                e[e2] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[e2 - 1] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += k1;
                k00_20 = e[e0 - 2] - e[e2 - 2];
                k01_21 = e[e0 - 3] - e[e2 - 3];
                e[e0 - 2] += e[e2 - 2];
                e[e0 - 3] += e[e2 - 3];
                e[e2 - 2] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[e2 - 3] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += k1;
                k00_20 = e[e0 - 4] - e[e2 - 4];
                k01_21 = e[e0 - 5] - e[e2 - 5];
                e[e0 - 4] += e[e2 - 4];
                e[e0 - 5] += e[e2 - 5];
                e[e2 - 4] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[e2 - 5] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += k1;
                k00_20 = e[e0 - 6] - e[e2 - 6];
                k01_21 = e[e0 - 7] - e[e2 - 7];
                e[e0 - 6] += e[e2 - 6];
                e[e0 - 7] += e[e2 - 7];
                e[e2 - 6] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[e2 - 7] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += k1;
                e0 -= 8;
                e2 -= 8;
            }
        }
        step3_iter0_loop(n, e, i_off, k_off) {
            let ee0 = i_off; // e
            let ee2 = ee0 + k_off; // e
            let a = 0;
            for (let i = n >> 2; i > 0; --i) {
                let k00_20;
                let k01_21;
                k00_20 = e[ee0] - e[ee2];
                k01_21 = e[ee0 - 1] - e[ee2 - 1];
                e[ee0] += e[ee2];
                e[ee0 - 1] += e[ee2 - 1];
                e[ee2] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[ee2 - 1] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += 8;
                k00_20 = e[ee0 - 2] - e[ee2 - 2];
                k01_21 = e[ee0 - 3] - e[ee2 - 3];
                e[ee0 - 2] += e[ee2 - 2];
                e[ee0 - 3] += e[ee2 - 3];
                e[ee2 - 2] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[ee2 - 3] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += 8;
                k00_20 = e[ee0 - 4] - e[ee2 - 4];
                k01_21 = e[ee0 - 5] - e[ee2 - 5];
                e[ee0 - 4] += e[ee2 - 4];
                e[ee0 - 5] += e[ee2 - 5];
                e[ee2 - 4] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[ee2 - 5] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += 8;
                k00_20 = e[ee0 - 6] - e[ee2 - 6];
                k01_21 = e[ee0 - 7] - e[ee2 - 7];
                e[ee0 - 6] += e[ee2 - 6];
                e[ee0 - 7] += e[ee2 - 7];
                e[ee2 - 6] = k00_20 * this._a[a] - k01_21 * this._a[a + 1];
                e[ee2 - 7] = k01_21 * this._a[a] + k00_20 * this._a[a + 1];
                a += 8;
                ee0 -= 8;
                ee2 -= 8;
            }
        }
        step3_inner_s_loop(n, e, i_off, k_off, a, a_off, k0) {
            const A0 = this._a[a];
            const A1 = this._a[a + 1];
            const A2 = this._a[a + a_off];
            const A3 = this._a[a + a_off + 1];
            const A4 = this._a[a + a_off * 2];
            const A5 = this._a[a + a_off * 2 + 1];
            const A6 = this._a[a + a_off * 3];
            const A7 = this._a[a + a_off * 3 + 1];
            let k00;
            let k11;
            let ee0 = i_off; // e
            let ee2 = ee0 + k_off; // e
            for (let i = n; i > 0; --i) {
                k00 = e[ee0] - e[ee2];
                k11 = e[ee0 - 1] - e[ee2 - 1];
                e[ee0] += e[ee2];
                e[ee0 - 1] += e[ee2 - 1];
                e[ee2] = k00 * A0 - k11 * A1;
                e[ee2 - 1] = k11 * A0 + k00 * A1;
                k00 = e[ee0 - 2] - e[ee2 - 2];
                k11 = e[ee0 - 3] - e[ee2 - 3];
                e[ee0 - 2] += e[ee2 - 2];
                e[ee0 - 3] += e[ee2 - 3];
                e[ee2 - 2] = k00 * A2 - k11 * A3;
                e[ee2 - 3] = k11 * A2 + k00 * A3;
                k00 = e[ee0 - 4] - e[ee2 - 4];
                k11 = e[ee0 - 5] - e[ee2 - 5];
                e[ee0 - 4] += e[ee2 - 4];
                e[ee0 - 5] += e[ee2 - 5];
                e[ee2 - 4] = k00 * A4 - k11 * A5;
                e[ee2 - 5] = k11 * A4 + k00 * A5;
                k00 = e[ee0 - 6] - e[ee2 - 6];
                k11 = e[ee0 - 7] - e[ee2 - 7];
                e[ee0 - 6] += e[ee2 - 6];
                e[ee0 - 7] += e[ee2 - 7];
                e[ee2 - 6] = k00 * A6 - k11 * A7;
                e[ee2 - 7] = k11 * A6 + k00 * A7;
                ee0 -= k0;
                ee2 -= k0;
            }
        }
        step3_inner_s_loop_ld654(n, e, i_off, base_n) {
            const a_off = base_n >> 3;
            const A2 = this._a[a_off];
            let z = i_off; // e
            const b = z - 16 * n; // e
            while (z > b) {
                let k00;
                let k11;
                k00 = e[z] - e[z - 8];
                k11 = e[z - 1] - e[z - 9];
                e[z] += e[z - 8];
                e[z - 1] += e[z - 9];
                e[z - 8] = k00;
                e[z - 9] = k11;
                k00 = e[z - 2] - e[z - 10];
                k11 = e[z - 3] - e[z - 11];
                e[z - 2] += e[z - 10];
                e[z - 3] += e[z - 11];
                e[z - 10] = (k00 + k11) * A2;
                e[z - 11] = (k11 - k00) * A2;
                k00 = e[z - 12] - e[z - 4];
                k11 = e[z - 5] - e[z - 13];
                e[z - 4] += e[z - 12];
                e[z - 5] += e[z - 13];
                e[z - 12] = k11;
                e[z - 13] = k00;
                k00 = e[z - 14] - e[z - 6];
                k11 = e[z - 7] - e[z - 15];
                e[z - 6] += e[z - 14];
                e[z - 7] += e[z - 15];
                e[z - 14] = (k00 + k11) * A2;
                e[z - 15] = (k00 - k11) * A2;
                this.iter_54(e, z);
                this.iter_54(e, z - 8);
                z -= 16;
            }
        }
        iter_54(e, z) {
            const k00 = e[z] - e[z - 4];
            const y0 = e[z] + e[z - 4];
            const y2 = e[z - 2] + e[z - 6];
            const k22 = e[z - 2] - e[z - 6];
            e[z] = y0 + y2;
            e[z - 2] = y0 - y2;
            const k33 = e[z - 3] - e[z - 7];
            e[z - 4] = k00 + k33;
            e[z - 6] = k00 - k33;
            const k11 = e[z - 1] - e[z - 5];
            const y1 = e[z - 1] + e[z - 5];
            const y3 = e[z - 3] + e[z - 7];
            e[z - 1] = y1 + y3;
            e[z - 3] = y1 - y3;
            e[z - 5] = k11 - k22;
            e[z - 7] = k11 + k22;
        }
    }
    // biome-ignore lint/correctness/noPrecisionLoss: High precision PI
    // biome-ignore lint/suspicious/noApproximativeNumericConstant: High precision PI
    MdctImpl.M_PI = 3.14159265358979323846264;
    class Mdct {
        constructor() {
            this._setupCache = new Map();
        }
        reverse(samples, sampleCount) {
            let impl;
            if (this._setupCache.has(sampleCount)) {
                impl = this._setupCache.get(sampleCount);
            }
            else {
                impl = new MdctImpl(sampleCount);
                this._setupCache.set(sampleCount, impl);
            }
            impl.calcReverse(samples);
        }
    }
    class VorbisStreamDecoder {
        constructor(stream, setup, packets) {
            this._packetIndex = 0;
            this._stream = stream;
            this._setup = setup;
            this._packets = packets;
            this._currentPosition = 0;
            this._prevPacketBuf = null;
            this._prevPacketStart = 0;
            this._prevPacketEnd = 0;
            this._prevPacketStop = 0;
            this._nextPacketBuf = null;
            this._eosFound = false;
            this._hasPosition = false;
            // save off the number of bits to read to determine packet mode
            this._modeFieldBits = VorbisUtils.ilog(setup.modes.length - 1);
        }
        decode() {
            let allSamples = new Float32Array(this._packets[this._packets.length - 1].granulePosition * this._stream.audioChannels);
            // 200ms
            const buffer = new Float32Array(0.2 * this._stream.audioSampleRate * this._stream.audioChannels);
            let cnt = 0;
            let pos = 0;
            while (true) {
                cnt = this.read(buffer, 0, buffer.length);
                if (cnt === 0) {
                    break;
                }
                // not enough space in buffer -> grow by 1 buffer size
                if (pos + cnt >= allSamples.length) {
                    const newAllSamples = new Float32Array(allSamples.length + buffer.length);
                    newAllSamples.set(allSamples, 0);
                    allSamples = newAllSamples;
                }
                allSamples.set(buffer.subarray(0, cnt), pos);
                pos += cnt;
            }
            // truncate excess
            return allSamples.subarray(0, pos);
        }
        read(buffer, offset, count) {
            // if the caller didn't ask for any data, bail early
            if (count === 0) {
                return 0;
            }
            // save off value to track when we're done with the request
            let idx = offset;
            const tgt = offset + count;
            // try to fill the buffer; drain the last buffer if EOS, resync, bad packet, or parameter change
            while (idx < tgt) {
                // if we don't have any more valid data in the current packet, read in the next packet
                if (this._prevPacketStart === this._prevPacketEnd) {
                    if (this._eosFound) {
                        this._nextPacketBuf = null;
                        this._prevPacketBuf = null;
                        // no more samples, so just return
                        break;
                    }
                    const readResult = this.readNextPacket((idx - offset) / this._stream.audioChannels);
                    if (readResult === null) {
                        // drain the current packet (the windowing will fade it out)
                        this._prevPacketEnd = this._prevPacketStop;
                    }
                    // if we need to pick up a position, and the packet had one, apply the position now
                    if (readResult !== null && readResult.samplePosition !== null && !this._hasPosition) {
                        this._hasPosition = true;
                        this._currentPosition =
                            readResult.samplePosition -
                                (this._prevPacketEnd - this._prevPacketStart) -
                                (idx - offset) / this._stream.audioChannels;
                    }
                }
                // we read out the valid samples from the previous packet
                const copyLen = Math.min((tgt - idx) / this._stream.audioChannels, this._prevPacketEnd - this._prevPacketStart);
                if (copyLen > 0) {
                    idx += this.copyBuffer(buffer, idx, copyLen);
                }
            }
            // update the count of floats written
            count = idx - offset;
            // update the position
            this._currentPosition += count / this._stream.audioChannels;
            // return count of floats written
            return count;
        }
        copyBuffer(target, targetIndex, count) {
            let idx = targetIndex;
            for (; count > 0; this._prevPacketStart++, count--) {
                for (let ch = 0; ch < this._stream.audioChannels; ch++) {
                    target[idx++] = this._prevPacketBuf[ch][this._prevPacketStart];
                }
            }
            return idx - targetIndex;
        }
        readNextPacket(bufferedSamples) {
            // decode the next packet now so we can start overlapping with it
            const res = this.decodeNextPacket();
            this._eosFound = this._eosFound || res.isEndOfStream;
            if (res.curPacket == null) {
                return null;
            }
            // if we get a max sample position, back off our valid length to match
            if (res.samplePosition !== null && res.isEndOfStream) {
                const actualEnd = this._currentPosition + bufferedSamples + res.validLen - res.startIndex;
                const diff = res.samplePosition - actualEnd;
                if (diff < 0) {
                    res.validLen += diff;
                    if (res.validLen < 0) {
                        //  TODO: something is wrong that this happens, this._currentPosition is way too high
                        res.validLen = 0;
                    }
                }
            }
            // start overlapping (if we don't have an previous packet data, just loop and the previous packet logic will handle things appropriately)
            if (this._prevPacketEnd > 0) {
                // overlap the first samples in the packet with the previous packet, then loop
                VorbisStreamDecoder.overlapBuffers(this._prevPacketBuf, res.curPacket, this._prevPacketStart, this._prevPacketStop, res.startIndex, this._stream.audioChannels);
                this._prevPacketStart = res.startIndex;
            }
            else if (this._prevPacketBuf == null) {
                // first packet, so it doesn't have any good data before the valid length
                this._prevPacketStart = res.validLen;
            }
            // keep the old buffer so the GC doesn't have to reallocate every packet
            this._nextPacketBuf = this._prevPacketBuf;
            // save off our current packet's data for the next pass
            this._prevPacketEnd = res.validLen;
            this._prevPacketStop = res.totalLen;
            this._prevPacketBuf = res.curPacket;
            return new VorbisReadNextPacketResult(res.samplePosition);
        }
        static overlapBuffers(previous, next, prevStart, prevLen, nextStart, channels) {
            for (; prevStart < prevLen; prevStart++, nextStart++) {
                for (let c = 0; c < channels; c++) {
                    next[c][nextStart] += previous[c][prevStart];
                }
            }
        }
        decodeNextPacket() {
            const res = new DecodeNextPacketInfo();
            let packet = null;
            if (this._packetIndex >= this._packets.length) {
                // no packet? we're at the end of the stream
                res.isEndOfStream = true;
            }
            else {
                packet = this._packets[this._packetIndex++];
                const reader = new IntBitReader(ByteBuffer.fromBuffer(packet.packetData));
                // if the packet is flagged as the end of the stream, we can safely mark _eosFound
                res.isEndOfStream = packet.isEndOfStream;
                // make sure the packet starts with a 0 bit as per the spec
                if (!reader.readBit()) {
                    // if we get here, we should have a good packet; decode it and add it to the buffer
                    const mode = this._setup.modes[reader.readBits(this._modeFieldBits)];
                    if (this._nextPacketBuf == null) {
                        this._nextPacketBuf = new Array(this._stream.audioChannels);
                        for (let i = 0; i < this._stream.audioChannels; i++) {
                            this._nextPacketBuf[i] = new Float32Array(this._stream.blocksize1);
                        }
                    }
                    const decodeRes = mode.decode(reader, this._nextPacketBuf);
                    res.startIndex = decodeRes.packetStartIndex;
                    res.validLen = decodeRes.packetValidLength;
                    res.totalLen = decodeRes.packetTotalLength;
                    // per the spec, do not decode more samples than the last granulePosition
                    res.samplePosition = packet.granulePosition;
                    res.curPacket = this._nextPacketBuf;
                    return res;
                }
            }
            return res;
        }
    }
    class DecodeNextPacketInfo {
        constructor() {
            this.curPacket = null;
            this.startIndex = 0;
            this.validLen = 0;
            this.totalLen = 0;
            this.isEndOfStream = false;
            this.samplePosition = null;
        }
    }

    /*
     * Vorbis Stream Reader according to https://xiph.org/vorbis/doc/Vorbis_I_spec.html
     */
    var VorbisPacketTypes;
    (function (VorbisPacketTypes) {
        VorbisPacketTypes[VorbisPacketTypes["IdentificationHeader"] = 1] = "IdentificationHeader";
        VorbisPacketTypes[VorbisPacketTypes["Comment"] = 3] = "Comment";
        VorbisPacketTypes[VorbisPacketTypes["SetupHeader"] = 5] = "SetupHeader";
    })(VorbisPacketTypes || (VorbisPacketTypes = {}));
    class VorbisStreamReader {
        constructor(packets) {
            this._packetIndex = -1;
            this._packets = packets;
        }
        read() {
            let packet;
            while (true) {
                packet = this.nextPacket();
                if (packet == null) {
                    return null;
                }
                if (packet.isBeginningOfStream) {
                    const stream = this.readStream(packet);
                    if (stream != null) {
                        return stream;
                    }
                }
            }
        }
        nextPacket() {
            this._packetIndex++;
            return this._packetIndex < this._packets.length ? this._packets[this._packetIndex] : null;
        }
        readStream(startPacket) {
            // Read vorbis stream info
            const stream = new VorbisStream();
            if (!this.readIdentificationHeader(stream, startPacket)) {
                return null;
            }
            if (!this.readComments(this.nextPacket())) {
                return null;
            }
            const vorbisSetup = new VorbisSetupHeader();
            if (!this.readSetupHeader(stream, vorbisSetup, this.nextPacket())) {
                return null;
            }
            // collect data packets for stream
            const streamDataPackets = [];
            let packet;
            while (true) {
                packet = this.nextPacket();
                if (packet == null) {
                    break;
                }
                streamDataPackets.push(packet);
                if (packet.isEndOfStream) {
                    break;
                }
            }
            // decode samples
            const decoder = new VorbisStreamDecoder(stream, vorbisSetup, streamDataPackets);
            stream.samples = decoder.decode();
            return stream;
        }
        /**
         * https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-610004.2
         * @param packetType
         * @param reader
         * @returns
         */
        comonHeaderDecode(packetType, reader) {
            const data = new Uint8Array(7);
            reader.read(data, 0, data.length);
            if (data[0] !== packetType) {
                return false;
            }
            for (let i = 0; i < VorbisStreamReader.VorbisHeaderMarker.length; i++) {
                if (data[1 + i] !== VorbisStreamReader.VorbisHeaderMarker[i]) {
                    return false;
                }
            }
            return true;
        }
        /**
         * https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-610004.2
         * @param packetType
         * @param reader
         * @returns
         */
        comonHeaderDecodeBit(packetType, reader) {
            const data = reader.readBytes(7);
            if (data[0] !== packetType) {
                return false;
            }
            for (let i = 0; i < VorbisStreamReader.VorbisHeaderMarker.length; i++) {
                if (data[1 + i] !== VorbisStreamReader.VorbisHeaderMarker[i]) {
                    return false;
                }
            }
            return true;
        }
        /**
         * https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2
         * @param stream
         * @param packet
         * @returns
         */
        readIdentificationHeader(stream, packet) {
            const reader = ByteBuffer.fromBuffer(packet.packetData);
            if (!this.comonHeaderDecode(VorbisPacketTypes.IdentificationHeader, reader)) {
                return false;
            }
            const version = IOHelper.readUInt32LE(reader);
            // [vorbis_version] is to read ’0’ in order to be compatible with this document.
            if (version !== 0) {
                return false;
            }
            stream.audioChannels = reader.readByte();
            stream.audioSampleRate = IOHelper.readUInt32LE(reader);
            // Both [audio_channels] and [audio_sample_rate] must read greater than zero.
            if (stream.audioChannels <= 0 || stream.audioSampleRate <= 0) {
                return false;
            }
            stream.bitrateMaximum = IOHelper.readInt32LE(reader);
            stream.bitrateNominal = IOHelper.readInt32LE(reader);
            stream.bitrateMinimum = IOHelper.readInt32LE(reader);
            const blockSize = reader.readByte();
            stream.blocksize0 = 1 << (blockSize & 0x0f);
            stream.blocksize1 = 1 << (blockSize >> 4);
            if (
            //  [blocksize_0] must be less than or equal to [blocksize_1].
            stream.blocksize0 > stream.blocksize1 ||
                !VorbisStreamReader.isAllowedBlockSize(stream.blocksize0) ||
                !VorbisStreamReader.isAllowedBlockSize(stream.blocksize0)) {
                return false;
            }
            // The framing bit must be nonzero.
            const framing = reader.readByte();
            if (framing === 0) {
                return false;
            }
            return true;
        }
        static isAllowedBlockSize(blocksize) {
            // Allowed final blocksize values are 64, 128, 256, 512, 1024, 2048, 4096 and 8192 in Vorbis I.
            switch (blocksize) {
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                    return true;
                default:
                    return false;
            }
        }
        /**
         * https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-820005
         * @param packet
         * @returns
         */
        readComments(packet) {
            if (packet == null) {
                return false;
            }
            const reader = ByteBuffer.fromBuffer(packet.packetData);
            if (!this.comonHeaderDecode(VorbisPacketTypes.Comment, reader)) {
                return false;
            }
            const vendorLength = IOHelper.readUInt32LE(reader);
            reader.skip(vendorLength); // vendor (unused)
            const userCommentListLength = IOHelper.readUInt32LE(reader);
            for (let index = 0; index < userCommentListLength; index++) {
                const length = IOHelper.readUInt32LE(reader);
                reader.skip(length); // comment (unused)
            }
            const framing = reader.readByte();
            if (framing === 0) {
                return false;
            }
            return true;
        }
        /**
         * https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-650004.2.4
         * @param setup
         * @param packet
         * @returns
         */
        readSetupHeader(stream, setup, packet) {
            if (packet == null) {
                return false;
            }
            const bitReader = new IntBitReader(ByteBuffer.fromBuffer(packet.packetData));
            const mdct = new Mdct();
            const huffman = new Huffman();
            if (!this.comonHeaderDecodeBit(VorbisPacketTypes.SetupHeader, bitReader)) {
                return false;
            }
            let count = bitReader.readByte() + 1;
            for (let i = 0; i < count; i++) {
                setup.codebooks.push(new VorbisCodebook(bitReader, huffman));
            }
            count = bitReader.readBits(6) + 1;
            for (let i = 0; i < count; i++) {
                setup.timeDomainTransforms.push(new VorbisTimeDomainTransform(bitReader));
            }
            count = bitReader.readBits(6) + 1;
            for (let i = 0; i < count; i++) {
                setup.floors.push(new VorbisFloor(bitReader, stream.blocksize0, stream.blocksize1, setup.codebooks));
            }
            count = bitReader.readBits(6) + 1;
            for (let i = 0; i < count; i++) {
                setup.residues.push(new VorbisResidue(bitReader, stream.audioChannels, setup.codebooks));
            }
            count = bitReader.readBits(6) + 1;
            for (let i = 0; i < count; i++) {
                setup.mappings.push(new VorbisMapping(bitReader, stream.audioChannels, setup.floors, setup.residues, mdct));
            }
            count = bitReader.readBits(6) + 1;
            for (let i = 0; i < count; i++) {
                setup.modes.push(new VorbisMode(bitReader, stream.audioChannels, stream.blocksize0, stream.blocksize1, setup.mappings));
            }
            if (!bitReader.readBit()) {
                return false;
            }
            return true;
        }
    }
    VorbisStreamReader.VorbisHeaderMarker = new Uint8Array([
        'v'.charCodeAt(0),
        'o'.charCodeAt(0),
        'r'.charCodeAt(0),
        'b'.charCodeAt(0),
        'i'.charCodeAt(0),
        's'.charCodeAt(0)
    ]);

    class VorbisFile {
        constructor(readable) {
            this.streams = [];
            const oggContainer = new OggReader(readable);
            const packets = oggContainer.read();
            const decoder = new VorbisStreamReader(packets);
            while (true) {
                const stream = decoder.read();
                if (stream == null) {
                    break;
                }
                this.streams.push(stream);
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Hydra {
        constructor() {
            this.phdrs = [];
            this.pbags = [];
            this.pmods = [];
            this.pgens = [];
            this.insts = [];
            this.ibags = [];
            this.imods = [];
            this.igens = [];
            this.sHdrs = [];
            this.sampleData = new Uint8Array(0);
            this._sampleCache = new Map();
        }
        decodeSamples(startByte, endByte, decompressVorbis) {
            const key = `${startByte}_${endByte}_${decompressVorbis}`;
            if (!this._sampleCache.has(key)) {
                let samples;
                const sampleBytes = this.sampleData.slice(
                // The DWORD dwStart contains the index, in sample data points, from the beginning of the sample data
                // field to the first data point of this sample
                startByte, 
                // The DWORD dwEnd contains the index, in sample data points, from the beginning of the sample data
                // field to the first of the set of 46 zero valued data points following this sample.
                endByte);
                if (decompressVorbis) {
                    const vorbis = new VorbisFile(ByteBuffer.fromBuffer(sampleBytes));
                    samples = vorbis.streams[0].samples;
                }
                else {
                    // 6.1 Sample Data Format in the smpl Sub-chunk
                    // The smpl sub-chunk, if present, contains one or more "samples" of digital audio information in the form
                    // of linearly coded sixteen bit, signed, little endian (least significant byte first) words.
                    const dataView = new DataView(sampleBytes.buffer, sampleBytes.byteOffset, sampleBytes.length);
                    samples = new Float32Array(sampleBytes.length / 2);
                    for (let i = 0; i < samples.length; i++) {
                        samples[i] = dataView.getInt16(i * 2, true) / 32767;
                    }
                }
                this._sampleCache.set(key, samples);
                return samples;
            }
            return this._sampleCache.get(key);
        }
        load(readable) {
            const chunkHead = new RiffChunk();
            const chunkFastList = new RiffChunk();
            if (!RiffChunk.load(null, chunkHead, readable) || chunkHead.id !== 'sfbk') {
                throw new FormatError('Soundfont is not a valid Soundfont2 file');
            }
            while (RiffChunk.load(chunkHead, chunkFastList, readable)) {
                const chunk = new RiffChunk();
                if (chunkFastList.id === 'pdta') {
                    while (RiffChunk.load(chunkFastList, chunk, readable)) {
                        switch (chunk.id) {
                            case 'phdr':
                                for (let i = 0, count = (chunk.size / HydraPhdr.SizeInFile) | 0; i < count; i++) {
                                    this.phdrs.push(new HydraPhdr(readable));
                                }
                                break;
                            case 'pbag':
                                for (let i = 0, count = (chunk.size / HydraPbag.SizeInFile) | 0; i < count; i++) {
                                    this.pbags.push(new HydraPbag(readable));
                                }
                                break;
                            case 'pmod':
                                for (let i = 0, count = (chunk.size / HydraPmod.SizeInFile) | 0; i < count; i++) {
                                    this.pmods.push(new HydraPmod(readable));
                                }
                                break;
                            case 'pgen':
                                for (let i = 0, count = (chunk.size / HydraPgen.SizeInFile) | 0; i < count; i++) {
                                    this.pgens.push(new HydraPgen(readable));
                                }
                                break;
                            case 'inst':
                                for (let i = 0, count = (chunk.size / HydraInst.SizeInFile) | 0; i < count; i++) {
                                    this.insts.push(new HydraInst(readable));
                                }
                                break;
                            case 'ibag':
                                for (let i = 0, count = (chunk.size / HydraIbag.SizeInFile) | 0; i < count; i++) {
                                    this.ibags.push(new HydraIbag(readable));
                                }
                                break;
                            case 'imod':
                                for (let i = 0, count = (chunk.size / HydraImod.SizeInFile) | 0; i < count; i++) {
                                    this.imods.push(new HydraImod(readable));
                                }
                                break;
                            case 'igen':
                                for (let i = 0, count = (chunk.size / HydraIgen.SizeInFile) | 0; i < count; i++) {
                                    this.igens.push(new HydraIgen(readable));
                                }
                                break;
                            case 'shdr':
                                for (let i = 0, count = (chunk.size / HydraShdr.SizeInFile) | 0; i < count; i++) {
                                    this.sHdrs.push(new HydraShdr(readable));
                                }
                                break;
                            default:
                                readable.position += chunk.size;
                                break;
                        }
                    }
                }
                else if (chunkFastList.id === 'sdta') {
                    while (RiffChunk.load(chunkFastList, chunk, readable)) {
                        switch (chunk.id) {
                            case 'smpl':
                                this.sampleData = new Uint8Array(chunk.size);
                                readable.read(this.sampleData, 0, chunk.size);
                                break;
                            default:
                                readable.position += chunk.size;
                                break;
                        }
                    }
                }
                else {
                    readable.position += chunkFastList.size;
                }
            }
        }
    }
    class HydraIbag {
        constructor(reader) {
            this.instGenNdx = IOHelper.readUInt16LE(reader);
            this.instModNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraIbag.SizeInFile = 4;
    class HydraImod {
        constructor(reader) {
            this.modSrcOper = IOHelper.readUInt16LE(reader);
            this.modDestOper = IOHelper.readUInt16LE(reader);
            this.modAmount = IOHelper.readInt16LE(reader);
            this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
            this.modTransOper = IOHelper.readUInt16LE(reader);
        }
    }
    HydraImod.SizeInFile = 10;
    class HydraIgen {
        constructor(reader) {
            this.genOper = IOHelper.readUInt16LE(reader);
            this.genAmount = new HydraGenAmount(reader);
        }
    }
    HydraIgen.SizeInFile = 4;
    class HydraInst {
        constructor(reader) {
            this.instName = IOHelper.read8BitStringLength(reader, 20);
            this.instBagNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraInst.SizeInFile = 22;
    class HydraPbag {
        constructor(reader) {
            this.genNdx = IOHelper.readUInt16LE(reader);
            this.modNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraPbag.SizeInFile = 4;
    class HydraPgen {
        constructor(reader) {
            this.genOper = IOHelper.readUInt16LE(reader);
            this.genAmount = new HydraGenAmount(reader);
        }
    }
    HydraPgen.SizeInFile = 4;
    HydraPgen.GenInstrument = 41;
    HydraPgen.GenKeyRange = 43;
    HydraPgen.GenVelRange = 44;
    HydraPgen.GenSampleId = 53;
    class HydraPhdr {
        constructor(reader) {
            this.presetName = IOHelper.read8BitStringLength(reader, 20);
            this.preset = IOHelper.readUInt16LE(reader);
            this.bank = IOHelper.readUInt16LE(reader);
            this.presetBagNdx = IOHelper.readUInt16LE(reader);
            this.library = IOHelper.readUInt32LE(reader);
            this.genre = IOHelper.readUInt32LE(reader);
            this.morphology = IOHelper.readUInt32LE(reader);
        }
    }
    HydraPhdr.SizeInFile = 38;
    class HydraPmod {
        constructor(reader) {
            this.modSrcOper = IOHelper.readUInt16LE(reader);
            this.modDestOper = IOHelper.readUInt16LE(reader);
            this.modAmount = IOHelper.readUInt16LE(reader);
            this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
            this.modTransOper = IOHelper.readUInt16LE(reader);
        }
    }
    HydraPmod.SizeInFile = 10;
    class HydraShdr {
        constructor(reader) {
            this.sampleName = IOHelper.read8BitStringLength(reader, 20);
            this.start = IOHelper.readUInt32LE(reader);
            this.end = IOHelper.readUInt32LE(reader);
            this.startLoop = IOHelper.readUInt32LE(reader);
            this.endLoop = IOHelper.readUInt32LE(reader);
            this.sampleRate = IOHelper.readUInt32LE(reader);
            this.originalPitch = reader.readByte();
            this.pitchCorrection = IOHelper.readSInt8(reader);
            this.sampleLink = IOHelper.readUInt16LE(reader);
            this.sampleType = IOHelper.readUInt16LE(reader);
        }
    }
    HydraShdr.SizeInFile = 46;
    class HydraGenAmount {
        get shortAmount() {
            return TypeConversions.uint16ToInt16(this.wordAmount);
        }
        get lowByteAmount() {
            return this.wordAmount & 0x00ff;
        }
        get highByteAmount() {
            return ((this.wordAmount & 0xff00) >> 8) & 0xff;
        }
        constructor(reader) {
            this.wordAmount = IOHelper.readUInt16LE(reader);
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Channel {
        constructor() {
            this.presetIndex = 0;
            this.bank = 0;
            this.pitchWheel = 0;
            this.perNotePitchWheel = new Map();
            this.midiPan = 0;
            this.midiVolume = 0;
            this.midiExpression = 0;
            this.midiRpn = 0;
            this.midiData = 0;
            this.panOffset = 0;
            this.gainDb = 0;
            this.pitchRange = 0;
            this.tuning = 0;
            this.mixVolume = 0;
            this.mute = false;
            this.solo = false;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Channels {
        constructor() {
            this.activeChannel = 0;
            this.channelList = [];
        }
        setupVoice(tinySoundFont, voice) {
            const c = this.channelList[this.activeChannel];
            const newpan = voice.region.pan + c.panOffset;
            voice.playingChannel = this.activeChannel;
            voice.mixVolume = c.mixVolume;
            voice.noteGainDb += c.gainDb;
            voice.updatePitchRatio(c, tinySoundFont.outSampleRate);
            if (newpan <= -0.5) {
                voice.panFactorLeft = 1.0;
                voice.panFactorRight = 0.0;
            }
            else if (newpan >= 0.5) {
                voice.panFactorLeft = 0.0;
                voice.panFactorRight = 1.0;
            }
            else {
                voice.panFactorLeft = Math.sqrt(0.5 - newpan);
                voice.panFactorRight = Math.sqrt(0.5 + newpan);
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    var LoopMode;
    (function (LoopMode) {
        LoopMode[LoopMode["None"] = 0] = "None";
        LoopMode[LoopMode["Continuous"] = 1] = "Continuous";
        LoopMode[LoopMode["Sustain"] = 2] = "Sustain";
    })(LoopMode || (LoopMode = {}));

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    /**
     * Supported output modes by the render methods
     */
    var OutputMode;
    (function (OutputMode) {
        /**
         * Two channels with single left/right samples one after another
         */
        OutputMode[OutputMode["StereoInterleaved"] = 0] = "StereoInterleaved";
        /**
         * Two channels with all samples for the left channel first then right
         */
        OutputMode[OutputMode["StereoUnweaved"] = 1] = "StereoUnweaved";
        /**
         * A single channel (stereo instruments are mixed into center)
         */
        OutputMode[OutputMode["Mono"] = 2] = "Mono";
    })(OutputMode || (OutputMode = {}));

    class Preset {
        constructor() {
            this.name = '';
            this.presetNumber = 0;
            this.bank = 0;
            this.regions = null;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class SynthHelper {
        static timecents2Secs(timecents) {
            return Math.pow(2, timecents / 1200.0);
        }
        static decibelsToGain(db) {
            return db > -100 ? Math.pow(10.0, db * 0.05) : 0;
        }
        static gainToDecibels(gain) {
            return gain <= 0.00001 ? -100 : 20.0 * Math.log10(gain);
        }
        static cents2Hertz(cents) {
            return 8.176 * Math.pow(2.0, cents / 1200.0);
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Envelope {
        constructor(other) {
            this.delay = 0;
            this.attack = 0;
            this.hold = 0;
            this.decay = 0;
            this.sustain = 0;
            this.release = 0;
            this.keynumToHold = 0;
            this.keynumToDecay = 0;
            if (other) {
                this.delay = other.delay;
                this.attack = other.attack;
                this.hold = other.hold;
                this.decay = other.decay;
                this.sustain = other.sustain;
                this.release = other.release;
                this.keynumToHold = other.keynumToHold;
                this.keynumToDecay = other.keynumToDecay;
            }
        }
        clear() {
            this.delay = 0;
            this.attack = 0;
            this.hold = 0;
            this.decay = 0;
            this.sustain = 0;
            this.release = 0;
            this.keynumToHold = 0;
            this.keynumToDecay = 0;
        }
        envToSecs(sustainIsGain) {
            // EG times need to be converted from timecents to seconds.
            // Pin very short EG segments.  Timecents don't get to zero, and our EG is
            // happier with zero values.
            this.delay = this.delay < -11950 ? 0.0 : SynthHelper.timecents2Secs(this.delay);
            this.attack = this.attack < -11950 ? 0.0 : SynthHelper.timecents2Secs(this.attack);
            this.release = this.release < -11950 ? 0.0 : SynthHelper.timecents2Secs(this.release);
            // If we have dynamic hold or decay times depending on key number we need
            // to keep the values in timecents so we can calculate it during startNote
            if (this.keynumToHold === 0) {
                this.hold = this.hold < -11950 ? 0.0 : SynthHelper.timecents2Secs(this.hold);
            }
            if (this.keynumToDecay === 0) {
                this.decay = this.decay < -11950 ? 0.0 : SynthHelper.timecents2Secs(this.decay);
            }
            if (this.sustain < 0.0) {
                this.sustain = 0.0;
            }
            else if (sustainIsGain) {
                this.sustain = SynthHelper.decibelsToGain(-this.sustain / 10.0);
            }
            else {
                this.sustain = 1.0 - this.sustain / 1000.0;
            }
        }
    }

    var GenOperators;
    (function (GenOperators) {
        GenOperators[GenOperators["StartAddrsOffset"] = 0] = "StartAddrsOffset";
        GenOperators[GenOperators["EndAddrsOffset"] = 1] = "EndAddrsOffset";
        GenOperators[GenOperators["StartloopAddrsOffset"] = 2] = "StartloopAddrsOffset";
        GenOperators[GenOperators["EndloopAddrsOffset"] = 3] = "EndloopAddrsOffset";
        GenOperators[GenOperators["StartAddrsCoarseOffset"] = 4] = "StartAddrsCoarseOffset";
        GenOperators[GenOperators["ModLfoToPitch"] = 5] = "ModLfoToPitch";
        GenOperators[GenOperators["VibLfoToPitch"] = 6] = "VibLfoToPitch";
        GenOperators[GenOperators["ModEnvToPitch"] = 7] = "ModEnvToPitch";
        GenOperators[GenOperators["InitialFilterFc"] = 8] = "InitialFilterFc";
        GenOperators[GenOperators["InitialFilterQ"] = 9] = "InitialFilterQ";
        GenOperators[GenOperators["ModLfoToFilterFc"] = 10] = "ModLfoToFilterFc";
        GenOperators[GenOperators["ModEnvToFilterFc"] = 11] = "ModEnvToFilterFc";
        GenOperators[GenOperators["EndAddrsCoarseOffset"] = 12] = "EndAddrsCoarseOffset";
        GenOperators[GenOperators["ModLfoToVolume"] = 13] = "ModLfoToVolume";
        GenOperators[GenOperators["Unused1"] = 14] = "Unused1";
        GenOperators[GenOperators["ChorusEffectsSend"] = 15] = "ChorusEffectsSend";
        GenOperators[GenOperators["ReverbEffectsSend"] = 16] = "ReverbEffectsSend";
        GenOperators[GenOperators["Pan"] = 17] = "Pan";
        GenOperators[GenOperators["Unused2"] = 18] = "Unused2";
        GenOperators[GenOperators["Unused3"] = 19] = "Unused3";
        GenOperators[GenOperators["Unused4"] = 20] = "Unused4";
        GenOperators[GenOperators["DelayModLFO"] = 21] = "DelayModLFO";
        GenOperators[GenOperators["FreqModLFO"] = 22] = "FreqModLFO";
        GenOperators[GenOperators["DelayVibLFO"] = 23] = "DelayVibLFO";
        GenOperators[GenOperators["FreqVibLFO"] = 24] = "FreqVibLFO";
        GenOperators[GenOperators["DelayModEnv"] = 25] = "DelayModEnv";
        GenOperators[GenOperators["AttackModEnv"] = 26] = "AttackModEnv";
        GenOperators[GenOperators["HoldModEnv"] = 27] = "HoldModEnv";
        GenOperators[GenOperators["DecayModEnv"] = 28] = "DecayModEnv";
        GenOperators[GenOperators["SustainModEnv"] = 29] = "SustainModEnv";
        GenOperators[GenOperators["ReleaseModEnv"] = 30] = "ReleaseModEnv";
        GenOperators[GenOperators["KeynumToModEnvHold"] = 31] = "KeynumToModEnvHold";
        GenOperators[GenOperators["KeynumToModEnvDecay"] = 32] = "KeynumToModEnvDecay";
        GenOperators[GenOperators["DelayVolEnv"] = 33] = "DelayVolEnv";
        GenOperators[GenOperators["AttackVolEnv"] = 34] = "AttackVolEnv";
        GenOperators[GenOperators["HoldVolEnv"] = 35] = "HoldVolEnv";
        GenOperators[GenOperators["DecayVolEnv"] = 36] = "DecayVolEnv";
        GenOperators[GenOperators["SustainVolEnv"] = 37] = "SustainVolEnv";
        GenOperators[GenOperators["ReleaseVolEnv"] = 38] = "ReleaseVolEnv";
        GenOperators[GenOperators["KeynumToVolEnvHold"] = 39] = "KeynumToVolEnvHold";
        GenOperators[GenOperators["KeynumToVolEnvDecay"] = 40] = "KeynumToVolEnvDecay";
        GenOperators[GenOperators["Instrument"] = 41] = "Instrument";
        GenOperators[GenOperators["Reserved1"] = 42] = "Reserved1";
        GenOperators[GenOperators["KeyRange"] = 43] = "KeyRange";
        GenOperators[GenOperators["VelRange"] = 44] = "VelRange";
        GenOperators[GenOperators["StartloopAddrsCoarseOffset"] = 45] = "StartloopAddrsCoarseOffset";
        GenOperators[GenOperators["Keynum"] = 46] = "Keynum";
        GenOperators[GenOperators["Velocity"] = 47] = "Velocity";
        GenOperators[GenOperators["InitialAttenuation"] = 48] = "InitialAttenuation";
        GenOperators[GenOperators["Reserved2"] = 49] = "Reserved2";
        GenOperators[GenOperators["EndloopAddrsCoarseOffset"] = 50] = "EndloopAddrsCoarseOffset";
        GenOperators[GenOperators["CoarseTune"] = 51] = "CoarseTune";
        GenOperators[GenOperators["FineTune"] = 52] = "FineTune";
        GenOperators[GenOperators["SampleID"] = 53] = "SampleID";
        GenOperators[GenOperators["SampleModes"] = 54] = "SampleModes";
        GenOperators[GenOperators["Reserved3"] = 55] = "Reserved3";
        GenOperators[GenOperators["ScaleTuning"] = 56] = "ScaleTuning";
        GenOperators[GenOperators["ExclusiveClass"] = 57] = "ExclusiveClass";
        GenOperators[GenOperators["OverridingRootKey"] = 58] = "OverridingRootKey";
        GenOperators[GenOperators["Unused5"] = 59] = "Unused5";
        GenOperators[GenOperators["EndOper"] = 60] = "EndOper";
    })(GenOperators || (GenOperators = {}));
    class Region {
        constructor(other) {
            this.loopMode = LoopMode.None;
            this.samples = Region.NoSamples;
            this.sampleRate = 0;
            this.loKey = 0;
            this.hiKey = 0;
            this.loVel = 0;
            this.hiVel = 0;
            this.group = 0;
            this.offset = 0;
            this.end = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.transpose = 0;
            this.tune = 0;
            this.pitchKeyCenter = 0;
            this.pitchKeyTrack = 0;
            this.attenuation = 0;
            this.pan = 0;
            this.ampEnv = new Envelope();
            this.modEnv = new Envelope();
            this.initialFilterQ = 0;
            this.initialFilterFc = 0;
            this.modEnvToPitch = 0;
            this.modEnvToFilterFc = 0;
            this.modLfoToFilterFc = 0;
            this.modLfoToVolume = 0;
            this.delayModLFO = 0;
            this.freqModLFO = 0;
            this.modLfoToPitch = 0;
            this.delayVibLFO = 0;
            this.freqVibLFO = 0;
            this.vibLfoToPitch = 0;
            if (other) {
                this.loopMode = other.loopMode;
                this.samples = other.samples;
                this.sampleRate = other.sampleRate;
                this.loKey = other.loKey;
                this.hiKey = other.hiKey;
                this.loVel = other.loVel;
                this.hiVel = other.hiVel;
                this.group = other.group;
                this.offset = other.offset;
                this.end = other.end;
                this.loopStart = other.loopStart;
                this.loopEnd = other.loopEnd;
                this.transpose = other.transpose;
                this.tune = other.tune;
                this.pitchKeyCenter = other.pitchKeyCenter;
                this.pitchKeyTrack = other.pitchKeyTrack;
                this.attenuation = other.attenuation;
                this.pan = other.pan;
                this.ampEnv = new Envelope(other.ampEnv);
                this.modEnv = new Envelope(other.modEnv);
                this.initialFilterQ = other.initialFilterQ;
                this.initialFilterFc = other.initialFilterFc;
                this.modEnvToPitch = other.modEnvToPitch;
                this.modEnvToFilterFc = other.modEnvToFilterFc;
                this.modLfoToFilterFc = other.modLfoToFilterFc;
                this.modLfoToVolume = other.modLfoToVolume;
                this.delayModLFO = other.delayModLFO;
                this.freqModLFO = other.freqModLFO;
                this.modLfoToPitch = other.modLfoToPitch;
                this.delayVibLFO = other.delayVibLFO;
                this.freqVibLFO = other.freqVibLFO;
                this.vibLfoToPitch = other.vibLfoToPitch;
            }
        }
        clear(forRelative) {
            this.loopMode = LoopMode.None;
            this.samples = Region.NoSamples;
            this.sampleRate = 0;
            this.loKey = 0;
            this.hiKey = 0;
            this.loVel = 0;
            this.hiVel = 0;
            this.group = 0;
            this.offset = 0;
            this.end = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.transpose = 0;
            this.tune = 0;
            this.pitchKeyCenter = 0;
            this.pitchKeyTrack = 0;
            this.attenuation = 0;
            this.pan = 0;
            this.ampEnv.clear();
            this.modEnv.clear();
            this.initialFilterQ = 0;
            this.initialFilterFc = 0;
            this.modEnvToPitch = 0;
            this.modEnvToFilterFc = 0;
            this.modLfoToFilterFc = 0;
            this.modLfoToVolume = 0;
            this.delayModLFO = 0;
            this.freqModLFO = 0;
            this.modLfoToPitch = 0;
            this.delayVibLFO = 0;
            this.freqVibLFO = 0;
            this.vibLfoToPitch = 0;
            this.hiKey = 127;
            this.hiVel = 127;
            this.pitchKeyCenter = 60; // C4
            if (forRelative) {
                return;
            }
            this.pitchKeyTrack = 100;
            this.pitchKeyCenter = -1;
            // SF2 defaults in timecents.
            this.ampEnv.delay = -12e3;
            this.ampEnv.attack = -12e3;
            this.ampEnv.hold = -12e3;
            this.ampEnv.decay = -12e3;
            this.ampEnv.release = -12e3;
            this.modEnv.delay = -12e3;
            this.modEnv.attack = -12e3;
            this.modEnv.hold = -12e3;
            this.modEnv.decay = -12e3;
            this.modEnv.release = -12e3;
            this.initialFilterFc = 13500;
            this.delayModLFO = -12e3;
            this.delayVibLFO = -12e3;
        }
        operator(genOper, amount) {
            switch (genOper) {
                case GenOperators.StartAddrsOffset:
                    this.offset += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.EndAddrsOffset:
                    this.end += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.StartloopAddrsOffset:
                    this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.EndloopAddrsOffset:
                    this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.StartAddrsCoarseOffset:
                    this.offset += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.ModLfoToPitch:
                    this.modLfoToPitch = amount.shortAmount;
                    break;
                case GenOperators.VibLfoToPitch:
                    this.vibLfoToPitch = amount.shortAmount;
                    break;
                case GenOperators.ModEnvToPitch:
                    this.modEnvToPitch = amount.shortAmount;
                    break;
                case GenOperators.InitialFilterFc:
                    this.initialFilterFc = amount.shortAmount;
                    break;
                case GenOperators.InitialFilterQ:
                    this.initialFilterQ = amount.shortAmount;
                    break;
                case GenOperators.ModLfoToFilterFc:
                    this.modLfoToFilterFc = amount.shortAmount;
                    break;
                case GenOperators.ModEnvToFilterFc:
                    this.modEnvToFilterFc = amount.shortAmount;
                    break;
                case GenOperators.EndAddrsCoarseOffset:
                    this.end += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.ModLfoToVolume:
                    this.modLfoToVolume = amount.shortAmount;
                    break;
                case GenOperators.Pan:
                    this.pan = amount.shortAmount / 1000.0;
                    break;
                case GenOperators.DelayModLFO:
                    this.delayModLFO = amount.shortAmount;
                    break;
                case GenOperators.FreqModLFO:
                    this.freqModLFO = amount.shortAmount;
                    break;
                case GenOperators.DelayVibLFO:
                    this.delayVibLFO = amount.shortAmount;
                    break;
                case GenOperators.FreqVibLFO:
                    this.freqVibLFO = amount.shortAmount;
                    break;
                case GenOperators.DelayModEnv:
                    this.modEnv.delay = amount.shortAmount;
                    break;
                case GenOperators.AttackModEnv:
                    this.modEnv.attack = amount.shortAmount;
                    break;
                case GenOperators.HoldModEnv:
                    this.modEnv.hold = amount.shortAmount;
                    break;
                case GenOperators.DecayModEnv:
                    this.modEnv.decay = amount.shortAmount;
                    break;
                case GenOperators.SustainModEnv:
                    this.modEnv.sustain = amount.shortAmount;
                    break;
                case GenOperators.ReleaseModEnv:
                    this.modEnv.release = amount.shortAmount;
                    break;
                case GenOperators.KeynumToModEnvHold:
                    this.modEnv.keynumToHold = amount.shortAmount;
                    break;
                case GenOperators.KeynumToModEnvDecay:
                    this.modEnv.keynumToDecay = amount.shortAmount;
                    break;
                case GenOperators.DelayVolEnv:
                    this.ampEnv.delay = amount.shortAmount;
                    break;
                case GenOperators.AttackVolEnv:
                    this.ampEnv.attack = amount.shortAmount;
                    break;
                case GenOperators.HoldVolEnv:
                    this.ampEnv.hold = amount.shortAmount;
                    break;
                case GenOperators.DecayVolEnv:
                    this.ampEnv.decay = amount.shortAmount;
                    break;
                case GenOperators.SustainVolEnv:
                    this.ampEnv.sustain = amount.shortAmount;
                    break;
                case GenOperators.ReleaseVolEnv:
                    this.ampEnv.release = amount.shortAmount;
                    break;
                case GenOperators.KeynumToVolEnvHold:
                    this.ampEnv.keynumToHold = amount.shortAmount;
                    break;
                case GenOperators.KeynumToVolEnvDecay:
                    this.ampEnv.keynumToDecay = amount.shortAmount;
                    break;
                case GenOperators.KeyRange:
                    this.loKey = amount.lowByteAmount;
                    this.hiKey = amount.highByteAmount;
                    break;
                case GenOperators.VelRange:
                    this.loVel = amount.lowByteAmount;
                    this.hiVel = amount.highByteAmount;
                    break;
                case GenOperators.StartloopAddrsCoarseOffset:
                    this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.InitialAttenuation:
                    this.attenuation += amount.shortAmount * 0.1;
                    break;
                case GenOperators.EndloopAddrsCoarseOffset:
                    this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.CoarseTune:
                    this.transpose += amount.shortAmount;
                    break;
                case GenOperators.FineTune:
                    this.tune += amount.shortAmount;
                    break;
                case GenOperators.SampleModes:
                    this.loopMode =
                        (amount.wordAmount & 3) === 3
                            ? LoopMode.Sustain
                            : (amount.wordAmount & 3) === 1
                                ? LoopMode.Continuous
                                : LoopMode.None;
                    break;
                case GenOperators.ScaleTuning:
                    this.pitchKeyTrack = amount.shortAmount;
                    break;
                case GenOperators.ExclusiveClass:
                    this.group = amount.wordAmount;
                    break;
                case GenOperators.OverridingRootKey:
                    this.pitchKeyCenter = amount.shortAmount;
                    break;
            }
        }
    }
    Region.NoSamples = new Float32Array(0);

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    var VoiceEnvelopeSegment;
    (function (VoiceEnvelopeSegment) {
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["None"] = 0] = "None";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Delay"] = 1] = "Delay";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Attack"] = 2] = "Attack";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Hold"] = 3] = "Hold";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Decay"] = 4] = "Decay";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Sustain"] = 5] = "Sustain";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Release"] = 6] = "Release";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Done"] = 7] = "Done";
    })(VoiceEnvelopeSegment || (VoiceEnvelopeSegment = {}));
    class VoiceEnvelope {
        constructor() {
            this.level = 0;
            this.slope = 0;
            this.samplesUntilNextSegment = 0;
            this.segment = VoiceEnvelopeSegment.None;
            this.midiVelocity = 0;
            this.parameters = null;
            this.segmentIsExponential = false;
            this.isAmpEnv = false;
        }
        nextSegment(activeSegment, outSampleRate) {
            if (!this.parameters) {
                return;
            }
            while (true) {
                switch (activeSegment) {
                    case VoiceEnvelopeSegment.None:
                        this.samplesUntilNextSegment = (this.parameters.delay * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Delay;
                            this.segmentIsExponential = false;
                            this.level = 0.0;
                            this.slope = 0.0;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Delay;
                        break;
                    case VoiceEnvelopeSegment.Delay:
                        this.samplesUntilNextSegment = (this.parameters.attack * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            if (!this.isAmpEnv) {
                                // mod env attack duration scales with velocity (velocity of 1 is full duration, max velocity is 0.125 times duration)
                                this.samplesUntilNextSegment =
                                    (this.parameters.attack * ((145 - this.midiVelocity) / 144.0) * outSampleRate) | 0;
                            }
                            this.segment = VoiceEnvelopeSegment.Attack;
                            this.segmentIsExponential = false;
                            this.level = 0.0;
                            this.slope = 1.0 / this.samplesUntilNextSegment;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Attack;
                        break;
                    case VoiceEnvelopeSegment.Attack:
                        this.samplesUntilNextSegment = (this.parameters.hold * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Hold;
                            this.segmentIsExponential = false;
                            this.level = 1.0;
                            this.slope = 0.0;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Hold;
                        break;
                    case VoiceEnvelopeSegment.Hold:
                        this.samplesUntilNextSegment = (this.parameters.decay * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Decay;
                            this.level = 1.0;
                            if (this.isAmpEnv) {
                                // I don't truly understand this; just following what LinuxSampler does.
                                const mysterySlope = -9.226 / this.samplesUntilNextSegment;
                                this.slope = Math.exp(mysterySlope);
                                this.segmentIsExponential = true;
                                if (this.parameters.sustain > 0.0) {
                                    // Again, this is following LinuxSampler's example, which is similar to
                                    // SF2-style decay, where "decay" specifies the time it would take to
                                    // get to zero, not to the sustain level.  The SFZ spec is not that
                                    // specific about what "decay" means, so perhaps it's really supposed
                                    // to specify the time to reach the sustain level.
                                    this.samplesUntilNextSegment = (Math.log(this.parameters.sustain) / mysterySlope) | 0;
                                }
                            }
                            else {
                                this.slope = -1 / this.samplesUntilNextSegment;
                                this.samplesUntilNextSegment =
                                    (this.parameters.decay * (1.0 - this.parameters.sustain) * outSampleRate) | 0;
                                this.segmentIsExponential = false;
                            }
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Decay;
                        break;
                    case VoiceEnvelopeSegment.Decay:
                        this.segment = VoiceEnvelopeSegment.Sustain;
                        this.level = this.parameters.sustain;
                        this.slope = 0.0;
                        this.samplesUntilNextSegment = 0x7fffffff;
                        this.segmentIsExponential = false;
                        return;
                    case VoiceEnvelopeSegment.Sustain:
                        this.segment = VoiceEnvelopeSegment.Release;
                        this.samplesUntilNextSegment =
                            ((this.parameters.release <= 0 ? VoiceEnvelope.FastReleaseTime : this.parameters.release) *
                                outSampleRate) |
                                0;
                        if (this.isAmpEnv) {
                            // I don't truly understand this; just following what LinuxSampler does.
                            const mysterySlope = -9.226 / this.samplesUntilNextSegment;
                            this.slope = Math.exp(mysterySlope);
                            this.segmentIsExponential = true;
                        }
                        else {
                            this.slope = -this.level / this.samplesUntilNextSegment;
                            this.segmentIsExponential = false;
                        }
                        return;
                    // case VoiceEnvelopeSegment.Release:
                    default:
                        this.segment = VoiceEnvelopeSegment.Done;
                        this.segmentIsExponential = false;
                        this.level = 0.0;
                        this.slope = 0.0;
                        this.samplesUntilNextSegment = 0x7ffffff;
                        return;
                }
            }
        }
        setup(newParameters, midiNoteNumber, midiVelocity, isAmpEnv, outSampleRate) {
            this.parameters = new Envelope(newParameters);
            if (this.parameters.keynumToHold > 0) {
                this.parameters.hold += this.parameters.keynumToHold * (60.0 - midiNoteNumber);
                this.parameters.hold =
                    this.parameters.hold < -1e4 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.hold);
            }
            if (this.parameters.keynumToDecay > 0) {
                this.parameters.decay += this.parameters.keynumToDecay * (60.0 - midiNoteNumber);
                this.parameters.decay =
                    this.parameters.decay < -1e4 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.decay);
            }
            this.midiVelocity = midiVelocity | 0;
            this.isAmpEnv = isAmpEnv;
            this.nextSegment(VoiceEnvelopeSegment.None, outSampleRate);
        }
        process(numSamples, outSampleRate) {
            if (this.slope > 0) {
                if (this.segmentIsExponential) {
                    this.level *= Math.pow(this.slope, numSamples);
                }
                else {
                    this.level += this.slope * numSamples;
                }
            }
            this.samplesUntilNextSegment -= numSamples;
            if (this.samplesUntilNextSegment <= 0) {
                this.nextSegment(this.segment, outSampleRate);
            }
        }
    }
    VoiceEnvelope.FastReleaseTime = 0.01;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class VoiceLfo {
        constructor() {
            this.samplesUntil = 0;
            this.level = 0;
            this.delta = 0;
        }
        setup(delay, freqCents, outSampleRate) {
            this.samplesUntil = (delay * outSampleRate) | 0;
            this.delta = (4.0 * SynthHelper.cents2Hertz(freqCents)) / outSampleRate;
            this.level = 0;
        }
        process(blockSamples) {
            if (this.samplesUntil > blockSamples) {
                this.samplesUntil -= blockSamples;
                return;
            }
            this.level += this.delta * blockSamples;
            if (this.level > 1.0) {
                this.delta = -this.delta;
                this.level = 2.0 - this.level;
            }
            else if (this.level < -1) {
                this.delta = -this.delta;
                this.level = -2 - this.level;
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class VoiceLowPass {
        constructor(other) {
            this.qInv = 0;
            this.a0 = 0;
            this.a1 = 0;
            this.b1 = 0;
            this.b2 = 0;
            this.z1 = 0;
            this.z2 = 0;
            this.active = false;
            if (other) {
                this.qInv = other.qInv;
                this.a0 = other.a0;
                this.a1 = other.a1;
                this.b1 = other.b1;
                this.b2 = other.b2;
                this.z1 = other.z1;
                this.z2 = other.z2;
                this.active = other.active;
            }
        }
        setup(fc) {
            // Lowpass filter from http://www.earlevel.com/main/2012/11/26/biquad-c-source-code/
            const k = Math.tan(Math.PI * fc);
            const KK = k * k;
            const norm = 1 / (1 + k * this.qInv + KK);
            this.a0 = KK * norm;
            this.a1 = 2 * this.a0;
            this.b1 = 2 * (KK - 1) * norm;
            this.b2 = (1 - k * this.qInv + KK) * norm;
        }
        process(input) {
            const output = input * this.a0 + this.z1;
            this.z1 = input * this.a1 + this.z2 - this.b1 * output;
            this.z2 = input * this.a0 - this.b2 * output;
            return output;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Voice {
        constructor() {
            this.playingPreset = 0;
            this.playingKey = 0;
            this.playingChannel = 0;
            this.region = null;
            this.pitchInputTimecents = 0;
            this.pitchOutputFactor = 0;
            this.sourceSamplePosition = 0;
            this.noteGainDb = 0;
            this.panFactorLeft = 0;
            this.panFactorRight = 0;
            this.playIndex = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.ampEnv = new VoiceEnvelope();
            this.modEnv = new VoiceEnvelope();
            this.lowPass = new VoiceLowPass();
            this.modLfo = new VoiceLfo();
            this.vibLfo = new VoiceLfo();
            this.mixVolume = 0;
            this.mute = false;
        }
        updatePitchRatio(c, outSampleRate) {
            let pitchWheel = c.pitchWheel;
            // add additional note pitch
            if (c.perNotePitchWheel.has(this.playingKey)) {
                pitchWheel += c.perNotePitchWheel.get(this.playingKey) - 8192;
            }
            const pitchShift = pitchWheel === 8192 ? c.tuning : (pitchWheel / 16383.0) * c.pitchRange * 2 - c.pitchRange + c.tuning;
            this.calcPitchRatio(pitchShift, outSampleRate);
        }
        calcPitchRatio(pitchShift, outSampleRate) {
            if (!this.region) {
                return;
            }
            const note = this.playingKey + this.region.transpose + this.region.tune / 100.0;
            let adjustedPitch = this.region.pitchKeyCenter + (note - this.region.pitchKeyCenter) * (this.region.pitchKeyTrack / 100.0);
            if (pitchShift !== 0) {
                adjustedPitch += pitchShift;
            }
            this.pitchInputTimecents = adjustedPitch * 100.0;
            this.pitchOutputFactor =
                this.region.sampleRate / (SynthHelper.timecents2Secs(this.region.pitchKeyCenter * 100.0) * outSampleRate);
        }
        end(outSampleRate) {
            if (!this.region) {
                return;
            }
            this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            if (this.region.loopMode === LoopMode.Sustain) {
                // Continue playing, but stop looping.
                this.loopEnd = this.loopStart;
            }
        }
        endQuick(outSampleRate) {
            this.ampEnv.parameters.release = 0.0;
            this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            this.modEnv.parameters.release = 0.0;
            this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
        }
        render(f, outputBuffer, offset, numSamples, isMuted) {
            if (!this.region) {
                return;
            }
            const region = this.region;
            const input = region.samples;
            let outL = 0;
            let outR = f.outputMode === OutputMode.StereoUnweaved ? numSamples : -1;
            // Cache some values, to give them at least some chance of ending up in registers.
            const updateModEnv = region.modEnvToPitch !== 0 || region.modEnvToFilterFc !== 0;
            const updateModLFO = this.modLfo.delta > 0 &&
                (region.modLfoToPitch !== 0 || region.modLfoToFilterFc !== 0 || region.modLfoToVolume !== 0);
            const updateVibLFO = this.vibLfo.delta > 0 && region.vibLfoToPitch !== 0;
            const isLooping = this.loopStart < this.loopEnd;
            const tmpLoopStart = this.loopStart;
            const tmpLoopEnd = this.loopEnd;
            const tmpSampleEndDbl = region.end;
            const tmpLoopEndDbl = tmpLoopEnd + 1.0;
            let tmpSourceSamplePosition = this.sourceSamplePosition;
            const tmpLowpass = new VoiceLowPass(this.lowPass);
            const dynamicLowpass = region.modLfoToFilterFc !== 0 || region.modEnvToFilterFc !== 0;
            let tmpSampleRate = 0;
            let tmpInitialFilterFc = 0;
            let tmpModLfoToFilterFc = 0;
            let tmpModEnvToFilterFc = 0;
            const dynamicPitchRatio = region.modLfoToPitch !== 0 || region.modEnvToPitch !== 0 || region.vibLfoToPitch !== 0;
            let pitchRatio = 0;
            let tmpModLfoToPitch = 0;
            let tmpVibLfoToPitch = 0;
            let tmpModEnvToPitch = 0;
            const dynamicGain = region.modLfoToVolume !== 0;
            let noteGain = 0;
            let tmpModLfoToVolume = 0;
            if (dynamicLowpass) {
                tmpSampleRate = f.outSampleRate;
                tmpInitialFilterFc = region.initialFilterFc;
                tmpModLfoToFilterFc = region.modLfoToFilterFc;
                tmpModEnvToFilterFc = region.modEnvToFilterFc;
            }
            else {
                tmpSampleRate = 0;
                tmpInitialFilterFc = 0;
                tmpModLfoToFilterFc = 0;
                tmpModEnvToFilterFc = 0;
            }
            if (dynamicPitchRatio) {
                pitchRatio = 0;
                tmpModLfoToPitch = region.modLfoToPitch;
                tmpVibLfoToPitch = region.vibLfoToPitch;
                tmpModEnvToPitch = region.modEnvToPitch;
            }
            else {
                pitchRatio = SynthHelper.timecents2Secs(this.pitchInputTimecents) * this.pitchOutputFactor;
                tmpModLfoToPitch = 0;
                tmpVibLfoToPitch = 0;
                tmpModEnvToPitch = 0;
            }
            if (dynamicGain) {
                tmpModLfoToVolume = region.modLfoToVolume * 0.1;
            }
            else {
                noteGain = SynthHelper.decibelsToGain(this.noteGainDb);
                tmpModLfoToVolume = 0;
            }
            while (numSamples > 0) {
                let gainMono;
                let gainLeft;
                let gainRight = 0;
                let blockSamples = numSamples > Voice.RenderEffectSampleBlock ? Voice.RenderEffectSampleBlock : numSamples;
                numSamples -= blockSamples;
                if (dynamicLowpass) {
                    const fres = tmpInitialFilterFc +
                        this.modLfo.level * tmpModLfoToFilterFc +
                        this.modEnv.level * tmpModEnvToFilterFc;
                    tmpLowpass.active = fres <= 13500.0;
                    if (tmpLowpass.active) {
                        tmpLowpass.setup(SynthHelper.cents2Hertz(fres) / tmpSampleRate);
                    }
                }
                if (dynamicPitchRatio) {
                    pitchRatio =
                        SynthHelper.timecents2Secs(this.pitchInputTimecents +
                            (this.modLfo.level * tmpModLfoToPitch +
                                this.vibLfo.level * tmpVibLfoToPitch +
                                this.modEnv.level * tmpModEnvToPitch)) * this.pitchOutputFactor;
                }
                if (dynamicGain) {
                    noteGain = SynthHelper.decibelsToGain(this.noteGainDb + this.modLfo.level * tmpModLfoToVolume);
                }
                gainMono = noteGain * this.ampEnv.level;
                if (isMuted) {
                    gainMono = 0;
                }
                else {
                    gainMono *= this.mixVolume;
                }
                // Update EG.
                this.ampEnv.process(blockSamples, f.outSampleRate);
                if (updateModEnv) {
                    this.modEnv.process(blockSamples, f.outSampleRate);
                }
                // Update LFOs.
                if (updateModLFO) {
                    this.modLfo.process(blockSamples);
                }
                if (updateVibLFO) {
                    this.vibLfo.process(blockSamples);
                }
                switch (f.outputMode) {
                    case OutputMode.StereoInterleaved:
                        gainLeft = gainMono * this.panFactorLeft;
                        gainRight = gainMono * this.panFactorRight;
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            const pos = tmpSourceSamplePosition | 0;
                            const nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            // TODO: check for interpolation mode on voice
                            const alpha = tmpSourceSamplePosition - pos;
                            let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active) {
                                value = tmpLowpass.process(value);
                            }
                            outputBuffer[offset + outL] += value * gainLeft;
                            outL++;
                            outputBuffer[offset + outL] += value * gainRight;
                            outL++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                    case OutputMode.StereoUnweaved:
                        gainLeft = gainMono * this.panFactorLeft;
                        gainRight = gainMono * this.panFactorRight;
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            const pos = tmpSourceSamplePosition | 0;
                            const nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            const alpha = tmpSourceSamplePosition - pos;
                            let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active) {
                                value = tmpLowpass.process(value);
                            }
                            outputBuffer[offset + outL] += value * gainLeft;
                            outL++;
                            outputBuffer[offset + outR] += value * gainRight;
                            outR++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                    case OutputMode.Mono:
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            const pos = tmpSourceSamplePosition | 0;
                            const nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            const alpha = tmpSourceSamplePosition - pos;
                            let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active) {
                                value = tmpLowpass.process(value);
                            }
                            outputBuffer[offset + outL] = value * gainMono;
                            outL++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                }
                if (tmpSourceSamplePosition >= tmpSampleEndDbl || this.ampEnv.segment === VoiceEnvelopeSegment.Done) {
                    this.kill();
                    return;
                }
            }
            this.sourceSamplePosition = tmpSourceSamplePosition;
            if (tmpLowpass.active || dynamicLowpass) {
                this.lowPass = tmpLowpass;
            }
        }
        kill() {
            this.playingPreset = -1;
        }
    }
    /**
     * The lower this block size is the more accurate the effects are.
     * Increasing the value significantly lowers the CPU usage of the voice rendering.
     * If LFO affects the low-pass filter it can be hearable even as low as 8.
     */
    Voice.RenderEffectSampleBlock = SynthConstants.MicroBufferSize;

    class QueueItem {
        constructor(value) {
            this.value = value;
        }
    }
    class Queue {
        get isEmpty() {
            return this._head === undefined;
        }
        clear() {
            this._head = undefined;
            this._tail = undefined;
        }
        enqueue(item) {
            const queueItem = new QueueItem(item);
            if (this._tail) {
                // not empty -> add after tail
                this._tail.next = queueItem;
                this._tail = queueItem;
            }
            else {
                // empty -> new item takes head and tail
                this._head = queueItem;
                this._tail = queueItem;
            }
        }
        peek() {
            const head = this._head;
            if (!head) {
                return undefined;
            }
            return head.value;
        }
        dequeue() {
            const head = this._head;
            if (!head) {
                return undefined;
            }
            const newHead = head.next;
            this._head = newHead;
            // last item removed?
            if (!newHead) {
                this._tail = undefined;
            }
            return head.value;
        }
    }

    /**
     * Lists all midi controllers.
     */
    var ControllerType;
    (function (ControllerType) {
        /**
         * Bank Select. MSB
         */
        ControllerType[ControllerType["BankSelectCoarse"] = 0] = "BankSelectCoarse";
        /**
         * Modulation wheel or lever MSB
         */
        ControllerType[ControllerType["ModulationCoarse"] = 1] = "ModulationCoarse";
        //BreathControllerCoarse = 0x02,
        //FootControllerCoarse = 0x04,
        //PortamentoTimeCoarse = 0x05,
        /**
         * Data entry MSB
         */
        ControllerType[ControllerType["DataEntryCoarse"] = 6] = "DataEntryCoarse";
        /**
         * Channel Volume MSB
         */
        ControllerType[ControllerType["VolumeCoarse"] = 7] = "VolumeCoarse";
        //BalanceCoarse = 0x08,
        /**
         * Pan MSB
         */
        ControllerType[ControllerType["PanCoarse"] = 10] = "PanCoarse";
        /**
         * Expression Controller MSB
         */
        ControllerType[ControllerType["ExpressionControllerCoarse"] = 11] = "ExpressionControllerCoarse";
        //EffectControl1Coarse = 0x0C,
        //EffectControl2Coarse = 0x0D,
        //GeneralPurposeSlider1 = 0x10,
        //GeneralPurposeSlider2 = 0x11,
        //GeneralPurposeSlider3 = 0x12,
        //GeneralPurposeSlider4 = 0x13,
        ControllerType[ControllerType["BankSelectFine"] = 32] = "BankSelectFine";
        /**
         * Modulation wheel or level LSB
         */
        ControllerType[ControllerType["ModulationFine"] = 33] = "ModulationFine";
        //BreathControllerFine = 0x22,
        //FootControllerFine = 0x24,
        //PortamentoTimeFine = 0x25,
        /**
         * Data Entry LSB
         */
        ControllerType[ControllerType["DataEntryFine"] = 38] = "DataEntryFine";
        /**
         * Channel Volume LSB
         */
        ControllerType[ControllerType["VolumeFine"] = 39] = "VolumeFine";
        //BalanceFine = 0x28,
        /**
         * Pan LSB
         */
        ControllerType[ControllerType["PanFine"] = 42] = "PanFine";
        /**
         * Expression controller LSB
         */
        ControllerType[ControllerType["ExpressionControllerFine"] = 43] = "ExpressionControllerFine";
        //EffectControl1Fine = 0x2C,
        //EffectControl2Fine = 0x2D,
        /**
         * Damper pedal (sustain)
         */
        ControllerType[ControllerType["HoldPedal"] = 64] = "HoldPedal";
        //Portamento = 0x41,
        //SostenutoPedal = 0x42,
        //SoftPedal = 0x43,
        /**
         * Legato Footswitch
         */
        ControllerType[ControllerType["LegatoPedal"] = 68] = "LegatoPedal";
        //Hold2Pedal = 0x45,
        //SoundVariation = 0x46,
        //SoundTimbre = 0x47,
        //SoundReleaseTime = 0x48,
        //SoundAttackTime = 0x49,
        //SoundBrightness = 0x4A,
        //SoundControl6 = 0x4B,
        //SoundControl7 = 0x4C,
        //SoundControl8 = 0x4D,
        //SoundControl9 = 0x4E,
        //SoundControl10 = 0x4F,
        //GeneralPurposeButton1 = 0x50,
        //GeneralPurposeButton2 = 0x51,
        //GeneralPurposeButton3 = 0x52,
        //GeneralPurposeButton4 = 0x53,
        //EffectsLevel = 0x5B,
        //TremuloLevel = 0x5C,
        //ChorusLevel = 0x5D,
        //CelesteLevel = 0x5E,
        //PhaseLevel = 0x5F,
        //DataButtonIncrement = 0x60,
        //DataButtonDecrement = 0x61,
        /**
         * Non-Registered Parameter Number LSB
         */
        ControllerType[ControllerType["NonRegisteredParameterFine"] = 98] = "NonRegisteredParameterFine";
        /**
         * Non-Registered Parameter Number MSB
         */
        ControllerType[ControllerType["NonRegisteredParameterCourse"] = 99] = "NonRegisteredParameterCourse";
        /**
         * Registered Parameter Number LSB
         */
        ControllerType[ControllerType["RegisteredParameterFine"] = 100] = "RegisteredParameterFine";
        /**
         * Registered Parameter Number MSB
         */
        ControllerType[ControllerType["RegisteredParameterCourse"] = 101] = "RegisteredParameterCourse";
        ControllerType[ControllerType["AllSoundOff"] = 120] = "AllSoundOff";
        /**
         * Reset all controllers
         */
        ControllerType[ControllerType["ResetControllers"] = 121] = "ResetControllers";
        //LocalKeyboard = 0x7A,
        /**
         * All notes of.
         */
        ControllerType[ControllerType["AllNotesOff"] = 123] = "AllNotesOff";
        //OmniModeOff = 0x7C,
        //OmniModeOn = 0x7D,
        //MonoMode = 0x7E,
        //PolyMode = 0x7F
    })(ControllerType || (ControllerType = {}));

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    /**
     * This is a tiny soundfont based synthesizer.
     * NOT YET IMPLEMENTED
     *   - Support for ChorusEffectsSend and ReverbEffectsSend generators
     *   - Better low-pass filter without lowering performance too much
     *   - Support for modulators
     */
    class TinySoundFont {
        constructor(sampleRate) {
            this._midiEventQueue = new Queue();
            this._mutedChannels = new Map();
            this._soloChannels = new Map();
            this._isAnySolo = false;
            // these are the transposition pitches applied generally on the song (via Settings or general transposition)
            this._transpositionPitches = new Map();
            // these are the transposition pitches only applied on playback (adjusting the pitch only during playback)
            this._liveTranspositionPitches = new Map();
            this.currentTempo = 0;
            this.timeSignatureNumerator = 0;
            this.timeSignatureDenominator = 0;
            this.presets = null;
            this._voices = [];
            this._channels = null;
            this._voicePlayIndex = 0;
            /**
             * Gets the currently configured output mode.
             */
            this.outputMode = OutputMode.StereoInterleaved;
            /**
             * Gets the currently configured sample rate.
             */
            this.outSampleRate = 0;
            /**
             * Gets the currently configured global gain in DB.
             */
            this.globalGainDb = 0;
            this.outSampleRate = sampleRate;
        }
        synthesize(buffer, bufferPos, sampleCount) {
            return this.fillWorkingBuffer(buffer, bufferPos, sampleCount);
        }
        synthesizeSilent(sampleCount) {
            this.fillWorkingBuffer(null, 0, sampleCount);
        }
        channelGetMixVolume(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].mixVolume
                : 1.0;
        }
        channelSetMixVolume(channel, volume) {
            const c = this.channelInit(channel);
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    v.mixVolume = volume;
                }
            }
            c.mixVolume = volume;
        }
        channelSetMute(channel, mute) {
            if (mute) {
                this._mutedChannels.set(channel, true);
            }
            else {
                this._mutedChannels.delete(channel);
            }
        }
        channelSetSolo(channel, solo) {
            if (solo) {
                this._soloChannels.set(channel, true);
            }
            else {
                this._soloChannels.delete(channel);
            }
            this._isAnySolo = this._soloChannels.size > 0;
        }
        resetChannelStates() {
            this._mutedChannels = new Map();
            this._soloChannels = new Map();
            this._liveTranspositionPitches = new Map();
            this.applyTranspositionPitches(new Map());
            this._isAnySolo = false;
        }
        setChannelTranspositionPitch(channel, semitones) {
            let previousTransposition = 0;
            if (this._liveTranspositionPitches.has(channel)) {
                previousTransposition = this._liveTranspositionPitches.get(channel);
            }
            if (semitones === 0) {
                this._liveTranspositionPitches.delete(channel);
            }
            else {
                this._liveTranspositionPitches.set(channel, semitones);
            }
            for (const voice of this._voices) {
                if (voice.playingChannel === channel && voice.playingChannel !== 9 /*percussion*/) {
                    let pitchDifference = 0;
                    pitchDifference -= previousTransposition;
                    pitchDifference += semitones;
                    voice.playingKey += pitchDifference;
                    if (this._channels) {
                        voice.updatePitchRatio(this._channels.channelList[voice.playingChannel], this.outSampleRate);
                    }
                }
            }
        }
        applyTranspositionPitches(transpositionPitches) {
            // dynamically adjust actively playing voices to the new pitch they have.
            // we are not updating the used preset and regions though.
            const previousTransposePitches = this._transpositionPitches;
            for (const voice of this._voices) {
                if (voice.playingChannel >= 0 && voice.playingChannel !== 9 /*percussion*/) {
                    let pitchDifference = 0;
                    if (previousTransposePitches.has(voice.playingChannel)) {
                        pitchDifference -= previousTransposePitches.get(voice.playingChannel);
                    }
                    if (transpositionPitches.has(voice.playingChannel)) {
                        pitchDifference += transpositionPitches.get(voice.playingChannel);
                    }
                    voice.playingKey += pitchDifference;
                    if (this._channels) {
                        voice.updatePitchRatio(this._channels.channelList[voice.playingChannel], this.outSampleRate);
                    }
                }
            }
            this._transpositionPitches = transpositionPitches;
        }
        dispatchEvent(synthEvent) {
            this._midiEventQueue.enqueue(synthEvent);
        }
        fillWorkingBuffer(buffer, bufferPos, sampleCount) {
            // Break the process loop into sections representing the smallest timeframe before the midi controls need to be updated
            // the bigger the timeframe the more efficent the process is, but playback quality will be reduced.
            const anySolo = this._isAnySolo;
            const processedEvents = [];
            // process in micro-buffers
            // process events for first microbuffer
            while (!this._midiEventQueue.isEmpty) {
                const m = this._midiEventQueue.dequeue();
                if (m.isMetronome && this.metronomeVolume > 0) {
                    this.channelNoteOff(SynthConstants.MetronomeChannel, SynthConstants.MetronomeKey);
                    this.channelNoteOn(SynthConstants.MetronomeChannel, SynthConstants.MetronomeKey, 95 / 127);
                }
                else if (m.event) {
                    this.processMidiMessage(m.event);
                }
                processedEvents.push(m);
            }
            // voice processing loop
            for (const voice of this._voices) {
                if (voice.playingPreset !== -1) {
                    const channel = voice.playingChannel;
                    // channel is muted if it is either explicitley muted, or another channel is set to solo but not this one.
                    // exception. metronome is implicitly added in solo
                    const isChannelMuted = this._mutedChannels.has(channel) ||
                        (anySolo && channel !== SynthConstants.MetronomeChannel && !this._soloChannels.has(channel));
                    if (!buffer) {
                        voice.kill();
                    }
                    else {
                        voice.render(this, buffer, bufferPos, sampleCount, isChannelMuted);
                    }
                }
            }
            return processedEvents;
        }
        processMidiMessage(e) {
            //Logger.debug('Midi', `Processing Midi message ${MidiEventType[e.type]}/${e.tick}`);
            const command = e.type;
            switch (command) {
                case MidiEventType.TimeSignature:
                    const timeSignature = e;
                    this.timeSignatureNumerator = timeSignature.numerator;
                    this.timeSignatureDenominator = Math.pow(2, timeSignature.denominatorIndex);
                    break;
                case MidiEventType.NoteOn:
                    const noteOn = e;
                    this.channelNoteOn(noteOn.channel, noteOn.noteKey, noteOn.noteVelocity / 127.0);
                    break;
                case MidiEventType.NoteOff:
                    const noteOff = e;
                    this.channelNoteOff(noteOff.channel, noteOff.noteKey);
                    break;
                case MidiEventType.ControlChange:
                    const controlChange = e;
                    this.channelMidiControl(controlChange.channel, controlChange.controller, controlChange.value);
                    break;
                case MidiEventType.ProgramChange:
                    const programChange = e;
                    this.channelSetPresetNumber(programChange.channel, programChange.program, programChange.channel === 9);
                    break;
                case MidiEventType.TempoChange:
                    const tempoChange = e;
                    this.currentTempo = tempoChange.beatsPerMinute;
                    break;
                case MidiEventType.PitchBend:
                    const pitchBend = e;
                    this.channelSetPitchWheel(pitchBend.channel, pitchBend.value);
                    break;
                case MidiEventType.PerNotePitchBend:
                    const noteBend = e;
                    let perNotePitchWheel = noteBend.value;
                    // midi 2.0 -> midi 1.0
                    perNotePitchWheel = (perNotePitchWheel * SynthConstants.MaxPitchWheel) / SynthConstants.MaxPitchWheel20;
                    this.channelSetPerNotePitchWheel(noteBend.channel, noteBend.noteKey, perNotePitchWheel);
                    break;
            }
        }
        get metronomeVolume() {
            return this.channelGetMixVolume(SynthConstants.MetronomeChannel);
        }
        set metronomeVolume(value) {
            this.setupMetronomeChannel(value);
        }
        setupMetronomeChannel(volume) {
            this.channelSetMixVolume(SynthConstants.MetronomeChannel, volume);
            if (volume > 0) {
                this.channelSetVolume(SynthConstants.MetronomeChannel, 1);
                this.channelSetPresetNumber(SynthConstants.MetronomeChannel, 0, true);
            }
        }
        get masterVolume() {
            return SynthHelper.decibelsToGain(this.globalGainDb);
        }
        set masterVolume(value) {
            const gainDb = SynthHelper.gainToDecibels(value);
            const gainDBChange = gainDb - this.globalGainDb;
            if (gainDBChange === 0) {
                return;
            }
            for (const v of this._voices) {
                if (v.playingPreset !== -1) {
                    v.noteGainDb += gainDBChange;
                }
            }
            this.globalGainDb = gainDb;
        }
        /**
         * Stop all playing notes immediatly and reset all channel parameters but keeps user
         * defined settings
         */
        resetSoft() {
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
            if (this._channels) {
                for (const c of this._channels.channelList) {
                    c.presetIndex = 0;
                    c.bank = 0;
                    c.pitchWheel = 8192;
                    c.midiPan = 8192;
                    c.perNotePitchWheel.clear();
                    c.midiVolume = 16383;
                    c.midiExpression = 16383;
                    c.midiRpn = 0xffff;
                    c.midiData = 0;
                    c.panOffset = 0.0;
                    c.gainDb = 0.0;
                    c.pitchRange = 2.0;
                    c.tuning = 0.0;
                }
            }
        }
        get presetCount() {
            return this.presets?.length ?? 0;
        }
        /**
         * Stop all playing notes immediatly and reset all channel parameters
         */
        reset() {
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
            this._channels = null;
        }
        /**
         * Setup the parameters for the voice render methods
         * @param outputMode if mono or stereo and how stereo channel data is ordered
         * @param sampleRate the number of samples per second (output frequency)
         * @param globalGainDb volume gain in decibels (>0 means higher, <0 means lower)
         */
        setOutput(outputMode, sampleRate, globalGainDb) {
            this.outputMode = outputMode;
            this.outSampleRate = sampleRate >= 1 ? sampleRate : 44100.0;
            this.globalGainDb = globalGainDb;
        }
        /**
         * Start playing a note
         * @param presetIndex preset index >= 0 and < {@link presetCount}
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         */
        noteOn(presetIndex, key, vel) {
            if (!this.presets) {
                return;
            }
            const midiVelocity = (vel * 127) | 0;
            if (presetIndex < 0 || presetIndex >= this.presets.length) {
                return;
            }
            if (vel <= 0.0) {
                this.noteOff(presetIndex, key);
                return;
            }
            // Play all matching regions.
            const voicePlayIndex = this._voicePlayIndex++;
            for (const region of this.presets[presetIndex].regions) {
                if (key < region.loKey ||
                    key > region.hiKey ||
                    midiVelocity < region.loVel ||
                    midiVelocity > region.hiVel) {
                    continue;
                }
                let voice = null;
                if (region.group !== 0) {
                    for (const v of this._voices) {
                        if (v.playingPreset === presetIndex && v.region.group === region.group) {
                            v.endQuick(this.outSampleRate);
                        }
                        else if (v.playingPreset === -1 && !voice) {
                            voice = v;
                        }
                    }
                }
                else {
                    for (const v of this._voices) {
                        if (v.playingPreset === -1) {
                            voice = v;
                        }
                    }
                }
                if (!voice) {
                    for (let i = 0; i < 4; i++) {
                        const newVoice = new Voice();
                        newVoice.playingPreset = -1;
                        this._voices.push(newVoice);
                    }
                    voice = this._voices[this._voices.length - 4];
                }
                voice.region = region;
                voice.playingPreset = presetIndex;
                voice.playingKey = key;
                voice.playIndex = voicePlayIndex;
                voice.noteGainDb = this.globalGainDb - region.attenuation - SynthHelper.gainToDecibels(1.0 / vel);
                if (this._channels) {
                    this._channels.setupVoice(this, voice);
                }
                else {
                    voice.calcPitchRatio(0, this.outSampleRate);
                    // The SFZ spec is silent about the pan curve, but a 3dB pan law seems common. This sqrt() curve matches what Dimension LE does; Alchemy Free seems closer to sin(adjustedPan * pi/2).
                    voice.panFactorLeft = Math.sqrt(0.5 - region.pan);
                    voice.panFactorRight = Math.sqrt(0.5 + region.pan);
                }
                // Offset/end.
                voice.sourceSamplePosition = region.offset;
                // Loop.
                const doLoop = region.loopMode !== LoopMode.None && region.loopStart < region.loopEnd;
                voice.loopStart = doLoop ? region.loopStart : 0;
                voice.loopEnd = doLoop ? region.loopEnd : 0;
                // Setup envelopes.
                voice.ampEnv.setup(region.ampEnv, key, midiVelocity, true, this.outSampleRate);
                voice.modEnv.setup(region.modEnv, key, midiVelocity, false, this.outSampleRate);
                // Setup lowpass filter.
                const filterQDB = region.initialFilterQ / 10.0;
                voice.lowPass.qInv = 1.0 / Math.pow(10.0, filterQDB / 20.0);
                voice.lowPass.z1 = 0;
                voice.lowPass.z2 = 0;
                voice.lowPass.active = region.initialFilterFc <= 13500;
                if (voice.lowPass.active) {
                    voice.lowPass.setup(SynthHelper.cents2Hertz(region.initialFilterFc) / this.outSampleRate);
                }
                // Setup LFO filters.
                voice.modLfo.setup(region.delayModLFO, region.freqModLFO, this.outSampleRate);
                voice.vibLfo.setup(region.delayVibLFO, region.freqVibLFO, this.outSampleRate);
            }
        }
        /**
         * Start playing a note
         * @param bank instrument bank number (alternative to preset_index)
         * @param presetNumber preset number (alternative to preset_index)
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         * @returns returns false if preset does not exist, otherwise true
         */
        bankNoteOn(bank, presetNumber, key, vel) {
            const presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            this.noteOn(presetIndex, key, vel);
            return true;
        }
        /**
         * Stop playing a note
         */
        noteOff(presetIndex, key) {
            let matchFirst = null;
            let matchLast = null;
            const matches = [];
            for (const v of this._voices) {
                if (v.playingPreset !== presetIndex ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                    continue;
                }
                if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                    matchFirst = v;
                    matchLast = v;
                    matches.push(v);
                }
                else if (v.playIndex === matchFirst.playIndex) {
                    matchLast = v;
                    matches.push(v);
                }
            }
            if (!matchFirst) {
                return;
            }
            for (const v of matches) {
                if (v !== matchFirst &&
                    v !== matchLast &&
                    (v.playIndex !== matchFirst.playIndex ||
                        v.playingPreset !== presetIndex ||
                        v.playingKey !== key ||
                        v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                    continue;
                }
                v.end(this.outSampleRate);
            }
        }
        /**
         * Stop playing a note
         * @returns returns false if preset does not exist, otherwise true
         */
        bankNoteOff(bank, presetNumber, key) {
            const presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            this.noteOff(presetIndex, key);
            return true;
        }
        /**
         * Stop playing all notes (end with sustain and release)
         */
        noteOffAll(immediate) {
            for (const voice of this._voices) {
                if (voice.playingPreset !== -1) {
                    if (immediate) {
                        voice.endQuick(this.outSampleRate);
                    }
                    else if (voice.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                        voice.end(this.outSampleRate);
                    }
                }
            }
        }
        get activeVoiceCount() {
            let count = 0;
            for (const v of this._voices) {
                if (v.playingPreset !== -1) {
                    count++;
                }
            }
            return count;
        }
        channelInit(channel) {
            if (this._channels && channel < this._channels.channelList.length) {
                return this._channels.channelList[channel];
            }
            if (!this._channels) {
                this._channels = new Channels();
            }
            for (let i = this._channels.channelList.length; i <= channel; i++) {
                const c = new Channel();
                c.presetIndex = 0;
                c.bank = 0;
                c.pitchWheel = 8192;
                c.midiPan = 8192;
                c.midiVolume = 16383;
                c.midiExpression = 16383;
                c.midiRpn = 0xffff;
                c.midiData = 0;
                c.panOffset = 0.0;
                c.gainDb = 0.0;
                c.pitchRange = 2.0;
                c.tuning = 0.0;
                c.mixVolume = 1;
                this._channels.channelList.push(c);
            }
            return this._channels.channelList[channel];
        }
        /**
         * Returns the preset index from a bank and preset number, or -1 if it does not exist in the loaded SoundFont
         */
        getPresetIndex(bank, presetNumber) {
            if (!this.presets) {
                return -1;
            }
            // search reverse (last import wins)
            for (let i = this.presets.length - 1; i >= 0; i--) {
                const preset = this.presets[i];
                if (preset.presetNumber === presetNumber && preset.bank === bank) {
                    return i;
                }
            }
            return -1;
        }
        /**
         * Returns the name of a preset index >= 0 and < GetPresetName()
         * @param presetIndex
         */
        getPresetName(presetIndex) {
            if (!this.presets) {
                return null;
            }
            return presetIndex < 0 || presetIndex >= this.presets.length ? null : this.presets[presetIndex].name;
        }
        /**
         * Returns the name of a preset by bank and preset number
         */
        bankGetPresetName(bank, presetNumber) {
            return this.getPresetName(this.getPresetIndex(bank, presetNumber));
        }
        /**
         * Start playing a note on a channel
         * @param channel channel number
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         */
        channelNoteOn(channel, key, vel) {
            if (!this._channels || channel > this._channels.channelList.length) {
                return;
            }
            if (this._transpositionPitches.has(channel)) {
                key += this._transpositionPitches.get(channel);
            }
            if (this._liveTranspositionPitches.has(channel)) {
                key += this._liveTranspositionPitches.get(channel);
            }
            this._channels.activeChannel = channel;
            this.noteOn(this._channels.channelList[channel].presetIndex, key, vel);
        }
        /**
         * Stop playing notes on a channel
         * @param channel channel number
         * @param key note value between 0 and 127 (60 being middle C)
         */
        channelNoteOff(channel, key) {
            if (this._transpositionPitches.has(channel)) {
                key += this._transpositionPitches.get(channel);
            }
            if (this._liveTranspositionPitches.has(channel)) {
                key += this._liveTranspositionPitches.get(channel);
            }
            const matches = [];
            let matchFirst = null;
            let matchLast = null;
            for (const v of this._voices) {
                // Find the first and last entry in the voices list with matching channel, key and look up the smallest play index
                if (v.playingPreset === -1 ||
                    v.playingChannel !== channel ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                    continue;
                }
                if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                    matchFirst = v;
                    matchLast = v;
                    matches.push(v);
                }
                else if (v.playIndex === matchFirst.playIndex) {
                    matchLast = v;
                    matches.push(v);
                }
            }
            const c = this.channelInit(channel);
            c.perNotePitchWheel.delete(key);
            if (!matchFirst) {
                return;
            }
            for (const v of matches) {
                // Stop all voices with matching channel, key and the smallest play index which was enumerated above
                if (v !== matchFirst &&
                    v !== matchLast &&
                    (v.playIndex !== matchFirst.playIndex ||
                        v.playingPreset === -1 ||
                        v.playingChannel !== channel ||
                        v.playingKey !== key ||
                        v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                    continue;
                }
                v.end(this.outSampleRate);
            }
        }
        /**
         * Stop playing all notes on a channel with sustain and release.
         * @param channel channel number
         */
        channelNoteOffAll(channel) {
            const c = this.channelInit(channel);
            c.perNotePitchWheel.clear();
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    v.playingChannel === channel &&
                    v.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                    v.end(this.outSampleRate);
                }
            }
        }
        /**
         * Stop playing all notes on a channel immediately
         * @param channel channel number
         */
        channelSoundsOffAll(channel) {
            const c = this.channelInit(channel);
            c.perNotePitchWheel.clear();
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    v.playingChannel === channel &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release === 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
        }
        /**
         *
         * @param channel channel number
         * @param presetIndex preset index <= 0 and > {@link presetCount}
         */
        channelSetPresetIndex(channel, presetIndex) {
            this.channelInit(channel).presetIndex = TypeConversions.int32ToUint16(presetIndex);
        }
        /**
         * @param channel channel number
         * @param presetNumber preset number (alternative to preset_index)
         * @param midiDrums false for normal channels, otherwise apply MIDI drum channel rules
         * @returns return false if preset does not exist, otherwise true
         */
        channelSetPresetNumber(channel, presetNumber, midiDrums = false) {
            const c = this.channelInit(channel);
            let presetIndex = 0;
            if (midiDrums) {
                presetIndex = this.getPresetIndex(128 | (c.bank & 0x7fff), presetNumber);
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(128, presetNumber);
                }
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(128, 0);
                }
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
                }
            }
            else {
                presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
            }
            c.presetIndex = presetIndex;
            return presetIndex !== -1;
        }
        /**
         * @param channel channel number
         * @param bank instrument bank number (alternative to preset_index)
         */
        channelSetBank(channel, bank) {
            this.channelInit(channel).bank = TypeConversions.int32ToUint16(bank);
        }
        /**
         * @param channel channel number
         * @param bank instrument bank number (alternative to preset_index)
         * @param presetNumber preset number (alternative to preset_index)
         * @returns return false if preset does not exist, otherwise true
         */
        channelSetBankPreset(channel, bank, presetNumber) {
            const c = this.channelInit(channel);
            const presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            c.presetIndex = TypeConversions.int32ToUint16(presetIndex);
            c.bank = TypeConversions.int32ToUint16(bank);
            return true;
        }
        /**
         * @param channel channel number
         * @param pan stereo panning value from 0.0 (left) to 1.0 (right) (default 0.5 center)
         */
        channelSetPan(channel, pan) {
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    const newPan = v.region.pan + pan - 0.5;
                    if (newPan <= -0.5) {
                        v.panFactorLeft = 1;
                        v.panFactorRight = 0;
                    }
                    else if (newPan >= 0.5) {
                        v.panFactorLeft = 0;
                        v.panFactorRight = 1;
                    }
                    else {
                        v.panFactorLeft = Math.sqrt(0.5 - newPan);
                        v.panFactorRight = Math.sqrt(0.5 + newPan);
                    }
                }
            }
            this.channelInit(channel).panOffset = pan - 0.5;
        }
        /**
         * @param channel channel number
         * @param volume linear volume scale factor (default 1.0 full)
         */
        channelSetVolume(channel, volume) {
            const c = this.channelInit(channel);
            const gainDb = SynthHelper.gainToDecibels(volume);
            const gainDBChange = gainDb - c.gainDb;
            if (gainDBChange === 0) {
                return;
            }
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    v.noteGainDb += gainDBChange;
                }
            }
            c.gainDb = gainDb;
        }
        /**
         * @param channel channel number
         * @param pitchWheel pitch wheel position 0 to 16383 (default 8192 unpitched)
         */
        channelSetPitchWheel(channel, pitchWheel) {
            const c = this.channelInit(channel);
            if (c.pitchWheel === pitchWheel) {
                return;
            }
            c.pitchWheel = TypeConversions.int32ToUint16(pitchWheel);
            this.channelApplyPitch(channel, c);
        }
        /**
         * @param channel channel number
         * @param key note value between 0 and 127
         * @param pitchWheel pitch wheel position 0 to 16383 (default 8192 unpitched)
         */
        channelSetPerNotePitchWheel(channel, key, pitchWheel) {
            if (this._transpositionPitches.has(channel)) {
                key += this._transpositionPitches.get(channel);
            }
            if (this._liveTranspositionPitches.has(channel)) {
                key += this._liveTranspositionPitches.get(channel);
            }
            const c = this.channelInit(channel);
            if (c.perNotePitchWheel.has(key) && c.perNotePitchWheel.get(key) === pitchWheel) {
                return;
            }
            c.perNotePitchWheel.set(key, pitchWheel);
            this.channelApplyPitch(channel, c, key);
        }
        channelApplyPitch(channel, c, key = -1) {
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1 && (key === -1 || v.playingKey === key)) {
                    v.updatePitchRatio(c, this.outSampleRate);
                }
            }
        }
        /**
         * @param channel channel number
         * @param pitchRange range of the pitch wheel in semitones (default 2.0, total +/- 2 semitones)
         */
        channelSetPitchRange(channel, pitchRange) {
            const c = this.channelInit(channel);
            if (c.pitchRange === pitchRange) {
                return;
            }
            c.pitchRange = pitchRange;
            if (c.pitchWheel !== 8192) {
                this.channelApplyPitch(channel, c);
            }
        }
        /**
         * @param channel channel number
         * @param tuning tuning of all playing voices in semitones (default 0.0, standard (A440) tuning)
         */
        channelSetTuning(channel, tuning) {
            const c = this.channelInit(channel);
            if (c.tuning === tuning) {
                return;
            }
            c.tuning = tuning;
            this.channelApplyPitch(channel, c);
        }
        /**
         * Apply a MIDI control change to the channel (not all controllers are supported!)
         */
        channelMidiControl(channel, controller, controlValue) {
            const c = this.channelInit(channel);
            switch (controller) {
                case ControllerType.DataEntryFine:
                    c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x3f80) | controlValue);
                    if (c.midiRpn === 0) {
                        this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                    }
                    else if (c.midiRpn === 1) {
                        this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                    }
                    else if (c.midiRpn === 2) {
                        this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                    }
                    return;
                case ControllerType.VolumeCoarse:
                    c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x7f) | (controlValue << 7));
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case ControllerType.VolumeFine:
                    c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x3f80) | controlValue);
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case ControllerType.ExpressionControllerCoarse:
                    c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x7f) | (controlValue << 7));
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case ControllerType.ExpressionControllerFine:
                    c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x3f80) | controlValue);
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case ControllerType.PanCoarse:
                    c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x7f) | (controlValue << 7));
                    this.channelSetPan(channel, c.midiPan / 16383.0);
                    return;
                case ControllerType.PanFine:
                    c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x3f80) | controlValue);
                    this.channelSetPan(channel, c.midiPan / 16383.0);
                    return;
                case ControllerType.DataEntryCoarse:
                    c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x7f) | (controlValue << 7));
                    if (c.midiRpn === 0) {
                        this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                    }
                    else if (c.midiRpn === 1) {
                        this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                    }
                    else if (c.midiRpn === 2 && controller === ControllerType.DataEntryCoarse) {
                        this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                    }
                    return;
                case ControllerType.BankSelectCoarse:
                    c.bank = TypeConversions.int32ToUint16(0x8000 | controlValue);
                    return;
                // bank select MSB alone acts like LSB
                case ControllerType.BankSelectFine:
                    c.bank = TypeConversions.int32ToUint16(((c.bank & 0x8000) !== 0 ? (c.bank & 0x7f) << 7 : 0) | controlValue);
                    return;
                case ControllerType.RegisteredParameterCourse:
                    c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x7f) | (controlValue << 7));
                    // TODO
                    return;
                case ControllerType.RegisteredParameterFine:
                    c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x3f80) | controlValue);
                    // TODO
                    return;
                case ControllerType.NonRegisteredParameterFine:
                    c.midiRpn = 0xffff;
                    // TODO
                    return;
                case ControllerType.NonRegisteredParameterCourse:
                    c.midiRpn = 0xffff;
                    // TODO
                    return;
                case ControllerType.AllSoundOff:
                    this.channelSoundsOffAll(channel);
                    return;
                case ControllerType.AllNotesOff:
                    this.channelNoteOffAll(channel);
                    return;
                case ControllerType.ResetControllers:
                    c.midiVolume = 16383;
                    c.midiExpression = 16383;
                    c.midiPan = 8192;
                    c.bank = 0;
                    this.channelSetVolume(channel, 1);
                    this.channelSetPan(channel, 0.5);
                    this.channelSetPitchRange(channel, 2);
                    // TODO
                    return;
            }
        }
        /**
         * Gets the current preset index of the given channel.
         * @param channel The channel index
         * @returns The current preset index of the given channel.
         */
        channelGetPresetIndex(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].presetIndex
                : 0;
        }
        /**
         * Gets the current bank of the given channel.
         * @param channel The channel index
         * @returns The current bank of the given channel.
         */
        channelGetPresetBank(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].bank & 0x7fff
                : 0;
        }
        /**
         * Gets the current pan of the given channel.
         * @param channel The channel index
         * @returns The current pan of the given channel.
         */
        channelGetPan(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].panOffset - 0.5
                : 0.5;
        }
        /**
         * Gets the current volume of the given channel.
         * @param channel The channel index
         * @returns The current volune of the given channel.
         */
        channelGetVolume(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? SynthHelper.decibelsToGain(this._channels.channelList[channel].gainDb)
                : 1.0;
        }
        /**
         * Gets the current pitch wheel of the given channel.
         * @param channel The channel index
         * @returns The current pitch wheel of the given channel.
         */
        channelGetPitchWheel(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].pitchWheel
                : 8192;
        }
        /**
         * Gets the current pitch range of the given channel.
         * @param channel The channel index
         * @returns The current pitch range of the given channel.
         */
        channelGetPitchRange(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].pitchRange
                : 2.0;
        }
        /**
         * Gets the current tuning of the given channel.
         * @param channel The channel index
         * @returns The current tuning of the given channel.
         */
        channelGetTuning(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].tuning
                : 0.0;
        }
        resetPresets() {
            this.presets = [];
        }
        loadPresets(hydra, instrumentPrograms, percussionKeys, append) {
            const newPresets = [];
            for (let phdrIndex = 0; phdrIndex < hydra.phdrs.length - 1; phdrIndex++) {
                const phdr = hydra.phdrs[phdrIndex];
                let regionIndex = 0;
                const preset = new Preset();
                newPresets.push(preset);
                preset.name = phdr.presetName;
                preset.bank = phdr.bank;
                preset.presetNumber = phdr.preset;
                let regionNum = 0;
                for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                    const pbag = hydra.pbags[pbagIndex];
                    let plokey = 0;
                    let phikey = 127;
                    let plovel = 0;
                    let phivel = 127;
                    for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                        const pgen = hydra.pgens[pgenIndex];
                        if (pgen.genOper === HydraPgen.GenKeyRange) {
                            plokey = pgen.genAmount.lowByteAmount;
                            phikey = pgen.genAmount.highByteAmount;
                            continue;
                        }
                        if (pgen.genOper === HydraPgen.GenVelRange) {
                            plovel = pgen.genAmount.lowByteAmount;
                            phivel = pgen.genAmount.highByteAmount;
                            continue;
                        }
                        if (pgen.genOper !== HydraPgen.GenInstrument) {
                            continue;
                        }
                        if (pgen.genAmount.wordAmount >= hydra.insts.length) {
                            continue;
                        }
                        const pinst = hydra.insts[pgen.genAmount.wordAmount];
                        for (let ibagIndex = pinst.instBagNdx; ibagIndex < hydra.insts[pgen.genAmount.wordAmount + 1].instBagNdx; ibagIndex++) {
                            const ibag = hydra.ibags[ibagIndex];
                            let ilokey = 0;
                            let ihikey = 127;
                            let ilovel = 0;
                            let ihivel = 127;
                            for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                                const igen = hydra.igens[igenIndex];
                                if (igen.genOper === HydraPgen.GenKeyRange) {
                                    ilokey = igen.genAmount.lowByteAmount;
                                    ihikey = igen.genAmount.highByteAmount;
                                    continue;
                                }
                                if (igen.genOper === HydraPgen.GenVelRange) {
                                    ilovel = igen.genAmount.lowByteAmount;
                                    ihivel = igen.genAmount.highByteAmount;
                                    continue;
                                }
                                if (igen.genOper === 53 &&
                                    ihikey >= plokey &&
                                    ilokey <= phikey &&
                                    ihivel >= plovel &&
                                    ilovel <= phivel) {
                                    regionNum++;
                                }
                            }
                        }
                    }
                }
                preset.regions = new Array(regionNum);
                let globalRegion = new Region();
                globalRegion.clear(true);
                // Zones.
                for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                    const pbag = hydra.pbags[pbagIndex];
                    const presetRegion = new Region(globalRegion);
                    let hadGenInstrument = false;
                    // Generators.
                    for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                        const pgen = hydra.pgens[pgenIndex];
                        // Instrument.
                        if (pgen.genOper === HydraPgen.GenInstrument) {
                            const whichInst = pgen.genAmount.wordAmount;
                            if (whichInst >= hydra.insts.length) {
                                continue;
                            }
                            let instRegion = new Region();
                            instRegion.clear(false);
                            // Generators
                            const inst = hydra.insts[whichInst];
                            for (let ibagIndex = inst.instBagNdx; ibagIndex < hydra.insts[whichInst + 1].instBagNdx; ibagIndex++) {
                                const ibag = hydra.ibags[ibagIndex];
                                const zoneRegion = new Region(instRegion);
                                let hadSampleId = false;
                                for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                                    const igen = hydra.igens[igenIndex];
                                    if (igen.genOper === HydraPgen.GenSampleId) {
                                        // preset region key and vel ranges are a filter for the zone regions
                                        if (zoneRegion.hiKey < presetRegion.loKey ||
                                            zoneRegion.loKey > presetRegion.hiKey) {
                                            continue;
                                        }
                                        if (zoneRegion.hiVel < presetRegion.loVel ||
                                            zoneRegion.loVel > presetRegion.hiVel) {
                                            continue;
                                        }
                                        if (presetRegion.loKey > zoneRegion.loKey) {
                                            zoneRegion.loKey = presetRegion.loKey;
                                        }
                                        if (presetRegion.hiKey < zoneRegion.hiKey) {
                                            zoneRegion.hiKey = presetRegion.hiKey;
                                        }
                                        if (presetRegion.loVel > zoneRegion.loVel) {
                                            zoneRegion.loVel = presetRegion.loVel;
                                        }
                                        if (presetRegion.hiVel < zoneRegion.hiVel) {
                                            zoneRegion.hiVel = presetRegion.hiVel;
                                        }
                                        // sum regions
                                        zoneRegion.offset += presetRegion.offset;
                                        zoneRegion.end += presetRegion.end;
                                        zoneRegion.loopStart += presetRegion.loopStart;
                                        zoneRegion.loopEnd += presetRegion.loopEnd;
                                        zoneRegion.transpose += presetRegion.transpose;
                                        zoneRegion.tune += presetRegion.tune;
                                        zoneRegion.pitchKeyTrack += presetRegion.pitchKeyTrack;
                                        zoneRegion.attenuation += presetRegion.attenuation;
                                        zoneRegion.pan += presetRegion.pan;
                                        zoneRegion.ampEnv.delay += presetRegion.ampEnv.delay;
                                        zoneRegion.ampEnv.attack += presetRegion.ampEnv.attack;
                                        zoneRegion.ampEnv.hold += presetRegion.ampEnv.hold;
                                        zoneRegion.ampEnv.decay += presetRegion.ampEnv.decay;
                                        zoneRegion.ampEnv.sustain += presetRegion.ampEnv.sustain;
                                        zoneRegion.ampEnv.release += presetRegion.ampEnv.release;
                                        zoneRegion.modEnv.delay += presetRegion.modEnv.delay;
                                        zoneRegion.modEnv.attack += presetRegion.modEnv.attack;
                                        zoneRegion.modEnv.hold += presetRegion.modEnv.hold;
                                        zoneRegion.modEnv.decay += presetRegion.modEnv.decay;
                                        zoneRegion.modEnv.sustain += presetRegion.modEnv.sustain;
                                        zoneRegion.modEnv.release += presetRegion.modEnv.release;
                                        zoneRegion.initialFilterQ += presetRegion.initialFilterQ;
                                        zoneRegion.initialFilterFc += presetRegion.initialFilterFc;
                                        zoneRegion.modEnvToPitch += presetRegion.modEnvToPitch;
                                        zoneRegion.modEnvToFilterFc += presetRegion.modEnvToFilterFc;
                                        zoneRegion.delayModLFO += presetRegion.delayModLFO;
                                        zoneRegion.freqModLFO += presetRegion.freqModLFO;
                                        zoneRegion.modLfoToPitch += presetRegion.modLfoToPitch;
                                        zoneRegion.modLfoToFilterFc += presetRegion.modLfoToFilterFc;
                                        zoneRegion.modLfoToVolume += presetRegion.modLfoToVolume;
                                        zoneRegion.delayVibLFO += presetRegion.delayVibLFO;
                                        zoneRegion.freqVibLFO += presetRegion.freqVibLFO;
                                        zoneRegion.vibLfoToPitch += presetRegion.vibLfoToPitch;
                                        // EG times need to be converted from timecents to seconds.
                                        zoneRegion.ampEnv.envToSecs(true);
                                        zoneRegion.modEnv.envToSecs(false);
                                        // LFO times need to be converted from timecents to seconds.
                                        zoneRegion.delayModLFO =
                                            zoneRegion.delayModLFO < -11950
                                                ? 0.0
                                                : SynthHelper.timecents2Secs(zoneRegion.delayModLFO);
                                        zoneRegion.delayVibLFO =
                                            zoneRegion.delayVibLFO < -11950
                                                ? 0.0
                                                : SynthHelper.timecents2Secs(zoneRegion.delayVibLFO);
                                        // Pin values to their ranges.
                                        if (zoneRegion.pan < -0.5) {
                                            zoneRegion.pan = -0.5;
                                        }
                                        else if (zoneRegion.pan > 0.5) {
                                            zoneRegion.pan = 0.5;
                                        }
                                        if (zoneRegion.initialFilterQ < 1500 || zoneRegion.initialFilterQ > 13500) {
                                            zoneRegion.initialFilterQ = 0;
                                        }
                                        const shdr = hydra.sHdrs[igen.genAmount.wordAmount];
                                        zoneRegion.offset += shdr.start;
                                        zoneRegion.end += shdr.end;
                                        zoneRegion.loopStart += shdr.startLoop;
                                        zoneRegion.loopEnd += shdr.endLoop;
                                        if (shdr.endLoop > 0) {
                                            zoneRegion.loopEnd -= 1;
                                        }
                                        if (zoneRegion.pitchKeyCenter === -1) {
                                            zoneRegion.pitchKeyCenter = shdr.originalPitch;
                                        }
                                        zoneRegion.tune += shdr.pitchCorrection;
                                        zoneRegion.sampleRate = shdr.sampleRate;
                                        const isPercussion = phdr.bank === SynthConstants.PercussionBank;
                                        const shouldLoadSamples = (isPercussion &&
                                            TinySoundFont.setContainsRange(percussionKeys, zoneRegion.loKey, zoneRegion.hiKey)) ||
                                            (!isPercussion && instrumentPrograms.has(phdr.preset));
                                        if (!shouldLoadSamples) {
                                            Logger.debug('AlphaSynth', `Skipping load of unused sample ${shdr.sampleName} for preset ${phdr.presetName} (bank ${preset.bank} program ${preset.presetNumber})`);
                                            zoneRegion.samples = new Float32Array(0);
                                        }
                                        else if ((shdr.sampleType & 0x01) !== 0) {
                                            Logger.debug('AlphaSynth', `Loading of used sample ${shdr.sampleName} for preset ${phdr.presetName} (bank ${preset.bank} program ${preset.presetNumber})`);
                                            // Mono Sample
                                            const decompressVorbis = (shdr.sampleType & 0x10) !== 0;
                                            if (decompressVorbis) {
                                                // for SF3 the shdr contains the byte offsets within the overall buffer holding the OGG container
                                                zoneRegion.samples = hydra.decodeSamples(shdr.start, shdr.end, true);
                                            }
                                            else {
                                                zoneRegion.samples = hydra.decodeSamples(
                                                // The DWORD dwStart contains the index, in sample data points, from the beginning of the sample data
                                                // field to the first data point of this sample
                                                zoneRegion.offset * 2, 
                                                // The DWORD dwEnd contains the index, in sample data points, from the beginning of the sample data
                                                // field to the first of the set of 46 zero valued data points following this sample.
                                                zoneRegion.end * 2, false);
                                                // The DWORD dwStartloop contains the index, in sample data points, from the beginning of the sample data field to the first
                                                // data point in the loop of this sample
                                                // The DWORD dwEndloop contains the index, in sample data points, from the beginning of the sample data field to the first
                                                // data point following the loop of this sample. Note that this is the data point “equivalent to” the first loop data point, and that
                                                // to produce portable artifact free loops, the eight proximal data points surrounding both the Startloop and Endloop points
                                                // should be identical.
                                                // reset offsets relative to sub-buffer
                                                if (zoneRegion.loopStart > 0) {
                                                    zoneRegion.loopStart -= zoneRegion.offset;
                                                }
                                                if (zoneRegion.loopEnd > 0) {
                                                    zoneRegion.loopEnd -= zoneRegion.offset;
                                                }
                                            }
                                            // play whole sample
                                            zoneRegion.offset = 0;
                                            zoneRegion.end = zoneRegion.samples.length - 1;
                                        }
                                        else {
                                            // unsupported
                                            //  0x02: // Right Sample
                                            //  0x04: // Left Sample
                                            //  0x08: // Linked Sample
                                            //  0x8001: // RomMonoSample
                                            //  0x8002: // RomRightSample
                                            //  0x8004: // RomLeftSample
                                            //  0x8008: // RomLinkedSample
                                            Logger.warning('AlphaSynth', `Skipping load of unsupported sample ${shdr.sampleName} for preset ${phdr.presetName}, sample type ${shdr.sampleType} is not supported (bank ${preset.bank} program ${preset.presetNumber})`);
                                            zoneRegion.samples = new Float32Array(0);
                                        }
                                        preset.regions[regionIndex] = new Region(zoneRegion);
                                        regionIndex++;
                                        hadSampleId = true;
                                    }
                                    else {
                                        zoneRegion.operator(igen.genOper, igen.genAmount);
                                    }
                                }
                                // Handle instrument's global zone.
                                if (ibag === hydra.ibags[inst.instBagNdx] && !hadSampleId) {
                                    instRegion = new Region(zoneRegion);
                                }
                            }
                            hadGenInstrument = true;
                        }
                        else {
                            presetRegion.operator(pgen.genOper, pgen.genAmount);
                        }
                    }
                    // Modulators (TODO)
                    // if (pbag->modNdx < pbag[1].modNdx) addUnsupportedOpcode("any modulator");
                    // Handle preset's global zone.
                    if (pbag === hydra.pbags[phdr.presetBagNdx] && !hadGenInstrument) {
                        globalRegion = presetRegion;
                    }
                }
            }
            if (!append || !this.presets) {
                this.presets = newPresets;
            }
            else {
                for (const preset of newPresets) {
                    this.presets.push(preset);
                }
            }
        }
        static setContainsRange(x, lo, hi) {
            for (let i = lo; i <= hi; i++) {
                if (x.has(i)) {
                    return true;
                }
            }
            return false;
        }
        hasSamplesForProgram(program) {
            const presets = this.presets;
            if (!presets) {
                return false;
            }
            for (const preset of presets) {
                if (preset.presetNumber === program) {
                    for (const region of preset.regions) {
                        if (region.samples.length > 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        hasSamplesForPercussion(key) {
            const presets = this.presets;
            if (!presets) {
                return false;
            }
            for (const preset of presets) {
                if (preset.bank === SynthConstants.PercussionBank) {
                    for (const region of preset.regions) {
                        if (region.loKey >= key && region.hiKey <= key && region.samples.length > 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    }

    class EventEmitter {
        constructor() {
            this._listeners = [];
        }
        on(value) {
            this._listeners.push(value);
            return () => {
                this.off(value);
            };
        }
        off(value) {
            this._listeners = this._listeners.filter(l => l !== value);
        }
        trigger() {
            for (const l of this._listeners) {
                l();
            }
        }
    }
    /**
     * @partial
     */
    class EventEmitterOfT {
        constructor() {
            this._listeners = [];
        }
        on(value) {
            this._listeners.push(value);
            return () => {
                this.off(value);
            };
        }
        off(value) {
            this._listeners = this._listeners.filter(l => l !== value);
        }
        trigger(arg) {
            for (const l of this._listeners) {
                l(arg);
            }
        }
    }

    /**
     * Represents the info when the synthesizer played certain midi events.
     */
    class MidiEventsPlayedEventArgs {
        /**
         * Initializes a new instance of the {@link MidiEventsPlayedEventArgs} class.
         * @param events The events which were played.
         */
        constructor(events) {
            this.events = events;
        }
    }

    /**
     * Represents the info when the playback range changed.
     */
    class PlaybackRangeChangedEventArgs {
        /**
         * Initializes a new instance of the {@link PlaybackRangeChangedEventArgs} class.
         * @param range The range.
         */
        constructor(playbackRange) {
            this.playbackRange = playbackRange;
        }
    }

    /**
     * The options controlling how to export the audio.
     */
    class AudioExportOptions {
        constructor() {
            /**
             * The output sample rate.
             * @default `44100`
             */
            this.sampleRate = 44100;
            /**
             * Whether to respect sync point information during export.
             * @default `true`
             * @remarks
             * If the song contains sync point information for synchronization with an external media,
             * this option allows controlling whether the synthesized audio is aligned with these points.
             *
             * This is useful when mixing the exported audio together with external media, keeping the same timing.
             *
             * Disable this option if you want the original/exact timing as per music sheet in the exported audio.
             */
            this.useSyncPoints = false;
            /**
             * The current master volume as percentage. (range: 0.0-3.0, default 1.0)
             */
            this.masterVolume = 1;
            /**
             * The metronome volume. (range: 0.0-3.0, default 0.0)
             */
            this.metronomeVolume = 0;
            /**
             * The volume for individual tracks as percentage (range: 0.0-3.0).
             * @remarks
             * The key is the track index, and the value is the relative volume.
             * The configured volume (as per data model) still applies, this is an additional volume control.
             * If no custom value is set, 100% is used.
             * No values from the currently active synthesizer are applied.
             *
             * The meaning of the key changes when used with AlphaSynth directly, in this case the key is the midi channel .
             */
            this.trackVolume = new Map();
            /**
             * The additional semitone pitch transpose to apply for individual tracks.
             * @remarks
             * The key is the track index, and the value is the number of semitones to apply.
             * No values from the currently active synthesizer are applied.
             *
             * The meaning of the key changes when used with AlphaSynth directly, in this case the key is the midi channel .
             */
            this.trackTranspositionPitches = new Map();
        }
    }
    /**
     * Represents a single chunk of audio produced.
     */
    class AudioExportChunk {
        constructor() {
            /**
             * The current time position within the song in milliseconds.
             */
            this.currentTime = 0;
            /**
             * The total length of the song in milliseconds.
             */
            this.endTime = 0;
            /**
             * The current time position within the song in midi ticks.
             */
            this.currentTick = 0;
            /**
             * The total length of the song in midi ticks.
             */
            this.endTick = 0;
        }
    }

    /**
     * This is the base class for synthesizer components which can be used to
     * play a {@link MidiFile} via a {@link ISynthOutput}.
     */
    class AlphaSynthBase {
        get output() {
            return this._output;
        }
        get isReadyForPlayback() {
            return this.isReady && this.isSoundFontLoaded && this._isMidiLoaded;
        }
        get logLevel() {
            return Logger.logLevel;
        }
        set logLevel(value) {
            Logger.logLevel = value;
        }
        get masterVolume() {
            return this.synthesizer.masterVolume;
        }
        set masterVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this.updateMasterVolume(value);
        }
        updateMasterVolume(value) {
            this.synthesizer.masterVolume = value;
        }
        get metronomeVolume() {
            return this._metronomeVolume;
        }
        set metronomeVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._metronomeVolume = value;
            this.synthesizer.metronomeVolume = value;
        }
        get countInVolume() {
            return this._countInVolume;
        }
        set countInVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._countInVolume = value;
        }
        get midiEventsPlayedFilter() {
            return Array.from(this._midiEventsPlayedFilter);
        }
        set midiEventsPlayedFilter(value) {
            this._midiEventsPlayedFilter = new Set(value);
        }
        get playbackSpeed() {
            return this.sequencer.playbackSpeed;
        }
        set playbackSpeed(value) {
            value = ModelUtils.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
            this.updatePlaybackSpeed(value);
        }
        updatePlaybackSpeed(value) {
            const oldSpeed = this.sequencer.playbackSpeed;
            this.sequencer.playbackSpeed = value;
            this.timePosition = this.timePosition * (oldSpeed / value);
        }
        get tickPosition() {
            return this._tickPosition;
        }
        set tickPosition(value) {
            this.timePosition = this.sequencer.mainTickPositionToTimePosition(value);
        }
        get timePosition() {
            return this._timePosition;
        }
        set timePosition(value) {
            Logger.debug('AlphaSynth', `Seeking to position ${value}ms (main)`);
            // tell the sequencer to jump to the given position
            this.sequencer.mainSeek(value);
            // update the internal position
            this.updateTimePosition(value, true);
            // tell the output to reset the already synthesized buffers and request data again
            if (this.sequencer.isPlayingMain) {
                this._notPlayedSamples = 0;
                this.output.resetSamples();
            }
        }
        get playbackRange() {
            return this.sequencer.mainPlaybackRange;
        }
        set playbackRange(value) {
            this.sequencer.mainPlaybackRange = value;
            if (value) {
                this.tickPosition = value.startTick;
            }
            this.playbackRangeChanged.trigger(new PlaybackRangeChangedEventArgs(value));
        }
        get isLooping() {
            return this.sequencer.isLooping;
        }
        set isLooping(value) {
            this.sequencer.isLooping = value;
        }
        destroy() {
            Logger.debug('AlphaSynth', 'Destroying player');
            this.stop();
            this.output.destroy();
        }
        /**
         * Initializes a new instance of the {@link AlphaSynthBase} class.
         * @param output The output to use for playing the generated samples.
         */
        constructor(output, synthesizer, bufferTimeInMilliseconds) {
            this.isSoundFontLoaded = false;
            this._isMidiLoaded = false;
            this._tickPosition = 0;
            this._timePosition = 0;
            this._metronomeVolume = 0;
            this._countInVolume = 0;
            this._playedEventsQueue = new Queue();
            this._midiEventsPlayedFilter = new Set();
            this._notPlayedSamples = 0;
            this._synthStopping = false;
            this.isReady = false;
            this.state = PlayerState.Paused;
            this._loadedSoundFonts = [];
            this.ready = new EventEmitter();
            this.readyForPlayback = new EventEmitter();
            this.finished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.soundFontLoadFailed = new EventEmitterOfT();
            this.midiLoaded = new EventEmitterOfT();
            this.midiLoadFailed = new EventEmitterOfT();
            this.stateChanged = new EventEmitterOfT();
            this.positionChanged = new EventEmitterOfT();
            this.midiEventsPlayed = new EventEmitterOfT();
            this.playbackRangeChanged = new EventEmitterOfT();
            Logger.debug('AlphaSynth', 'Initializing player');
            this.state = PlayerState.Paused;
            Logger.debug('AlphaSynth', 'Creating output');
            this._output = output;
            Logger.debug('AlphaSynth', 'Creating synthesizer');
            this.synthesizer = synthesizer;
            this.sequencer = new MidiFileSequencer(this.synthesizer);
            Logger.debug('AlphaSynth', 'Opening output');
            this.output.ready.on(() => {
                this.isReady = true;
                this.ready.trigger();
                this.checkReadyForPlayback();
            });
            this.output.sampleRequest.on(() => {
                this.onSampleRequest();
            });
            this.output.samplesPlayed.on(this.onSamplesPlayed.bind(this));
            this.output.open(bufferTimeInMilliseconds);
        }
        onSampleRequest() {
            if (this.state === PlayerState.Playing &&
                (!this.sequencer.isFinished || this.synthesizer.activeVoiceCount > 0)) {
                let samples = new Float32Array(SynthConstants.MicroBufferSize * SynthConstants.MicroBufferCount * SynthConstants.AudioChannels);
                let bufferPos = 0;
                for (let i = 0; i < SynthConstants.MicroBufferCount; i++) {
                    // synthesize buffer
                    this.sequencer.fillMidiEventQueue();
                    const synthesizedEvents = this.synthesizer.synthesize(samples, bufferPos, SynthConstants.MicroBufferSize);
                    bufferPos += SynthConstants.MicroBufferSize * SynthConstants.AudioChannels;
                    // push all processed events into the queue
                    // for informing users about played events
                    for (const e of synthesizedEvents) {
                        if (this._midiEventsPlayedFilter.has(e.event.type)) {
                            this._playedEventsQueue.enqueue(e);
                        }
                    }
                    // tell sequencer to check whether its work is done
                    if (this.sequencer.isFinished) {
                        break;
                    }
                }
                // send it to output
                if (bufferPos < samples.length) {
                    samples = samples.subarray(0, bufferPos);
                }
                this._notPlayedSamples += samples.length;
                this.output.addSamples(samples);
            }
            else {
                // Tell output that there is no data left for it.
                const samples = new Float32Array(0);
                this.output.addSamples(samples);
            }
        }
        play() {
            if (this.state !== PlayerState.Paused || !this._isMidiLoaded) {
                return false;
            }
            this.output.activate();
            this.playInternal();
            if (this._countInVolume > 0) {
                Logger.debug('AlphaSynth', 'Starting countin');
                this.sequencer.startCountIn();
                this.synthesizer.setupMetronomeChannel(this._countInVolume);
                this.updateTimePosition(0, true);
            }
            this.output.play();
            return true;
        }
        playInternal() {
            if (this.sequencer.isPlayingOneTimeMidi) {
                Logger.debug('AlphaSynth', 'Cancelling one time midi');
                this.stopOneTimeMidi();
            }
            Logger.debug('AlphaSynth', 'Starting playback');
            this.synthesizer.setupMetronomeChannel(this.metronomeVolume);
            this._synthStopping = false;
            this.state = PlayerState.Playing;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
        }
        pause() {
            if (this.state === PlayerState.Paused || !this._isMidiLoaded) {
                return;
            }
            Logger.debug('AlphaSynth', 'Pausing playback');
            this.state = PlayerState.Paused;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
            this.output.pause();
            this.synthesizer.noteOffAll(false);
        }
        playPause() {
            if (this.state !== PlayerState.Paused || !this._isMidiLoaded) {
                this.pause();
            }
            else {
                this.play();
            }
        }
        stop() {
            if (!this._isMidiLoaded) {
                return;
            }
            Logger.debug('AlphaSynth', 'Stopping playback');
            this.state = PlayerState.Paused;
            this.output.pause();
            this._notPlayedSamples = 0;
            this.sequencer.stop();
            this.synthesizer.noteOffAll(true);
            this.tickPosition = this.sequencer.mainPlaybackRange ? this.sequencer.mainPlaybackRange.startTick : 0;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, true));
        }
        playOneTimeMidiFile(midi) {
            if (this.sequencer.isPlayingOneTimeMidi) {
                this.stopOneTimeMidi();
            }
            else {
                // pause current playback.
                this.pause();
            }
            this.sequencer.loadOneTimeMidi(midi);
            this.synthesizer.noteOffAll(true);
            // update the internal position
            this.updateTimePosition(0, true);
            // tell the output to reset the already synthesized buffers and request data again
            this._notPlayedSamples = 0;
            this.output.resetSamples();
            this.output.play();
        }
        resetSoundFonts() {
            this.stop();
            this.synthesizer.resetPresets();
            this._loadedSoundFonts = [];
            this.isSoundFontLoaded = false;
            this.soundFontLoaded.trigger();
        }
        loadSoundFont(data, append) {
            this.pause();
            const input = ByteBuffer.fromBuffer(data);
            try {
                Logger.debug('AlphaSynth', 'Loading soundfont from bytes');
                const soundFont = new Hydra();
                soundFont.load(input);
                if (!append) {
                    this._loadedSoundFonts = [];
                }
                this._loadedSoundFonts.push(soundFont);
                this.isSoundFontLoaded = true;
                this.soundFontLoaded.trigger();
                Logger.debug('AlphaSynth', 'soundFont successfully loaded');
                this.checkReadyForPlayback();
            }
            catch (e) {
                Logger.error('AlphaSynth', `Could not load soundfont from bytes ${e}`);
                this.soundFontLoadFailed.trigger(e);
            }
        }
        checkReadyForPlayback() {
            if (this.isReadyForPlayback) {
                this.synthesizer.setupMetronomeChannel(this.metronomeVolume);
                const programs = this.sequencer.instrumentPrograms;
                const percussionKeys = this.sequencer.percussionKeys;
                let append = false;
                for (const soundFont of this._loadedSoundFonts) {
                    this.synthesizer.loadPresets(soundFont, programs, percussionKeys, append);
                    append = true;
                }
                this.readyForPlayback.trigger();
            }
        }
        /**
         * Loads the given midi file for playback.
         * @param midi The midi file to load
         */
        loadMidiFile(midi) {
            this.stop();
            try {
                Logger.debug('AlphaSynth', 'Loading midi from model');
                this.sequencer.loadMidi(midi);
                this._isMidiLoaded = true;
                this.midiLoaded.trigger(new PositionChangedEventArgs(0, this.sequencer.currentEndTime, 0, this.sequencer.currentEndTick, false, this.sequencer.currentTempo, this.sequencer.modifiedTempo));
                Logger.debug('AlphaSynth', 'Midi successfully loaded');
                this.checkReadyForPlayback();
                this.tickPosition = 0;
            }
            catch (e) {
                Logger.error('AlphaSynth', `Could not load midi from model ${e}`);
                this.midiLoadFailed.trigger(e);
            }
        }
        applyTranspositionPitches(transpositionPitches) {
            this.synthesizer.applyTranspositionPitches(transpositionPitches);
        }
        setChannelTranspositionPitch(channel, semitones) {
            this.synthesizer.setChannelTranspositionPitch(channel, semitones);
        }
        setChannelMute(channel, mute) {
            this.synthesizer.channelSetMute(channel, mute);
        }
        resetChannelStates() {
            this.synthesizer.resetChannelStates();
        }
        setChannelSolo(channel, solo) {
            this.synthesizer.channelSetSolo(channel, solo);
        }
        setChannelVolume(channel, volume) {
            volume = Math.max(volume, SynthConstants.MinVolume);
            this.synthesizer.channelSetMixVolume(channel, volume);
        }
        onSamplesPlayed(sampleCount) {
            if (sampleCount === 0) {
                return;
            }
            const playedMillis = (sampleCount / this.synthesizer.outSampleRate) * 1000;
            this._notPlayedSamples -= sampleCount * SynthConstants.AudioChannels;
            this.updateTimePosition(this._timePosition + playedMillis, false);
            this.checkForFinish();
        }
        checkForFinish() {
            let startTick = 0;
            let endTick = 0;
            if (this.playbackRange && this.sequencer.isPlayingMain) {
                startTick = this.playbackRange.startTick;
                endTick = this.playbackRange.endTick;
            }
            else {
                endTick = this.sequencer.currentEndTick;
            }
            if (this._tickPosition >= endTick) {
                // fully done with playback of remaining samples?
                if (this._notPlayedSamples <= 0) {
                    this._notPlayedSamples = 0;
                    if (this.sequencer.isPlayingCountIn) {
                        Logger.debug('AlphaSynth', 'Finished playback (count-in)');
                        this.sequencer.resetCountIn();
                        this.timePosition = this.sequencer.currentTime;
                        this.playInternal();
                        this.output.resetSamples();
                    }
                    else if (this.sequencer.isPlayingOneTimeMidi) {
                        Logger.debug('AlphaSynth', 'Finished playback (one time)');
                        this.output.resetSamples();
                        this.state = PlayerState.Paused;
                        this.stopOneTimeMidi();
                    }
                    else if (this.isLooping) {
                        Logger.debug('AlphaSynth', 'Finished playback (main looping)');
                        this.finished.trigger();
                        this.tickPosition = startTick;
                        this._synthStopping = false;
                    }
                    else if (this.synthesizer.activeVoiceCount > 0) {
                        // smooth stop
                        if (!this._synthStopping) {
                            Logger.debug('AlphaSynth', 'Signaling synth to stop all voices (all samples played)');
                            this.synthesizer.noteOffAll(true);
                            this._synthStopping = true;
                        }
                    }
                    else {
                        this._synthStopping = false;
                        Logger.debug('AlphaSynth', 'Finished playback (main)');
                        this.finished.trigger();
                        this.stop();
                    }
                }
                else {
                    // the output still has to play some samples, signal the synth to stop
                    // to eventually bring the voices down to 0 and stop playing
                    if (!this._synthStopping) {
                        Logger.debug('AlphaSynth', 'Signaling synth to stop all voices (not all samples played)');
                        this.synthesizer.noteOffAll(true);
                        this._synthStopping = true;
                    }
                }
            }
        }
        stopOneTimeMidi() {
            this.output.pause();
            this.synthesizer.noteOffAll(true);
            this.sequencer.resetOneTimeMidi();
            this.timePosition = this.sequencer.currentTime;
        }
        updateTimePosition(timePosition, isSeek) {
            // update the real positions
            let currentTime = timePosition;
            this._timePosition = currentTime;
            let currentTick = this.sequencer.currentTimePositionToTickPosition(currentTime);
            this._tickPosition = currentTick;
            const endTime = this.sequencer.currentEndTime;
            const endTick = this.sequencer.currentEndTick;
            // on fade outs we can have some milliseconds longer, ensure we don't report this
            if (currentTime > endTime) {
                currentTime = endTime;
                currentTick = endTick;
            }
            const mode = this.sequencer.isPlayingMain ? 'main' : this.sequencer.isPlayingCountIn ? 'count-in' : 'one-time';
            Logger.debug('AlphaSynth', `Position changed: (time: ${currentTime}/${endTime}, tick: ${currentTick}/${endTick}, Active Voices: ${this.synthesizer.activeVoiceCount} (${mode}), Tempo original: ${this.sequencer.currentTempo}, Tempo modified: ${this.sequencer.modifiedTempo})`);
            if (this.sequencer.isPlayingMain) {
                this.positionChanged.trigger(new PositionChangedEventArgs(currentTime, endTime, currentTick, endTick, isSeek, this.sequencer.currentTempo, this.sequencer.modifiedTempo));
            }
            // build events which were actually played
            if (isSeek) {
                this._playedEventsQueue.clear();
            }
            else {
                const playedEvents = [];
                while (!this._playedEventsQueue.isEmpty && this._playedEventsQueue.peek().time < currentTime) {
                    const synthEvent = this._playedEventsQueue.dequeue();
                    playedEvents.push(synthEvent.event);
                }
                if (playedEvents.length > 0) {
                    playedEvents.reverse();
                    this.midiEventsPlayed.trigger(new MidiEventsPlayedEventArgs(playedEvents));
                }
            }
        }
        /**
         * @internal
         */
        hasSamplesForProgram(program) {
            return this.synthesizer.hasSamplesForProgram(program);
        }
        /**
         * @internal
         */
        hasSamplesForPercussion(key) {
            return this.synthesizer.hasSamplesForPercussion(key);
        }
        loadBackingTrack(_score) {
        }
        updateSyncPoints(_syncPoints) {
        }
    }
    /**
     * This is the main synthesizer component which can be used to
     * play a {@link MidiFile} via a {@link ISynthOutput}.
     */
    class AlphaSynth extends AlphaSynthBase {
        /**
         * Initializes a new instance of the {@link AlphaSynth} class.
         * @param output The output to use for playing the generated samples.
         */
        constructor(output, bufferTimeInMilliseconds) {
            super(output, new TinySoundFont(output.sampleRate), bufferTimeInMilliseconds);
        }
        /**
         * Creates a new audio exporter, initialized with the given data.
         * @param options The export options to use.
         * The track volume and transposition pitches must lists must be filled with midi channels.
         * @param midi The midi file to use.
         * @param syncPoints The sync points to use
         * @param transpositionPitches The initial transposition pitches to apply.
         * @param transpositionPitches The initial transposition pitches to apply.
         */
        exportAudio(options, midi, syncPoints, mainTranspositionPitches) {
            const exporter = new AlphaSynthAudioExporter(options);
            exporter.loadMidiFile(midi);
            if (options.useSyncPoints) {
                exporter.updateSyncPoints(syncPoints);
            }
            exporter.applyTranspositionPitches(mainTranspositionPitches);
            for (const [channel, semitones] of options.trackTranspositionPitches) {
                exporter.setChannelTranspositionPitch(channel, semitones);
            }
            for (const [channel, volume] of options.trackVolume) {
                exporter.channelSetMixVolume(channel, volume);
            }
            if (options.soundFonts) {
                for (const f of options.soundFonts) {
                    exporter.loadSoundFont(f);
                }
            }
            else {
                exporter.loadPresets(this.synthesizer.presets);
            }
            if (options.playbackRange) {
                exporter.limitExport(options.playbackRange);
            }
            exporter.setup();
            return exporter;
        }
    }
    /**
     * A audio exporter allowing streaming synthesis of audio samples with a fixed configuration.
     */
    class AlphaSynthAudioExporter {
        constructor(options) {
            this._generatedAudioCurrentTime = 0;
            this._generatedAudioEndTime = 0;
            this._synth = new TinySoundFont(options.sampleRate);
            this._sequencer = new MidiFileSequencer(this._synth);
            this._synth.masterVolume = Math.max(options.masterVolume, SynthConstants.MinVolume);
            this._synth.metronomeVolume = Math.max(options.metronomeVolume, SynthConstants.MinVolume);
        }
        /**
         * Loads the specified sound font.
         * @param data The soundfont data.
         */
        loadSoundFont(data) {
            const input = ByteBuffer.fromBuffer(data);
            const soundFont = new Hydra();
            soundFont.load(input);
            const programs = this._sequencer.instrumentPrograms;
            const percussionKeys = this._sequencer.percussionKeys;
            this._synth.loadPresets(soundFont, programs, percussionKeys, true);
        }
        /**
         * Loads the specified presets.
         * @param presets The presets to use.
         */
        loadPresets(presets) {
            this._synth.presets = presets;
        }
        /**
         * Limits the time range for which the export is done.
         * @param range The time range
         */
        limitExport(range) {
            this._sequencer.mainPlaybackRange = range;
            this._sequencer.mainSeek(this._sequencer.mainTickPositionToTimePosition(range.startTick));
        }
        /**
         * Sets the transposition pitch of a given channel. This pitch is additionally applied beside the
         * ones applied already via {@link applyTranspositionPitches}.
         * @param channel The channel number
         * @param semitones The number of semitones to apply as pitch offset.
         */
        setChannelTranspositionPitch(channel, semitones) {
            this._synth.setChannelTranspositionPitch(channel, semitones);
        }
        /**
         * Applies the given transposition pitches used for general pitch changes that should be applied to the song.
         * Used for general transpositions applied to the file.
         * @param transpositionPitches A map defining for a given list of midi channels the number of semitones that should be adjusted.
         */
        applyTranspositionPitches(mainTranspositionPitches) {
            this._synth.applyTranspositionPitches(mainTranspositionPitches);
        }
        /**
         * Loads the given midi file for synthesis.
         * @param midi The midi file.
         */
        loadMidiFile(midi) {
            this._sequencer.loadMidi(midi);
        }
        /**
         * Updates the sync points used for time synchronization with a backing track.
         * @param syncPoints  The sync points.
         */
        updateSyncPoints(syncPoints) {
            this._sequencer.mainUpdateSyncPoints(syncPoints);
        }
        /**
         * Sets the current and initial volume of the given channel.
         * @param channel The channel number.
         * @param volume The volume of of the channel (0.0-1.0)
         */
        channelSetMixVolume(channel, volume) {
            volume = Math.max(volume, SynthConstants.MinVolume);
            this._synth.channelSetMixVolume(channel, volume);
        }
        setup() {
            this._synth.setupMetronomeChannel(this._synth.metronomeVolume);
            const syncPoints = this._sequencer.currentSyncPoints;
            const alphaTabEndTime = this._sequencer.currentEndTime;
            if (syncPoints.length === 0) {
                this._generatedAudioEndTime = alphaTabEndTime;
            }
            else {
                const lastSyncPoint = syncPoints[syncPoints.length - 1];
                let endTime = lastSyncPoint.syncTime;
                const remainingTicks = this._sequencer.currentEndTick - lastSyncPoint.synthTick;
                if (remainingTicks > 0) {
                    endTime += MidiUtils.ticksToMillis(remainingTicks, lastSyncPoint.syncBpm);
                }
                this._generatedAudioEndTime = endTime;
            }
        }
        render(milliseconds) {
            if (this._sequencer.isFinished) {
                return undefined;
            }
            const oneMicroBufferMillis = (SynthConstants.MicroBufferSize * 1000) / this._synth.outSampleRate;
            const microBufferCount = Math.ceil(milliseconds / oneMicroBufferMillis);
            let samples = new Float32Array(SynthConstants.MicroBufferSize * microBufferCount * SynthConstants.AudioChannels);
            const syncPoints = this._sequencer.currentSyncPoints;
            let bufferPos = 0;
            let subBufferTime = this._generatedAudioCurrentTime;
            let alphaTabGeneratedMillis = 0;
            for (let i = 0; i < microBufferCount; i++) {
                // if we're applying sync points, we calculate the needed tempo and set the playback speed
                if (syncPoints.length > 0) {
                    this._sequencer.currentUpdateSyncPoints(subBufferTime);
                    this._sequencer.currentUpdateCurrentTempo(this._sequencer.currentTime);
                    const newSpeed = this._sequencer.syncPointTempo / this._sequencer.currentTempo;
                    if (this._sequencer.playbackSpeed !== newSpeed) {
                        this._sequencer.playbackSpeed = newSpeed;
                    }
                }
                this._sequencer.fillMidiEventQueue();
                this._synth.synthesize(samples, bufferPos, SynthConstants.MicroBufferSize);
                bufferPos += SynthConstants.MicroBufferSize * SynthConstants.AudioChannels;
                subBufferTime += oneMicroBufferMillis;
                alphaTabGeneratedMillis += oneMicroBufferMillis * this._sequencer.playbackSpeed;
                if (this._sequencer.isFinished) {
                    break;
                }
            }
            if (bufferPos < samples.length) {
                samples = samples.subarray(0, bufferPos);
            }
            const chunk = new AudioExportChunk();
            chunk.currentTime = this._generatedAudioCurrentTime;
            chunk.endTime = this._generatedAudioEndTime;
            chunk.currentTick = this._sequencer.currentTimePositionToTickPosition(this._sequencer.currentTime);
            chunk.endTick = this._sequencer.currentEndTick;
            this._generatedAudioCurrentTime += milliseconds;
            chunk.samples = samples;
            if (this._sequencer.isFinished) {
                this._synth.noteOffAll(true);
            }
            return chunk;
        }
    }

    /**
     * @partial
     */
    class JsonHelper {
        /**
         * @target web
         * @partial
         */
        static parseEnum(s, enumType) {
            switch (typeof s) {
                case 'string':
                    const num = Number.parseInt(s);
                    return Number.isNaN(num)
                        ? enumType[Object.keys(enumType).find(k => k.toLowerCase() === s.toLowerCase())]
                        : num;
                case 'number':
                    return s;
                case 'undefined':
                case 'object':
                    return undefined;
            }
            throw new AlphaTabError(exports.AlphaTabErrorType.Format, `Could not parse enum value '${s}'`);
        }
        /**
         * @target web
         * @partial
         */
        static forEach(s, func) {
            if (s instanceof Map) {
                s.forEach(func);
            }
            else if (typeof s === 'object') {
                for (const k in s) {
                    func(s[k], k);
                }
            }
        }
        /**
         * @target web
         * @partial
         */
        static getValue(s, key) {
            if (s instanceof Map) {
                return s.get(key);
            }
            if (typeof s === 'object') {
                return s[key];
            }
            return null;
        }
    }

    /**
     * A very basic font parser which parses the fields according to
     * https://www.w3.org/TR/CSS21/fonts.html#propdef-font
     */
    class FontParserToken {
        constructor(text, startPos, endPos) {
            this.text = text;
            this.startPos = startPos;
            this.endPos = endPos;
        }
    }
    class FontParser {
        constructor(input) {
            this.style = 'normal';
            this.variant = 'normal';
            this.weight = 'normal';
            this.stretch = 'normal';
            this.lineHeight = 'normal';
            this.size = '1rem';
            this.families = [];
            this.parseOnlyFamilies = false;
            this._currentTokenIndex = -1;
            this._input = '';
            this._currentToken = null;
            this._input = input;
            this._tokens = this.splitToTokens(input);
        }
        splitToTokens(input) {
            const tokens = [];
            let startPos = 0;
            while (startPos < input.length) {
                let endPos = startPos;
                while (endPos < input.length && input.charAt(endPos) !== ' ') {
                    endPos++;
                }
                if (endPos > startPos) {
                    tokens.push(new FontParserToken(input.substring(startPos, endPos), startPos, endPos));
                }
                startPos = endPos + 1;
            }
            return tokens;
        }
        parse() {
            this.reset();
            // default font flags
            if (this._tokens.length === 1) {
                switch (this._currentToken?.text) {
                    case 'caption':
                    case 'icon':
                    case 'menu':
                    case 'message-box':
                    case 'small-caption':
                    case 'status-bar':
                    case 'inherit':
                        return;
                }
            }
            if (!this.parseOnlyFamilies) {
                this.fontStyleVariantWeight();
                this.fontSizeLineHeight();
            }
            this.fontFamily();
        }
        static parseFamilies(value) {
            const parser = new FontParser(value);
            parser.parseOnlyFamilies = true;
            parser.parse();
            return parser.families;
        }
        fontFamily() {
            if (!this._currentToken) {
                if (this.parseOnlyFamilies) {
                    return;
                }
                throw new Error('Missing font list');
            }
            const familyListInput = this._input.substr(this._currentToken.startPos).trim();
            let pos = 0;
            while (pos < familyListInput.length) {
                const c = familyListInput.charAt(pos);
                if (c === ' ' || c === ',') {
                    // skip whitespace and quotes
                    pos++;
                }
                else if (c === '"' || c === "'") {
                    // quoted
                    const endOfString = this.findEndOfQuote(familyListInput, pos + 1, c);
                    this.families.push(familyListInput
                        .substring(pos + 1, endOfString)
                        .split(`\\${c}`)
                        .join(c));
                    pos = endOfString + 1;
                }
                else {
                    // until comma
                    const endOfString = this.findEndOfQuote(familyListInput, pos + 1, ',');
                    this.families.push(familyListInput.substring(pos, endOfString).trim());
                    pos = endOfString + 1;
                }
            }
        }
        findEndOfQuote(s, pos, quoteChar) {
            let escaped = false;
            while (pos < s.length) {
                const c = s.charAt(pos);
                if (!escaped && c === quoteChar) {
                    return pos;
                }
                if (!escaped && c === '\\') {
                    escaped = true;
                }
                else {
                    escaped = false;
                }
                pos += 1;
            }
            return s.length;
        }
        fontSizeLineHeight() {
            if (!this._currentToken) {
                throw new Error('Missing font size');
            }
            const parts = this._currentToken.text.split('/');
            if (parts.length >= 3) {
                throw new Error(`Invalid font size '${this._currentToken}' specified`);
            }
            this.nextToken();
            if (parts.length >= 2) {
                if (parts[1] === '/') {
                    // size/ line-height (space after slash)
                    if (!this._currentToken) {
                        throw new Error('Missing line-height after font size');
                    }
                    this.lineHeight = this._currentToken.text;
                    this.nextToken();
                }
                else {
                    // size/line-height (no spaces)
                    this.size = parts[0];
                    this.lineHeight = parts[1];
                }
            }
            else if (parts.length >= 1) {
                this.size = parts[0];
                if (this._currentToken && this._currentToken.text.indexOf('/') === 0) {
                    // size / line-height (with spaces befor and after slash)
                    if (this._currentToken.text === '/') {
                        this.nextToken();
                        if (!this._currentToken) {
                            throw new Error('Missing line-height after font size');
                        }
                        this.lineHeight = this._currentToken.text;
                        this.nextToken();
                    }
                    else {
                        this.lineHeight = this._currentToken.text.substr(1);
                        this.nextToken();
                    }
                }
            }
            else {
                throw new Error('Missing font size');
            }
        }
        nextToken() {
            this._currentTokenIndex++;
            if (this._currentTokenIndex < this._tokens.length) {
                this._currentToken = this._tokens[this._currentTokenIndex];
            }
            else {
                this._currentToken = null;
            }
        }
        fontStyleVariantWeight() {
            let hasStyle = false;
            let hasVariant = false;
            let hasWeight = false;
            let valuesNeeded = 3;
            const ambiguous = [];
            while (true) {
                if (!this._currentToken) {
                    return;
                }
                const text = this._currentToken.text;
                switch (text) {
                    // ambiguous
                    case 'normal':
                    case 'inherit':
                        ambiguous.push(text);
                        valuesNeeded--;
                        this.nextToken();
                        break;
                    // style
                    case 'italic':
                    case 'oblique':
                        this.style = text;
                        hasStyle = true;
                        valuesNeeded--;
                        this.nextToken();
                        break;
                    // variant
                    case 'small-caps':
                        this.variant = text;
                        hasVariant = true;
                        valuesNeeded--;
                        this.nextToken();
                        break;
                    // weight
                    case 'bold':
                    case 'bolder':
                    case 'lighter':
                    case '100':
                    case '200':
                    case '300':
                    case '400':
                    case '500':
                    case '600':
                    case '700':
                    case '800':
                    case '900':
                        this.weight = text;
                        hasWeight = true;
                        valuesNeeded--;
                        this.nextToken();
                        break;
                    default:
                        // unknown token -> done with this part
                        return;
                }
                if (valuesNeeded === 0) {
                    break;
                }
            }
            while (ambiguous.length > 0) {
                const v = ambiguous.pop();
                if (!hasWeight) {
                    this.weight = v;
                }
                else if (!hasVariant) {
                    this.variant = v;
                }
                else if (!hasStyle) {
                    this.style = v;
                }
            }
        }
        reset() {
            this._currentTokenIndex = -1;
            this.nextToken();
        }
        static quoteFont(f) {
            if (f.indexOf(' ') === -1) {
                return f;
            }
            const escapedQuotes = f.replaceAll('"', '\\"');
            return `"${escapedQuotes}"`;
        }
    }
    /**
     * Lists all flags for font styles.
     */
    var FontStyle;
    (function (FontStyle) {
        /**
         * No flags.
         */
        FontStyle[FontStyle["Plain"] = 0] = "Plain";
        /**
         * Font is italic.
         */
        FontStyle[FontStyle["Italic"] = 1] = "Italic";
    })(FontStyle || (FontStyle = {}));
    /**
     * Lists all font weight values.
     */
    var FontWeight;
    (function (FontWeight) {
        /**
         * Not bold
         */
        FontWeight[FontWeight["Regular"] = 0] = "Regular";
        /**
         * Font is bold
         */
        FontWeight[FontWeight["Bold"] = 1] = "Bold";
    })(FontWeight || (FontWeight = {}));
    /**
     * @json_immutable
     */
    class Font {
        reset() {
            this._cssScale = 0;
            this._css = this.toCssString();
        }
        /**
         * Gets the first font family name.
         * @deprecated Consider using {@link families} for multi font family support.
         */
        get family() {
            return this._families[0];
        }
        /**
         * Sets the font family list.
         * @deprecated Consider using {@link families} for multi font family support.
         */
        set family(value) {
            this.families = FontParser.parseFamilies(value);
        }
        /**
         * Gets the font family name.
         */
        get families() {
            return this._families;
        }
        /**
         * Sets the font family name.
         */
        set families(value) {
            this._families = value;
            this.reset();
        }
        /**
         * Gets the font size in pixels.
         */
        get size() {
            return this._size;
        }
        /**
         * Sets the font size in pixels.
         */
        set size(value) {
            this._size = value;
            this.reset();
        }
        /**
         * Gets the font style.
         */
        get style() {
            return this._style;
        }
        /**
         * Sets the font style.
         */
        set style(value) {
            this._style = value;
            this.reset();
        }
        /**
         * Gets the font weight.
         */
        get weight() {
            return this._weight;
        }
        /**
         * Gets or sets the font weight.
         */
        set weight(value) {
            this._weight = value;
            this.reset();
        }
        get isBold() {
            return this.weight === FontWeight.Bold;
        }
        get isItalic() {
            return this.style === FontStyle.Italic;
        }
        /**
         * Initializes a new instance of the {@link Font} class.
         * @param family The family.
         * @param size The size.
         * @param style The style.
         * @param weight The weight.
         */
        constructor(family, size, style = FontStyle.Plain, weight = FontWeight.Regular) {
            this._cssScale = 0.0;
            this._families = FontParser.parseFamilies(family);
            this._size = size;
            this._style = style;
            this._weight = weight;
            this._css = this.toCssString();
        }
        withSize(newSize) {
            return Font.withFamilyList(this._families, newSize, this._style, this._weight);
        }
        /**
         * Initializes a new instance of the {@link Font} class.
         * @param families The families.
         * @param size The size.
         * @param style The style.
         * @param weight The weight.
         */
        static withFamilyList(families, size, style = FontStyle.Plain, weight = FontWeight.Regular) {
            const f = new Font('', size, style, weight);
            f.families = families;
            return f;
        }
        toCssString(scale = 1) {
            if (!this._css || !(Math.abs(scale - this._cssScale) < 0.01)) {
                let buf = '';
                if (this.isBold) {
                    buf += 'bold ';
                }
                if (this.isItalic) {
                    buf += 'italic ';
                }
                buf += this.size * scale;
                buf += 'px ';
                buf += this.families.map(f => FontParser.quoteFont(f)).join(', ');
                this._css = buf;
                this._cssScale = scale;
            }
            return this._css;
        }
        static fromJson(v) {
            if (v instanceof Font) {
                return v;
            }
            switch (typeof v) {
                case 'undefined':
                    return undefined;
                case 'object': {
                    const m = v;
                    const families = m.get('families');
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    const size = m.get('size');
                    const style = JsonHelper.parseEnum(m.get('style'), FontStyle);
                    const weight = JsonHelper.parseEnum(m.get('weight'), FontWeight);
                    return Font.withFamilyList(families, size, style, weight);
                }
                case 'string': {
                    const parser = new FontParser(v);
                    parser.parse();
                    const families = parser.families;
                    const fontSizeString = parser.size.toLowerCase();
                    let fontSize = 0;
                    // as per https://websemantics.uk/articles/font-size-conversion/
                    switch (fontSizeString) {
                        case 'xx-small':
                            fontSize = 7;
                            break;
                        case 'x-small':
                            fontSize = 10;
                            break;
                        case 'small':
                        case 'smaller':
                            fontSize = 13;
                            break;
                        case 'medium':
                            fontSize = 16;
                            break;
                        case 'large':
                        case 'larger':
                            fontSize = 18;
                            break;
                        case 'x-large':
                            fontSize = 24;
                            break;
                        case 'xx-large':
                            fontSize = 32;
                            break;
                        default:
                            try {
                                if (fontSizeString.endsWith('em')) {
                                    fontSize = Number.parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16;
                                }
                                else if (fontSizeString.endsWith('pt')) {
                                    fontSize =
                                        (Number.parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16.0) /
                                            12.0;
                                }
                                else if (fontSizeString.endsWith('px')) {
                                    fontSize = Number.parseFloat(fontSizeString.substr(0, fontSizeString.length - 2));
                                }
                                else {
                                    fontSize = 12;
                                }
                            }
                            catch (e) {
                                fontSize = 12;
                            }
                            break;
                    }
                    let fontStyle = FontStyle.Plain;
                    if (parser.style === 'italic') {
                        fontStyle = FontStyle.Italic;
                    }
                    let fontWeight = FontWeight.Regular;
                    const fontWeightString = parser.weight.toLowerCase();
                    switch (fontWeightString) {
                        case 'normal':
                        case 'lighter':
                            break;
                        default:
                            fontWeight = FontWeight.Bold;
                            break;
                    }
                    return Font.withFamilyList(families, fontSize, fontStyle, fontWeight);
                }
                default:
                    return undefined;
            }
        }
        static toJson(font) {
            if (!font) {
                return undefined;
            }
            const o = new Map();
            o.set('families', font.families);
            o.set('size', font.size);
            o.set('style', font.style);
            o.set('weight', font.weight);
            return o;
        }
    }

    /**
     * This public class contains central definitions for controlling the visual appearance.
     * @json
     * @json_declaration
     */
    class RenderingResources {
        constructor() {
            /**
             * The font to use for displaying the songs copyright information in the header of the music sheet.
             * @defaultValue `bold 12px Arial, sans-serif`
             * @since 0.9.6
             */
            this.copyrightFont = new Font(RenderingResources.sansFont, 12, FontStyle.Plain, FontWeight.Bold);
            /**
             * The font to use for displaying the songs title in the header of the music sheet.
             * @defaultValue `32px Georgia, serif`
             * @since 0.9.6
             */
            this.titleFont = new Font(RenderingResources.serifFont, 32, FontStyle.Plain);
            /**
             * The font to use for displaying the songs subtitle in the header of the music sheet.
             * @defaultValue `20px Georgia, serif`
             * @since 0.9.6
             */
            this.subTitleFont = new Font(RenderingResources.serifFont, 20, FontStyle.Plain);
            /**
             * The font to use for displaying the lyrics information in the header of the music sheet.
             * @defaultValue `15px Arial, sans-serif`
             * @since 0.9.6
             */
            this.wordsFont = new Font(RenderingResources.serifFont, 15, FontStyle.Plain);
            /**
             * The font to use for displaying certain effect related elements in the music sheet.
             * @defaultValue `italic 12px Georgia, serif`
             * @since 0.9.6
             */
            this.effectFont = new Font(RenderingResources.serifFont, 12, FontStyle.Italic);
            /**
             * The font to use for displaying beat time information in the music sheet.
             * @defaultValue `12px Georgia, serif`
             * @since 1.4.0
             */
            this.timerFont = new Font(RenderingResources.serifFont, 12, FontStyle.Plain);
            /**
             * The font to use for displaying the directions texts.
             * @defaultValue `14px Georgia, serif`
             * @since 1.4.0
             */
            this.directionsFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain);
            /**
             * The font to use for displaying the fretboard numbers in chord diagrams.
             * @defaultValue `11px Arial, sans-serif`
             * @since 0.9.6
             */
            this.fretboardNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * The font to use for displaying the numbered music notation in the music sheet.
             * @defaultValue `14px Arial, sans-serif`
             * @since 1.4.0
             */
            this.numberedNotationFont = new Font(RenderingResources.sansFont, 16, FontStyle.Plain);
            /**
             * The font to use for displaying the grace notes in numbered music notation in the music sheet.
             * @defaultValue `16px Arial, sans-serif`
             * @since 1.4.0
             */
            this.numberedNotationGraceFont = new Font(RenderingResources.sansFont, 14, FontStyle.Plain);
            /**
             * The font to use for displaying the guitar tablature numbers in the music sheet.
             * @defaultValue `13px Arial, sans-serif`
             * @since 0.9.6
             */
            this.tablatureFont = new Font(RenderingResources.sansFont, 13, FontStyle.Plain);
            /**
             * The font to use for grace notation related texts in the music sheet.
             * @defaultValue `11px Arial, sans-serif`
             * @since 0.9.6
             */
            this.graceFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * The color to use for rendering the lines of staves.
             * @defaultValue `rgb(165, 165, 165)`
             * @since 0.9.6
             */
            this.staffLineColor = new Color(165, 165, 165, 0xff);
            /**
             * The color to use for rendering bar separators, the accolade and repeat signs.
             * @defaultValue `rgb(34, 34, 17)`
             * @since 0.9.6
             */
            this.barSeparatorColor = new Color(34, 34, 17, 0xff);
            /**
             * The font to use for displaying the bar numbers above the music sheet.
             * @defaultValue `11px Arial, sans-serif`
             * @since 0.9.6
             */
            this.barNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * The color to use for displaying the bar numbers above the music sheet.
             * @defaultValue `rgb(200, 0, 0)`
             * @since 0.9.6
             */
            this.barNumberColor = new Color(200, 0, 0, 0xff);
            /**
             * The font to use for displaying finger information in the music sheet.
             * @defaultValue `14px Georgia, serif`
             * @since 0.9.6
             */
            this.fingeringFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain);
            /**
             * The font to use for displaying finger information when inline into the music sheet.
             * @defaultValue `12px Georgia, serif`
             * @since 1.4.0
             */
            this.inlineFingeringFont = new Font(RenderingResources.serifFont, 12, FontStyle.Plain);
            /**
             * The font to use for section marker labels shown above the music sheet.
             * @defaultValue `bold 14px Georgia, serif`
             * @since 0.9.6
             */
            this.markerFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain, FontWeight.Bold);
            /**
             * The color to use for music notation elements of the primary voice.
             * @defaultValue `rgb(0, 0, 0)`
             * @since 0.9.6
             */
            this.mainGlyphColor = new Color(0, 0, 0, 0xff);
            /**
             * The color to use for music notation elements of the secondary voices.
             * @defaultValue `rgb(0,0,0,0.4)`
             * @since 0.9.6
             */
            this.secondaryGlyphColor = new Color(0, 0, 0, 100);
            /**
             * The color to use for displaying the song information above the music sheets.
             * @defaultValue `rgb(0, 0, 0)`
             * @since 0.9.6
             */
            this.scoreInfoColor = new Color(0, 0, 0, 0xff);
        }
        /**
         * @internal
         * @param element
         */
        getFontForElement(element) {
            switch (element) {
                case ScoreSubElement.Title:
                    return this.titleFont;
                case ScoreSubElement.SubTitle:
                case ScoreSubElement.Artist:
                case ScoreSubElement.Album:
                    return this.subTitleFont;
                case ScoreSubElement.Words:
                case ScoreSubElement.Music:
                case ScoreSubElement.WordsAndMusic:
                case ScoreSubElement.Transcriber:
                    return this.wordsFont;
                case ScoreSubElement.Copyright:
                case ScoreSubElement.CopyrightSecondLine:
                    return this.copyrightFont;
            }
            return this.wordsFont;
        }
    }
    RenderingResources.sansFont = 'Arial, sans-serif';
    RenderingResources.serifFont = 'Georgia, serif';

    /**
     * Lists the different modes in which the staves and systems are arranged.
     */
    exports.SystemsLayoutMode = void 0;
    (function (SystemsLayoutMode) {
        /**
         * Use the automatic alignment system provided by alphaTab (default)
         */
        SystemsLayoutMode[SystemsLayoutMode["Automatic"] = 0] = "Automatic";
        /**
         * Use the systems layout and sizing information stored from the score model.
         */
        SystemsLayoutMode[SystemsLayoutMode["UseModelLayout"] = 1] = "UseModelLayout";
    })(exports.SystemsLayoutMode || (exports.SystemsLayoutMode = {}));
    /**
     * The display settings control how the general layout and display of alphaTab is done.
     * @json
     * @json_declaration
     */
    class DisplaySettings {
        constructor() {
            /**
             * The zoom level of the rendered notation.
             * @since 0.9.6
             * @category Display
             * @defaultValue `1.0`
             * @remarks
             * AlphaTab can scale up or down the rendered music notation for more optimized display scenarios. By default music notation is rendered at 100% scale (value 1) and can be scaled up or down by
             * percental values.
             */
            this.scale = 1.0;
            /**
             * The default stretch force to use for layouting.
             * @since 0.9.6
             * @category Display
             * @defaultValue `1`
             * @remarks
             * The stretch force is a setting that controls the spacing of the music notation. AlphaTab uses a varaint of the Gourlay algorithm for spacing which has springs and rods for
             * aligning elements. This setting controls the "strength" of the springs. The stronger the springs, the wider the spacing.
             *
             * | Force 1                                                      | Force 0.5                                             |
             * |--------------------------------------------------------------|-------------------------------------------------------|
             * | ![Default](https://alphatab.net/img/reference/property/stretchforce-default.png) | ![0.5](https://alphatab.net/img/reference/property/stretchforce-half.png) |
             */
            this.stretchForce = 1.0;
            /**
             * The layouting mode used to arrange the the notation.
             * @remarks
             * AlphaTab has various layout engines that arrange the rendered bars differently. This setting controls which layout mode is used.
             *
             * @since 0.9.6
             * @category Display
             * @defaultValue `LayoutMode.Page`
             */
            this.layoutMode = exports.LayoutMode.Page;
            /**
             * The stave profile defining which staves are shown for the music sheet.
             * @since 0.9.6
             * @category Display
             * @defaultValue `StaveProfile.Default`
             * @remarks
             * AlphaTab has various stave profiles that define which staves will be shown in for the rendered tracks. Its recommended
             * to keep this on {@link StaveProfile.Default} and rather rely on the options available ob {@link Staff} level
             */
            this.staveProfile = exports.StaveProfile.Default;
            /**
             * Limit the displayed bars per system (row). (-1 for automatic mode)
             * @since 0.9.6
             * @category Display
             * @defaultValue `-1`
             * @remarks
             * This setting sets the number of bars that should be put into one row during layouting. This setting is only respected
             * when using the {@link LayoutMode.Page} where bars are aligned in systems. [Demo](https://alphatab.net/docs/showcase/layouts#page-layout-5-bars-per-row).
             */
            this.barsPerRow = -1;
            /**
             * The bar start index to start layouting with.
             * @since 0.9.6
             * @category Display
             * @defaultValue `1`
             * @remarks
             * This setting sets the index of the first bar that should be rendered from the overall song. This setting can be used to
             * achieve a paging system or to only show partial bars of the same file. By this a tutorial alike display can be achieved
             * that explains various parts of the song. Please note that this is the bar number as shown in the music sheet (1-based) not the array index (0-based).
             * [Demo](https://alphatab.net/docs/showcase/layouts#page-layout-bar-5-to-8)
             */
            this.startBar = 1;
            /**
             * The total number of bars that should be rendered from the song. (-1 for all bars)
             * @since 0.9.6
             * @category Display
             * @defaultValue `-1`
             * @remarks
             * This setting sets the number of bars that should be rendered from the overall song. This setting can be used to
             * achieve a paging system or to only show partial bars of the same file. By this a tutorial alike display can be achieved
             * that explains various parts of the song. [Demo](https://alphatab.net/docs/showcase/layouts)
             */
            this.barCount = -1;
            /**
             * The number of bars that should be placed within one partial render.
             * @since 0.9.6
             * @category Display
             * @defaultValue `10`
             * @remarks
             * AlphaTab renders the whole music sheet in smaller chunks named "partials". This is to reduce the risk of
             * encountering browser performance restrictions and it gives faster visual feedback to the user. This
             * setting controls how many bars are placed within such a partial.
             */
            this.barCountPerPartial = 10;
            /**
             * Whether to justify also the last system in page layouts.
             * @remarks
             * Setting this option to `true` tells alphaTab to also justify the last system (row) like it
             * already does for the systems which are full.
             * | Justification Disabled                                       | Justification Enabled                                |
             * |--------------------------------------------------------------|-------------------------------------------------------|
             * | ![Disabled](https://alphatab.net/img/reference/property/justify-last-system-false.png) | ![Enabled](https://alphatab.net/img/reference/property/justify-last-system-true.png) |
             * @since 1.3.0
             * @category Display
             * @defaultValue `false`
             */
            this.justifyLastSystem = false;
            /**
             * Allows adjusting of the used fonts and colors for rendering.
             * @json_partial_names
             * @since 0.9.6
             * @category Display
             * @defaultValue `false`
             * @domWildcard
             * @remarks
             * AlphaTab allows configuring the colors and fonts used for rendering via the rendering resources settings. Please note that as of today
             * this is the primary way of changing the way how alphaTab styles elements. CSS styling in the browser cannot be guaranteed to work due to its flexibility.
             *
             *
             * Due to space reasons in the following table the common prefix of the settings are removed. Please refer to these examples to eliminate confusion on the usage:
             *
             * | Platform   | Prefix                    | Example Usage                                                      |
             * |------------|---------------------------|--------------------------------------------------------------------|
             * | JavaScript | `display.resources.`      | `settings.display.resources.wordsFont = ...`                       |
             * | JSON       | `display.resources.`      | `var settings = { display: { resources: { wordsFonts: '...'} } };` |
             * | JSON       | `resources.`              | `var settings = { resources: { wordsFonts: '...'} };`              |
             * | .net       | `Display.Resources.`      | `settings.Display.Resources.WordsFonts = ...`                      |
             * | Android    | `display.resources.`      | `settings.display.resources.wordsFonts = ...`                      |
             * ## Types
             *
             * ### Fonts
             *
             * For the JavaScript platform any font that might be installed on the client machines can be used.
             * Any additional fonts can be added via WebFonts. The rendering of the score will be delayed until it is detected that the font was loaded.
             * Simply use any CSS font property compliant string as configuration. Relative font sizes with percentual values are not supported, remaining values will be considered if supported.
             *
             * {@since 1.2.3} Multiple fonts are also supported for the Web version. alphaTab will check if any of the fonts in the list is loaded instead of all. If none is available at the time alphaTab is initialized, it will try to initiate the load of the specified fonts individual through the Browser Font APIs.
             *
             * For the .net platform any installed font on the system can be used. Simply construct the `Font` object to configure your desired fonts.
             *
             * ### Colors
             *
             * For JavaScript you can use any CSS font property compliant string. (#RGB, #RGBA, #RRGGBB, #RRGGBBAA, rgb(r,g,b), rgba(r,g,b,a) )
             *
             * On .net simply construct the `Color` object to configure your desired color.
             */
            this.resources = new RenderingResources();
            /**
             * Adjusts the padding between the music notation and the border.
             * @remarks
             * Adjusts the padding between the music notation and the outer border of the container element.
             * The array is either:
             * * 2 elements: `[left-right, top-bottom]`
             * * 4 elements: ``[left, top, right, bottom]``
             * @since 0.9.6
             * @category Display
             * @defaultValue `[35, 35]`
             */
            this.padding = [35, 35];
            /**
             * The top padding applied to first system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `5`
             */
            this.firstSystemPaddingTop = 5;
            /**
             * The top padding applied systems beside the first one.
             * @since 1.4.0
             * @category Display
             * @defaultValue `10`
             */
            this.systemPaddingTop = 10;
            /**
             * The bottom padding applied to systems beside the last one.
             * @since 1.4.0
             * @category Display
             * @defaultValue `20`
             */
            this.systemPaddingBottom = 20;
            /**
             * The bottom padding applied to the last system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `0`
             */
            this.lastSystemPaddingBottom = 0;
            /**
             * The padding left to the track name label of the system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `0`
             */
            this.systemLabelPaddingLeft = 0;
            /**
             * The padding left to the track name label of the system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `3`
             */
            this.systemLabelPaddingRight = 3;
            /**
             * The padding between the accolade bar and the start of the bar itself.
             * @since 1.4.0
             * @category Display
             * @defaultValue `3`
             */
            this.accoladeBarPaddingRight = 3;
            /**
             * The bottom padding applied to main notation staves (standard, tabs, numbered, slash).
             * @since 1.4.0
             * @category Display
             * @defaultValue `5`
             */
            this.notationStaffPaddingTop = 5;
            /**
             * The bottom padding applied to main notation staves (standard, tabs, numbered, slash).
             * @since 1.4.0
             * @category Display
             * @defaultValue `5`
             */
            this.notationStaffPaddingBottom = 5;
            /**
             * The top padding applied to effect annotation staffs.
             * @since 1.4.0
             * @category Display
             * @defaultValue `0`
             */
            this.effectStaffPaddingTop = 0;
            /**
             * The bottom padding applied to effect annotation staffs.
             * @since 1.4.0
             * @category Display
             * @defaultValue `0`
             */
            this.effectStaffPaddingBottom = 0;
            /**
             * The left padding applied between the left line and the first glyph in the first staff in a system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `6`
             */
            this.firstStaffPaddingLeft = 6;
            /**
             * The left padding applied between the left line and the first glyph in the following staff in a system.
             * @since 1.4.0
             * @category Display
             * @defaultValue `2`
             */
            this.staffPaddingLeft = 2;
            /**
             * The mode used to arrange staves and systems.
             * @since 1.3.0
             * @category Display
             * @defaultValue `1`
             * @remarks
             * By default alphaTab uses an own (automatic) mode to arrange and scale the bars when
             * putting them into staves. This property allows changing this mode to change the music sheet arrangement.
             *
             * ## Supported File Formats:
             * * Guitar Pro 6-8 {@since 1.3.0}
             * If you want/need support for more file formats to respect the sizing information feel free to [open a discussion](https://github.com/CoderLine/alphaTab/discussions/new?category=ideas) on GitHub.
             *
             * ## Automatic Mode
             *
             * In the automatic mode alphaTab arranges the bars and staves using its internal mechanisms.
             *
             * For the `page` layout this means it will scale the bars according to the `stretchForce` and available width.
             * Wrapping into new systems (rows) will happen when the row is considered "full".
             *
             * For the `horizontal` layout the `stretchForce` defines the sizing and no wrapping happens at all.
             *
             * ## Model Layout mode
             *
             * File formats like Guitar Pro embed information about the layout in the file and alphaTab can read and use this information.
             * When this mode is enabled, alphaTab will also actively use this information and try to respect it.
             *
             * alphaTab holds following information in the data model and developers can change those values (e.g. by tapping into the `scoreLoaded`) event.
             *
             * **Used when single tracks are rendered:**
             *
             * * `score.tracks[index].systemsLayout` - An array of numbers describing how many bars should be placed within each system (row).
             * * `score.tracks[index].defaultSystemsLayout` - The number of bars to place in a system (row) when no value is defined in the `systemsLayout`.
             * * `score.tracks[index].staves[index].bars[index].displayScale` - The relative size of this bar in the system it is placed. Note that this is not directly a percentage value. e.g. if there are 3 bars and all define scale 1, they are sized evenly.
             * * `score.tracks[index].staves[index].bars[index].displayWidth` - The absolute size of this bar when displayed.
             *
             * **Used when multiple tracks are rendered:**
             *
             * * `score.systemsLayout` - Like the `systemsLayout` on track level.
             * * `score.defaultSystemsLayout` - Like the `defaultSystemsLayout` on track level.
             * * `score.masterBars[index].displayScale` - Like the `displayScale` on bar level.
             * * `score.masterBars[index].displayWidth` - Like the `displayWidth` on bar level.
             *
             * ### Page Layout
             *
             * The page layout uses the `systemsLayout` and `defaultSystemsLayout` to decide how many bars go into a single system (row).
             * Additionally when sizing the bars within the system the `displayScale` is used. As indicated above, the scale is rather a ratio than a percentage value but percentages work also:
             *
             * ![Page Layout](https://alphatab.net/img/reference/property/systems-layout-page-examples.png)
             *
             * The page layout does not use `displayWidth`. The use of absolute widths would break the proper alignments needed for this kind of display.
             *
             * Also note that the sizing is including any glyphs and notation elements within the bar. e.g. if there are clefs in the bar, they are still "squeezed" into the available size.
             * It is not the case that the actual notes with their lengths are sized accordingly. This fits the sizing system of Guitar Pro and when files are customized there,
             * alphaTab will match this layout quite close.
             *
             * ### Horizontal Layout
             *
             * The horizontal layout uses the `displayWidth` to scale the bars to size the bars exactly as specified. This kind of sizing and layout can be useful for usecases like:
             *
             * * Comparing files against each other (top/bottom comparison)
             * * Aligning the playback of multiple files on one screen assuming the same tempo (e.g. one file per track).
             */
            this.systemsLayoutMode = exports.SystemsLayoutMode.Automatic;
        }
    }

    /**
     * All settings related to importers that decode file formats.
     * @json
     * @json_declaration
     */
    class ImporterSettings {
        constructor() {
            /**
             * The text encoding to use when decoding strings.
             * @since 0.9.6
             * @defaultValue `utf-8`
             * @category Importer
             * @remarks
             * By default strings are interpreted as UTF-8 from the input files. This is sometimes not the case and leads to strong display
             * of strings in the rendered notation. Via this setting the text encoding for decoding the strings can be changed. The supported
             * encodings depend on the browser or operating system. This setting is considered for the importers
             *
             * * Guitar Pro 7
             * * Guitar Pro 6
             * * Guitar Pro 3-5
             * * MusicXML
             */
            this.encoding = 'utf-8';
            /**
             * If part-groups should be merged into a single track (MusicXML).
             * @since 0.9.6
             * @defaultValue `false`
             * @category Importer
             * @remarks
             * This setting controls whether multiple `part-group` tags will result into a single track with multiple staves.
             */
            this.mergePartGroupsInMusicXml = false;
            /**
             * Enables detecting lyrics from beat texts
             * @since 1.2.0
             * @category Importer
             * @defaultValue `false`
             * @remarks
             *
             * On various old Guitar Pro 3-5 files tab authors often used the "beat text" feature to add lyrics to the individual tracks.
             * This was easier and quicker than using the lyrics feature.
             *
             * These texts were optimized to align correctly when viewed in Guitar Pro with the default layout but can lead to
             * disturbed display in alphaTab. When `beatTextAsLyrics` is set to true, alphaTab will try to rather parse beat text
             * values as lyrics using typical text patterns like dashes, underscores and spaces.
             *
             * The lyrics are only detected if not already proper lyrics are applied to the track.
             *
             * Enable this option for input files which suffer from this practice.
             *
             * > [!NOTE]
             * > alphaTab tries to relate the texts and chunks to the beats but this is not perfect.
             * > Errors are likely to happen with such kind of files.
             *
             * **Enabled**
             *
             * ![Enabled](https://alphatab.net/img/reference/property/beattextaslyrics-enabled.png)
             *
             * **Disabled**
             *
             * ![Disabled](https://alphatab.net/img/reference/property/beattextaslyrics-disabled.png)
             */
            this.beatTextAsLyrics = false;
        }
    }

    /**
     * Lists all modes how alphaTab can scroll the container during playback.
     */
    exports.ScrollMode = void 0;
    (function (ScrollMode) {
        /**
         * Do not scroll automatically
         */
        ScrollMode[ScrollMode["Off"] = 0] = "Off";
        /**
         * Scrolling happens as soon the offsets of the cursors change.
         */
        ScrollMode[ScrollMode["Continuous"] = 1] = "Continuous";
        /**
         * Scrolling happens as soon the cursors exceed the displayed range.
         */
        ScrollMode[ScrollMode["OffScreen"] = 2] = "OffScreen";
    })(exports.ScrollMode || (exports.ScrollMode = {}));
    /**
     * This object defines the details on how to generate the vibrato effects.
     * @json
     * @json_declaration
     */
    class VibratoPlaybackSettings {
        constructor() {
            /**
             * The wavelength of the note-wide vibrato in midi ticks.
             * @defaultValue `240`
             */
            this.noteWideLength = 240;
            /**
             * The amplitude for the note-wide vibrato in semitones.
             * @defaultValue `1`
             */
            this.noteWideAmplitude = 1;
            /**
             * The wavelength of the note-slight vibrato in midi ticks.
             * @defaultValue `360`
             */
            this.noteSlightLength = 360;
            /**
             * The amplitude for the note-slight vibrato in semitones.
             * @defaultValue `0.5`
             */
            this.noteSlightAmplitude = 0.5;
            /**
             * The wavelength of the beat-wide vibrato in midi ticks.
             * @defaultValue `480`
             */
            this.beatWideLength = 480;
            /**
             * The amplitude for the beat-wide vibrato in semitones.
             * @defaultValue `2`
             */
            this.beatWideAmplitude = 2;
            /**
             * The wavelength of the beat-slight vibrato in midi ticks.
             * @defaultValue `480`
             */
            this.beatSlightLength = 480;
            /**
             * The amplitude for the beat-slight vibrato in semitones.
             * @defaultValue `2`
             */
            this.beatSlightAmplitude = 2;
        }
    }
    /**
     * This object defines the details on how to generate the slide effects.
     * @json
     * @json_declaration
     */
    class SlidePlaybackSettings {
        constructor() {
            /**
             * Gets or sets 1/4 tones (bend value) offset that
             * simple slides like slide-out-below or slide-in-above use.
             * @defaultValue `6`
             */
            this.simpleSlidePitchOffset = 6;
            /**
             * The percentage which the simple slides should take up
             * from the whole note. for "slide into" effects the slide will take place
             * from time 0 where the note is plucked to 25% of the overall note duration.
             * For "slide out" effects the slide will start 75% and finish at 100% of the overall
             * note duration.
             * @defaultValue `0.25`
             */
            this.simpleSlideDurationRatio = 0.25;
            /**
             * The percentage which the legato and shift slides should take up
             * from the whole note. For a value 0.5 the sliding will start at 50% of the overall note duration
             * and finish at 100%
             * @defaultValue `0.5`
             */
            this.shiftSlideDurationRatio = 0.5;
        }
    }
    /**
     * Lists the different modes how alphaTab will play the generated audio.
     * @target web
     */
    exports.PlayerOutputMode = void 0;
    (function (PlayerOutputMode) {
        /**
         * If audio worklets are available in the browser, they will be used for playing the audio.
         * It will fallback to the ScriptProcessor output if unavailable.
         */
        PlayerOutputMode[PlayerOutputMode["WebAudioAudioWorklets"] = 0] = "WebAudioAudioWorklets";
        /**
         * Uses the legacy ScriptProcessor output which might perform worse.
         */
        PlayerOutputMode[PlayerOutputMode["WebAudioScriptProcessor"] = 1] = "WebAudioScriptProcessor";
    })(exports.PlayerOutputMode || (exports.PlayerOutputMode = {}));
    /**
     * Lists the different modes how the internal alphaTab player (and related cursor behavior) is working.
     */
    exports.PlayerMode = void 0;
    (function (PlayerMode) {
        /**
         * The player functionality is fully disabled.
         */
        PlayerMode[PlayerMode["Disabled"] = 0] = "Disabled";
        /**
         * The player functionality is enabled.
         * If the loaded file provides a backing track, it is used for playback.
         * If no backing track is provided, the midi synthesizer is used.
         */
        PlayerMode[PlayerMode["EnabledAutomatic"] = 1] = "EnabledAutomatic";
        /**
         * The player functionality is enabled and the synthesizer is used (even if a backing track is embedded in the file).
         */
        PlayerMode[PlayerMode["EnabledSynthesizer"] = 2] = "EnabledSynthesizer";
        /**
         * The player functionality is enabled. If the input data model has no backing track configured, the player might not work as expected (as playback completes instantly).
         */
        PlayerMode[PlayerMode["EnabledBackingTrack"] = 3] = "EnabledBackingTrack";
        /**
         * The player functionality is enabled and an external audio/video source is used as time axis.
         * The related player APIs need to be used to update the current position of the external audio source within alphaTab.
         */
        PlayerMode[PlayerMode["EnabledExternalMedia"] = 4] = "EnabledExternalMedia";
    })(exports.PlayerMode || (exports.PlayerMode = {}));
    /**
     * The player settings control how the audio playback and UI is behaving.
     * @json
     * @json_declaration
     */
    class PlayerSettings {
        constructor() {
            /**
             * The sound font file to load for the player.
             * @target web
             * @since 0.9.6
             * @defaultValue `null`
             * @category Player - JavaScript Specific
             * @remarks
             * When the player is enabled the soundfont from this URL will be loaded automatically after the player is ready.
             */
            this.soundFont = null;
            /**
             * The element to apply the scrolling on.
             * @target web
             * @json_read_only
             * @json_raw
             * @since 0.9.6
             * @defaultValue `html,body`
             * @category Player - JavaScript Specific
             * @remarks
             * When the player is active, it by default automatically scrolls the browser window to the currently played bar. This setting
             * defines which elements should be scrolled to bring the played bar into the view port. By default scrolling happens on the `html,body`
             * selector.
             */
            this.scrollElement = 'html,body';
            /**
             * The mode used for playing audio samples
             * @target web
             * @since 1.3.0
             * @defaultValue `PlayerOutputMode.WebAudioAudioWorklets`
             * @category Player - JavaScript Specific
             * @remarks
             * Controls how alphaTab will play the audio samples in the browser.
             */
            this.outputMode = exports.PlayerOutputMode.WebAudioAudioWorklets;
            /**
             * Whether the player should be enabled.
             * @since 0.9.6
             * @defaultValue `false`
             * @category Player
             * @deprecated Use {@link playerMode} instead.
             * @remarks
             * This setting configures whether the player feature is enabled or not. Depending on the platform enabling the player needs some additional actions of the developer.
             * For the JavaScript version the [player.soundFont](/docs/reference/settings/player/soundfont) property must be set to the URL of the sound font that should be used or it must be loaded manually via API.
             * For .net manually the soundfont must be loaded.
             *
             * AlphaTab does not ship a default UI for the player. The API must be hooked up to some UI controls to allow the user to interact with the player.
             */
            this.enablePlayer = false;
            /**
             * Whether the player should be enabled and which mode it should use.
             * @since 1.6.0
             * @defaultValue `PlayerMode.Disabled`
             * @category Player
             * @remarks
             * This setting configures whether the player feature is enabled or not. Depending on the platform enabling the player needs some additional actions of the developer.
             *
             * **Synthesizer**
             *
             * If the synthesizer is used (via {@link PlayerMode.EnabledAutomatic} or {@link PlayerMode.EnabledSynthesizer}) a sound font is needed so that the midi synthesizer can produce the audio samples.
             *
             * For the JavaScript version the [player.soundFont](/docs/reference/settings/player/soundfont) property must be set to the URL of the sound font that should be used or it must be loaded manually via API.
             * For .net manually the soundfont must be loaded.
             *
             * **Backing Track**
             *
             * For a built-in backing track of the input file no additional data needs to be loaded (assuming everything is filled via the input file).
             * Otherwise the `score.backingTrack` needs to be filled before loading and the related sync points need to be configured.
             *
             * **External Media**
             *
             * For synchronizing alphaTab with an external media no data needs to be loaded into alphaTab. The configured sync points on the MasterBars are used
             * as reference to synchronize the external media with the internal time axis. Then the related APIs on the AlphaTabApi object need to be used
             * to update the playback state and exterrnal audio position during playback.
             *
             * **User Interface**
             *
             * AlphaTab does not ship a default UI for the player. The API must be hooked up to some UI controls to allow the user to interact with the player.
             */
            this.playerMode = exports.PlayerMode.Disabled;
            /**
             * Whether playback cursors should be displayed.
             * @since 0.9.6
             * @defaultValue `true` (if player is not disabled)
             * @category Player
             * @remarks
             * This setting configures whether the playback cursors are shown or not. In case a developer decides to built an own cursor system the default one can be disabled with this setting. Enabling the cursor also requires the player to be active.
             */
            this.enableCursor = true;
            /**
             * Whether the beat cursor should be animated or just ticking.
             * @since 1.2.3
             * @defaultValue `true`
             * @category Player
             * @remarks
             * This setting configures whether the beat cursor is animated smoothly or whether it is ticking from beat to beat.
             * The animation of the cursor might not be available on all targets so it might not have any effect.
             */
            this.enableAnimatedBeatCursor = true;
            /**
             * Whether the notation elements of the currently played beat should be highlighted.
             * @since 1.2.3
             * @defaultValue `true`
             * @category Player
             * @remarks
             * This setting configures whether the note elements are highlighted during playback.
             * The highlighting of elements might not be available on all targets and render engine, so it might not have any effect.
             */
            this.enableElementHighlighting = true;
            /**
             * Whether the default user interaction behavior should be active or not.
             * @since 0.9.7
             * @defaultValue `true`
             * @category Player
             * @remarks
             * This setting configures whether alphaTab provides the default user interaction features like selection of the playback range and "seek on click".
             * By default users can select the desired playback range with the mouse and also jump to individual beats by click. This behavior can be contolled with this setting.
             */
            this.enableUserInteraction = true;
            /**
             * The X-offset to add when scrolling.
             * @since 0.9.6
             * @defaultValue `0`
             * @category Player
             * @remarks
             * When alphaTab does an auto-scrolling to the displayed bar, it will try to align the view port to the displayed bar. If due to
             * some layout specifics or for aesthetics a small padding is needed, this setting allows an additional X-offset that is added to the
             * scroll position.
             */
            this.scrollOffsetX = 0;
            /**
             * The Y-offset to add when scrolling.
             * @since 0.9.6
             * @defaultValue `0`
             * @category Player
             * @remarks
             * When alphaTab does an auto-scrolling to the displayed bar, it will try to align the view port to the displayed bar. If due to
             * some layout specifics or for aesthetics a small padding is needed, this setting allows an additional Y-offset that is added to the
             * scroll position.
             */
            this.scrollOffsetY = 0;
            /**
             * The mode how to scroll.
             * @since 0.9.6
             * @defaultValue `ScrollMode.Continuous`
             * @category Player
             * @remarks
             * This setting controls how alphaTab behaves for scrolling.
             */
            this.scrollMode = exports.ScrollMode.Continuous;
            /**
             * How fast the scrolling to the new position should happen.
             * @since 0.9.6
             * @defaultValue `300`
             * @category Player
             * @remarks
             * If possible from the platform, alphaTab will try to do a smooth scrolling to the played bar.
             * This setting defines the speed of scrolling in milliseconds.
             * Note that {@link nativeBrowserSmoothScroll} must be set to `false` for this to have an effect.
             */
            this.scrollSpeed = 300;
            /**
             * Whether the native browser smooth scroll mechanism should be used over a custom animation.
             * @target web
             * @since 1.2.3
             * @defaultValue `true`
             * @category Player
             * @remarks
             * This setting configures whether the [native browser feature](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
             * for smooth scrolling should be used over a custom animation.
             * If this setting is enabled, options like {@link scrollSpeed} will not have an effect anymore.
             */
            this.nativeBrowserSmoothScroll = true;
            /**
             * The bend duration in milliseconds for songbook bends.
             * @since 0.9.6
             * @defaultValue `75`
             * @category Player
             * @remarks
             * If the display mode `songbook` is enabled, this has an effect on the way bends are played. For songbook bends the bend is done very quickly at the end or start of the beat.
             * This setting defines the play duration for those bends in milliseconds. This duration is in milliseconds unlike some other settings which are in midi ticks. The reason is that on songbook bends,
             * the bends should always be played in the same speed, regardless of the song tempo. Midi ticks are tempo dependent.
             */
            this.songBookBendDuration = 75;
            /**
             * The duration of whammy dips in milliseconds for songbook whammys.
             * @since 0.9.6
             * @defaultValue `150`
             * @category Player
             * @remarks
             * If the display mode `songbook` is enabled, this has an effect on the way whammy dips are played. For songbook dips the whammy is pressed very quickly at the start of the beat.
             * This setting defines the play duration for those whammy bars in milliseconds. This duration is in milliseconds unlike some other settings which are in midi ticks. The reason is that on songbook dips,
             * the whammy should always be pressed in the same speed, regardless of the song tempo. Midi ticks are tempo dependent.
             */
            this.songBookDipDuration = 150;
            /**
             * The Vibrato settings allow control how the different vibrato types are generated for audio.
             * @json_partial_names
             * @since 0.9.6
             * @category Player
             * @remarks
             * AlphaTab supports 4 types of vibratos, for each vibrato the amplitude and the wavelength can be configured. The amplitude controls how many semitones
             * the vibrato changes the pitch up and down while playback. The wavelength controls how many midi ticks it will take to complete one up and down vibrato.
             * The 4 vibrato types are:
             *
             * 1. Beat Slight - A fast vibrato on the whole beat. This vibrato is usually done with the whammy bar.
             * 2. Beat Wide - A slow vibrato on the whole beat. This vibrato is usually done with the whammy bar.
             * 3. Note Slight - A fast vibrato on a single note. This vibrato is usually done with the finger on the fretboard.
             * 4. Note Wide - A slow vibrato on a single note. This vibrato is usually done with the finger on the fretboard.
             */
            this.vibrato = new VibratoPlaybackSettings();
            /**
             * The slide settings allow control how the different slide types are generated for audio.
             * @json_partial_names
             * @since 0.9.6
             * @domWildcard
             * @category Player
             * @remarks
             * AlphaTab supports various types of slides which can be grouped into 3 types:
             *
             * * Shift Slides
             * * Legato Slides
             *
             *
             * * Slide into from below
             * * Slide into from above
             * * Slide out to below
             * * Slide out to above
             *
             *
             * * Pick Slide out to above
             * * Pick Slide out to below
             *
             * For the first 2 groups the audio generation can be adapted. For the pick slide the audio generation cannot be adapted
             * as there is no mechanism yet in alphaTab to play pick slides to make them sound real.
             *
             * For the first group only the duration or start point of the slide can be configured while for the second group
             * the duration/start-point and the pitch offset can be configured.
             */
            this.slide = new SlidePlaybackSettings();
            /**
             * Whether the triplet feel should be played or only displayed.
             * @since 0.9.6
             * @defaultValue `true`
             * @category Player
             * @remarks
             * If this setting is enabled alphaTab will play the triplet feels accordingly, if it is disabled the triplet feel is only displayed but not played.
             */
            this.playTripletFeel = true;
            /**
             * The number of milliseconds the player should buffer.
             * @since 1.2.3
             * @defaultValue `500`
             * @category Player
             * @remarks
             * Gets or sets how many milliseconds of audio samples should be buffered in total.
             *
             * * Larger buffers cause a delay from when audio settings like volumes will be applied.
             * * Smaller buffers can cause audio crackling due to constant buffering that is happening.
             *
             * This buffer size can be changed whenever needed.
             */
            this.bufferTimeInMilliseconds = 500;
        }
    }

    class CoreSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => CoreSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            /*@target web*/
            o.set("scriptfile", obj.scriptFile);
            /*@target web*/
            o.set("fontdirectory", obj.fontDirectory);
            /*@target web*/
            if (obj.smuflFontSources !== null) {
                const m = new Map();
                o.set("smuflfontsources", m);
                for (const [k, v] of obj.smuflFontSources) {
                    m.set(k.toString(), v);
                }
            }
            /*@target web*/
            o.set("file", obj.file);
            /*@target web*/
            o.set("tex", obj.tex);
            /*@target web*/
            o.set("tracks", obj.tracks);
            o.set("enablelazyloading", obj.enableLazyLoading);
            o.set("engine", obj.engine);
            o.set("loglevel", obj.logLevel);
            o.set("useworkers", obj.useWorkers);
            o.set("includenotebounds", obj.includeNoteBounds);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                /*@target web*/
                case "scriptfile":
                    obj.scriptFile = v;
                    return true;
                /*@target web*/
                case "fontdirectory":
                    obj.fontDirectory = v;
                    return true;
                /*@target web*/
                case "smuflfontsources":
                    obj.smuflFontSources = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.smuflFontSources.set(JsonHelper.parseEnum(k, exports.FontFileFormat), v);
                    });
                    return true;
                /*@target web*/
                case "file":
                    obj.file = v;
                    return true;
                /*@target web*/
                case "tex":
                    obj.tex = v;
                    return true;
                /*@target web*/
                case "tracks":
                    obj.tracks = v;
                    return true;
                case "enablelazyloading":
                    obj.enableLazyLoading = v;
                    return true;
                case "engine":
                    obj.engine = v;
                    return true;
                case "loglevel":
                    obj.logLevel = JsonHelper.parseEnum(v, exports.LogLevel);
                    return true;
                case "useworkers":
                    obj.useWorkers = v;
                    return true;
                case "includenotebounds":
                    obj.includeNoteBounds = v;
                    return true;
            }
            return false;
        }
    }

    class RenderingResourcesSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => RenderingResourcesSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("smuflfont", Font.toJson(obj.smuflFont));
            o.set("copyrightfont", Font.toJson(obj.copyrightFont));
            o.set("titlefont", Font.toJson(obj.titleFont));
            o.set("subtitlefont", Font.toJson(obj.subTitleFont));
            o.set("wordsfont", Font.toJson(obj.wordsFont));
            o.set("effectfont", Font.toJson(obj.effectFont));
            o.set("timerfont", Font.toJson(obj.timerFont));
            o.set("directionsfont", Font.toJson(obj.directionsFont));
            o.set("fretboardnumberfont", Font.toJson(obj.fretboardNumberFont));
            o.set("numberednotationfont", Font.toJson(obj.numberedNotationFont));
            o.set("numberednotationgracefont", Font.toJson(obj.numberedNotationGraceFont));
            o.set("tablaturefont", Font.toJson(obj.tablatureFont));
            o.set("gracefont", Font.toJson(obj.graceFont));
            o.set("stafflinecolor", Color.toJson(obj.staffLineColor));
            o.set("barseparatorcolor", Color.toJson(obj.barSeparatorColor));
            o.set("barnumberfont", Font.toJson(obj.barNumberFont));
            o.set("barnumbercolor", Color.toJson(obj.barNumberColor));
            o.set("fingeringfont", Font.toJson(obj.fingeringFont));
            o.set("inlinefingeringfont", Font.toJson(obj.inlineFingeringFont));
            o.set("markerfont", Font.toJson(obj.markerFont));
            o.set("mainglyphcolor", Color.toJson(obj.mainGlyphColor));
            o.set("secondaryglyphcolor", Color.toJson(obj.secondaryGlyphColor));
            o.set("scoreinfocolor", Color.toJson(obj.scoreInfoColor));
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "smuflfont":
                    obj.smuflFont = Font.fromJson(v);
                    return true;
                case "copyrightfont":
                    obj.copyrightFont = Font.fromJson(v);
                    return true;
                case "titlefont":
                    obj.titleFont = Font.fromJson(v);
                    return true;
                case "subtitlefont":
                    obj.subTitleFont = Font.fromJson(v);
                    return true;
                case "wordsfont":
                    obj.wordsFont = Font.fromJson(v);
                    return true;
                case "effectfont":
                    obj.effectFont = Font.fromJson(v);
                    return true;
                case "timerfont":
                    obj.timerFont = Font.fromJson(v);
                    return true;
                case "directionsfont":
                    obj.directionsFont = Font.fromJson(v);
                    return true;
                case "fretboardnumberfont":
                    obj.fretboardNumberFont = Font.fromJson(v);
                    return true;
                case "numberednotationfont":
                    obj.numberedNotationFont = Font.fromJson(v);
                    return true;
                case "numberednotationgracefont":
                    obj.numberedNotationGraceFont = Font.fromJson(v);
                    return true;
                case "tablaturefont":
                    obj.tablatureFont = Font.fromJson(v);
                    return true;
                case "gracefont":
                    obj.graceFont = Font.fromJson(v);
                    return true;
                case "stafflinecolor":
                    obj.staffLineColor = Color.fromJson(v);
                    return true;
                case "barseparatorcolor":
                    obj.barSeparatorColor = Color.fromJson(v);
                    return true;
                case "barnumberfont":
                    obj.barNumberFont = Font.fromJson(v);
                    return true;
                case "barnumbercolor":
                    obj.barNumberColor = Color.fromJson(v);
                    return true;
                case "fingeringfont":
                    obj.fingeringFont = Font.fromJson(v);
                    return true;
                case "inlinefingeringfont":
                    obj.inlineFingeringFont = Font.fromJson(v);
                    return true;
                case "markerfont":
                    obj.markerFont = Font.fromJson(v);
                    return true;
                case "mainglyphcolor":
                    obj.mainGlyphColor = Color.fromJson(v);
                    return true;
                case "secondaryglyphcolor":
                    obj.secondaryGlyphColor = Color.fromJson(v);
                    return true;
                case "scoreinfocolor":
                    obj.scoreInfoColor = Color.fromJson(v);
                    return true;
            }
            return false;
        }
    }

    class DisplaySettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => DisplaySettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("scale", obj.scale);
            o.set("stretchforce", obj.stretchForce);
            o.set("layoutmode", obj.layoutMode);
            o.set("staveprofile", obj.staveProfile);
            o.set("barsperrow", obj.barsPerRow);
            o.set("startbar", obj.startBar);
            o.set("barcount", obj.barCount);
            o.set("barcountperpartial", obj.barCountPerPartial);
            o.set("justifylastsystem", obj.justifyLastSystem);
            o.set("resources", RenderingResourcesSerializer.toJson(obj.resources));
            o.set("padding", obj.padding);
            o.set("firstsystempaddingtop", obj.firstSystemPaddingTop);
            o.set("systempaddingtop", obj.systemPaddingTop);
            o.set("systempaddingbottom", obj.systemPaddingBottom);
            o.set("lastsystempaddingbottom", obj.lastSystemPaddingBottom);
            o.set("systemlabelpaddingleft", obj.systemLabelPaddingLeft);
            o.set("systemlabelpaddingright", obj.systemLabelPaddingRight);
            o.set("accoladebarpaddingright", obj.accoladeBarPaddingRight);
            o.set("notationstaffpaddingtop", obj.notationStaffPaddingTop);
            o.set("notationstaffpaddingbottom", obj.notationStaffPaddingBottom);
            o.set("effectstaffpaddingtop", obj.effectStaffPaddingTop);
            o.set("effectstaffpaddingbottom", obj.effectStaffPaddingBottom);
            o.set("firststaffpaddingleft", obj.firstStaffPaddingLeft);
            o.set("staffpaddingleft", obj.staffPaddingLeft);
            o.set("systemslayoutmode", obj.systemsLayoutMode);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "scale":
                    obj.scale = v;
                    return true;
                case "stretchforce":
                    obj.stretchForce = v;
                    return true;
                case "layoutmode":
                    obj.layoutMode = JsonHelper.parseEnum(v, exports.LayoutMode);
                    return true;
                case "staveprofile":
                    obj.staveProfile = JsonHelper.parseEnum(v, exports.StaveProfile);
                    return true;
                case "barsperrow":
                    obj.barsPerRow = v;
                    return true;
                case "startbar":
                    obj.startBar = v;
                    return true;
                case "barcount":
                    obj.barCount = v;
                    return true;
                case "barcountperpartial":
                    obj.barCountPerPartial = v;
                    return true;
                case "justifylastsystem":
                    obj.justifyLastSystem = v;
                    return true;
                case "padding":
                    obj.padding = v;
                    return true;
                case "firstsystempaddingtop":
                    obj.firstSystemPaddingTop = v;
                    return true;
                case "systempaddingtop":
                    obj.systemPaddingTop = v;
                    return true;
                case "systempaddingbottom":
                    obj.systemPaddingBottom = v;
                    return true;
                case "lastsystempaddingbottom":
                    obj.lastSystemPaddingBottom = v;
                    return true;
                case "systemlabelpaddingleft":
                    obj.systemLabelPaddingLeft = v;
                    return true;
                case "systemlabelpaddingright":
                    obj.systemLabelPaddingRight = v;
                    return true;
                case "accoladebarpaddingright":
                    obj.accoladeBarPaddingRight = v;
                    return true;
                case "notationstaffpaddingtop":
                    obj.notationStaffPaddingTop = v;
                    return true;
                case "notationstaffpaddingbottom":
                    obj.notationStaffPaddingBottom = v;
                    return true;
                case "effectstaffpaddingtop":
                    obj.effectStaffPaddingTop = v;
                    return true;
                case "effectstaffpaddingbottom":
                    obj.effectStaffPaddingBottom = v;
                    return true;
                case "firststaffpaddingleft":
                    obj.firstStaffPaddingLeft = v;
                    return true;
                case "staffpaddingleft":
                    obj.staffPaddingLeft = v;
                    return true;
                case "systemslayoutmode":
                    obj.systemsLayoutMode = JsonHelper.parseEnum(v, exports.SystemsLayoutMode);
                    return true;
            }
            if (["resources"].indexOf(property) >= 0) {
                RenderingResourcesSerializer.fromJson(obj.resources, v);
                return true;
            }
            for (const c of ["resources"]) {
                if (property.indexOf(c) === 0) {
                    if (RenderingResourcesSerializer.setProperty(obj.resources, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    class NotationSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => NotationSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("notationmode", obj.notationMode);
            o.set("fingeringmode", obj.fingeringMode);
            {
                const m = new Map();
                o.set("elements", m);
                for (const [k, v] of obj.elements) {
                    m.set(k.toString(), v);
                }
            }
            o.set("rhythmmode", obj.rhythmMode);
            o.set("rhythmheight", obj.rhythmHeight);
            o.set("transpositionpitches", obj.transpositionPitches);
            o.set("displaytranspositionpitches", obj.displayTranspositionPitches);
            o.set("smallgracetabnotes", obj.smallGraceTabNotes);
            o.set("extendbendarrowsontiednotes", obj.extendBendArrowsOnTiedNotes);
            o.set("extendlineeffectstobeatend", obj.extendLineEffectsToBeatEnd);
            o.set("slurheight", obj.slurHeight);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "notationmode":
                    obj.notationMode = JsonHelper.parseEnum(v, exports.NotationMode);
                    return true;
                case "fingeringmode":
                    obj.fingeringMode = JsonHelper.parseEnum(v, exports.FingeringMode);
                    return true;
                case "elements":
                    obj.elements = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.elements.set(JsonHelper.parseEnum(k, exports.NotationElement), v);
                    });
                    return true;
                case "rhythmmode":
                    obj.rhythmMode = JsonHelper.parseEnum(v, exports.TabRhythmMode);
                    return true;
                case "rhythmheight":
                    obj.rhythmHeight = v;
                    return true;
                case "transpositionpitches":
                    obj.transpositionPitches = v;
                    return true;
                case "displaytranspositionpitches":
                    obj.displayTranspositionPitches = v;
                    return true;
                case "smallgracetabnotes":
                    obj.smallGraceTabNotes = v;
                    return true;
                case "extendbendarrowsontiednotes":
                    obj.extendBendArrowsOnTiedNotes = v;
                    return true;
                case "extendlineeffectstobeatend":
                    obj.extendLineEffectsToBeatEnd = v;
                    return true;
                case "slurheight":
                    obj.slurHeight = v;
                    return true;
            }
            return false;
        }
    }

    class ImporterSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => ImporterSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("encoding", obj.encoding);
            o.set("mergepartgroupsinmusicxml", obj.mergePartGroupsInMusicXml);
            o.set("beattextaslyrics", obj.beatTextAsLyrics);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "encoding":
                    obj.encoding = v;
                    return true;
                case "mergepartgroupsinmusicxml":
                    obj.mergePartGroupsInMusicXml = v;
                    return true;
                case "beattextaslyrics":
                    obj.beatTextAsLyrics = v;
                    return true;
            }
            return false;
        }
    }

    class VibratoPlaybackSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => VibratoPlaybackSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("notewidelength", obj.noteWideLength);
            o.set("notewideamplitude", obj.noteWideAmplitude);
            o.set("noteslightlength", obj.noteSlightLength);
            o.set("noteslightamplitude", obj.noteSlightAmplitude);
            o.set("beatwidelength", obj.beatWideLength);
            o.set("beatwideamplitude", obj.beatWideAmplitude);
            o.set("beatslightlength", obj.beatSlightLength);
            o.set("beatslightamplitude", obj.beatSlightAmplitude);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "notewidelength":
                    obj.noteWideLength = v;
                    return true;
                case "notewideamplitude":
                    obj.noteWideAmplitude = v;
                    return true;
                case "noteslightlength":
                    obj.noteSlightLength = v;
                    return true;
                case "noteslightamplitude":
                    obj.noteSlightAmplitude = v;
                    return true;
                case "beatwidelength":
                    obj.beatWideLength = v;
                    return true;
                case "beatwideamplitude":
                    obj.beatWideAmplitude = v;
                    return true;
                case "beatslightlength":
                    obj.beatSlightLength = v;
                    return true;
                case "beatslightamplitude":
                    obj.beatSlightAmplitude = v;
                    return true;
            }
            return false;
        }
    }

    class SlidePlaybackSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => SlidePlaybackSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("simpleslidepitchoffset", obj.simpleSlidePitchOffset);
            o.set("simpleslidedurationratio", obj.simpleSlideDurationRatio);
            o.set("shiftslidedurationratio", obj.shiftSlideDurationRatio);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "simpleslidepitchoffset":
                    obj.simpleSlidePitchOffset = v;
                    return true;
                case "simpleslidedurationratio":
                    obj.simpleSlideDurationRatio = v;
                    return true;
                case "shiftslidedurationratio":
                    obj.shiftSlideDurationRatio = v;
                    return true;
            }
            return false;
        }
    }

    class PlayerSettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => PlayerSettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            /*@target web*/
            o.set("soundfont", obj.soundFont);
            /*@target web*/
            o.set("outputmode", obj.outputMode);
            o.set("enableplayer", obj.enablePlayer);
            o.set("playermode", obj.playerMode);
            o.set("enablecursor", obj.enableCursor);
            o.set("enableanimatedbeatcursor", obj.enableAnimatedBeatCursor);
            o.set("enableelementhighlighting", obj.enableElementHighlighting);
            o.set("enableuserinteraction", obj.enableUserInteraction);
            o.set("scrolloffsetx", obj.scrollOffsetX);
            o.set("scrolloffsety", obj.scrollOffsetY);
            o.set("scrollmode", obj.scrollMode);
            o.set("scrollspeed", obj.scrollSpeed);
            /*@target web*/
            o.set("nativebrowsersmoothscroll", obj.nativeBrowserSmoothScroll);
            o.set("songbookbendduration", obj.songBookBendDuration);
            o.set("songbookdipduration", obj.songBookDipDuration);
            o.set("vibrato", VibratoPlaybackSettingsSerializer.toJson(obj.vibrato));
            o.set("slide", SlidePlaybackSettingsSerializer.toJson(obj.slide));
            o.set("playtripletfeel", obj.playTripletFeel);
            o.set("buffertimeinmilliseconds", obj.bufferTimeInMilliseconds);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                /*@target web*/
                case "soundfont":
                    obj.soundFont = v;
                    return true;
                /*@target web*/
                case "scrollelement":
                    obj.scrollElement = v;
                    return true;
                /*@target web*/
                case "outputmode":
                    obj.outputMode = JsonHelper.parseEnum(v, exports.PlayerOutputMode);
                    return true;
                case "enableplayer":
                    obj.enablePlayer = v;
                    return true;
                case "playermode":
                    obj.playerMode = JsonHelper.parseEnum(v, exports.PlayerMode);
                    return true;
                case "enablecursor":
                    obj.enableCursor = v;
                    return true;
                case "enableanimatedbeatcursor":
                    obj.enableAnimatedBeatCursor = v;
                    return true;
                case "enableelementhighlighting":
                    obj.enableElementHighlighting = v;
                    return true;
                case "enableuserinteraction":
                    obj.enableUserInteraction = v;
                    return true;
                case "scrolloffsetx":
                    obj.scrollOffsetX = v;
                    return true;
                case "scrolloffsety":
                    obj.scrollOffsetY = v;
                    return true;
                case "scrollmode":
                    obj.scrollMode = JsonHelper.parseEnum(v, exports.ScrollMode);
                    return true;
                case "scrollspeed":
                    obj.scrollSpeed = v;
                    return true;
                /*@target web*/
                case "nativebrowsersmoothscroll":
                    obj.nativeBrowserSmoothScroll = v;
                    return true;
                case "songbookbendduration":
                    obj.songBookBendDuration = v;
                    return true;
                case "songbookdipduration":
                    obj.songBookDipDuration = v;
                    return true;
                case "playtripletfeel":
                    obj.playTripletFeel = v;
                    return true;
                case "buffertimeinmilliseconds":
                    obj.bufferTimeInMilliseconds = v;
                    return true;
            }
            if (["vibrato"].indexOf(property) >= 0) {
                VibratoPlaybackSettingsSerializer.fromJson(obj.vibrato, v);
                return true;
            }
            for (const c of ["vibrato"]) {
                if (property.indexOf(c) === 0) {
                    if (VibratoPlaybackSettingsSerializer.setProperty(obj.vibrato, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            if (["slide"].indexOf(property) >= 0) {
                SlidePlaybackSettingsSerializer.fromJson(obj.slide, v);
                return true;
            }
            for (const c of ["slide"]) {
                if (property.indexOf(c) === 0) {
                    if (SlidePlaybackSettingsSerializer.setProperty(obj.slide, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    class SettingsSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => SettingsSerializer.setProperty(obj, k.toLowerCase(), v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("core", CoreSettingsSerializer.toJson(obj.core));
            o.set("display", DisplaySettingsSerializer.toJson(obj.display));
            o.set("notation", NotationSettingsSerializer.toJson(obj.notation));
            o.set("importer", ImporterSettingsSerializer.toJson(obj.importer));
            o.set("player", PlayerSettingsSerializer.toJson(obj.player));
            return o;
        }
        static setProperty(obj, property, v) {
            if (["core", ""].indexOf(property) >= 0) {
                CoreSettingsSerializer.fromJson(obj.core, v);
                return true;
            }
            for (const c of ["core", ""]) {
                if (property.indexOf(c) === 0) {
                    if (CoreSettingsSerializer.setProperty(obj.core, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            if (["display", ""].indexOf(property) >= 0) {
                DisplaySettingsSerializer.fromJson(obj.display, v);
                return true;
            }
            for (const c of ["display", ""]) {
                if (property.indexOf(c) === 0) {
                    if (DisplaySettingsSerializer.setProperty(obj.display, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            if (["notation"].indexOf(property) >= 0) {
                NotationSettingsSerializer.fromJson(obj.notation, v);
                return true;
            }
            for (const c of ["notation"]) {
                if (property.indexOf(c) === 0) {
                    if (NotationSettingsSerializer.setProperty(obj.notation, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            if (["importer"].indexOf(property) >= 0) {
                ImporterSettingsSerializer.fromJson(obj.importer, v);
                return true;
            }
            for (const c of ["importer"]) {
                if (property.indexOf(c) === 0) {
                    if (ImporterSettingsSerializer.setProperty(obj.importer, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            if (["player"].indexOf(property) >= 0) {
                PlayerSettingsSerializer.fromJson(obj.player, v);
                return true;
            }
            for (const c of ["player"]) {
                if (property.indexOf(c) === 0) {
                    if (PlayerSettingsSerializer.setProperty(obj.player, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    /**
     * This public class contains instance specific settings for alphaTab
     * @json
     * @json_declaration
     * @public_api
     */
    class Settings {
        constructor() {
            /**
             * The core settings control the general behavior of alphatab like
             * what modules are active.
             * @json_on_parent
             * @json_partial_names
             */
            this.core = new CoreSettings();
            /**
             * The display settings control how the general layout and display of alphaTab is done.
             * @json_on_parent
             * @json_partial_names
             */
            this.display = new DisplaySettings();
            /**
             * The notation settings control how various music notation elements are shown and behaving.
             * @json_partial_names
             */
            this.notation = new NotationSettings();
            /**
             * All settings related to importers that decode file formats.
             * @json_partial_names
             */
            this.importer = new ImporterSettings();
            /**
             * Contains all player related settings
             * @json_partial_names
             */
            this.player = new PlayerSettings();
        }
        setSongBookModeSettings() {
            this.notation.notationMode = exports.NotationMode.SongBook;
            this.notation.smallGraceTabNotes = false;
            this.notation.fingeringMode = exports.FingeringMode.SingleNoteEffectBand;
            this.notation.extendBendArrowsOnTiedNotes = false;
            this.notation.elements.set(exports.NotationElement.ParenthesisOnTiedBends, false);
            this.notation.elements.set(exports.NotationElement.TabNotesOnTiedBends, false);
            this.notation.elements.set(exports.NotationElement.ZerosOnDiveWhammys, true);
        }
        static get songBook() {
            const settings = new Settings();
            settings.setSongBookModeSettings();
            return settings;
        }
        /**
         * @target web
         */
        fillFromJson(json) {
            SettingsSerializer.fromJson(this, json);
        }
    }

    class SectionSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => SectionSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("marker", obj.marker);
            o.set("text", obj.text);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "marker":
                    obj.marker = v;
                    return true;
                case "text":
                    obj.text = v;
                    return true;
            }
            return false;
        }
    }

    class SyncPointDataSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => SyncPointDataSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("baroccurence", obj.barOccurence);
            o.set("millisecondoffset", obj.millisecondOffset);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "baroccurence":
                    obj.barOccurence = v;
                    return true;
                case "millisecondoffset":
                    obj.millisecondOffset = v;
                    return true;
            }
            return false;
        }
    }

    class AutomationSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => AutomationSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("islinear", obj.isLinear);
            o.set("type", obj.type);
            o.set("value", obj.value);
            if (obj.syncPointValue) {
                o.set("syncpointvalue", SyncPointDataSerializer.toJson(obj.syncPointValue));
            }
            o.set("ratioposition", obj.ratioPosition);
            o.set("text", obj.text);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "islinear":
                    obj.isLinear = v;
                    return true;
                case "type":
                    obj.type = JsonHelper.parseEnum(v, AutomationType);
                    return true;
                case "value":
                    obj.value = v;
                    return true;
                case "syncpointvalue":
                    if (v) {
                        obj.syncPointValue = new SyncPointData();
                        SyncPointDataSerializer.fromJson(obj.syncPointValue, v);
                    }
                    else {
                        obj.syncPointValue = undefined;
                    }
                    return true;
                case "ratioposition":
                    obj.ratioPosition = v;
                    return true;
                case "text":
                    obj.text = v;
                    return true;
            }
            return false;
        }
    }

    class FermataSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => FermataSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("type", obj.type);
            o.set("length", obj.length);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "type":
                    obj.type = JsonHelper.parseEnum(v, FermataType);
                    return true;
                case "length":
                    obj.length = v;
                    return true;
            }
            return false;
        }
    }

    class MasterBarSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => MasterBarSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("alternateendings", obj.alternateEndings);
            o.set("isdoublebar", obj.isDoubleBar);
            o.set("isrepeatstart", obj.isRepeatStart);
            o.set("repeatcount", obj.repeatCount);
            o.set("timesignaturenumerator", obj.timeSignatureNumerator);
            o.set("timesignaturedenominator", obj.timeSignatureDenominator);
            o.set("timesignaturecommon", obj.timeSignatureCommon);
            o.set("isfreetime", obj.isFreeTime);
            o.set("tripletfeel", obj.tripletFeel);
            if (obj.section) {
                o.set("section", SectionSerializer.toJson(obj.section));
            }
            o.set("tempoautomations", obj.tempoAutomations.map(i => AutomationSerializer.toJson(i)));
            if (obj.syncPoints !== undefined) {
                o.set("syncpoints", obj.syncPoints?.map(i => AutomationSerializer.toJson(i)));
            }
            if (obj.fermata !== null) {
                const m = new Map();
                o.set("fermata", m);
                for (const [k, v] of obj.fermata) {
                    m.set(k.toString(), FermataSerializer.toJson(v));
                }
            }
            o.set("start", obj.start);
            o.set("isanacrusis", obj.isAnacrusis);
            o.set("displayscale", obj.displayScale);
            o.set("displaywidth", obj.displayWidth);
            if (obj.directions !== null) {
                const a = [];
                o.set("directions", a);
                for (const v of obj.directions) {
                    a.push(v);
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "alternateendings":
                    obj.alternateEndings = v;
                    return true;
                case "isdoublebar":
                    obj.isDoubleBar = v;
                    return true;
                case "isrepeatstart":
                    obj.isRepeatStart = v;
                    return true;
                case "repeatcount":
                    obj.repeatCount = v;
                    return true;
                case "timesignaturenumerator":
                    obj.timeSignatureNumerator = v;
                    return true;
                case "timesignaturedenominator":
                    obj.timeSignatureDenominator = v;
                    return true;
                case "timesignaturecommon":
                    obj.timeSignatureCommon = v;
                    return true;
                case "isfreetime":
                    obj.isFreeTime = v;
                    return true;
                case "tripletfeel":
                    obj.tripletFeel = JsonHelper.parseEnum(v, TripletFeel);
                    return true;
                case "section":
                    if (v) {
                        obj.section = new Section();
                        SectionSerializer.fromJson(obj.section, v);
                    }
                    else {
                        obj.section = null;
                    }
                    return true;
                case "tempoautomations":
                    obj.tempoAutomations = [];
                    for (const o of v) {
                        const i = new Automation();
                        AutomationSerializer.fromJson(i, o);
                        obj.tempoAutomations.push(i);
                    }
                    return true;
                case "syncpoints":
                    if (v) {
                        obj.syncPoints = [];
                        for (const o of v) {
                            const i = new Automation();
                            AutomationSerializer.fromJson(i, o);
                            obj.addSyncPoint(i);
                        }
                    }
                    return true;
                case "fermata":
                    obj.fermata = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        const i = new Fermata();
                        FermataSerializer.fromJson(i, v);
                        obj.addFermata(Number.parseInt(k), i);
                    });
                    return true;
                case "start":
                    obj.start = v;
                    return true;
                case "isanacrusis":
                    obj.isAnacrusis = v;
                    return true;
                case "displayscale":
                    obj.displayScale = v;
                    return true;
                case "displaywidth":
                    obj.displayWidth = v;
                    return true;
                case "directions":
                    for (const i of v) {
                        obj.addDirection(JsonHelper.parseEnum(i, Direction));
                    }
                    return true;
            }
            return false;
        }
    }

    class BendPointSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BendPointSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("offset", obj.offset);
            o.set("value", obj.value);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "offset":
                    obj.offset = v;
                    return true;
                case "value":
                    obj.value = v;
                    return true;
            }
            return false;
        }
    }

    class NoteStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => NoteStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("notehead", obj.noteHead);
            o.set("noteheadcenteronstem", obj.noteHeadCenterOnStem);
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "notehead":
                    obj.noteHead = JsonHelper.parseEnum(v, MusicFontSymbol);
                    return true;
                case "noteheadcenteronstem":
                    obj.noteHeadCenterOnStem = v;
                    return true;
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, NoteSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class NoteSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => NoteSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("id", obj.id);
            o.set("accentuated", obj.accentuated);
            o.set("bendtype", obj.bendType);
            o.set("bendstyle", obj.bendStyle);
            o.set("iscontinuedbend", obj.isContinuedBend);
            if (obj.bendPoints !== null) {
                o.set("bendpoints", obj.bendPoints?.map(i => BendPointSerializer.toJson(i)));
            }
            o.set("fret", obj.fret);
            o.set("string", obj.string);
            o.set("showstringnumber", obj.showStringNumber);
            o.set("octave", obj.octave);
            o.set("tone", obj.tone);
            o.set("percussionarticulation", obj.percussionArticulation);
            o.set("isvisible", obj.isVisible);
            o.set("islefthandtapped", obj.isLeftHandTapped);
            o.set("ishammerpullorigin", obj.isHammerPullOrigin);
            o.set("isslurdestination", obj.isSlurDestination);
            o.set("harmonictype", obj.harmonicType);
            o.set("harmonicvalue", obj.harmonicValue);
            o.set("isghost", obj.isGhost);
            o.set("isletring", obj.isLetRing);
            o.set("ispalmmute", obj.isPalmMute);
            o.set("isdead", obj.isDead);
            o.set("isstaccato", obj.isStaccato);
            o.set("slideintype", obj.slideInType);
            o.set("slideouttype", obj.slideOutType);
            o.set("vibrato", obj.vibrato);
            o.set("istiedestination", obj.isTieDestination);
            o.set("lefthandfinger", obj.leftHandFinger);
            o.set("righthandfinger", obj.rightHandFinger);
            o.set("trillvalue", obj.trillValue);
            o.set("trillspeed", obj.trillSpeed);
            o.set("durationpercent", obj.durationPercent);
            o.set("accidentalmode", obj.accidentalMode);
            o.set("dynamics", obj.dynamics);
            o.set("ornament", obj.ornament);
            if (obj.style) {
                o.set("style", NoteStyleSerializer.toJson(obj.style));
            }
            obj.toJson(o);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "id":
                    obj.id = v;
                    return true;
                case "accentuated":
                    obj.accentuated = JsonHelper.parseEnum(v, AccentuationType);
                    return true;
                case "bendtype":
                    obj.bendType = JsonHelper.parseEnum(v, BendType);
                    return true;
                case "bendstyle":
                    obj.bendStyle = JsonHelper.parseEnum(v, BendStyle);
                    return true;
                case "iscontinuedbend":
                    obj.isContinuedBend = v;
                    return true;
                case "bendpoints":
                    if (v) {
                        obj.bendPoints = [];
                        for (const o of v) {
                            const i = new BendPoint();
                            BendPointSerializer.fromJson(i, o);
                            obj.addBendPoint(i);
                        }
                    }
                    return true;
                case "fret":
                    obj.fret = v;
                    return true;
                case "string":
                    obj.string = v;
                    return true;
                case "showstringnumber":
                    obj.showStringNumber = v;
                    return true;
                case "octave":
                    obj.octave = v;
                    return true;
                case "tone":
                    obj.tone = v;
                    return true;
                case "percussionarticulation":
                    obj.percussionArticulation = v;
                    return true;
                case "isvisible":
                    obj.isVisible = v;
                    return true;
                case "islefthandtapped":
                    obj.isLeftHandTapped = v;
                    return true;
                case "ishammerpullorigin":
                    obj.isHammerPullOrigin = v;
                    return true;
                case "isslurdestination":
                    obj.isSlurDestination = v;
                    return true;
                case "harmonictype":
                    obj.harmonicType = JsonHelper.parseEnum(v, HarmonicType);
                    return true;
                case "harmonicvalue":
                    obj.harmonicValue = v;
                    return true;
                case "isghost":
                    obj.isGhost = v;
                    return true;
                case "isletring":
                    obj.isLetRing = v;
                    return true;
                case "ispalmmute":
                    obj.isPalmMute = v;
                    return true;
                case "isdead":
                    obj.isDead = v;
                    return true;
                case "isstaccato":
                    obj.isStaccato = v;
                    return true;
                case "slideintype":
                    obj.slideInType = JsonHelper.parseEnum(v, SlideInType);
                    return true;
                case "slideouttype":
                    obj.slideOutType = JsonHelper.parseEnum(v, SlideOutType);
                    return true;
                case "vibrato":
                    obj.vibrato = JsonHelper.parseEnum(v, VibratoType);
                    return true;
                case "istiedestination":
                    obj.isTieDestination = v;
                    return true;
                case "lefthandfinger":
                    obj.leftHandFinger = JsonHelper.parseEnum(v, Fingers);
                    return true;
                case "righthandfinger":
                    obj.rightHandFinger = JsonHelper.parseEnum(v, Fingers);
                    return true;
                case "trillvalue":
                    obj.trillValue = v;
                    return true;
                case "trillspeed":
                    obj.trillSpeed = JsonHelper.parseEnum(v, Duration);
                    return true;
                case "durationpercent":
                    obj.durationPercent = v;
                    return true;
                case "accidentalmode":
                    obj.accidentalMode = JsonHelper.parseEnum(v, NoteAccidentalMode);
                    return true;
                case "dynamics":
                    obj.dynamics = JsonHelper.parseEnum(v, DynamicValue);
                    return true;
                case "ornament":
                    obj.ornament = JsonHelper.parseEnum(v, NoteOrnament);
                    return true;
                case "style":
                    if (v) {
                        obj.style = new NoteStyle();
                        NoteStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return obj.setProperty(property, v);
        }
    }

    class BeatStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BeatStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, BeatSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class BeatSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BeatSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("id", obj.id);
            o.set("notes", obj.notes.map(i => NoteSerializer.toJson(i)));
            o.set("isempty", obj.isEmpty);
            o.set("whammystyle", obj.whammyStyle);
            o.set("ottava", obj.ottava);
            o.set("islegatoorigin", obj.isLegatoOrigin);
            o.set("duration", obj.duration);
            o.set("automations", obj.automations.map(i => AutomationSerializer.toJson(i)));
            o.set("dots", obj.dots);
            o.set("fade", obj.fade);
            o.set("lyrics", obj.lyrics);
            o.set("pop", obj.pop);
            o.set("slap", obj.slap);
            o.set("tap", obj.tap);
            o.set("text", obj.text);
            o.set("slashed", obj.slashed);
            o.set("deadslapped", obj.deadSlapped);
            o.set("brushtype", obj.brushType);
            o.set("brushduration", obj.brushDuration);
            o.set("tupletdenominator", obj.tupletDenominator);
            o.set("tupletnumerator", obj.tupletNumerator);
            o.set("iscontinuedwhammy", obj.isContinuedWhammy);
            o.set("whammybartype", obj.whammyBarType);
            if (obj.whammyBarPoints !== null) {
                o.set("whammybarpoints", obj.whammyBarPoints?.map(i => BendPointSerializer.toJson(i)));
            }
            o.set("vibrato", obj.vibrato);
            o.set("chordid", obj.chordId);
            o.set("gracetype", obj.graceType);
            o.set("pickstroke", obj.pickStroke);
            o.set("tremolospeed", obj.tremoloSpeed);
            o.set("crescendo", obj.crescendo);
            o.set("displaystart", obj.displayStart);
            o.set("playbackstart", obj.playbackStart);
            o.set("displayduration", obj.displayDuration);
            o.set("playbackduration", obj.playbackDuration);
            o.set("overridedisplayduration", obj.overrideDisplayDuration);
            o.set("golpe", obj.golpe);
            o.set("dynamics", obj.dynamics);
            o.set("invertbeamdirection", obj.invertBeamDirection);
            o.set("preferredbeamdirection", obj.preferredBeamDirection);
            o.set("beamingmode", obj.beamingMode);
            o.set("wahpedal", obj.wahPedal);
            o.set("barrefret", obj.barreFret);
            o.set("barreshape", obj.barreShape);
            o.set("rasgueado", obj.rasgueado);
            o.set("showtimer", obj.showTimer);
            o.set("timer", obj.timer);
            if (obj.style) {
                o.set("style", BeatStyleSerializer.toJson(obj.style));
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "id":
                    obj.id = v;
                    return true;
                case "notes":
                    obj.notes = [];
                    for (const o of v) {
                        const i = new Note();
                        NoteSerializer.fromJson(i, o);
                        obj.addNote(i);
                    }
                    return true;
                case "isempty":
                    obj.isEmpty = v;
                    return true;
                case "whammystyle":
                    obj.whammyStyle = JsonHelper.parseEnum(v, BendStyle);
                    return true;
                case "ottava":
                    obj.ottava = JsonHelper.parseEnum(v, Ottavia);
                    return true;
                case "islegatoorigin":
                    obj.isLegatoOrigin = v;
                    return true;
                case "duration":
                    obj.duration = JsonHelper.parseEnum(v, Duration);
                    return true;
                case "automations":
                    obj.automations = [];
                    for (const o of v) {
                        const i = new Automation();
                        AutomationSerializer.fromJson(i, o);
                        obj.automations.push(i);
                    }
                    return true;
                case "dots":
                    obj.dots = v;
                    return true;
                case "fade":
                    obj.fade = JsonHelper.parseEnum(v, FadeType);
                    return true;
                case "lyrics":
                    obj.lyrics = v;
                    return true;
                case "pop":
                    obj.pop = v;
                    return true;
                case "slap":
                    obj.slap = v;
                    return true;
                case "tap":
                    obj.tap = v;
                    return true;
                case "text":
                    obj.text = v;
                    return true;
                case "slashed":
                    obj.slashed = v;
                    return true;
                case "deadslapped":
                    obj.deadSlapped = v;
                    return true;
                case "brushtype":
                    obj.brushType = JsonHelper.parseEnum(v, BrushType);
                    return true;
                case "brushduration":
                    obj.brushDuration = v;
                    return true;
                case "tupletdenominator":
                    obj.tupletDenominator = v;
                    return true;
                case "tupletnumerator":
                    obj.tupletNumerator = v;
                    return true;
                case "iscontinuedwhammy":
                    obj.isContinuedWhammy = v;
                    return true;
                case "whammybartype":
                    obj.whammyBarType = JsonHelper.parseEnum(v, WhammyType);
                    return true;
                case "whammybarpoints":
                    if (v) {
                        obj.whammyBarPoints = [];
                        for (const o of v) {
                            const i = new BendPoint();
                            BendPointSerializer.fromJson(i, o);
                            obj.addWhammyBarPoint(i);
                        }
                    }
                    return true;
                case "vibrato":
                    obj.vibrato = JsonHelper.parseEnum(v, VibratoType);
                    return true;
                case "chordid":
                    obj.chordId = v;
                    return true;
                case "gracetype":
                    obj.graceType = JsonHelper.parseEnum(v, GraceType);
                    return true;
                case "pickstroke":
                    obj.pickStroke = JsonHelper.parseEnum(v, PickStroke);
                    return true;
                case "tremolospeed":
                    obj.tremoloSpeed = JsonHelper.parseEnum(v, Duration) ?? null;
                    return true;
                case "crescendo":
                    obj.crescendo = JsonHelper.parseEnum(v, CrescendoType);
                    return true;
                case "displaystart":
                    obj.displayStart = v;
                    return true;
                case "playbackstart":
                    obj.playbackStart = v;
                    return true;
                case "displayduration":
                    obj.displayDuration = v;
                    return true;
                case "playbackduration":
                    obj.playbackDuration = v;
                    return true;
                case "overridedisplayduration":
                    obj.overrideDisplayDuration = v;
                    return true;
                case "golpe":
                    obj.golpe = JsonHelper.parseEnum(v, GolpeType);
                    return true;
                case "dynamics":
                    obj.dynamics = JsonHelper.parseEnum(v, DynamicValue);
                    return true;
                case "invertbeamdirection":
                    obj.invertBeamDirection = v;
                    return true;
                case "preferredbeamdirection":
                    obj.preferredBeamDirection = JsonHelper.parseEnum(v, BeamDirection) ?? null;
                    return true;
                case "beamingmode":
                    obj.beamingMode = JsonHelper.parseEnum(v, BeatBeamingMode);
                    return true;
                case "wahpedal":
                    obj.wahPedal = JsonHelper.parseEnum(v, WahPedal);
                    return true;
                case "barrefret":
                    obj.barreFret = v;
                    return true;
                case "barreshape":
                    obj.barreShape = JsonHelper.parseEnum(v, BarreShape);
                    return true;
                case "rasgueado":
                    obj.rasgueado = JsonHelper.parseEnum(v, Rasgueado);
                    return true;
                case "showtimer":
                    obj.showTimer = v;
                    return true;
                case "timer":
                    obj.timer = v;
                    return true;
                case "style":
                    if (v) {
                        obj.style = new BeatStyle();
                        BeatStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return false;
        }
    }

    class VoiceStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => VoiceStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, VoiceSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class VoiceSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => VoiceSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("id", obj.id);
            o.set("beats", obj.beats.map(i => BeatSerializer.toJson(i)));
            if (obj.style) {
                o.set("style", VoiceStyleSerializer.toJson(obj.style));
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "id":
                    obj.id = v;
                    return true;
                case "beats":
                    obj.beats = [];
                    for (const o of v) {
                        const i = new Beat();
                        BeatSerializer.fromJson(i, o);
                        obj.addBeat(i);
                    }
                    return true;
                case "style":
                    if (v) {
                        obj.style = new VoiceStyle();
                        VoiceStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return false;
        }
    }

    class SustainPedalMarkerSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => SustainPedalMarkerSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("ratioposition", obj.ratioPosition);
            o.set("pedaltype", obj.pedalType);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "ratioposition":
                    obj.ratioPosition = v;
                    return true;
                case "pedaltype":
                    obj.pedalType = JsonHelper.parseEnum(v, SustainPedalMarkerType);
                    return true;
            }
            return false;
        }
    }

    class BarStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BarStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, BarSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class BarSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BarSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("id", obj.id);
            o.set("clef", obj.clef);
            o.set("clefottava", obj.clefOttava);
            o.set("voices", obj.voices.map(i => VoiceSerializer.toJson(i)));
            o.set("similemark", obj.simileMark);
            o.set("displayscale", obj.displayScale);
            o.set("displaywidth", obj.displayWidth);
            o.set("sustainpedals", obj.sustainPedals.map(i => SustainPedalMarkerSerializer.toJson(i)));
            o.set("barlineleft", obj.barLineLeft);
            o.set("barlineright", obj.barLineRight);
            o.set("keysignature", obj.keySignature);
            o.set("keysignaturetype", obj.keySignatureType);
            if (obj.style) {
                o.set("style", BarStyleSerializer.toJson(obj.style));
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "id":
                    obj.id = v;
                    return true;
                case "clef":
                    obj.clef = JsonHelper.parseEnum(v, Clef);
                    return true;
                case "clefottava":
                    obj.clefOttava = JsonHelper.parseEnum(v, Ottavia);
                    return true;
                case "voices":
                    obj.voices = [];
                    for (const o of v) {
                        const i = new Voice$1();
                        VoiceSerializer.fromJson(i, o);
                        obj.addVoice(i);
                    }
                    return true;
                case "similemark":
                    obj.simileMark = JsonHelper.parseEnum(v, SimileMark);
                    return true;
                case "displayscale":
                    obj.displayScale = v;
                    return true;
                case "displaywidth":
                    obj.displayWidth = v;
                    return true;
                case "sustainpedals":
                    obj.sustainPedals = [];
                    for (const o of v) {
                        const i = new SustainPedalMarker();
                        SustainPedalMarkerSerializer.fromJson(i, o);
                        obj.sustainPedals.push(i);
                    }
                    return true;
                case "barlineleft":
                    obj.barLineLeft = JsonHelper.parseEnum(v, BarLineStyle);
                    return true;
                case "barlineright":
                    obj.barLineRight = JsonHelper.parseEnum(v, BarLineStyle);
                    return true;
                case "keysignature":
                    obj.keySignature = JsonHelper.parseEnum(v, KeySignature);
                    return true;
                case "keysignaturetype":
                    obj.keySignatureType = JsonHelper.parseEnum(v, KeySignatureType);
                    return true;
                case "style":
                    if (v) {
                        obj.style = new BarStyle();
                        BarStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return false;
        }
    }

    class ChordSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => ChordSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("name", obj.name);
            o.set("firstfret", obj.firstFret);
            o.set("strings", obj.strings);
            o.set("barrefrets", obj.barreFrets);
            o.set("showname", obj.showName);
            o.set("showdiagram", obj.showDiagram);
            o.set("showfingering", obj.showFingering);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "name":
                    obj.name = v;
                    return true;
                case "firstfret":
                    obj.firstFret = v;
                    return true;
                case "strings":
                    obj.strings = v;
                    return true;
                case "barrefrets":
                    obj.barreFrets = v;
                    return true;
                case "showname":
                    obj.showName = v;
                    return true;
                case "showdiagram":
                    obj.showDiagram = v;
                    return true;
                case "showfingering":
                    obj.showFingering = v;
                    return true;
            }
            return false;
        }
    }

    class TuningSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => TuningSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("isstandard", obj.isStandard);
            o.set("name", obj.name);
            o.set("tunings", obj.tunings);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "isstandard":
                    obj.isStandard = v;
                    return true;
                case "name":
                    obj.name = v;
                    return true;
                case "tunings":
                    obj.tunings = v;
                    return true;
            }
            return false;
        }
    }

    class StaffSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => StaffSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("bars", obj.bars.map(i => BarSerializer.toJson(i)));
            if (obj.chords !== null) {
                const m = new Map();
                o.set("chords", m);
                for (const [k, v] of obj.chords) {
                    m.set(k.toString(), ChordSerializer.toJson(v));
                }
            }
            o.set("capo", obj.capo);
            o.set("transpositionpitch", obj.transpositionPitch);
            o.set("displaytranspositionpitch", obj.displayTranspositionPitch);
            o.set("stringtuning", TuningSerializer.toJson(obj.stringTuning));
            o.set("showslash", obj.showSlash);
            o.set("shownumbered", obj.showNumbered);
            o.set("showtablature", obj.showTablature);
            o.set("showstandardnotation", obj.showStandardNotation);
            o.set("ispercussion", obj.isPercussion);
            o.set("standardnotationlinecount", obj.standardNotationLineCount);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "bars":
                    obj.bars = [];
                    for (const o of v) {
                        const i = new Bar();
                        BarSerializer.fromJson(i, o);
                        obj.addBar(i);
                    }
                    return true;
                case "chords":
                    obj.chords = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        const i = new Chord();
                        ChordSerializer.fromJson(i, v);
                        obj.addChord(k, i);
                    });
                    return true;
                case "capo":
                    obj.capo = v;
                    return true;
                case "transpositionpitch":
                    obj.transpositionPitch = v;
                    return true;
                case "displaytranspositionpitch":
                    obj.displayTranspositionPitch = v;
                    return true;
                case "stringtuning":
                    TuningSerializer.fromJson(obj.stringTuning, v);
                    return true;
                case "showslash":
                    obj.showSlash = v;
                    return true;
                case "shownumbered":
                    obj.showNumbered = v;
                    return true;
                case "showtablature":
                    obj.showTablature = v;
                    return true;
                case "showstandardnotation":
                    obj.showStandardNotation = v;
                    return true;
                case "ispercussion":
                    obj.isPercussion = v;
                    return true;
                case "standardnotationlinecount":
                    obj.standardNotationLineCount = v;
                    return true;
            }
            return false;
        }
    }

    class PlaybackInformationSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => PlaybackInformationSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("volume", obj.volume);
            o.set("balance", obj.balance);
            o.set("port", obj.port);
            o.set("program", obj.program);
            o.set("primarychannel", obj.primaryChannel);
            o.set("secondarychannel", obj.secondaryChannel);
            o.set("ismute", obj.isMute);
            o.set("issolo", obj.isSolo);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "volume":
                    obj.volume = v;
                    return true;
                case "balance":
                    obj.balance = v;
                    return true;
                case "port":
                    obj.port = v;
                    return true;
                case "program":
                    obj.program = v;
                    return true;
                case "primarychannel":
                    obj.primaryChannel = v;
                    return true;
                case "secondarychannel":
                    obj.secondaryChannel = v;
                    return true;
                case "ismute":
                    obj.isMute = v;
                    return true;
                case "issolo":
                    obj.isSolo = v;
                    return true;
            }
            return false;
        }
    }

    class InstrumentArticulationSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => InstrumentArticulationSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("elementtype", obj.elementType);
            o.set("staffline", obj.staffLine);
            o.set("noteheaddefault", obj.noteHeadDefault);
            o.set("noteheadhalf", obj.noteHeadHalf);
            o.set("noteheadwhole", obj.noteHeadWhole);
            o.set("techniquesymbol", obj.techniqueSymbol);
            o.set("techniquesymbolplacement", obj.techniqueSymbolPlacement);
            o.set("outputmidinumber", obj.outputMidiNumber);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "elementtype":
                    obj.elementType = v;
                    return true;
                case "staffline":
                    obj.staffLine = v;
                    return true;
                case "noteheaddefault":
                    obj.noteHeadDefault = JsonHelper.parseEnum(v, MusicFontSymbol);
                    return true;
                case "noteheadhalf":
                    obj.noteHeadHalf = JsonHelper.parseEnum(v, MusicFontSymbol);
                    return true;
                case "noteheadwhole":
                    obj.noteHeadWhole = JsonHelper.parseEnum(v, MusicFontSymbol);
                    return true;
                case "techniquesymbol":
                    obj.techniqueSymbol = JsonHelper.parseEnum(v, MusicFontSymbol);
                    return true;
                case "techniquesymbolplacement":
                    obj.techniqueSymbolPlacement = JsonHelper.parseEnum(v, TextBaseline);
                    return true;
                case "outputmidinumber":
                    obj.outputMidiNumber = v;
                    return true;
            }
            return false;
        }
    }

    class TrackStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => TrackStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, TrackSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class TrackSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => TrackSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("staves", obj.staves.map(i => StaffSerializer.toJson(i)));
            o.set("playbackinfo", PlaybackInformationSerializer.toJson(obj.playbackInfo));
            o.set("color", Color.toJson(obj.color));
            o.set("name", obj.name);
            o.set("isvisibleonmultitrack", obj.isVisibleOnMultiTrack);
            o.set("shortname", obj.shortName);
            o.set("defaultsystemslayout", obj.defaultSystemsLayout);
            o.set("systemslayout", obj.systemsLayout);
            if (obj.lineBreaks !== undefined) {
                const a = [];
                o.set("linebreaks", a);
                for (const v of obj.lineBreaks) {
                    a.push(v);
                }
            }
            o.set("percussionarticulations", obj.percussionArticulations.map(i => InstrumentArticulationSerializer.toJson(i)));
            if (obj.style) {
                o.set("style", TrackStyleSerializer.toJson(obj.style));
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "staves":
                    obj.staves = [];
                    for (const o of v) {
                        const i = new Staff();
                        StaffSerializer.fromJson(i, o);
                        obj.addStaff(i);
                    }
                    return true;
                case "playbackinfo":
                    PlaybackInformationSerializer.fromJson(obj.playbackInfo, v);
                    return true;
                case "color":
                    obj.color = Color.fromJson(v);
                    return true;
                case "name":
                    obj.name = v;
                    return true;
                case "isvisibleonmultitrack":
                    obj.isVisibleOnMultiTrack = v;
                    return true;
                case "shortname":
                    obj.shortName = v;
                    return true;
                case "defaultsystemslayout":
                    obj.defaultSystemsLayout = v;
                    return true;
                case "systemslayout":
                    obj.systemsLayout = v;
                    return true;
                case "linebreaks":
                    for (const i of v) {
                        obj.addLineBreaks(i);
                    }
                    return true;
                case "percussionarticulations":
                    obj.percussionArticulations = [];
                    for (const o of v) {
                        const i = new InstrumentArticulation();
                        InstrumentArticulationSerializer.fromJson(i, o);
                        obj.percussionArticulations.push(i);
                    }
                    return true;
                case "style":
                    if (v) {
                        obj.style = new TrackStyle();
                        TrackStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return false;
        }
    }

    class RenderStylesheetSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => RenderStylesheetSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("hidedynamics", obj.hideDynamics);
            o.set("bracketextendmode", obj.bracketExtendMode);
            o.set("usesystemsignseparator", obj.useSystemSignSeparator);
            o.set("globaldisplaytuning", obj.globalDisplayTuning);
            if (obj.perTrackDisplayTuning !== null) {
                const m = new Map();
                o.set("pertrackdisplaytuning", m);
                for (const [k, v] of obj.perTrackDisplayTuning) {
                    m.set(k.toString(), v);
                }
            }
            o.set("globaldisplaychorddiagramsontop", obj.globalDisplayChordDiagramsOnTop);
            if (obj.perTrackChordDiagramsOnTop !== null) {
                const m = new Map();
                o.set("pertrackchorddiagramsontop", m);
                for (const [k, v] of obj.perTrackChordDiagramsOnTop) {
                    m.set(k.toString(), v);
                }
            }
            o.set("singletracktracknamepolicy", obj.singleTrackTrackNamePolicy);
            o.set("multitracktracknamepolicy", obj.multiTrackTrackNamePolicy);
            o.set("firstsystemtracknamemode", obj.firstSystemTrackNameMode);
            o.set("othersystemstracknamemode", obj.otherSystemsTrackNameMode);
            o.set("firstsystemtracknameorientation", obj.firstSystemTrackNameOrientation);
            o.set("othersystemstracknameorientation", obj.otherSystemsTrackNameOrientation);
            o.set("multitrackmultibarrest", obj.multiTrackMultiBarRest);
            if (obj.perTrackMultiBarRest !== null) {
                const a = [];
                o.set("pertrackmultibarrest", a);
                for (const v of obj.perTrackMultiBarRest) {
                    a.push(v);
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "hidedynamics":
                    obj.hideDynamics = v;
                    return true;
                case "bracketextendmode":
                    obj.bracketExtendMode = JsonHelper.parseEnum(v, BracketExtendMode);
                    return true;
                case "usesystemsignseparator":
                    obj.useSystemSignSeparator = v;
                    return true;
                case "globaldisplaytuning":
                    obj.globalDisplayTuning = v;
                    return true;
                case "pertrackdisplaytuning":
                    obj.perTrackDisplayTuning = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.perTrackDisplayTuning.set(Number.parseInt(k), v);
                    });
                    return true;
                case "globaldisplaychorddiagramsontop":
                    obj.globalDisplayChordDiagramsOnTop = v;
                    return true;
                case "pertrackchorddiagramsontop":
                    obj.perTrackChordDiagramsOnTop = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.perTrackChordDiagramsOnTop.set(Number.parseInt(k), v);
                    });
                    return true;
                case "singletracktracknamepolicy":
                    obj.singleTrackTrackNamePolicy = JsonHelper.parseEnum(v, TrackNamePolicy);
                    return true;
                case "multitracktracknamepolicy":
                    obj.multiTrackTrackNamePolicy = JsonHelper.parseEnum(v, TrackNamePolicy);
                    return true;
                case "firstsystemtracknamemode":
                    obj.firstSystemTrackNameMode = JsonHelper.parseEnum(v, TrackNameMode);
                    return true;
                case "othersystemstracknamemode":
                    obj.otherSystemsTrackNameMode = JsonHelper.parseEnum(v, TrackNameMode);
                    return true;
                case "firstsystemtracknameorientation":
                    obj.firstSystemTrackNameOrientation = JsonHelper.parseEnum(v, TrackNameOrientation);
                    return true;
                case "othersystemstracknameorientation":
                    obj.otherSystemsTrackNameOrientation = JsonHelper.parseEnum(v, TrackNameOrientation);
                    return true;
                case "multitrackmultibarrest":
                    obj.multiTrackMultiBarRest = v;
                    return true;
                case "pertrackmultibarrest":
                    obj.perTrackMultiBarRest = new Set(v);
                    return true;
            }
            return false;
        }
    }

    class BackingTrackSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => BackingTrackSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            return o;
        }
        static setProperty(obj, property, v) {
            return false;
        }
    }

    class HeaderFooterStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => HeaderFooterStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("template", obj.template);
            o.set("isvisible", obj.isVisible);
            o.set("textalign", obj.textAlign);
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "template":
                    obj.template = v;
                    return true;
                case "isvisible":
                    obj.isVisible = v;
                    return true;
                case "textalign":
                    obj.textAlign = JsonHelper.parseEnum(v, TextAlign);
                    return true;
            }
            return false;
        }
    }

    class ScoreStyleSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => ScoreStyleSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            {
                const m = new Map();
                o.set("headerandfooter", m);
                for (const [k, v] of obj.headerAndFooter) {
                    m.set(k.toString(), HeaderFooterStyleSerializer.toJson(v));
                }
            }
            {
                const m = new Map();
                o.set("colors", m);
                for (const [k, v] of obj.colors) {
                    m.set(k.toString(), Color.toJson(v));
                }
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "headerandfooter":
                    obj.headerAndFooter = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        const i = new HeaderFooterStyle();
                        HeaderFooterStyleSerializer.fromJson(i, v);
                        obj.headerAndFooter.set(JsonHelper.parseEnum(k, ScoreSubElement), i);
                    });
                    return true;
                case "colors":
                    obj.colors = new Map();
                    JsonHelper.forEach(v, (v, k) => {
                        obj.colors.set(JsonHelper.parseEnum(k, ScoreSubElement), Color.fromJson(v));
                    });
                    return true;
            }
            return false;
        }
    }

    class ScoreSerializer {
        static fromJson(obj, m) {
            if (!m) {
                return;
            }
            JsonHelper.forEach(m, (v, k) => ScoreSerializer.setProperty(obj, k, v));
        }
        static toJson(obj) {
            if (!obj) {
                return null;
            }
            const o = new Map();
            o.set("album", obj.album);
            o.set("artist", obj.artist);
            o.set("copyright", obj.copyright);
            o.set("instructions", obj.instructions);
            o.set("music", obj.music);
            o.set("notices", obj.notices);
            o.set("subtitle", obj.subTitle);
            o.set("title", obj.title);
            o.set("words", obj.words);
            o.set("tab", obj.tab);
            o.set("tempo", obj.tempo);
            o.set("tempolabel", obj.tempoLabel);
            o.set("masterbars", obj.masterBars.map(i => MasterBarSerializer.toJson(i)));
            o.set("tracks", obj.tracks.map(i => TrackSerializer.toJson(i)));
            o.set("defaultsystemslayout", obj.defaultSystemsLayout);
            o.set("systemslayout", obj.systemsLayout);
            o.set("stylesheet", RenderStylesheetSerializer.toJson(obj.stylesheet));
            if (obj.backingTrack) {
                o.set("backingtrack", BackingTrackSerializer.toJson(obj.backingTrack));
            }
            if (obj.style) {
                o.set("style", ScoreStyleSerializer.toJson(obj.style));
            }
            return o;
        }
        static setProperty(obj, property, v) {
            switch (property) {
                case "album":
                    obj.album = v;
                    return true;
                case "artist":
                    obj.artist = v;
                    return true;
                case "copyright":
                    obj.copyright = v;
                    return true;
                case "instructions":
                    obj.instructions = v;
                    return true;
                case "music":
                    obj.music = v;
                    return true;
                case "notices":
                    obj.notices = v;
                    return true;
                case "subtitle":
                    obj.subTitle = v;
                    return true;
                case "title":
                    obj.title = v;
                    return true;
                case "words":
                    obj.words = v;
                    return true;
                case "tab":
                    obj.tab = v;
                    return true;
                case "tempo":
                    obj.tempo = v;
                    return true;
                case "tempolabel":
                    obj.tempoLabel = v;
                    return true;
                case "masterbars":
                    obj.masterBars = [];
                    for (const o of v) {
                        const i = new MasterBar();
                        MasterBarSerializer.fromJson(i, o);
                        obj.addMasterBar(i);
                    }
                    return true;
                case "tracks":
                    obj.tracks = [];
                    for (const o of v) {
                        const i = new Track();
                        TrackSerializer.fromJson(i, o);
                        obj.addTrack(i);
                    }
                    return true;
                case "defaultsystemslayout":
                    obj.defaultSystemsLayout = v;
                    return true;
                case "systemslayout":
                    obj.systemsLayout = v;
                    return true;
                case "stylesheet":
                    RenderStylesheetSerializer.fromJson(obj.stylesheet, v);
                    return true;
                case "backingtrack":
                    if (v) {
                        obj.backingTrack = new BackingTrack();
                        BackingTrackSerializer.fromJson(obj.backingTrack, v);
                    }
                    else {
                        obj.backingTrack = undefined;
                    }
                    return true;
                case "style":
                    if (v) {
                        obj.style = new ScoreStyle();
                        ScoreStyleSerializer.fromJson(obj.style, v);
                    }
                    else {
                        obj.style = undefined;
                    }
                    return true;
            }
            return false;
        }
    }

    /**
     * This class can convert a full {@link Score} instance to a simple JavaScript object and back for further
     * JSON serialization.
     */
    class JsonConverter {
        /**
         * @target web
         */
        static jsonReplacer(_, v) {
            if (v instanceof Map) {
                if ('fromEntries' in Object) {
                    return Object.fromEntries(v);
                }
                const o = {};
                for (const [k, mv] of v) {
                    o[k] = mv;
                }
                return o;
            }
            if (ArrayBuffer.isView(v)) {
                return Array.apply([], [v]);
            }
            return v;
        }
        /**
         * Converts the given score into a JSON encoded string.
         * @param score The score to serialize.
         * @returns A JSON encoded string.
         * @target web
         */
        static scoreToJson(score) {
            const obj = JsonConverter.scoreToJsObject(score);
            return JSON.stringify(obj, JsonConverter.jsonReplacer);
        }
        /**
         * Converts the given JSON string back to a {@link Score} object.
         * @param json The JSON string
         * @param settings The settings to use during conversion.
         * @returns The converted score object.
         * @target web
         */
        static jsonToScore(json, settings) {
            return JsonConverter.jsObjectToScore(JSON.parse(json), settings);
        }
        /**
         * Converts the score into a JavaScript object without circular dependencies.
         * @param score The score object to serialize
         * @returns A serialized score object without ciruclar dependencies that can be used for further serializations.
         */
        static scoreToJsObject(score) {
            return ScoreSerializer.toJson(score);
        }
        /**
         * Converts the given JavaScript object into a score object.
         * @param jsObject The javascript object created via {@link Score}
         * @param settings The settings to use during conversion.
         * @returns The converted score object.
         */
        static jsObjectToScore(jsObject, settings) {
            const score = new Score();
            ScoreSerializer.fromJson(score, jsObject);
            score.finish(settings ?? new Settings());
            return score;
        }
        /**
         * Converts the given settings into a JSON encoded string.
         * @param settings The settings to serialize.
         * @returns A JSON encoded string.
         * @target web
         */
        static settingsToJson(settings) {
            const obj = JsonConverter.settingsToJsObject(settings);
            return JSON.stringify(obj, JsonConverter.jsonReplacer);
        }
        /**
         * Converts the given JSON string back to a {@link Score} object.
         * @param json The JSON string
         * @returns The converted settings object.
         * @target web
         */
        static jsonToSettings(json) {
            return JsonConverter.jsObjectToSettings(JSON.parse(json));
        }
        /**
         * Converts the settings object into a JavaScript object for transmission between components or saving purposes.
         * @param settings The settings object to serialize
         * @returns A serialized settings object without ciruclar dependencies that can be used for further serializations.
         */
        static settingsToJsObject(settings) {
            return SettingsSerializer.toJson(settings);
        }
        /**
         * Converts the given JavaScript object into a settings object.
         * @param jsObject The javascript object created via {@link Settings}
         * @returns The converted Settings object.
         */
        static jsObjectToSettings(jsObject) {
            const settings = new Settings();
            SettingsSerializer.fromJson(settings, jsObject);
            return settings;
        }
        /**
         * Converts the given JavaScript object into a MidiFile object.
         * @param jsObject The javascript object to deserialize.
         * @returns The converted MidiFile.
         */
        static jsObjectToMidiFile(jsObject) {
            const midi2 = new MidiFile();
            JsonHelper.forEach(jsObject, (v, k) => {
                switch (k) {
                    case 'division':
                        midi2.division = v;
                        break;
                    case 'tracks':
                        for (const midiTrack of v) {
                            const midiTrack2 = JsonConverter.jsObjectToMidiTrack(midiTrack);
                            midi2.tracks.push(midiTrack2);
                        }
                        break;
                }
            });
            return midi2;
        }
        static jsObjectToMidiTrack(jsObject) {
            const midi2 = new MidiTrack();
            JsonHelper.forEach(jsObject, (v, k) => {
                switch (k) {
                    case 'events':
                        for (const midiEvent of v) {
                            const midiEvent2 = JsonConverter.jsObjectToMidiEvent(midiEvent);
                            midi2.events.push(midiEvent2);
                        }
                        break;
                }
            });
            return midi2;
        }
        /**
         * Converts the given JavaScript object into a MidiEvent object.
         * @param jsObject The javascript object to deserialize.
         * @returns The converted MidiEvent.
         */
        static jsObjectToMidiEvent(midiEvent) {
            const track = JsonHelper.getValue(midiEvent, 'track');
            const tick = JsonHelper.getValue(midiEvent, 'tick');
            const type = JsonHelper.getValue(midiEvent, 'type');
            switch (type) {
                case MidiEventType.TimeSignature:
                    return new TimeSignatureEvent(track, tick, JsonHelper.getValue(midiEvent, 'numerator'), JsonHelper.getValue(midiEvent, 'denominatorIndex'), JsonHelper.getValue(midiEvent, 'midiClocksPerMetronomeClick'), JsonHelper.getValue(midiEvent, 'thirdySecondNodesInQuarter'));
                case MidiEventType.AlphaTabRest:
                    return new AlphaTabRestEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'));
                case MidiEventType.AlphaTabMetronome:
                    return new AlphaTabMetronomeEvent(track, tick, JsonHelper.getValue(midiEvent, 'metronomeNumerator'), JsonHelper.getValue(midiEvent, 'metronomeDurationInTicks'), JsonHelper.getValue(midiEvent, 'metronomeDurationInMilliseconds'));
                case MidiEventType.NoteOn:
                    return new NoteOnEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'noteKey'), JsonHelper.getValue(midiEvent, 'noteVelocity'));
                case MidiEventType.NoteOff:
                    return new NoteOffEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'noteKey'), JsonHelper.getValue(midiEvent, 'noteVelocity'));
                case MidiEventType.ControlChange:
                    return new ControlChangeEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'controller'), JsonHelper.getValue(midiEvent, 'value'));
                case MidiEventType.ProgramChange:
                    return new ProgramChangeEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'program'));
                case MidiEventType.TempoChange:
                    const tempo = new TempoChangeEvent(tick, 0);
                    tempo.beatsPerMinute = JsonHelper.getValue(midiEvent, 'beatsPerMinute');
                    return tempo;
                case MidiEventType.PitchBend:
                    return new PitchBendEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'value'));
                case MidiEventType.PerNotePitchBend:
                    return new NoteBendEvent(track, tick, JsonHelper.getValue(midiEvent, 'channel'), JsonHelper.getValue(midiEvent, 'noteKey'), JsonHelper.getValue(midiEvent, 'value'));
                case MidiEventType.EndOfTrack:
                    return new EndOfTrackEvent(track, tick);
            }
            throw new AlphaTabError(exports.AlphaTabErrorType.Format, `Unknown Midi Event type: ${type}`);
        }
        /**
         * Converts the given MidiFile object into a serialized JavaScript object.
         * @param midi The midi file to convert.
         * @returns A serialized MidiFile object without ciruclar dependencies that can be used for further serializations.
         */
        static midiFileToJsObject(midi) {
            const o = new Map();
            o.set('division', midi.division);
            const tracks = [];
            for (const track of midi.tracks) {
                tracks.push(JsonConverter.midiTrackToJsObject(track));
            }
            o.set('tracks', tracks);
            return o;
        }
        static midiTrackToJsObject(midi) {
            const o = new Map();
            const events = [];
            for (const track of midi.events) {
                events.push(JsonConverter.midiEventToJsObject(track));
            }
            o.set('events', events);
            return o;
        }
        /**
         * Converts the given MidiEvent object into a serialized JavaScript object.
         * @param midi The midi file to convert.
         * @returns A serialized MidiEvent object without ciruclar dependencies that can be used for further serializations.
         */
        static midiEventToJsObject(midiEvent) {
            const o = new Map();
            o.set('track', midiEvent.track);
            o.set('tick', midiEvent.tick);
            o.set('type', midiEvent.type);
            switch (midiEvent.type) {
                case MidiEventType.TimeSignature:
                    o.set('numerator', midiEvent.numerator);
                    o.set('denominatorIndex', midiEvent.denominatorIndex);
                    o.set('midiClocksPerMetronomeClick', midiEvent.midiClocksPerMetronomeClick);
                    o.set('thirdySecondNodesInQuarter', midiEvent.thirtySecondNodesInQuarter);
                    break;
                case MidiEventType.AlphaTabRest:
                    o.set('channel', midiEvent.channel);
                    break;
                case MidiEventType.AlphaTabMetronome:
                    o.set('metronomeNumerator', midiEvent.metronomeNumerator);
                    o.set('metronomeDurationInMilliseconds', midiEvent.metronomeDurationInMilliseconds);
                    o.set('metronomeDurationInTicks', midiEvent.metronomeDurationInTicks);
                    break;
                case MidiEventType.NoteOn:
                case MidiEventType.NoteOff:
                    o.set('channel', midiEvent.channel);
                    o.set('noteKey', midiEvent.noteKey);
                    o.set('noteVelocity', midiEvent.noteVelocity);
                    break;
                case MidiEventType.ControlChange:
                    o.set('channel', midiEvent.channel);
                    o.set('controller', midiEvent.controller);
                    o.set('value', midiEvent.value);
                    break;
                case MidiEventType.ProgramChange:
                    o.set('channel', midiEvent.channel);
                    o.set('program', midiEvent.program);
                    break;
                case MidiEventType.TempoChange:
                    o.set('beatsPerMinute', midiEvent.beatsPerMinute);
                    break;
                case MidiEventType.PitchBend:
                    o.set('channel', midiEvent.channel);
                    o.set('value', midiEvent.value);
                    break;
                case MidiEventType.PerNotePitchBend:
                    o.set('channel', midiEvent.channel);
                    o.set('noteKey', midiEvent.noteKey);
                    o.set('value', midiEvent.value);
                    break;
                case MidiEventType.EndOfTrack:
                    break;
            }
            return o;
        }
    }

    /**
     * @target web
     */
    class AlphaSynthWorkerSynthOutput {
        constructor() {
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
        }
        get sampleRate() {
            return AlphaSynthWorkerSynthOutput.preferredSampleRate;
        }
        open() {
            Logger.debug('AlphaSynth', 'Initializing synth worker');
            this._worker = Environment.globalThis;
            this._worker.addEventListener('message', this.handleMessage.bind(this));
            this.ready.trigger();
        }
        destroy() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.destroy'
            });
        }
        handleMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            switch (cmd) {
                case AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest:
                    this.sampleRequest.trigger();
                    break;
                case AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed:
                    this.samplesPlayed.trigger(data.samples);
                    break;
            }
        }
        addSamples(samples) {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.addSamples',
                samples: Environment.prepareForPostMessage(samples)
            });
        }
        play() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.play'
            });
        }
        pause() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.pause'
            });
        }
        resetSamples() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.resetSamples'
            });
        }
        activate() {
        }
        async enumerateOutputDevices() {
            return [];
        }
        async setOutputDevice(device) {
        }
        async getOutputDevice() {
            return null;
        }
    }
    AlphaSynthWorkerSynthOutput.CmdOutputPrefix = 'alphaSynth.output.';
    AlphaSynthWorkerSynthOutput.CmdOutputAddSamples = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}addSamples`;
    AlphaSynthWorkerSynthOutput.CmdOutputPlay = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}play`;
    AlphaSynthWorkerSynthOutput.CmdOutputPause = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}pause`;
    AlphaSynthWorkerSynthOutput.CmdOutputResetSamples = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}resetSamples`;
    AlphaSynthWorkerSynthOutput.CmdOutputStop = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}stop`;
    AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}sampleRequest`;
    AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed = `${AlphaSynthWorkerSynthOutput.CmdOutputPrefix}samplesPlayed`;
    // this value is initialized by the alphaSynth WebWorker wrapper
    // that also includes the alphaSynth library into the worker.
    AlphaSynthWorkerSynthOutput.preferredSampleRate = 0;

    /**
     * This class implements a HTML5 WebWorker based version of alphaSynth
     * which can be controlled via WebWorker messages.
     * @target web
     */
    class AlphaSynthWebWorker {
        constructor(main, bufferTimeInMilliseconds) {
            this._exporter = new Map();
            this._main = main;
            this._main.addEventListener('message', this.handleMessage.bind(this));
            this._player = new AlphaSynth(new AlphaSynthWorkerSynthOutput(), bufferTimeInMilliseconds);
            this._player.positionChanged.on(this.onPositionChanged.bind(this));
            this._player.stateChanged.on(this.onPlayerStateChanged.bind(this));
            this._player.finished.on(this.onFinished.bind(this));
            this._player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
            this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
            this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
            this._player.midiLoaded.on(this.onMidiLoaded.bind(this));
            this._player.midiLoadFailed.on(this.onMidiLoadFailed.bind(this));
            this._player.readyForPlayback.on(this.onReadyForPlayback.bind(this));
            this._player.midiEventsPlayed.on(this.onMidiEventsPlayed.bind(this));
            this._player.playbackRangeChanged.on(this.onPlaybackRangeChanged.bind(this));
            this._main.postMessage({
                cmd: 'alphaSynth.ready'
            });
        }
        static init() {
            const main = Environment.globalThis;
            main.addEventListener('message', e => {
                const data = e.data;
                const cmd = data.cmd;
                switch (cmd) {
                    case 'alphaSynth.initialize':
                        AlphaSynthWorkerSynthOutput.preferredSampleRate = data.sampleRate;
                        Logger.logLevel = data.logLevel;
                        Environment.globalThis.alphaSynthWebWorker = new AlphaSynthWebWorker(main, data.bufferTimeInMilliseconds);
                        break;
                }
            });
        }
        handleMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.setLogLevel':
                    Logger.logLevel = data.value;
                    break;
                case 'alphaSynth.setMasterVolume':
                    this._player.masterVolume = data.value;
                    break;
                case 'alphaSynth.setMetronomeVolume':
                    this._player.metronomeVolume = data.value;
                    break;
                case 'alphaSynth.setPlaybackSpeed':
                    this._player.playbackSpeed = data.value;
                    break;
                case 'alphaSynth.setTickPosition':
                    this._player.tickPosition = data.value;
                    break;
                case 'alphaSynth.setTimePosition':
                    this._player.timePosition = data.value;
                    break;
                case 'alphaSynth.setPlaybackRange':
                    this._player.playbackRange = data.value;
                    break;
                case 'alphaSynth.setIsLooping':
                    this._player.isLooping = data.value;
                    break;
                case 'alphaSynth.setCountInVolume':
                    this._player.countInVolume = data.value;
                    break;
                case 'alphaSynth.setMidiEventsPlayedFilter':
                    this._player.midiEventsPlayedFilter = data.value;
                    break;
                case 'alphaSynth.play':
                    this._player.play();
                    break;
                case 'alphaSynth.pause':
                    this._player.pause();
                    break;
                case 'alphaSynth.playPause':
                    this._player.playPause();
                    break;
                case 'alphaSynth.stop':
                    this._player.stop();
                    break;
                case 'alphaSynth.playOneTimeMidiFile':
                    this._player.playOneTimeMidiFile(JsonConverter.jsObjectToMidiFile(data.midi));
                    break;
                case 'alphaSynth.loadSoundFontBytes':
                    this._player.loadSoundFont(data.data, data.append);
                    break;
                case 'alphaSynth.resetSoundFonts':
                    this._player.resetSoundFonts();
                    break;
                case 'alphaSynth.loadMidi':
                    this._player.loadMidiFile(JsonConverter.jsObjectToMidiFile(data.midi));
                    break;
                case 'alphaSynth.setChannelMute':
                    this._player.setChannelMute(data.channel, data.mute);
                    break;
                case 'alphaSynth.setChannelTranspositionPitch':
                    this._player.setChannelTranspositionPitch(data.channel, data.semitones);
                    break;
                case 'alphaSynth.setChannelSolo':
                    this._player.setChannelSolo(data.channel, data.solo);
                    break;
                case 'alphaSynth.setChannelVolume':
                    this._player.setChannelVolume(data.channel, data.volume);
                    break;
                case 'alphaSynth.resetChannelStates':
                    this._player.resetChannelStates();
                    break;
                case 'alphaSynth.destroy':
                    this._player.destroy();
                    this._main.postMessage({
                        cmd: 'alphaSynth.destroyed'
                    });
                    break;
                case 'alphaSynth.applyTranspositionPitches':
                    this._player.applyTranspositionPitches(new Map(JSON.parse(data.transpositionPitches)));
                    break;
            }
            if (cmd.startsWith('alphaSynth.exporter')) {
                this.handleExporterMessage(e);
            }
        }
        handleExporterMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            try {
                switch (cmd) {
                    case 'alphaSynth.exporter.initialize':
                        const exporter = this._player.exportAudio(data.options, JsonConverter.jsObjectToMidiFile(data.midi), data.syncPoints, data.transpositionPitches);
                        this._exporter.set(data.exporterId, exporter);
                        this._main.postMessage({
                            cmd: 'alphaSynth.exporter.initialized',
                            exporterId: data.exporterId
                        });
                        break;
                    case 'alphaSynth.exporter.render':
                        if (this._exporter.has(data.exporterId)) {
                            const exporter = this._exporter.get(data.exporterId);
                            const chunk = exporter.render(data.milliseconds);
                            this._main.postMessage({
                                cmd: 'alphaSynth.exporter.rendered',
                                exporterId: data.exporterId,
                                chunk
                            });
                        }
                        else {
                            this._main.postMessage({
                                cmd: 'alphaSynth.exporter.error',
                                exporterId: data.exporterId,
                                error: new Error('Unknown exporter ID')
                            });
                        }
                        break;
                    case 'alphaSynth.exporter.destroy':
                        this._exporter.delete(data.exporterId);
                        break;
                }
            }
            catch (e) {
                this._main.postMessage({
                    cmd: 'alphaSynth.exporter.error',
                    exporterId: data.exporterId,
                    error: e
                });
            }
        }
        onPositionChanged(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.positionChanged',
                currentTime: e.currentTime,
                endTime: e.endTime,
                currentTick: e.currentTick,
                endTick: e.endTick,
                isSeek: e.isSeek,
                originalTempo: e.originalTempo,
                modifiedTempo: e.modifiedTempo
            });
        }
        onPlayerStateChanged(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.playerStateChanged',
                state: e.state,
                stopped: e.stopped
            });
        }
        onFinished() {
            this._main.postMessage({
                cmd: 'alphaSynth.finished'
            });
        }
        onSoundFontLoaded() {
            this._main.postMessage({
                cmd: 'alphaSynth.soundFontLoaded'
            });
        }
        onSoundFontLoadFailed(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.soundFontLoadFailed',
                error: this.serializeException(Environment.prepareForPostMessage(e))
            });
        }
        serializeException(e) {
            const error = JSON.parse(JSON.stringify(e));
            if (e.message) {
                error.message = e.message;
            }
            if (e.stack) {
                error.stack = e.stack;
            }
            if (e.constructor && e.constructor.name) {
                error.type = e.constructor.name;
            }
            return error;
        }
        onMidiLoaded(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.midiLoaded',
                currentTime: e.currentTime,
                endTime: e.endTime,
                currentTick: e.currentTick,
                endTick: e.endTick,
                isSeek: e.isSeek,
                originalTempo: e.originalTempo,
                modifiedTempo: e.modifiedTempo
            });
        }
        onMidiLoadFailed(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.midiLoaded',
                error: this.serializeException(Environment.prepareForPostMessage(e))
            });
        }
        onReadyForPlayback() {
            this._main.postMessage({
                cmd: 'alphaSynth.readyForPlayback'
            });
        }
        onMidiEventsPlayed(args) {
            this._main.postMessage({
                cmd: 'alphaSynth.midiEventsPlayed',
                events: args.events.map(JsonConverter.midiEventToJsObject)
            });
        }
        onPlaybackRangeChanged(args) {
            this._main.postMessage({
                cmd: 'alphaSynth.playbackRangeChanged',
                playbackRange: args.playbackRange
            });
        }
    }

    /**
     * Lists all web specific platforms alphaTab might run in
     * like browser, nodejs.
     */
    exports.WebPlatform = void 0;
    (function (WebPlatform) {
        WebPlatform[WebPlatform["Browser"] = 0] = "Browser";
        WebPlatform[WebPlatform["NodeJs"] = 1] = "NodeJs";
        WebPlatform[WebPlatform["BrowserModule"] = 2] = "BrowserModule";
    })(exports.WebPlatform || (exports.WebPlatform = {}));

    /**
     * Describes the sizes of a font for measuring purposes.
     */
    class FontSizeDefinition {
        constructor(characterWidths, fontSizeToHeight) {
            this.characterWidths = characterWidths;
            this.fontSizeToHeight = fontSizeToHeight;
        }
    }
    /**
     * This public class stores text widths for several fonts and allows width calculation
     * @partial
     */
    class FontSizes {
        /**
         * @target web
         * @partial
         */
        static generateFontLookup(family) {
            if (FontSizes.FontSizeLookupTables.has(family)) {
                return;
            }
            if (!Environment.isRunningInWorker && Environment.webPlatform !== exports.WebPlatform.NodeJs) {
                const canvas = document.createElement('canvas');
                const measureContext = canvas.getContext('2d');
                const measureSize = 11;
                measureContext.font = `${measureSize}px ${family}`;
                const widths = [];
                let fullTxt = '';
                for (let i = FontSizes.ControlChars; i < 255; i++) {
                    const s = String.fromCharCode(i);
                    fullTxt += s;
                    const metrics = measureContext.measureText(s);
                    widths.push(metrics.width);
                }
                const heightMetrics = measureContext.measureText(`${fullTxt}ÄÖÜÁÈ`);
                const top = 0 - Math.abs(heightMetrics.fontBoundingBoxAscent);
                const bottom = 0 + Math.abs(heightMetrics.fontBoundingBoxDescent);
                const height = bottom - top;
                const data = new FontSizeDefinition(new Uint8Array(widths), height / measureSize);
                FontSizes.FontSizeLookupTables.set(family, data);
            }
            else {
                const data = new FontSizeDefinition(new Uint8Array([8]), 1.2);
                FontSizes.FontSizeLookupTables.set(family, data);
            }
        }
        static measureString(s, families, size, style, weight) {
            let data;
            const dataSize = 11;
            let family = families[0]; // default to first font
            // find a font which is maybe registered already
            for (let i = 0; i < families.length; i++) {
                if (FontSizes.FontSizeLookupTables.has(families[i])) {
                    family = families[i];
                    break;
                }
            }
            if (!FontSizes.FontSizeLookupTables.has(family)) {
                FontSizes.generateFontLookup(family);
            }
            data = FontSizes.FontSizeLookupTables.get(family);
            let factor = 1;
            if (style === FontStyle.Italic) {
                factor *= 1.1;
            }
            if (weight === FontWeight.Bold) {
                factor *= 1.1;
            }
            let stringSize = 0;
            for (let i = 0; i < s.length; i++) {
                const code = Math.min(data.characterWidths.length - 1, s.charCodeAt(i) - FontSizes.ControlChars);
                if (code >= 0) {
                    stringSize += (data.characterWidths[code] * size) / dataSize;
                }
            }
            // add a small increase of size for spacing/kerning etc.
            // we really need to improve the width calculation, maybe by using offscreencanvas?
            factor *= 1.07;
            return new MeasuredText(stringSize * factor, size * data.fontSizeToHeight);
        }
    }
    FontSizes.FontSizeLookupTables = new Map();
    FontSizes.ControlChars = 0x20;

    /**
     * This eventargs define the details about the rendering and layouting process and are
     * provided whenever a part of of the music sheet is rendered.
     */
    class RenderFinishedEventArgs {
        constructor() {
            /**
             * Gets or sets the unique id of this event args.
             */
            this.id = ModelUtils.newGuid();
            /**
             * Gets or sets the x position of the current rendering result.
             */
            this.x = 0;
            /**
             * Gets or sets the y position of the current rendering result.
             */
            this.y = 0;
            /**
             * Gets or sets the width of the current rendering result.
             */
            this.width = 0;
            /**
             * Gets or sets the height of the current rendering result.
             */
            this.height = 0;
            /**
             * Gets or sets the currently known total width of the final music sheet.
             */
            this.totalWidth = 0;
            /**
             * Gets or sets the currently known total height of the final music sheet.
             */
            this.totalHeight = 0;
            /**
             * Gets or sets the index of the first masterbar that was rendered in this result.
             */
            this.firstMasterBarIndex = -1;
            /**
             * Gets or sets the index of the last masterbar that was rendered in this result.
             */
            this.lastMasterBarIndex = -1;
            /**
             * Gets or sets the render engine specific result object which contains the rendered music sheet.
             */
            this.renderResult = null;
        }
    }

    /**
     * Represents the boundaries of a single bar.
     */
    class BarBounds {
        constructor() {
            /**
             * Gets or sets a list of the beats contained in this lookup.
             */
            this.beats = [];
        }
        /**
         * Adds a new beat to this lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            bounds.barBounds = this;
            this.beats.push(bounds);
            this.masterBarBounds.addBeat(bounds);
        }
        /**
         * Tries to find the beat at the given X-position.
         * @param x The X-position of the beat to find.
         * @returns The beat at the given X-position or null if none was found.
         */
        findBeatAtPos(x) {
            let beat = null;
            for (const t of this.beats) {
                if (!beat || t.realBounds.x < x) {
                    beat = t;
                }
                else if (t.realBounds.x > x) {
                    break;
                }
            }
            return beat;
        }
        /**
         * Finishes the lookup object and optimizes itself for fast access.
         */
        finish(scale = 1) {
            this.realBounds.scaleWith(scale);
            this.visualBounds.scaleWith(scale);
            this.beats.sort((a, b) => a.realBounds.x - b.realBounds.x);
            for (const b of this.beats) {
                b.finish(scale);
            }
        }
    }

    /**
     * Represents the bounds of a single beat.
     */
    class BeatBounds {
        constructor() {
            /**
             * Gets or sets x-position where the timely center of the notes for this beat is.
             * This is where the cursor should be at the time when this beat is played.
             */
            this.onNotesX = 0;
            /**
             * Gets or sets the individual note positions of this beat (if {@link CoreSettings.includeNoteBounds} was set to true).
             */
            this.notes = null;
        }
        /**
         * Adds a new note to this bounds.
         * @param bounds The note bounds to add.
         */
        addNote(bounds) {
            if (!this.notes) {
                this.notes = [];
            }
            bounds.beatBounds = this;
            this.notes.push(bounds);
        }
        /**
         * Tries to find a note at the given position.
         * @param x The X-position of the note to find.
         * @param y The Y-position of the note to find.
         * @returns The note at the given position or null if no note was found, or the note lookup was not enabled before rendering.
         */
        findNoteAtPos(x, y) {
            const notes = this.notes;
            if (!notes) {
                return null;
            }
            // TODO: can be likely optimized
            // a beat is mostly vertically aligned, we could sort the note bounds by Y
            // and then do a binary search on the Y-axis.
            for (const note of notes) {
                const bottom = note.noteHeadBounds.y + note.noteHeadBounds.h;
                const right = note.noteHeadBounds.x + note.noteHeadBounds.w;
                if (note.noteHeadBounds.x <= x && note.noteHeadBounds.y <= y && x <= right && y <= bottom) {
                    return note.note;
                }
            }
            return null;
        }
        /**
         * Finishes the lookup object and optimizes itself for fast access.
         */
        finish(scale = 1) {
            this.realBounds.scaleWith(scale);
            this.visualBounds.scaleWith(scale);
            this.onNotesX *= scale;
            if (this.notes) {
                for (const n of this.notes) {
                    n.finish(scale);
                }
            }
        }
    }

    /**
     * Represents the boundaries of a list of bars related to a single master bar.
     */
    class MasterBarBounds {
        constructor() {
            /**
             * Gets or sets the index of this bounds relative within the parent lookup.
             */
            this.index = 0;
            /**
             * Gets or sets a value indicating whether this bounds are the first of the line.
             */
            this.isFirstOfLine = false;
            /**
             * Gets or sets the list of individual bars within this lookup.
             */
            this.bars = [];
            /**
             * Gets or sets a reference to the parent {@link staffSystemBounds}.
             */
            this.staffSystemBounds = null;
        }
        /**
         * Gets or sets a reference to the parent {@link staffSystemBounds}.
         * @deprecated use staffSystemBounds
         */
        get staveGroupBounds() {
            return this.staffSystemBounds;
        }
        /**
         * Adds a new bar to this lookup.
         * @param bounds The bar bounds to add to this lookup.
         */
        addBar(bounds) {
            bounds.masterBarBounds = this;
            this.bars.push(bounds);
        }
        /**
         * Tries to find a beat at the given location.
         * @param x The absolute X position where the beat spans across.
         * @param y The absolute Y position where the beat spans across.
         * @returns The beat that spans across the given point, or null if none of the contained bars had a beat at this position.
         */
        findBeatAtPos(x, y) {
            let beat = null;
            const distance = 10000000;
            for (const bar of this.bars) {
                const b = bar.findBeatAtPos(x);
                if (b && (!beat || beat.realBounds.x < b.realBounds.x)) {
                    const newDistance = Math.abs(b.realBounds.x - x);
                    if (!beat || newDistance < distance) {
                        beat = b;
                    }
                }
            }
            return !beat ? null : beat.beat;
        }
        /**
         * Finishes the lookup object and optimizes itself for fast access.
         */
        finish(scale = 1) {
            this.realBounds.scaleWith(scale);
            this.visualBounds.scaleWith(scale);
            this.lineAlignedBounds.scaleWith(scale);
            this.bars.sort((a, b) => {
                if (a.realBounds.y < b.realBounds.y) {
                    return -1;
                }
                if (a.realBounds.y > b.realBounds.y) {
                    return 1;
                }
                if (a.realBounds.x < b.realBounds.x) {
                    return -1;
                }
                if (a.realBounds.x > b.realBounds.x) {
                    return 1;
                }
                return 0;
            });
            for (const bar of this.bars) {
                bar.finish(scale);
            }
        }
        /**
         * Adds a new beat to the lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            this.staffSystemBounds.boundsLookup.addBeat(bounds);
        }
    }

    /**
     * Represents the bounds of a single note
     */
    class NoteBounds {
        /**
         * Finishes the lookup object and optimizes itself for fast access.
         */
        finish(scale = 1) {
            this.noteHeadBounds.scaleWith(scale);
        }
    }

    /**
     * Represents the bounds of a staff system.
     */
    class StaffSystemBounds {
        constructor() {
            /**
             * Gets or sets the index of the bounds within the parent lookup.
             * This allows fast access of the next/previous system.
             */
            this.index = 0;
            /**
             * Gets or sets the list of master bar bounds related to this staff system.
             */
            this.bars = [];
        }
        /**
         * Finished the lookup for optimized access.
         */
        finish(scale = 1) {
            this.realBounds.scaleWith(scale);
            this.visualBounds.scaleWith(scale);
            for (const t of this.bars) {
                t.finish(scale);
            }
        }
        /**
         * Adds a new master bar to this lookup.
         * @param bounds The master bar bounds to add.
         */
        addBar(bounds) {
            this.boundsLookup.addMasterBar(bounds);
            bounds.staffSystemBounds = this;
            this.bars.push(bounds);
        }
        /**
         * Tries to find the master bar bounds that are located at the given X-position.
         * @param x The X-position to find a master bar.
         * @returns The master bounds at the given X-position.
         */
        findBarAtPos(x) {
            let b = null;
            // move from left to right as long we find bars that start before the clicked position
            for (const bar of this.bars) {
                if (!b || bar.realBounds.x < x) {
                    b = bar;
                }
                else if (x > bar.realBounds.x + bar.realBounds.w) {
                    break;
                }
            }
            return b;
        }
    }

    class BoundsLookup {
        constructor() {
            this._beatLookup = new Map();
            this._masterBarLookup = new Map();
            this._currentStaffSystem = null;
            /**
             * Gets a list of all individual staff systems contained in the rendered music notation.
             */
            this.staffSystems = [];
            /**
             * Gets or sets a value indicating whether this lookup was finished already.
             */
            this.isFinished = false;
        }
        /**
         * @target web
         */
        toJson() {
            const json = {};
            const systems = [];
            json.staffSystems = systems;
            for (const system of this.staffSystems) {
                const g = {};
                g.visualBounds = this.boundsToJson(system.visualBounds);
                g.realBounds = this.boundsToJson(system.realBounds);
                g.bars = [];
                for (const masterBar of system.bars) {
                    const mb = {};
                    mb.lineAlignedBounds = this.boundsToJson(masterBar.lineAlignedBounds);
                    mb.visualBounds = this.boundsToJson(masterBar.visualBounds);
                    mb.realBounds = this.boundsToJson(masterBar.realBounds);
                    mb.index = masterBar.index;
                    mb.bars = [];
                    for (const bar of masterBar.bars) {
                        const b = {};
                        b.visualBounds = this.boundsToJson(bar.visualBounds);
                        b.realBounds = this.boundsToJson(bar.realBounds);
                        b.beats = [];
                        for (const beat of bar.beats) {
                            const bb = {};
                            bb.visualBounds = this.boundsToJson(beat.visualBounds);
                            bb.realBounds = this.boundsToJson(beat.realBounds);
                            bb.onNotesX = beat.onNotesX;
                            const bbd = bb;
                            bbd.beatIndex = beat.beat.index;
                            bbd.voiceIndex = beat.beat.voice.index;
                            bbd.barIndex = beat.beat.voice.bar.index;
                            bbd.staffIndex = beat.beat.voice.bar.staff.index;
                            bbd.trackIndex = beat.beat.voice.bar.staff.track.index;
                            if (beat.notes) {
                                const notes = [];
                                bb.notes = notes;
                                for (const note of beat.notes) {
                                    const n = {};
                                    const nd = n;
                                    nd.index = note.note.index;
                                    n.noteHeadBounds = this.boundsToJson(note.noteHeadBounds);
                                    notes.push(n);
                                }
                            }
                            b.beats.push(bb);
                        }
                        mb.bars.push(b);
                    }
                    g.bars.push(mb);
                }
                systems.push(g);
            }
            return json;
        }
        /**
         * @target web
         */
        static fromJson(json, score) {
            const lookup = new BoundsLookup();
            const staffSystems = json.staffSystems;
            for (const staffSystem of staffSystems) {
                const sg = new StaffSystemBounds();
                sg.visualBounds = BoundsLookup.boundsFromJson(staffSystem.visualBounds);
                sg.realBounds = BoundsLookup.boundsFromJson(staffSystem.realBounds);
                lookup.addStaffSystem(sg);
                for (const masterBar of staffSystem.bars) {
                    const mb = new MasterBarBounds();
                    mb.index = masterBar.index;
                    mb.isFirstOfLine = masterBar.isFirstOfLine;
                    mb.lineAlignedBounds = BoundsLookup.boundsFromJson(masterBar.lineAlignedBounds);
                    mb.visualBounds = BoundsLookup.boundsFromJson(masterBar.visualBounds);
                    mb.realBounds = BoundsLookup.boundsFromJson(masterBar.realBounds);
                    sg.addBar(mb);
                    for (const bar of masterBar.bars) {
                        const b = new BarBounds();
                        b.visualBounds = BoundsLookup.boundsFromJson(bar.visualBounds);
                        b.realBounds = BoundsLookup.boundsFromJson(bar.realBounds);
                        mb.addBar(b);
                        for (const beat of bar.beats) {
                            const bb = new BeatBounds();
                            bb.visualBounds = BoundsLookup.boundsFromJson(beat.visualBounds);
                            bb.realBounds = BoundsLookup.boundsFromJson(beat.realBounds);
                            bb.onNotesX = beat.onNotesX;
                            const bd = beat;
                            bb.beat =
                                score.tracks[bd.trackIndex].staves[bd.staffIndex].bars[bd.barIndex].voices[bd.voiceIndex].beats[bd.beatIndex];
                            if (beat.notes) {
                                bb.notes = [];
                                for (const note of beat.notes) {
                                    const n = new NoteBounds();
                                    const nd = note;
                                    n.note = bb.beat.notes[nd.index];
                                    n.noteHeadBounds = BoundsLookup.boundsFromJson(note.noteHeadBounds);
                                    bb.addNote(n);
                                }
                            }
                            b.addBeat(bb);
                        }
                    }
                }
            }
            return lookup;
        }
        /**
         * @target web
         */
        static boundsFromJson(boundsRaw) {
            // TODO: can we just set the right prototype here?
            // Object.setPrototypeOf(...)
            const b = new Bounds();
            b.x = boundsRaw.x;
            b.y = boundsRaw.y;
            b.w = boundsRaw.w;
            b.h = boundsRaw.h;
            return b;
        }
        /**
         * @target web
         */
        boundsToJson(bounds) {
            const json = {};
            json.x = bounds.x;
            json.y = bounds.y;
            json.w = bounds.w;
            json.h = bounds.h;
            return json;
        }
        /**
         * Finishes the lookup for optimized access.
         */
        finish(scale = 1) {
            for (const t of this.staffSystems) {
                t.finish(scale);
            }
            this.isFinished = true;
        }
        /**
         * Adds a new staff sytem to the lookup.
         * @param bounds The staff system bounds to add.
         */
        addStaffSystem(bounds) {
            bounds.index = this.staffSystems.length;
            bounds.boundsLookup = this;
            this.staffSystems.push(bounds);
            this._currentStaffSystem = bounds;
        }
        /**
         * Adds a new master bar to the lookup.
         * @param bounds The master bar bounds to add.
         */
        addMasterBar(bounds) {
            if (!bounds.staffSystemBounds) {
                bounds.staffSystemBounds = this._currentStaffSystem;
                this._masterBarLookup.set(bounds.index, bounds);
                this._currentStaffSystem.addBar(bounds);
            }
            else {
                this._masterBarLookup.set(bounds.index, bounds);
            }
        }
        /**
         * Adds a new beat to the lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            if (!this._beatLookup.has(bounds.beat.id)) {
                this._beatLookup.set(bounds.beat.id, []);
            }
            this._beatLookup.get(bounds.beat.id)?.push(bounds);
        }
        /**
         * Tries to find the master bar bounds by a given index.
         * @param index The index of the master bar to find.
         * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
         */
        findMasterBarByIndex(index) {
            if (this._masterBarLookup.has(index)) {
                return this._masterBarLookup.get(index);
            }
            return null;
        }
        /**
         * Tries to find the master bar bounds by a given master bar.
         * @param bar The master bar to find.
         * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
         */
        findMasterBar(bar) {
            const id = bar.index;
            if (this._masterBarLookup.has(id)) {
                return this._masterBarLookup.get(id);
            }
            return null;
        }
        /**
         * Tries to find the bounds of a given beat.
         * @param beat The beat to find.
         * @returns The beat bounds if it was rendered, or null if no boundary information is available.
         */
        findBeat(beat) {
            const all = this.findBeats(beat);
            return all ? all[0] : null;
        }
        /**
         * Tries to find the bounds of a given beat.
         * @param beat The beat to find.
         * @returns The beat bounds if it was rendered, or null if no boundary information is available.
         */
        findBeats(beat) {
            const id = beat.id;
            if (this._beatLookup.has(id)) {
                return this._beatLookup.get(id);
            }
            return null;
        }
        /**
         * Tries to find a beat at the given absolute position.
         * @param x The absolute X-position of the beat to find.
         * @param y The absolute Y-position of the beat to find.
         * @returns The beat found at the given position or null if no beat could be found.
         */
        getBeatAtPos(x, y) {
            //
            // find a bar which matches in y-axis
            let bottom = 0;
            let top = this.staffSystems.length - 1;
            let staffSystemIndex = -1;
            while (bottom <= top) {
                const middle = ((top + bottom) / 2) | 0;
                const system = this.staffSystems[middle];
                // found?
                if (y >= system.realBounds.y && y <= system.realBounds.y + system.realBounds.h) {
                    staffSystemIndex = middle;
                    break;
                }
                // search in lower half
                if (y < system.realBounds.y) {
                    top = middle - 1;
                }
                else {
                    bottom = middle + 1;
                }
            }
            // no bar found
            if (staffSystemIndex === -1) {
                return null;
            }
            //
            // Find the matching bar in the row
            const staffSystem = this.staffSystems[staffSystemIndex];
            const bar = staffSystem.findBarAtPos(x);
            if (bar) {
                return bar.findBeatAtPos(x, y);
            }
            return null;
        }
        /**
         * Tries to find the note at the given position using the given beat for fast access.
         * Use {@link findBeat} to find a beat for a given position first.
         * @param beat The beat containing the note.
         * @param x The X-position of the note.
         * @param y The Y-position of the note.
         * @returns The note at the given position within the beat.
         */
        getNoteAtPos(beat, x, y) {
            const beatBounds = this.findBeats(beat);
            if (beatBounds) {
                for (const b of beatBounds) {
                    const note = b.findNoteAtPos(x, y);
                    if (note) {
                        return note;
                    }
                }
            }
            return null;
        }
    }

    /**
     * This is the main wrapper of the rendering engine which
     * can render a single track of a score object into a notation sheet.
     */
    class ScoreRenderer {
        /**
         * Initializes a new instance of the {@link ScoreRenderer} class.
         * @param settings The settings to use for rendering.
         */
        constructor(settings) {
            this._currentLayoutMode = exports.LayoutMode.Page;
            this._currentRenderEngine = null;
            this._renderedTracks = null;
            this.canvas = null;
            this.score = null;
            this.tracks = null;
            /**
             * @internal
             */
            this.layout = null;
            this.boundsLookup = null;
            this.width = 0;
            this.preRender = new EventEmitterOfT();
            this.renderFinished = new EventEmitterOfT();
            this.partialRenderFinished = new EventEmitterOfT();
            this.partialLayoutFinished = new EventEmitterOfT();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
            this.settings = settings;
            this.recreateCanvas();
            this.recreateLayout();
        }
        destroy() {
            this.score = null;
            this.canvas?.destroy();
            this.canvas = null;
            this.layout = null;
            this.boundsLookup = null;
            this.tracks = null;
        }
        recreateCanvas() {
            if (this._currentRenderEngine !== this.settings.core.engine) {
                this.canvas?.destroy();
                this.canvas = Environment.getRenderEngineFactory(this.settings.core.engine).createCanvas();
                this._currentRenderEngine = this.settings.core.engine;
                return true;
            }
            return false;
        }
        recreateLayout() {
            if (!this.layout || this._currentLayoutMode !== this.settings.display.layoutMode) {
                this.layout = Environment.getLayoutEngineFactory(this.settings.display.layoutMode).createLayout(this);
                this._currentLayoutMode = this.settings.display.layoutMode;
                return true;
            }
            return false;
        }
        renderScore(score, trackIndexes) {
            try {
                this.score = score;
                let tracks = null;
                if (score != null && trackIndexes != null) {
                    if (!trackIndexes) {
                        tracks = score.tracks.slice(0);
                    }
                    else {
                        tracks = [];
                        for (const track of trackIndexes) {
                            if (track >= 0 && track < score.tracks.length) {
                                tracks.push(score.tracks[track]);
                            }
                        }
                    }
                    if (tracks.length === 0 && score.tracks.length > 0) {
                        tracks.push(score.tracks[0]);
                    }
                }
                this.tracks = tracks;
                this.render();
            }
            catch (e) {
                this.error.trigger(e);
            }
        }
        /**
         * Initiates rendering fof the given tracks.
         * @param tracks The tracks to render.
         */
        renderTracks(tracks) {
            if (tracks.length === 0) {
                this.score = null;
            }
            else {
                this.score = tracks[0].score;
            }
            this.tracks = tracks;
            this.render();
        }
        updateSettings(settings) {
            this.settings = settings;
        }
        renderResult(resultId) {
            try {
                const layout = this.layout;
                if (layout) {
                    Logger.debug('Rendering', `Request render of lazy partial ${resultId}`);
                    layout.renderLazyPartial(resultId);
                }
                else {
                    Logger.warning('Rendering', `Request render of lazy partial ${resultId} ignored, no layout exists`);
                }
            }
            catch (e) {
                this.error.trigger(e);
            }
        }
        render() {
            if (this.width === 0) {
                Logger.warning('Rendering', 'AlphaTab skipped rendering because of width=0 (element invisible)', null);
                return;
            }
            this.boundsLookup = new BoundsLookup();
            this.recreateCanvas();
            this.canvas.lineWidth = 1;
            this.canvas.settings = this.settings;
            if (!this.tracks || this.tracks.length === 0 || !this.score) {
                Logger.debug('Rendering', 'Clearing rendered tracks because no score or tracks are set');
                this.preRender.trigger(false);
                this._renderedTracks = null;
                this.onRenderFinished();
                this.postRenderFinished.trigger();
                Logger.debug('Rendering', 'Clearing finished');
            }
            else {
                Logger.debug('Rendering', `Rendering ${this.tracks.length} tracks`);
                for (let i = 0; i < this.tracks.length; i++) {
                    const track = this.tracks[i];
                    Logger.debug('Rendering', `Track ${i}: ${track.name}`);
                }
                this.preRender.trigger(false);
                this.recreateLayout();
                this.layoutAndRender();
                Logger.debug('Rendering', 'Rendering finished');
            }
        }
        resizeRender() {
            if (this.recreateLayout() || this.recreateCanvas() || this._renderedTracks !== this.tracks || !this.tracks) {
                Logger.debug('Rendering', 'Starting full rerendering due to layout or canvas change', null);
                this.render();
            }
            else if (this.layout.supportsResize) {
                Logger.debug('Rendering', 'Starting optimized rerendering for resize');
                this.boundsLookup = new BoundsLookup();
                this.preRender.trigger(true);
                this.canvas.settings = this.settings;
                this.layout.resize();
                this.onRenderFinished();
                this.postRenderFinished.trigger();
            }
            else {
                Logger.debug('Rendering', 'Current layout does not support dynamic resizing, nothing was done', null);
            }
            Logger.debug('Rendering', 'Resize finished');
        }
        layoutAndRender() {
            Logger.debug('Rendering', `Rendering at scale ${this.settings.display.scale} with layout ${this.layout.name}`, null);
            this.layout.layoutAndRender();
            this._renderedTracks = this.tracks;
            this.onRenderFinished();
            this.postRenderFinished.trigger();
        }
        onRenderFinished() {
            this.boundsLookup?.finish(this.settings.display.scale);
            const e = new RenderFinishedEventArgs();
            e.totalHeight = this.layout.height;
            e.totalWidth = this.layout.width;
            e.renderResult = this.canvas.onRenderFinished();
            this.renderFinished.trigger(e);
        }
    }

    /**
     * @target web
     */
    class AlphaTabWebWorker {
        constructor(main) {
            this._main = main;
            this._main.addEventListener('message', this.handleMessage.bind(this), false);
        }
        static init() {
            Environment.globalThis.alphaTabWebWorker = new AlphaTabWebWorker(Environment.globalThis);
        }
        handleMessage(e) {
            const data = e.data;
            const cmd = data ? data.cmd : '';
            switch (cmd) {
                case 'alphaTab.initialize':
                    const settings = JsonConverter.jsObjectToSettings(data.settings);
                    Logger.logLevel = settings.core.logLevel;
                    this._renderer = new ScoreRenderer(settings);
                    this._renderer.partialRenderFinished.on(result => {
                        this._main.postMessage({
                            cmd: 'alphaTab.partialRenderFinished',
                            result: result
                        });
                    });
                    this._renderer.partialLayoutFinished.on(result => {
                        this._main.postMessage({
                            cmd: 'alphaTab.partialLayoutFinished',
                            result: result
                        });
                    });
                    this._renderer.renderFinished.on(result => {
                        this._main.postMessage({
                            cmd: 'alphaTab.renderFinished',
                            result: result
                        });
                    });
                    this._renderer.postRenderFinished.on(() => {
                        this._main.postMessage({
                            cmd: 'alphaTab.postRenderFinished',
                            boundsLookup: this._renderer.boundsLookup?.toJson() ?? null
                        });
                    });
                    this._renderer.preRender.on(resize => {
                        this._main.postMessage({
                            cmd: 'alphaTab.preRender',
                            resize: resize
                        });
                    });
                    this._renderer.error.on(this.error.bind(this));
                    break;
                case 'alphaTab.invalidate':
                    this._renderer.render();
                    break;
                case 'alphaTab.resizeRender':
                    this._renderer.resizeRender();
                    break;
                case 'alphaTab.renderResult':
                    this._renderer.renderResult(data.resultId);
                    break;
                case 'alphaTab.setWidth':
                    this._renderer.width = data.width;
                    break;
                case 'alphaTab.renderScore':
                    this.updateFontSizes(data.fontSizes);
                    const score = data.score == null ? null : JsonConverter.jsObjectToScore(data.score, this._renderer.settings);
                    this.renderMultiple(score, data.trackIndexes);
                    break;
                case 'alphaTab.updateSettings':
                    this.updateSettings(data.settings);
                    break;
            }
        }
        updateFontSizes(fontSizes) {
            if (!(fontSizes instanceof Map)) {
                const obj = fontSizes;
                fontSizes = new Map();
                for (const font in obj) {
                    fontSizes.set(font, obj[font]);
                }
            }
            if (fontSizes) {
                if (!FontSizes.FontSizeLookupTables) {
                    FontSizes.FontSizeLookupTables = new Map();
                }
                for (const [k, v] of fontSizes) {
                    FontSizes.FontSizeLookupTables.set(k, v);
                }
            }
        }
        updateSettings(json) {
            SettingsSerializer.fromJson(this._renderer.settings, json);
        }
        renderMultiple(score, trackIndexes) {
            try {
                this._renderer.renderScore(score, trackIndexes);
            }
            catch (e) {
                this.error(e);
            }
        }
        error(error) {
            Logger.error('Worker', 'An unexpected error occurred in worker', error);
            this._main.postMessage({
                cmd: 'alphaTab.error',
                error: error
            });
        }
    }

    /**
     * A canvas implementation for HTML5 canvas
     * @target web
     */
    class Html5Canvas {
        constructor() {
            this._canvas = null;
            this._color = new Color(0, 0, 0, 0xff);
            this._font = new Font('Arial', 10, FontStyle.Plain);
            this._lineWidth = 0;
            this._measureCanvas = document.createElement('canvas');
            this._measureCanvas.width = 10;
            this._measureCanvas.height = 10;
            this._measureCanvas.style.width = '10px';
            this._measureCanvas.style.height = '10px';
            this._measureContext = this._measureCanvas.getContext('2d');
            this._measureContext.textBaseline = 'hanging';
        }
        destroy() {
        }
        onRenderFinished() {
            return null;
        }
        beginRender(width, height) {
            this._musicFont = this.settings.display.resources.smuflFont;
            const scale = this.settings.display.scale;
            this._canvas = document.createElement('canvas');
            this._canvas.width = (width * Environment.HighDpiFactor) | 0;
            this._canvas.height = (height * Environment.HighDpiFactor) | 0;
            this._canvas.style.width = `${width}px`;
            this._canvas.style.height = `${height}px`;
            this._context = this._canvas.getContext('2d');
            this._context.textBaseline = 'hanging';
            this._context.scale(Environment.HighDpiFactor * scale, Environment.HighDpiFactor * scale);
            this._context.lineWidth = this._lineWidth;
        }
        endRender() {
            const result = this._canvas;
            this._canvas = null;
            return result;
        }
        get color() {
            return this._color;
        }
        set color(value) {
            if (this._color.rgba === value.rgba) {
                return;
            }
            this._color = value;
            this._context.strokeStyle = value.rgba;
            this._context.fillStyle = value.rgba;
        }
        get lineWidth() {
            return this._lineWidth;
        }
        set lineWidth(value) {
            this._lineWidth = value;
            if (this._context) {
                this._context.lineWidth = value;
            }
        }
        fillRect(x, y, w, h) {
            if (w > 0) {
                this._context.fillRect(x | 0, y | 0, w, h);
            }
        }
        strokeRect(x, y, w, h) {
            const blurOffset = this.lineWidth % 2 === 0 ? 0 : 0.5;
            this._context.strokeRect((x | 0) + blurOffset, (y | 0) + blurOffset, w, h);
        }
        beginPath() {
            this._context.beginPath();
        }
        closePath() {
            this._context.closePath();
        }
        moveTo(x, y) {
            this._context.moveTo(x, y);
        }
        lineTo(x, y) {
            this._context.lineTo(x, y);
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this._context.quadraticCurveTo(cpx, cpy, x, y);
        }
        bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
            this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
        }
        fillCircle(x, y, radius) {
            this._context.beginPath();
            this._context.arc(x, y, radius, 0, Math.PI * 2, true);
            this.fill();
        }
        strokeCircle(x, y, radius) {
            this._context.beginPath();
            this._context.arc(x, y, radius, 0, Math.PI * 2, true);
            this.stroke();
        }
        fill() {
            this._context.fill();
            this._context.beginPath();
        }
        stroke() {
            this._context.stroke();
            this._context.beginPath();
        }
        get font() {
            return this._font;
        }
        set font(value) {
            this._font = value;
            if (this._context) {
                this._context.font = value.toCssString(1);
            }
            this._measureContext.font = value.toCssString(1);
        }
        get textAlign() {
            switch (this._context.textAlign) {
                case 'left':
                    return TextAlign.Left;
                case 'center':
                    return TextAlign.Center;
                case 'right':
                    return TextAlign.Right;
                default:
                    return TextAlign.Left;
            }
        }
        set textAlign(value) {
            switch (value) {
                case TextAlign.Left:
                    this._context.textAlign = 'left';
                    break;
                case TextAlign.Center:
                    this._context.textAlign = 'center';
                    break;
                case TextAlign.Right:
                    this._context.textAlign = 'right';
                    break;
            }
        }
        get textBaseline() {
            switch (this._context.textBaseline) {
                case 'hanging':
                    return TextBaseline.Top;
                case 'middle':
                    return TextBaseline.Middle;
                case 'bottom':
                    return TextBaseline.Bottom;
                default:
                    return TextBaseline.Top;
            }
        }
        set textBaseline(value) {
            switch (value) {
                case TextBaseline.Top:
                    this._context.textBaseline = 'hanging';
                    break;
                case TextBaseline.Middle:
                    this._context.textBaseline = 'middle';
                    break;
                case TextBaseline.Bottom:
                    this._context.textBaseline = 'bottom';
                    break;
            }
        }
        beginGroup(_) {
        }
        endGroup() {
        }
        fillText(text, x, y) {
            this._context.fillText(text, x, y);
        }
        measureText(text) {
            const metrics = this._measureContext.measureText(text);
            return new MeasuredText(metrics.width, metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent);
        }
        fillMusicFontSymbol(x, y, relativeScale, symbol, centerAtPosition = false) {
            if (symbol === MusicFontSymbol.None) {
                return;
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, String.fromCharCode(symbol), centerAtPosition);
        }
        fillMusicFontSymbols(x, y, relativeScale, symbols, centerAtPosition = false) {
            let s = '';
            for (const symbol of symbols) {
                if (symbol !== MusicFontSymbol.None) {
                    s += String.fromCharCode(symbol);
                }
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, s, centerAtPosition);
        }
        fillMusicFontSymbolText(x, y, relativeScale, symbols, centerAtPosition) {
            const textAlign = this._context.textAlign;
            const baseLine = this._context.textBaseline;
            const font = this._context.font;
            this._context.font = this._musicFont.toCssString(relativeScale);
            this._context.textBaseline = 'middle';
            if (centerAtPosition) {
                this._context.textAlign = 'center';
            }
            else {
                this._context.textAlign = 'left';
            }
            this._context.fillText(symbols, x, y);
            this._context.textBaseline = baseLine;
            this._context.font = font;
            this._context.textAlign = textAlign;
        }
        beginRotate(centerX, centerY, angle) {
            this._context.save();
            this._context.translate(centerX, centerY);
            this._context.rotate((angle * Math.PI) / 180.0);
        }
        endRotate() {
            this._context.restore();
        }
    }

    /**
     * This implementation of the {@link IMidiFileHandler}
     * generates a {@link MidiFile} object which can be used in AlphaSynth for playback.
     */
    class AlphaSynthMidiFileHandler {
        /**
         * Initializes a new instance of the {@link AlphaSynthMidiFileHandler} class.
         * @param midiFile The midi file.
         * @param smf1Mode Whether to generate a SMF1 compatible midi file. This might break multi note bends.
         */
        constructor(midiFile, smf1Mode = false) {
            this._midiFile = midiFile;
            this._smf1Mode = smf1Mode;
        }
        addTimeSignature(tick, timeSignatureNumerator, timeSignatureDenominator) {
            let denominatorIndex = 0;
            let denominator = timeSignatureDenominator;
            while (true) {
                denominator = denominator >> 1;
                if (denominator > 0) {
                    denominatorIndex++;
                }
                else {
                    break;
                }
            }
            this._midiFile.addEvent(new TimeSignatureEvent(0, tick, timeSignatureNumerator, denominatorIndex, 48, 8));
        }
        addRest(track, tick, channel) {
            if (!this._smf1Mode) {
                this._midiFile.addEvent(new AlphaTabRestEvent(track, tick, channel));
            }
        }
        addNote(track, start, length, key, velocity, channel) {
            this._midiFile.addEvent(new NoteOnEvent(track, start, channel, AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity)));
            this._midiFile.addEvent(new NoteOffEvent(track, start + length, channel, AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity)));
        }
        static fixValue(value) {
            if (value > 127) {
                return 127;
            }
            if (value < 0) {
                return 0;
            }
            return value;
        }
        addControlChange(track, tick, channel, controller, value) {
            this._midiFile.addEvent(new ControlChangeEvent(track, tick, channel, controller, AlphaSynthMidiFileHandler.fixValue(value)));
        }
        addProgramChange(track, tick, channel, program) {
            this._midiFile.addEvent(new ProgramChangeEvent(track, tick, channel, program));
        }
        addTempo(tick, tempo) {
            // bpm -> microsecond per quarter note
            const tempoEvent = new TempoChangeEvent(tick, 0);
            tempoEvent.beatsPerMinute = tempo;
            this._midiFile.addEvent(tempoEvent);
        }
        addBend(track, tick, channel, value) {
            if (value >= SynthConstants.MaxPitchWheel) {
                value = SynthConstants.MaxPitchWheel;
            }
            else {
                value = Math.floor(value);
            }
            this._midiFile.addEvent(new PitchBendEvent(track, tick, channel, value));
        }
        addNoteBend(track, tick, channel, key, value) {
            if (this._smf1Mode) {
                this.addBend(track, tick, channel, value);
            }
            else {
                // map midi 1.0 range of 0-16384     (0x4000)
                // to midi 2.0 range of 0-4294967296 (0x100000000)
                value = (value * SynthConstants.MaxPitchWheel20) / SynthConstants.MaxPitchWheel;
                this._midiFile.addEvent(new NoteBendEvent(track, tick, channel, key, value));
            }
        }
        finishTrack(track, tick) {
            if (this._midiFile.format === MidiFileFormat.MultiTrack || track === 0) {
                this._midiFile.addEvent(new EndOfTrackEvent(track, tick));
            }
        }
    }

    /**
     * Helper container to handle repeats correctly
     */
    class Repeat {
        constructor(group, opening) {
            this.closingIndex = 0;
            this.group = group;
            this.opening = opening;
            // sort ascending according to index
            group.closings = group.closings.sort((a, b) => a.index - b.index);
            this.iterations = group.closings.map(_ => 0);
        }
    }
    var MidiPlaybackControllerState;
    (function (MidiPlaybackControllerState) {
        /**
         * Normally playing with repeats.
         */
        MidiPlaybackControllerState[MidiPlaybackControllerState["PlayingNormally"] = 0] = "PlayingNormally";
        /**
         * We "jumped" to a new location (e.g. via Da Capo). So we're ignoring repeats.
         */
        MidiPlaybackControllerState[MidiPlaybackControllerState["DirectionJumped"] = 1] = "DirectionJumped";
        /**
         * We "jumped" to a new location via a 'al Coda' jump, hence respecting 'DaCoda' now.
         */
        MidiPlaybackControllerState[MidiPlaybackControllerState["DirectionJumpedAlCoda"] = 2] = "DirectionJumpedAlCoda";
        /**
         * We "jumped" to a new location via a 'al Double Coda' jump, hence respecting 'DaDoubleCoda' now.
         */
        MidiPlaybackControllerState[MidiPlaybackControllerState["DirectionJumpedAlDoubleCoda"] = 3] = "DirectionJumpedAlDoubleCoda";
        /**
         * We "jumped" to a new location via a 'al Fine' jump, hence respecting 'Fine' now.
         */
        MidiPlaybackControllerState[MidiPlaybackControllerState["DirectionJumpedAlFine"] = 4] = "DirectionJumpedAlFine";
    })(MidiPlaybackControllerState || (MidiPlaybackControllerState = {}));
    class MidiPlaybackController {
        get finished() {
            return this.index >= this._score.masterBars.length;
        }
        constructor(score) {
            this._repeatStack = [];
            this._groupsOnStack = new Set();
            this._previousAlternateEndings = 0;
            this._state = MidiPlaybackControllerState.PlayingNormally;
            this.shouldPlay = true;
            this.index = 0;
            this.currentTick = 0;
            this._score = score;
        }
        processCurrent() {
            const masterBar = this._score.masterBars[this.index];
            if (this._state === MidiPlaybackControllerState.PlayingNormally) {
                let masterBarAlternateEndings = masterBar.alternateEndings;
                // if there are no alternate endings set on this bar. take the ones
                // from the previously played bar which had alternate endings
                if (masterBarAlternateEndings === 0) {
                    masterBarAlternateEndings = this._previousAlternateEndings;
                }
                // Repeat start (only properly closed ones)
                if (masterBar === masterBar.repeatGroup.opening && masterBar.repeatGroup.isClosed) {
                    // first encounter of the repeat group? -> initialize repeats accordingly
                    if (!this._groupsOnStack.has(masterBar.repeatGroup)) {
                        const repeat = new Repeat(masterBar.repeatGroup, masterBar);
                        this._repeatStack.push(repeat);
                        this._groupsOnStack.add(masterBar.repeatGroup);
                        this._previousAlternateEndings = 0;
                        masterBarAlternateEndings = masterBar.alternateEndings;
                    }
                }
                // if we're not within repeats or not alternative endings set -> simply play
                if (this._repeatStack.length === 0 || masterBarAlternateEndings === 0) {
                    this.shouldPlay = true;
                }
                else {
                    const repeat = this._repeatStack[this._repeatStack.length - 1];
                    const iteration = repeat.iterations[repeat.closingIndex];
                    this._previousAlternateEndings = masterBarAlternateEndings;
                    // do we need to skip this section?
                    if ((masterBarAlternateEndings & (1 << iteration)) === 0) {
                        this.shouldPlay = false;
                    }
                    else {
                        this.shouldPlay = true;
                    }
                }
            }
            else {
                this.shouldPlay = true;
            }
            if (this.shouldPlay) {
                this.currentTick += masterBar.calculateDuration();
            }
        }
        moveNext() {
            if (this.moveNextWithDirections()) {
                return;
            }
            this.moveNextWithNormalRepeats();
        }
        resetRepeats() {
            this._groupsOnStack.clear();
            this._previousAlternateEndings = 0;
            this._repeatStack = [];
        }
        handleDaCapo(directions, daCapo, newState) {
            if (directions.has(daCapo)) {
                this.index = 0; // jump to start
                this._state = newState;
                this.resetRepeats();
                return true;
            }
            return false;
        }
        handleDalSegno(directions, dalSegno, newState, jumpTarget) {
            if (directions.has(dalSegno)) {
                const segno = this.findJumpTarget(jumpTarget, this.index, true /* typically jumps are backwards */);
                if (segno === -1) {
                    // no jump target found, keep playing normally
                    return false;
                }
                this.index = segno;
                this._state = newState;
                this.resetRepeats();
                return true;
            }
            return false;
        }
        handleDaCoda(directions, daCoda, jumpTarget) {
            // Found the "Da Coda" after the jump -> Jump further
            if (directions.has(daCoda)) {
                const coda = this.findJumpTarget(jumpTarget, this.index, false /* typically da coda jumps are forwards */);
                if (coda === -1) {
                    // no coda found, continue playing normally to end.
                    this.index++;
                    return true;
                }
                this.index = coda;
                // back to normal playback after target jump.
                this._state = MidiPlaybackControllerState.PlayingNormally;
                return true;
            }
            return false;
        }
        moveNextWithDirections() {
            const masterBar = this._score.masterBars[this.index];
            const hasDirections = masterBar.directions !== null && masterBar.directions.size > 0;
            // fast exit paths:
            // normal playback and no directions to respect
            if (this._state === MidiPlaybackControllerState.PlayingNormally && !hasDirections) {
                return false;
            }
            if (!hasDirections) {
                // playing in a directions state, we ignore all repeats and just continue playing one after another
                // NOTE: its not really clearly defined what to do if we have repeats and directions combined in a piece
                // e.g. if there is a repeat with alternate endings, it makes sense to only play the "initial path" without
                // any repeats but skipping the bars which would only be played as part of endings?
                // for now we keep it simple. if somebody reports special needs we can still add them.
                this.index++;
                return true;
            }
            // longer path: respect directions based on the state we're in
            switch (this._state) {
                case MidiPlaybackControllerState.PlayingNormally:
                    // Da capo Jumps (to start)
                    // prettier-ignore
                    if (this.handleDaCapo(masterBar.directions, Direction.JumpDaCapo, MidiPlaybackControllerState.DirectionJumped) ||
                        this.handleDaCapo(masterBar.directions, Direction.JumpDaCapoAlCoda, MidiPlaybackControllerState.DirectionJumpedAlCoda) ||
                        this.handleDaCapo(masterBar.directions, Direction.JumpDaCapoAlDoubleCoda, MidiPlaybackControllerState.DirectionJumpedAlDoubleCoda) ||
                        this.handleDaCapo(masterBar.directions, Direction.JumpDaCapoAlFine, MidiPlaybackControllerState.DirectionJumpedAlFine)) {
                        return true;
                    }
                    // Dal Segno Jumps
                    // prettier-ignore
                    if (this.handleDalSegno(masterBar.directions, Direction.JumpDalSegno, MidiPlaybackControllerState.DirectionJumped, Direction.TargetSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoAlCoda, MidiPlaybackControllerState.DirectionJumpedAlCoda, Direction.TargetSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoAlDoubleCoda, MidiPlaybackControllerState.DirectionJumpedAlDoubleCoda, Direction.TargetSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoAlFine, MidiPlaybackControllerState.DirectionJumpedAlFine, Direction.TargetSegno)) {
                        return true;
                    }
                    // Dal SegnoSegno Jumps
                    // prettier-ignore
                    if (this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoSegno, MidiPlaybackControllerState.DirectionJumped, Direction.TargetSegnoSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoSegnoAlCoda, MidiPlaybackControllerState.DirectionJumpedAlCoda, Direction.TargetSegnoSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoSegnoAlDoubleCoda, MidiPlaybackControllerState.DirectionJumpedAlDoubleCoda, Direction.TargetSegnoSegno) ||
                        this.handleDalSegno(masterBar.directions, Direction.JumpDalSegnoSegnoAlFine, MidiPlaybackControllerState.DirectionJumpedAlFine, Direction.TargetSegnoSegno)) {
                        return true;
                    }
                    // no relevant direction found, continue normal playback
                    return false;
                case MidiPlaybackControllerState.DirectionJumped:
                    // when we had a jump without special indication, we just keep playing 1-by-1 until the end
                    this.index++;
                    return true;
                case MidiPlaybackControllerState.DirectionJumpedAlCoda:
                    // Found the "Da Coda" after the jump -> Jump further
                    if (this.handleDaCoda(masterBar.directions, Direction.JumpDaCoda, Direction.TargetCoda)) {
                        return true;
                    }
                    // no relevant direction found, we just keep playing 1-by-1 without repeats
                    this.index++;
                    return true;
                case MidiPlaybackControllerState.DirectionJumpedAlDoubleCoda:
                    if (this.handleDaCoda(masterBar.directions, Direction.JumpDaDoubleCoda, Direction.TargetDoubleCoda)) {
                        return true;
                    }
                    // no relevant direction found, we just keep playing 1-by-1 without repeats
                    this.index++;
                    return true;
                case MidiPlaybackControllerState.DirectionJumpedAlFine:
                    if (masterBar.directions.has(Direction.TargetFine)) {
                        this.index = this._score.masterBars.length; // finished
                        return true;
                    }
                    // no relevant direction found, we just keep playing 1-by-1 without repeats
                    this.index++;
                    return true;
            }
            return true;
        }
        /**
         * Finds the index of the masterbar with the given direction applied which fits best
         * the given start index. In best case in one piece we only have single jump marks, but it could happen
         * that you have multiple Segno/Coda symbols placed at different sections.
         * @param toFind
         * @param searchIndex
         * @param backwardsFirst whether to first search backwards before looking forwards.
         * @returns the index of the masterbar found with the given direction or -1 if no masterbar with the given direction was found.
         */
        findJumpTarget(toFind, searchIndex, backwardsFirst) {
            let index;
            if (backwardsFirst) {
                index = this.findJumpTargetBackwards(toFind, searchIndex);
                if (index === -1) {
                    index = this.findJumpTargetForwards(toFind, searchIndex);
                }
                return index;
            }
            index = this.findJumpTargetForwards(toFind, searchIndex);
            if (index === -1) {
                index = this.findJumpTargetBackwards(toFind, searchIndex);
            }
            return index;
        }
        findJumpTargetForwards(toFind, searchIndex) {
            let index = searchIndex;
            while (index < this._score.masterBars.length) {
                const d = this._score.masterBars[index].directions;
                if (d && d.has(toFind)) {
                    return index;
                }
                index++;
            }
            return -1;
        }
        findJumpTargetBackwards(toFind, searchIndex) {
            let index = searchIndex;
            while (index >= 0) {
                const d = this._score.masterBars[index].directions;
                if (d && d.has(toFind)) {
                    return index;
                }
                index--;
            }
            return -1;
        }
        moveNextWithNormalRepeats() {
            const masterBar = this._score.masterBars[this.index];
            const masterBarRepeatCount = masterBar.repeatCount - 1;
            // if we encounter a repeat end...
            if (this._repeatStack.length > 0 && masterBarRepeatCount > 0) {
                // ...more repeats required?
                const repeat = this._repeatStack[this._repeatStack.length - 1];
                const iteration = repeat.iterations[repeat.closingIndex];
                // -> if yes, increase the iteration and jump back to start
                if (iteration < masterBarRepeatCount) {
                    // jump to start
                    this.index = repeat.opening.index;
                    repeat.iterations[repeat.closingIndex]++;
                    // clear iterations for previous closings and start over all repeats
                    // this ensures on scenarios like "open, bar, close, bar, close"
                    // that the second close will repeat again the first repeat.
                    for (let i = 0; i < repeat.closingIndex; i++) {
                        repeat.iterations[i] = 0;
                    }
                    repeat.closingIndex = 0;
                    this._previousAlternateEndings = 0;
                }
                else {
                    // if we don't have further iterations left but we have additional closings in this group
                    // proceed heading to the next close but keep the repeat group active
                    if (repeat.closingIndex < repeat.group.closings.length - 1) {
                        repeat.closingIndex++;
                        this.index++; // go to next bar after current close
                    }
                    else {
                        // if there are no further closings in the current group, we consider the current repeat done and handled
                        this._repeatStack.pop();
                        this._groupsOnStack.delete(repeat.group);
                        this.index++; // go to next bar after current close
                    }
                }
            }
            else {
                // we have no started repeat, just proceed to next bar
                this.index++;
            }
        }
    }

    /**
     * Represents a beat and when it is actually played according to the generated audio.
     */
    class BeatTickLookupItem {
        constructor(beat, playbackStart) {
            this.beat = beat;
            this.playbackStart = playbackStart;
        }
    }
    /**
     * Represents the time period, for which one or multiple {@link Beat}s are played
     */
    class BeatTickLookup {
        /**
         * Gets the tick duration of this lookup.
         */
        get duration() {
            return this.end - this.start;
        }
        constructor(start, end) {
            this._highlightedBeats = new Map();
            /**
             * Gets or sets a list of all beats that should be highlighted when
             * the beat of this lookup starts playing. This might not mean
             * the beats start at this position.
             */
            this.highlightedBeats = [];
            /**
             * Gets the next BeatTickLookup which comes after this one and is in the same
             * MasterBarTickLookup.
             */
            this.nextBeat = null;
            /**
             * Gets the preivous BeatTickLookup which comes before this one and is in the same
             * MasterBarTickLookup.
             */
            this.previousBeat = null;
            this.start = start;
            this.end = end;
        }
        /**
         * Marks the given beat as highlighed as part of this lookup.
         * @param beat The beat to add.
         */
        highlightBeat(beat, playbackStart) {
            if (beat.isEmpty && !beat.voice.isEmpty) {
                return;
            }
            if (!this._highlightedBeats.has(beat.id)) {
                this._highlightedBeats.set(beat.id, true);
                this.highlightedBeats.push(new BeatTickLookupItem(beat, playbackStart));
            }
        }
        /**
         * Looks for the first visible beat which starts at this lookup so it can be used for cursor placement.
         * @param visibleTracks The visible tracks.
         * @returns The first beat which is visible according to the given tracks or null.
         */
        getVisibleBeatAtStart(visibleTracks) {
            for (const b of this.highlightedBeats) {
                if (b.playbackStart === this.start && visibleTracks.has(b.beat.voice.bar.staff.track.index)) {
                    return b.beat;
                }
            }
            return null;
        }
    }

    /**
     * Represents a single point in time defining the tempo of a {@link MasterBarTickLookup}.
     * This is typically the initial tempo of a master bar or a tempo change.
     */
    class MasterBarTickLookupTempoChange {
        constructor(tick, tempo) {
            this.tick = tick;
            this.tempo = tempo;
        }
    }
    /**
     * Represents the time period, for which all bars of a {@link MasterBar} are played.
     */
    class MasterBarTickLookup {
        constructor() {
            /**
             * Gets or sets the start time in midi ticks at which the MasterBar is played.
             */
            this.start = 0;
            /**
             * Gets or sets the end time in midi ticks at which the MasterBar is played.
             */
            this.end = 0;
            /**
             * Gets the list of tempo changes within the tick lookup.
             */
            this.tempoChanges = [];
            /**
             * The first beat in the bar.
             */
            this.firstBeat = null;
            /**
             * The last beat in the bar.
             */
            this.lastBeat = null;
            /**
             * Gets or sets the {@link MasterBarTickLookup} of the next masterbar in the {@link Score}
             */
            this.nextMasterBar = null;
            /**
             * Gets or sets the {@link MasterBarTickLookup} of the previous masterbar in the {@link Score}
             */
            this.previousMasterBar = null;
        }
        /**
         * Gets or sets the current tempo when the MasterBar is played.
         * @deprecated use {@link tempoChanges}
         */
        get tempo() {
            return this.tempoChanges[0].tempo;
        }
        /**
         * Inserts `newNextBeat` after `currentBeat` in the linked list of items and updates.
         * the `firstBeat` and `lastBeat` respectively too.
         * @param currentBeat The item in which to insert the new item afterwards
         * @param newBeat The new item to insert
         */
        insertAfter(currentBeat, newBeat) {
            if (this.firstBeat == null || currentBeat == null || this.lastBeat == null) {
                this.firstBeat = newBeat;
                this.lastBeat = newBeat;
            }
            else {
                // link new node into sequence
                newBeat.nextBeat = currentBeat.nextBeat;
                newBeat.previousBeat = currentBeat;
                // update this node accordinly
                if (currentBeat.nextBeat) {
                    currentBeat.nextBeat.previousBeat = newBeat;
                }
                currentBeat.nextBeat = newBeat;
                if (currentBeat === this.lastBeat) {
                    this.lastBeat = newBeat;
                }
            }
        }
        /**
         * Inserts `newNextBeat` before `currentBeat` in the linked list of items and updates.
         * the `firstBeat` and `lastBeat` respectively too.
         * @param currentBeat The item in which to insert the new item afterwards
         * @param newBeat The new item to insert
         */
        insertBefore(currentBeat, newBeat) {
            if (this.firstBeat == null || currentBeat == null || this.lastBeat == null) {
                this.firstBeat = newBeat;
                this.lastBeat = newBeat;
            }
            else {
                // link new node into sequence
                newBeat.previousBeat = currentBeat.previousBeat;
                newBeat.nextBeat = currentBeat;
                // update this node accordingly
                if (currentBeat.previousBeat) {
                    currentBeat.previousBeat.nextBeat = newBeat;
                }
                currentBeat.previousBeat = newBeat;
                if (currentBeat === this.firstBeat) {
                    this.firstBeat = newBeat;
                }
            }
        }
        /**
         * Adds a new beat to this masterbar following the slicing logic required by the MidiTickLookup.
         * @param beat The beat to add to this masterbat
         * @param beatPlaybackStart The original start of this beat. This time is relevant for highlighting.
         * @param sliceStart The slice start to which this beat should be added. This time is relevant for creating new slices.
         * @param sliceDuration The slice duration to which this beat should be added. This time is relevant for creating new slices.
         * @returns The first item of the chain which was affected.
         */
        addBeat(beat, beatPlaybackStart, sliceStart, sliceDuration) {
            const end = sliceStart + sliceDuration;
            // We have following scenarios we cover overall on inserts
            // Technically it would be possible to merge some code paths and work with loops
            // to handle all scenarios in a shorter piece of code.
            // but this would make the core a lot harder to understand an less readable
            // and maintainable for the different scenarios.
            // we keep them separate here for that purpose and sacrifice some bytes of code for that.
            // Variant A (initial Insert)
            //              |    New     |
            // Result A
            //              |    New     |
            // Variant B (insert at end, start matches)
            //              |     L1     |    L2     |
            //                                       |   New   |
            // Result B
            //              |     L1     |    L2     |   N1    |
            // Variant C (insert at end, with gap)
            //              |     L1     |    L2     |
            //                                             |   New   |
            // Result C
            //              |     L1     |    L2     |       N1      |
            // Variant D (Starts before, ends exactly):
            //              |     L1     |    L2     |
            //      |  New  |
            // Result D:
            //      |  N1   |     L1     |    L2     |
            // Variant E (Starts before, with gap):
            //              |     L1     |    L2     |
            //    |  New  |
            // Result E:
            //    |  N1     |     L1     |    L2     |
            // Variant F (starts before, overlaps partially):
            //              |     L1     |    L2     |
            //      |      New      |
            // Result F:
            //      |  N1   | N2    | L1 |    L2     |
            // Variant G (starts before, ends the same):
            //              |     L1     |    L2     |
            //      |      New           |
            // Result G:
            //      |  N1   | L1         |    L2     |
            // Variant H (starts before, ends after L1):
            //              |     L1     |    L2     |
            //      |      New                  |
            // Result H:
            //      Step 1 (only slice L1):
            //      |  N1   | L1          |    L2     |
            //      Step 2 (call recursively with start time of 'new' adjusted):
            //                            | New  |
            //      |  N1   | L1          |  N2  | L2 |
            // Variant I (starts in the middle, ends exactly)
            //              |     L1     |    L2     |
            //                    | New  |
            // Result I
            //              | N1  |  L1  |    L2     |
            // Variant J (starts in the middle, ends before)
            //              |     L1     |    L2     |
            //                 | New |
            // Result J
            //              |N1| N2  |L1 |    L2     |
            // Variant K (starts in the middle, ends after L1)
            //              |     L1     |    L2     |
            //                     | New       |
            // Result K
            //      Step 1 (only slice L1):
            //              |  N1  | L1  |    L2     |
            //      Step 2 (call recursively with start time of 'new' adjusted):
            //                           | New  |
            //              |  N1  | L1  |    L2     |
            // Variant L (starts exactly, ends exactly)
            //              |     L1     |    L2     |
            //              |    New     |
            // Result L
            //              |     L1     |    L2     |
            // Variant M (starts exactly, ends before)
            //              |     L1     |    L2     |
            //              |  New |
            // Result M
            //              | N1   | L1  |    L2     |
            // Variant N (starts exactly, ends after L1)
            //              |     L1     |    L2     |
            //              | New              |
            // Result N
            //      Step 1 (only update L1):
            //              |      L1    |    L2     |
            //      Step 2 (call recursively with start time of 'new' adjusted):
            //                           | New |
            //              |     L 1    |    L2     |
            // Variant A
            if (this.firstBeat == null) {
                const n1 = new BeatTickLookup(sliceStart, end);
                n1.highlightBeat(beat, beatPlaybackStart);
                this.insertAfter(this.firstBeat, n1);
            }
            else if (sliceStart >= this.lastBeat.end) {
                // using the end here allows merge of B & C
                const n1 = new BeatTickLookup(this.lastBeat.end, end);
                n1.highlightBeat(beat, beatPlaybackStart);
                this.insertAfter(this.lastBeat, n1);
            }
            else {
                let l1 = null;
                if (sliceStart < this.firstBeat.start) {
                    l1 = this.firstBeat;
                }
                else {
                    let current = this.firstBeat;
                    while (current != null) {
                        // find item where we fall into
                        if (sliceStart >= current.start && sliceStart < current.end) {
                            l1 = current;
                            break;
                        }
                        current = current.nextBeat;
                    }
                    if (l1 === null) {
                        // should not be possible
                        throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Error on building lookup, unknown variant');
                    }
                }
                // those scenarios should only happen if we insert before the
                // first item (e.g. for grace notes starting < 0)
                if (sliceStart < l1.start) {
                    // Variant D
                    // Variant E
                    if (end === l1.start) {
                        // using firstBeat.start here allows merge of D & E
                        const n1 = new BeatTickLookup(sliceStart, l1.start);
                        n1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(this.firstBeat, n1);
                    }
                    else if (end < l1.end) {
                        const n1 = new BeatTickLookup(sliceStart, l1.start);
                        n1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n1);
                        const n2 = new BeatTickLookup(l1.start, end);
                        for (const b of l1.highlightedBeats) {
                            n2.highlightBeat(b.beat, b.playbackStart);
                        }
                        n2.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n2);
                        l1.start = end;
                    }
                    else if (end === l1.end) {
                        const n1 = new BeatTickLookup(sliceStart, l1.start);
                        n1.highlightBeat(beat, beatPlaybackStart);
                        l1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n1);
                    }
                    else {
                        const n1 = new BeatTickLookup(sliceStart, l1.start);
                        n1.highlightBeat(beat, beatPlaybackStart);
                        l1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n1);
                        this.addBeat(beat, beatPlaybackStart, l1.end, end - l1.end);
                    }
                }
                else if (sliceStart > l1.start) {
                    // variant I
                    if (end === l1.end) {
                        const n1 = new BeatTickLookup(l1.start, sliceStart);
                        for (const b of l1.highlightedBeats) {
                            n1.highlightBeat(b.beat, b.playbackStart);
                        }
                        l1.start = sliceStart;
                        l1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n1);
                    }
                    else if (end < l1.end) {
                        const n1 = new BeatTickLookup(l1.start, sliceStart);
                        this.insertBefore(l1, n1);
                        const n2 = new BeatTickLookup(sliceStart, end);
                        this.insertBefore(l1, n2);
                        for (const b of l1.highlightedBeats) {
                            n1.highlightBeat(b.beat, b.playbackStart);
                            n2.highlightBeat(b.beat, b.playbackStart);
                        }
                        n2.highlightBeat(beat, beatPlaybackStart);
                        l1.start = end;
                    }
                    else {
                        const n1 = new BeatTickLookup(l1.start, sliceStart);
                        for (const b of l1.highlightedBeats) {
                            n1.highlightBeat(b.beat, b.playbackStart);
                        }
                        l1.start = sliceStart;
                        l1.highlightBeat(beat, beatPlaybackStart);
                        this.insertBefore(l1, n1);
                        this.addBeat(beat, beatPlaybackStart, l1.end, end - l1.end);
                    }
                }
                else {
                    // Variant L
                    if (end === l1.end) {
                        l1.highlightBeat(beat, beatPlaybackStart);
                    }
                    else if (end < l1.end) {
                        const n1 = new BeatTickLookup(l1.start, end);
                        for (const b of l1.highlightedBeats) {
                            n1.highlightBeat(b.beat, b.playbackStart);
                        }
                        n1.highlightBeat(beat, beatPlaybackStart);
                        l1.start = end;
                        this.insertBefore(l1, n1);
                    }
                    else {
                        l1.highlightBeat(beat, beatPlaybackStart);
                        this.addBeat(beat, beatPlaybackStart, l1.end, end - l1.end);
                    }
                }
            }
        }
    }

    /**
     * Describes how a cursor should be moving.
     */
    var MidiTickLookupFindBeatResultCursorMode;
    (function (MidiTickLookupFindBeatResultCursorMode) {
        /**
         * Unknown/Undetermined mode. Should not happen on user level.
         */
        MidiTickLookupFindBeatResultCursorMode[MidiTickLookupFindBeatResultCursorMode["Unknown"] = 0] = "Unknown";
        /**
         * The cursor should animate to the next beat.
         */
        MidiTickLookupFindBeatResultCursorMode[MidiTickLookupFindBeatResultCursorMode["ToNextBext"] = 1] = "ToNextBext";
        /**
         * The cursor should animate to the end of the bar (typically on repeats and jumps)
         */
        MidiTickLookupFindBeatResultCursorMode[MidiTickLookupFindBeatResultCursorMode["ToEndOfBar"] = 2] = "ToEndOfBar";
    })(MidiTickLookupFindBeatResultCursorMode || (MidiTickLookupFindBeatResultCursorMode = {}));
    /**
     * Represents the results of searching the currently played beat.
     * @see MidiTickLookup.FindBeat
     */
    class MidiTickLookupFindBeatResult {
        get start() {
            return this.masterBar.start + this.beatLookup.start;
        }
        get end() {
            return this.start + this.tickDuration;
        }
        constructor(masterBar) {
            /**
             * Gets or sets the beat that will be played next.
             */
            this.nextBeat = null;
            /**
             * Gets or sets the duration in midi ticks how long this lookup is valid.
             */
            this.tickDuration = 0;
            /**
             * Gets or sets the duration in milliseconds how long this lookup is valid.
             */
            this.duration = 0;
            /**
             * The mode how the cursor should be handled.
             */
            this.cursorMode = MidiTickLookupFindBeatResultCursorMode.Unknown;
            this.masterBar = masterBar;
        }
        calculateDuration() {
            // fast path: only a single tempo throughout the masterbar
            if (this.masterBar.tempoChanges.length === 1) {
                this.duration = MidiUtils.ticksToMillis(this.tickDuration, this.masterBar.tempoChanges[0].tempo);
            }
            else {
                // Performance Note: I still wonder if we cannot calculate these slices efficiently ahead-of-time.
                // the sub-slicing in the lookup across beats makes it a bit tricky to do on-the-fly
                // but maybe on finalizing the tick lookup?
                // slow path: need to walk through the tick time-axis and calculate for each slice the milliseconds
                // matching the tempo
                let millis = 0;
                let currentTick = this.start;
                let currentTempo = this.masterBar.tempoChanges[0].tempo;
                const endTick = this.end;
                // for every change calculate the lot
                for (const change of this.masterBar.tempoChanges) {
                    // seek to the beat
                    if (change.tick < currentTick) {
                        currentTempo = change.tempo;
                    }
                    else if (change.tick > endTick) {
                        break;
                    }
                    else {
                        millis += MidiUtils.ticksToMillis(change.tick - currentTick, currentTempo);
                        currentTempo = change.tempo;
                        currentTick = change.tick;
                    }
                }
                // last slice
                if (endTick > currentTick) {
                    millis += MidiUtils.ticksToMillis(endTick - currentTick, currentTempo);
                }
                this.duration = millis;
            }
        }
    }
    /**
     * This class holds all information about when {@link MasterBar}s and {@link Beat}s are played.
     *
     * On top level it is organized into {@link MasterBarTickLookup} objects indicating the
     * master bar start and end times. This information is used to highlight the currently played bars
     * and it gives access to the played beats in this masterbar and their times.
     *
     * The {@link BeatTickLookup} are then the slices into which the masterbar is separated by the voices and beats
     * of all tracks. An example how things are organized:
     *
     * Time (eighths):  | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |
     *
     * Track 1:         |        B1         |        B2         |    B3   |    B4   |    B5   |    B6   |
     * Track 2:         |                  B7                   |         B7        | B9 | B10| B11| B12|
     * Track 3:         |                                      B13                                      |
     *
     * Lookup:          |        L1         |        L2         |    L3    |   L4   | L5 | L6 | L7 | L8 |
     * Active Beats:
     * - L1             B1,B7,B13
     * - L2                                 B2,B7,B13
     * - L3                                                      B3,B7,B13
     * - L4                                                                 B4,B7,B13
     * - L5                                                                          B5,B9,B13
     * - L6                                                                               B5,B10,B13
     * - L7                                                                                    B6,B11,B13
     * - L8                                                                                         B6,B12,B13
     *
     * Then during playback we build out of this list {@link MidiTickLookupFindBeatResult} objects which are sepcific
     * to the visible tracks displayed. This is required because if only Track 2 is displayed we cannot use the the
     * Lookup L1 alone to determine the start and end of the beat cursor. In this case we will derive a
     * MidiTickLookupFindBeatResult which holds for Time 01 the lookup L1 as start and L3 as end. This will be used
     * both for the cursor and beat highlighting.
     */
    class MidiTickLookup {
        constructor() {
            this._currentMasterBar = null;
            /**
             * A dictionary of all master bars played. The index is the index equals to {@link MasterBar.index}.
             * This lookup only contains the first time a MasterBar is played. For a whole sequence of the song refer to {@link MasterBars}.
             * @internal
             */
            this.masterBarLookup = new Map();
            /**
             * A list of all {@link MasterBarTickLookup} sorted by time.
             */
            this.masterBars = [];
            /**
             * The information about which bars are displayed via multi-bar rests.
             * The key is the start bar, and the value is the additional bars in sequential order.
             * This info allows building the correct "next" beat and duration.
             */
            this.multiBarRestInfo = null;
        }
        /**
         * Finds the currently played beat given a list of tracks and the current time.
         * @param trackLookup The tracks indices in which to search the played beat for.
         * @param tick The current time in midi ticks.
         * @param currentBeatHint Used for optimized lookup during playback. By passing in a previous result lookup of the next one can be optimized using heuristics. (optional).
         * @returns The information about the current beat or null if no beat could be found.
         */
        findBeat(trackLookup, tick, currentBeatHint = null) {
            let result = null;
            if (currentBeatHint) {
                result = this.findBeatFast(trackLookup, currentBeatHint, tick);
            }
            if (!result) {
                result = this.findBeatSlow(trackLookup, currentBeatHint, tick, false);
            }
            return result;
        }
        findBeatFast(trackLookup, currentBeatHint, tick) {
            // still within current lookup.
            if (tick >= currentBeatHint.start && tick < currentBeatHint.end) {
                return currentBeatHint;
            }
            // already on the next beat?
            if (currentBeatHint.nextBeat && tick >= currentBeatHint.nextBeat.start && tick < currentBeatHint.nextBeat.end) {
                const next = currentBeatHint.nextBeat;
                // fill next in chain
                this.fillNextBeat(next, trackLookup);
                return next;
            }
            // likely a loop or manual seek, need to fallback to slow path
            return null;
        }
        fillNextBeatMultiBarRest(current, trackLookup) {
            const group = this.multiBarRestInfo.get(current.masterBar.masterBar.index);
            // this is a bit sensitive. we assume that the sequence of multi-rest bars and the
            // chained nextMasterBar equal. so we just jump over X bars
            let endMasterBar = current.masterBar;
            for (let i = 0; i < group.length; i++) {
                if (!endMasterBar) {
                    break;
                }
                endMasterBar = endMasterBar.nextMasterBar;
            }
            if (endMasterBar) {
                // one more following -> use start of next
                if (endMasterBar.nextMasterBar) {
                    current.nextBeat = this.firstBeatInMasterBar(trackLookup, endMasterBar.nextMasterBar, endMasterBar.nextMasterBar.start, true);
                    // if we have the next beat take the difference between the times as duration
                    if (current.nextBeat) {
                        current.tickDuration = current.nextBeat.start - current.start;
                        current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToNextBext;
                        if (current.nextBeat.masterBar.masterBar.index !== endMasterBar.masterBar.index + 1 &&
                            (current.nextBeat.masterBar.masterBar.index !== endMasterBar.masterBar.index ||
                                current.nextBeat.beat.playbackStart <= current.beat.playbackStart)) {
                            current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
                        }
                    }
                    else {
                        current.tickDuration = endMasterBar.nextMasterBar.end - current.start;
                        current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
                    }
                }
                else {
                    current.tickDuration = endMasterBar.end - current.start;
                    current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
                }
            }
            else {
                Logger.warning('Synth', 'MultiBar Rest Info and the nextMasterBar are out of sync, this is an unexpected error. Please report it as bug.  (broken chain fill-next)');
                // this is wierd, we  have a masterbar without known tick?
                // make a best guess with the number of bars
                current.tickDuration = (current.masterBar.end - current.masterBar.start) * (group.length + 1);
                current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
            }
            current.calculateDuration();
        }
        fillNextBeat(current, trackLookup) {
            // on multibar rests take the duration until the end.
            if (this.isMultiBarRestResult(current)) {
                this.fillNextBeatMultiBarRest(current, trackLookup);
            }
            else {
                this.fillNextBeatDefault(current, trackLookup);
            }
        }
        fillNextBeatDefault(current, trackLookup) {
            current.nextBeat = this.findBeatInMasterBar(current.masterBar, current.beatLookup.nextBeat, current.end, trackLookup, true);
            if (current.nextBeat == null) {
                current.nextBeat = this.findBeatSlow(trackLookup, current, current.end, true);
            }
            // if we have the next beat take the difference between the times as duration
            if (current.nextBeat) {
                current.tickDuration = current.nextBeat.start - current.start;
                current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToNextBext;
                current.calculateDuration();
            }
            else {
                current.tickDuration = current.masterBar.end - current.start;
                current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
                current.calculateDuration();
            }
            // if the next beat is not directly the next master bar (e.g. jumping back or forth)
            // we report no next beat and animate to the end
            if (current.nextBeat &&
                current.nextBeat.masterBar.masterBar.index !== current.masterBar.masterBar.index + 1 &&
                (current.nextBeat.masterBar.masterBar.index !== current.masterBar.masterBar.index ||
                    current.nextBeat.beat.playbackStart <= current.beat.playbackStart)) {
                current.cursorMode = MidiTickLookupFindBeatResultCursorMode.ToEndOfBar;
            }
        }
        isMultiBarRestResult(current) {
            return this.internalIsMultiBarRestResult(current.masterBar.masterBar.index, current.beat);
        }
        internalIsMultiBarRestResult(masterBarIndex, beat) {
            return (this.multiBarRestInfo &&
                this.multiBarRestInfo.has(masterBarIndex) &&
                beat.isRest &&
                beat.voice.bar.isRestOnly);
        }
        findBeatSlow(trackLookup, currentBeatHint, tick, isNextSearch) {
            // get all beats within the masterbar
            let masterBar = null;
            if (currentBeatHint != null) {
                // same masterbar?
                if (currentBeatHint.masterBar.start <= tick && currentBeatHint.masterBar.end > tick) {
                    masterBar = currentBeatHint.masterBar;
                }
                else if (currentBeatHint.masterBar.nextMasterBar &&
                    currentBeatHint.masterBar.nextMasterBar.start <= tick &&
                    currentBeatHint.masterBar.nextMasterBar.end > tick) {
                    masterBar = currentBeatHint.masterBar.nextMasterBar;
                }
            }
            // slowest lookup
            if (!masterBar) {
                masterBar = this.findMasterBar(tick);
            }
            // no match
            if (!masterBar) {
                return null;
            }
            return this.firstBeatInMasterBar(trackLookup, masterBar, tick, isNextSearch);
        }
        firstBeatInMasterBar(trackLookup, startMasterBar, tick, isNextSearch) {
            let masterBar = startMasterBar;
            // scan through beats and find first one which has a beat visible
            while (masterBar) {
                if (masterBar.firstBeat) {
                    const beat = this.findBeatInMasterBar(masterBar, masterBar.firstBeat, tick, trackLookup, isNextSearch);
                    if (beat) {
                        return beat;
                    }
                }
                masterBar = masterBar.nextMasterBar;
            }
            return null;
        }
        /**
         * Finds the beat at a given tick position within the known master bar.
         * @param masterBar
         * @param currentStartLookup
         * @param tick
         * @param visibleTracks
         * @param isNextSearch
         * @returns
         */
        findBeatInMasterBar(masterBar, currentStartLookup, tick, visibleTracks, isNextSearch) {
            if (!currentStartLookup) {
                return null;
            }
            let startBeatLookup = null;
            let startBeat = null;
            const relativeTick = tick - masterBar.start;
            while (currentStartLookup != null && startBeat == null) {
                if (
                // either within exact range or if we're in the "next search" also allow using the first beat
                // of the next bars
                (currentStartLookup.start <= relativeTick || (isNextSearch && relativeTick < 0)) &&
                    relativeTick < currentStartLookup.end) {
                    startBeatLookup = currentStartLookup;
                    startBeat = currentStartLookup.getVisibleBeatAtStart(visibleTracks);
                    // found the matching beat lookup but none of the beats are visible
                    // in this case scan further to the next lookup which has any visible beat
                    if (!startBeat) {
                        if (isNextSearch) {
                            let currentMasterBar = masterBar;
                            while (currentMasterBar != null && startBeat == null) {
                                while (currentStartLookup != null) {
                                    startBeat = currentStartLookup.getVisibleBeatAtStart(visibleTracks);
                                    if (startBeat) {
                                        startBeatLookup = currentStartLookup;
                                        masterBar = currentMasterBar;
                                        break;
                                    }
                                    currentStartLookup = currentStartLookup.nextBeat;
                                }
                                if (!startBeat || !startBeatLookup) {
                                    currentMasterBar = currentMasterBar.nextMasterBar;
                                    currentStartLookup = currentMasterBar?.firstBeat ?? null;
                                }
                            }
                        }
                        else {
                            let currentMasterBar = masterBar;
                            while (currentMasterBar != null && startBeat == null) {
                                while (currentStartLookup != null) {
                                    startBeat = currentStartLookup.getVisibleBeatAtStart(visibleTracks);
                                    if (startBeat) {
                                        startBeatLookup = currentStartLookup;
                                        masterBar = currentMasterBar;
                                        break;
                                    }
                                    currentStartLookup = currentStartLookup.previousBeat;
                                }
                                if (!startBeat || !startBeatLookup) {
                                    currentMasterBar = currentMasterBar.previousMasterBar;
                                    currentStartLookup = currentMasterBar?.firstBeat ?? null;
                                }
                            }
                        }
                    }
                }
                else if (currentStartLookup.end > relativeTick) {
                    break;
                }
                currentStartLookup = currentStartLookup?.nextBeat ?? null;
            }
            if (startBeat == null) {
                return null;
            }
            const result = this.createResult(masterBar, startBeatLookup, startBeat, isNextSearch, visibleTracks);
            return result;
        }
        createResult(masterBar, beatLookup, beat, isNextSearch, visibleTracks) {
            const result = new MidiTickLookupFindBeatResult(masterBar);
            result.beat = beat;
            result.beatLookup = beatLookup;
            result.tickDuration = beatLookup.end - beatLookup.start;
            if (!isNextSearch) {
                // the next beat filling will adjust this result with the respective durations
                this.fillNextBeat(result, visibleTracks);
            }
            else if (this.isMultiBarRestResult(result)) {
                const multiRest = this.multiBarRestInfo.get(masterBar.masterBar.index);
                // this is a bit sensitive. we assume that the sequence of multi-rest bars and the
                // chained nextMasterBar equal. so we just jump over X bars
                let endMasterBar = masterBar;
                for (let i = 0; i < multiRest.length; i++) {
                    if (!endMasterBar) {
                        break;
                    }
                    endMasterBar = endMasterBar.nextMasterBar;
                }
                if (endMasterBar) {
                    // one more following -> use start of next
                    if (endMasterBar.nextMasterBar) {
                        result.tickDuration = endMasterBar.nextMasterBar.start - beatLookup.start;
                    }
                    else {
                        result.tickDuration = endMasterBar.end - beatLookup.start;
                    }
                }
                else {
                    Logger.warning('Synth', 'MultiBar Rest Info and the nextMasterBar are out of sync, this is an unexpected error. Please report it as bug.  (broken chain stretch-result)');
                }
            }
            result.calculateDuration();
            return result;
        }
        findMasterBar(tick) {
            const bars = this.masterBars;
            let bottom = 0;
            let top = bars.length - 1;
            while (bottom <= top) {
                const middle = ((top + bottom) / 2) | 0;
                const bar = bars[middle];
                // found?
                if (tick >= bar.start && tick < bar.end) {
                    return bar;
                }
                // search in lower half
                if (tick < bar.start) {
                    top = middle - 1;
                }
                else {
                    bottom = middle + 1;
                }
            }
            return null;
        }
        /**
         * Gets the {@link MasterBarTickLookup} for a given masterbar at which the masterbar is played the first time.
         * @param bar The masterbar to find the time period for.
         * @returns A {@link MasterBarTickLookup} containing the details about the first time the {@link MasterBar} is played.
         */
        getMasterBar(bar) {
            if (!this.masterBarLookup.has(bar.index)) {
                const fallback = new MasterBarTickLookup();
                fallback.masterBar = bar;
                return fallback;
            }
            return this.masterBarLookup.get(bar.index);
        }
        /**
         * Gets the start time in midi ticks for a given masterbar at which the masterbar is played the first time.
         * @param bar The masterbar to find the time period for.
         * @returns The time in midi ticks at which the masterbar is played the first time or 0 if the masterbar is not contained
         */
        getMasterBarStart(bar) {
            if (!this.masterBarLookup.has(bar.index)) {
                return 0;
            }
            return this.masterBarLookup.get(bar.index).start;
        }
        /**
         * Gets the start time in midi ticks for a given beat at which the masterbar is played the first time.
         * @param beat The beat to find the time period for.
         * @returns The time in midi ticks at which the beat is played the first time or 0 if the beat is not contained
         */
        getBeatStart(beat) {
            if (!this.masterBarLookup.has(beat.voice.bar.index)) {
                return 0;
            }
            return this.masterBarLookup.get(beat.voice.bar.index).start + beat.playbackStart;
        }
        /**
         * Adds a new {@link MasterBarTickLookup} to the lookup table.
         * @param masterBar The item to add.
         */
        addMasterBar(masterBar) {
            this.masterBars.push(masterBar);
            if (this._currentMasterBar) {
                masterBar.previousMasterBar = this._currentMasterBar;
                this._currentMasterBar.nextMasterBar = masterBar;
            }
            this._currentMasterBar = masterBar;
            if (!this.masterBarLookup.has(masterBar.masterBar.index)) {
                this.masterBarLookup.set(masterBar.masterBar.index, masterBar);
            }
        }
        addBeat(beat, start, duration) {
            const currentMasterBar = this._currentMasterBar;
            if (currentMasterBar) {
                // pre-beat grace notes at the start of the bar we also add the beat to the previous bar
                if (start < 0 && currentMasterBar.previousMasterBar) {
                    const relativeMasterBarEnd = currentMasterBar.previousMasterBar.end - currentMasterBar.previousMasterBar.start;
                    const previousStart = relativeMasterBarEnd + start;
                    const previousEnd = previousStart + duration;
                    // add to previous bar
                    currentMasterBar.previousMasterBar.addBeat(beat, previousStart, previousStart, duration);
                    // overlap to current bar?
                    if (previousEnd > relativeMasterBarEnd) {
                        // the start is negative and representing the overlap to the previous bar.
                        const overlapDuration = duration + start;
                        currentMasterBar.addBeat(beat, start, 0, overlapDuration);
                    }
                }
                else {
                    currentMasterBar.addBeat(beat, start, start, duration);
                }
            }
        }
    }

    class MidiNoteDuration {
        constructor() {
            this.noteOnly = 0;
            this.untilTieOrSlideEnd = 0;
            this.letRingEnd = 0;
        }
    }
    class TripletFeelDurations {
        constructor() {
            this.firstBeatDuration = 0;
            this.secondBeatStartOffset = 0;
            this.secondBeatDuration = 0;
        }
    }
    class RasgueadoInfo {
        constructor() {
            this.durations = [];
            this.brushInfos = [];
        }
    }
    class PlayThroughContext {
        constructor() {
            this.synthTick = 0;
            this.synthTime = 0;
            this.currentTempo = 0;
            this.automationToSyncPoint = new Map();
            this.createNewSyncPoints = false;
        }
    }
    /**
     * This generator creates a midi file using a score.
     */
    class MidiFileGenerator {
        /**
         * Initializes a new instance of the {@link MidiFileGenerator} class.
         * @param score The score for which the midi file should be generated.
         * @param settings The settings ot use for generation.
         * @param handler The handler that should be used for generating midi events.
         */
        constructor(score, settings, handler) {
            this._programsPerChannel = new Map();
            this._currentTime = 0;
            this._calculatedBeatTimers = new Set();
            /**
             * Gets a lookup object which can be used to quickly find beats and bars
             * at a given midi tick position.
             */
            this.tickLookup = new MidiTickLookup();
            /**
             * Gets or sets whether transposition pitches should be applied to the individual midi events or not.
             */
            this.applyTranspositionPitches = true;
            /**
             * The computed sync points for synchronizing the midi file with an external backing track.
             */
            this.syncPoints = [];
            /**
             * Gets the transposition pitches for the individual midi channels.
             */
            this.transpositionPitches = new Map();
            this._currentTripletFeel = null;
            this.vibratoResolution = 16;
            this._score = score;
            this._settings = !settings ? new Settings() : settings;
            this._handler = handler;
        }
        /**
         * Starts the generation of the midi file.
         */
        generate() {
            this.transpositionPitches.clear();
            this._calculatedBeatTimers.clear();
            this._currentTime = 0;
            // initialize tracks
            for (const track of this._score.tracks) {
                this.generateTrack(track);
            }
            Logger.debug('Midi', 'Begin midi generation');
            this.syncPoints = [];
            MidiFileGenerator.playThroughSong(this._score, this.syncPoints, false, (bar, previousMasterBar, currentTick, currentTempo, occurence) => {
                this.generateMasterBar(bar, previousMasterBar, currentTick, currentTempo, occurence);
            }, (index, currentTick, currentTempo) => {
                for (const track of this._score.tracks) {
                    for (const staff of track.staves) {
                        if (index < staff.bars.length) {
                            this.generateBar(staff.bars[index], currentTick, currentTempo);
                        }
                    }
                }
            }, endTick => {
                for (const track of this._score.tracks) {
                    this._handler.finishTrack(track.index, endTick);
                }
            });
            Logger.debug('Midi', 'Midi generation done');
        }
        generateTrack(track) {
            // channel
            this.generateChannel(track, track.playbackInfo.primaryChannel, track.playbackInfo);
            if (track.playbackInfo.primaryChannel !== track.playbackInfo.secondaryChannel) {
                this.generateChannel(track, track.playbackInfo.secondaryChannel, track.playbackInfo);
            }
        }
        addProgramChange(track, tick, channel, program) {
            if (!this._programsPerChannel.has(channel) || this._programsPerChannel.get(channel) !== program) {
                this._handler.addProgramChange(track.index, tick, channel, program);
                this._programsPerChannel.set(channel, program);
            }
        }
        static buildTranspositionPitches(score, settings) {
            const transpositionPitches = new Map();
            for (const track of score.tracks) {
                const transpositionPitch = track.index < settings.notation.transpositionPitches.length
                    ? settings.notation.transpositionPitches[track.index]
                    : -track.staves[0].transpositionPitch;
                transpositionPitches.set(track.playbackInfo.primaryChannel, transpositionPitch);
                transpositionPitches.set(track.playbackInfo.secondaryChannel, transpositionPitch);
            }
            return transpositionPitches;
        }
        generateChannel(track, channel, playbackInfo) {
            const transpositionPitch = track.index < this._settings.notation.transpositionPitches.length
                ? this._settings.notation.transpositionPitches[track.index]
                : -track.staves[0].transpositionPitch;
            this.transpositionPitches.set(channel, transpositionPitch);
            const volume = MidiFileGenerator.toChannelShort(playbackInfo.volume);
            const balance = MidiFileGenerator.toChannelShort(playbackInfo.balance);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.VolumeCoarse, volume);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.PanCoarse, balance);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.ExpressionControllerCoarse, 127);
            // set parameter that is being updated (0) -> PitchBendRangeCoarse
            this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterFine, 0);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterCourse, 0);
            // Set PitchBendRangeCoarse to 12
            this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryFine, 0);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryCoarse, MidiFileGenerator.PitchBendRangeInSemitones);
            this.addProgramChange(track, 0, channel, playbackInfo.program);
        }
        /**
         * Generates the sync points for the given score without re-generating the midi itself.
         * @remarks
         * Use this method if a re-generation of the sync points after modification is required.
         * It correctly handles repeats and places sync points accoridng to their absolute midi tick when they
         * need to be considered for synchronization.
         * @param score The song for which to regenerate the sync points.
         * @param createNew Whether a new set of sync points should be generated for the sync (start, stop and tempo changes).
         * @returns The generated sync points for usage in the backing track playback.
         */
        static generateSyncPoints(score, createNew = false) {
            const syncPoints = [];
            MidiFileGenerator.playThroughSong(score, syncPoints, createNew, (_masterBar, _previousMasterBar, _currentTick, _currentTempo, _barOccurence) => {
            }, (_barIndex, _currentTick, _currentTempo) => {
            }, _endTick => {
            });
            return syncPoints;
        }
        /**
         * @internal
         */
        static buildModifiedTempoLookup(score) {
            const syncPoints = [];
            const context = MidiFileGenerator.playThroughSong(score, syncPoints, false, (_masterBar, _previousMasterBar, _currentTick, _currentTempo, _barOccurence) => {
            }, (_barIndex, _currentTick, _currentTempo) => {
            }, _endTick => {
            });
            return context.automationToSyncPoint;
        }
        static playThroughSong(score, syncPoints, createNewSyncPoints, generateMasterBar, generateTracks, finish) {
            const controller = new MidiPlaybackController(score);
            const playContext = new PlayThroughContext();
            playContext.currentTempo = score.tempo;
            playContext.syncPoints = syncPoints;
            playContext.createNewSyncPoints = createNewSyncPoints;
            let previousMasterBar = null;
            // store the previous played bar for repeats
            const barOccurence = new Map();
            while (!controller.finished) {
                const index = controller.index;
                const bar = score.masterBars[index];
                const currentTick = controller.currentTick;
                controller.processCurrent();
                if (controller.shouldPlay) {
                    let occurence = barOccurence.has(index) ? barOccurence.get(index) : -1;
                    occurence++;
                    barOccurence.set(index, occurence);
                    generateMasterBar(bar, previousMasterBar, currentTick, playContext.currentTempo, occurence);
                    const trackTempo = bar.tempoAutomations.length > 0 ? bar.tempoAutomations[0].value : playContext.currentTempo;
                    generateTracks(index, currentTick, trackTempo);
                    playContext.synthTick = currentTick;
                    MidiFileGenerator.processBarTime(bar, occurence, playContext);
                }
                controller.moveNext();
                previousMasterBar = bar;
            }
            // here we interpolate the sync point which marks the end of the sync.
            // Sync points define new tempos at certain positions.
            // looking from the last sync point to the end we do not assume the end where the audio ends,
            // but where it ends according to the BPM and the remaining ticks.
            if (syncPoints.length > 0) {
                const lastSyncPoint = syncPoints[syncPoints.length - 1];
                const remainingTicks = controller.currentTick - lastSyncPoint.synthTick;
                if (remainingTicks > 0) {
                    const backingTrackSyncPoint = new BackingTrackSyncPoint();
                    backingTrackSyncPoint.masterBarIndex = previousMasterBar.index;
                    backingTrackSyncPoint.masterBarOccurence = barOccurence.get(previousMasterBar.index) - 1;
                    backingTrackSyncPoint.synthTick = controller.currentTick;
                    backingTrackSyncPoint.synthBpm = playContext.currentTempo;
                    // we need to assume some BPM for the last interpolated point.
                    // if we have more than just a start point, we keep the BPM before the last manual sync point
                    // otherwise we have no customized sync BPM known and keep the synthesizer one.
                    if (playContext.createNewSyncPoints) {
                        backingTrackSyncPoint.syncBpm = lastSyncPoint.synthBpm;
                        backingTrackSyncPoint.synthBpm = lastSyncPoint.synthBpm;
                    }
                    else if (syncPoints.length === 1) {
                        backingTrackSyncPoint.syncBpm = lastSyncPoint.synthBpm;
                    }
                    else {
                        backingTrackSyncPoint.syncBpm = syncPoints[syncPoints.length - 2].syncBpm;
                    }
                    backingTrackSyncPoint.synthTime =
                        lastSyncPoint.synthTime + MidiUtils.ticksToMillis(remainingTicks, lastSyncPoint.synthBpm);
                    backingTrackSyncPoint.syncTime =
                        lastSyncPoint.syncTime + MidiUtils.ticksToMillis(remainingTicks, backingTrackSyncPoint.syncBpm);
                    // update the previous sync point according to the new time
                    if (!playContext.createNewSyncPoints) {
                        lastSyncPoint.updateSyncBpm(backingTrackSyncPoint.synthTime, backingTrackSyncPoint.syncTime);
                    }
                    syncPoints.push(backingTrackSyncPoint);
                }
            }
            finish(controller.currentTick);
            return playContext;
        }
        static processBarTime(bar, occurence, context) {
            const duration = bar.calculateDuration();
            const barSyncPoints = bar.syncPoints;
            const barStartTick = context.synthTick;
            if (context.createNewSyncPoints) {
                MidiFileGenerator.processBarTimeWithNewSyncPoints(bar, occurence, context);
            }
            else if (barSyncPoints) {
                MidiFileGenerator.processBarTimeWithSyncPoints(bar, occurence, context);
            }
            else {
                MidiFileGenerator.processBarTimeNoSyncPoints(bar, context);
            }
            // don't forget the part after the last tempo change
            const endTick = barStartTick + duration;
            const tickOffset = endTick - context.synthTick;
            if (tickOffset > 0) {
                context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                context.synthTick = endTick;
            }
        }
        static processBarTimeWithNewSyncPoints(bar, occurence, context) {
            // start marker
            const barStartTick = context.synthTick;
            if (bar.index === 0 && occurence === 0) {
                context.currentTempo = bar.score.tempo;
                const backingTrackSyncPoint = new BackingTrackSyncPoint();
                backingTrackSyncPoint.masterBarIndex = bar.index;
                backingTrackSyncPoint.masterBarOccurence = occurence;
                backingTrackSyncPoint.synthTick = barStartTick;
                backingTrackSyncPoint.synthBpm = context.currentTempo;
                backingTrackSyncPoint.synthTime = context.synthTime;
                backingTrackSyncPoint.syncBpm = context.currentTempo;
                backingTrackSyncPoint.syncTime = context.synthTime;
                context.syncPoints.push(backingTrackSyncPoint);
            }
            // walk tempo changes and create points
            const duration = bar.calculateDuration();
            for (const change of bar.tempoAutomations) {
                const absoluteTick = barStartTick + change.ratioPosition * duration;
                const tickOffset = absoluteTick - context.synthTick;
                if (tickOffset > 0) {
                    context.synthTick = absoluteTick;
                    context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                }
                if (change.value !== context.currentTempo) {
                    context.currentTempo = change.value;
                    const backingTrackSyncPoint = new BackingTrackSyncPoint();
                    backingTrackSyncPoint.masterBarIndex = bar.index;
                    backingTrackSyncPoint.masterBarOccurence = occurence;
                    backingTrackSyncPoint.synthTick = absoluteTick;
                    backingTrackSyncPoint.synthBpm = context.currentTempo;
                    backingTrackSyncPoint.synthTime = context.synthTime;
                    backingTrackSyncPoint.syncBpm = context.currentTempo;
                    backingTrackSyncPoint.syncTime = context.synthTime;
                    context.syncPoints.push(backingTrackSyncPoint);
                }
            }
        }
        static processBarTimeWithSyncPoints(bar, occurence, context) {
            const barStartTick = context.synthTick;
            const duration = bar.calculateDuration();
            let tempoChangeIndex = 0;
            let tickOffset;
            for (const syncPoint of bar.syncPoints) {
                if (syncPoint.syncPointValue.barOccurence !== occurence) {
                    continue;
                }
                const syncPointTick = barStartTick + syncPoint.ratioPosition * duration;
                // first process all tempo changes until this sync point
                while (tempoChangeIndex < bar.tempoAutomations.length &&
                    bar.tempoAutomations[tempoChangeIndex].ratioPosition <= syncPoint.ratioPosition) {
                    const tempoChange = bar.tempoAutomations[tempoChangeIndex];
                    const absoluteTick = barStartTick + tempoChange.ratioPosition * duration;
                    tickOffset = absoluteTick - context.synthTick;
                    if (tickOffset > 0) {
                        context.synthTick = absoluteTick;
                        context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                    }
                    context.currentTempo = tempoChange.value;
                    tempoChangeIndex++;
                }
                // process time until sync point
                tickOffset = syncPointTick - context.synthTick;
                if (tickOffset > 0) {
                    context.synthTick = syncPointTick;
                    context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                }
                // update the previous sync point according to the new time
                if (context.syncPoints.length > 0) {
                    context.syncPoints[context.syncPoints.length - 1].updateSyncBpm(context.synthTime, syncPoint.syncPointValue.millisecondOffset);
                }
                // create the new sync point
                const backingTrackSyncPoint = new BackingTrackSyncPoint();
                backingTrackSyncPoint.masterBarIndex = bar.index;
                backingTrackSyncPoint.masterBarOccurence = occurence;
                backingTrackSyncPoint.synthTick = syncPointTick;
                backingTrackSyncPoint.synthBpm = context.currentTempo;
                backingTrackSyncPoint.synthTime = context.synthTime;
                backingTrackSyncPoint.syncTime = syncPoint.syncPointValue.millisecondOffset;
                backingTrackSyncPoint.syncBpm = 0 /* calculated by next sync point */;
                context.syncPoints.push(backingTrackSyncPoint);
                context.automationToSyncPoint.set(syncPoint, backingTrackSyncPoint);
            }
            // process remaining tempo changes after all sync points
            while (tempoChangeIndex < bar.tempoAutomations.length) {
                const tempoChange = bar.tempoAutomations[tempoChangeIndex];
                const absoluteTick = barStartTick + tempoChange.ratioPosition * duration;
                tickOffset = absoluteTick - context.synthTick;
                if (tickOffset > 0) {
                    context.synthTick = absoluteTick;
                    context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                }
                context.currentTempo = tempoChange.value;
                tempoChangeIndex++;
            }
        }
        static processBarTimeNoSyncPoints(bar, context) {
            // walk through the tempo changes
            const barStartTick = context.synthTick;
            const duration = bar.calculateDuration();
            for (const changes of bar.tempoAutomations) {
                const absoluteTick = barStartTick + changes.ratioPosition * duration;
                const tickOffset = absoluteTick - context.synthTick;
                if (tickOffset > 0) {
                    context.synthTick = absoluteTick;
                    context.synthTime += MidiUtils.ticksToMillis(tickOffset, context.currentTempo);
                }
                context.currentTempo = changes.value;
            }
        }
        static toChannelShort(data) {
            const value = Math.max(-32768, Math.min(32767, data * 8 - 1));
            return Math.max(value, -1) + 1;
        }
        generateMasterBar(masterBar, previousMasterBar, currentTick, currentTempo, barOccurence) {
            // time signature
            if (!previousMasterBar ||
                previousMasterBar.timeSignatureDenominator !== masterBar.timeSignatureDenominator ||
                previousMasterBar.timeSignatureNumerator !== masterBar.timeSignatureNumerator) {
                this._handler.addTimeSignature(currentTick, masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator);
            }
            const masterBarDuration = masterBar.calculateDuration();
            const masterBarLookup = new MasterBarTickLookup();
            // tempo
            if (masterBar.tempoAutomations.length > 0) {
                if (masterBar.tempoAutomations[0].ratioPosition > 0) {
                    masterBarLookup.tempoChanges.push(new MasterBarTickLookupTempoChange(currentTick, currentTempo));
                }
                for (const automation of masterBar.tempoAutomations) {
                    const tick = currentTick + masterBarDuration * automation.ratioPosition;
                    this._handler.addTempo(tick, automation.value);
                    masterBarLookup.tempoChanges.push(new MasterBarTickLookupTempoChange(tick, automation.value));
                }
            }
            else if (!previousMasterBar) {
                this._handler.addTempo(currentTick, masterBar.score.tempo);
                masterBarLookup.tempoChanges.push(new MasterBarTickLookupTempoChange(currentTick, masterBar.score.tempo));
            }
            else {
                masterBarLookup.tempoChanges.push(new MasterBarTickLookupTempoChange(currentTick, currentTempo));
            }
            masterBarLookup.masterBar = masterBar;
            masterBarLookup.start = currentTick;
            masterBarLookup.end = masterBarLookup.start + masterBarDuration;
            this.tickLookup.addMasterBar(masterBarLookup);
        }
        generateBar(bar, barStartTick, tempoOnBarStart) {
            const playbackBar = this.getPlaybackBar(bar);
            const barStartTime = this._currentTime;
            for (const v of playbackBar.voices) {
                this._currentTime = barStartTime;
                this.generateVoice(v, barStartTick, bar, tempoOnBarStart);
            }
            // calculate the real bar end time (bars might be not full or overfilled)
            const masterBar = playbackBar.masterBar;
            const tickDuration = masterBar.calculateDuration();
            const tempoAutomations = masterBar.tempoAutomations.slice();
            if (tempoAutomations.length === 0) {
                // fast path: no tempo automations -> simply apply whole duration
                this._currentTime = barStartTime + MidiUtils.ticksToMillis(tickDuration, tempoOnBarStart);
            }
            else {
                // slow path: loop through slices and advance time
                this._currentTime = barStartTime;
                let currentTick = barStartTick;
                let currentTempo = tempoOnBarStart;
                const endTick = barStartTick + tickDuration;
                for (const automation of tempoAutomations) {
                    // calculate the tick difference to the next tempo automation
                    const automationTick = tickDuration * automation.ratioPosition;
                    const diff = automationTick - currentTick;
                    // apply the time
                    if (diff > 0) {
                        this._currentTime += MidiUtils.ticksToMillis(diff, currentTempo);
                    }
                    // apply automation advance time
                    currentTempo = automation.value;
                    currentTick += diff;
                }
                // apply time until end
                const remainingTick = endTick - currentTick;
                if (remainingTick > 0) {
                    this._currentTime += MidiUtils.ticksToMillis(remainingTick, currentTempo);
                }
            }
            // in case of simile marks where we repeat we register the empty beat for the whole bar
            if (playbackBar.id !== bar.id) {
                this.tickLookup.addBeat(bar.voices[0].beats[0], 0, tickDuration);
            }
        }
        getPlaybackBar(bar) {
            switch (bar.simileMark) {
                case SimileMark.Simple:
                    if (bar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar);
                    }
                    break;
                case SimileMark.FirstOfDouble:
                    if (bar.previousBar && bar.previousBar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar.previousBar);
                    }
                    break;
                case SimileMark.SecondOfDouble:
                    if (bar.previousBar && bar.previousBar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar.previousBar);
                    }
                    break;
            }
            return bar;
        }
        generateVoice(voice, barStartTick, realBar, tempoOnVoiceStart) {
            if (voice.isEmpty && (!voice.bar.isEmpty || voice.index !== 0)) {
                return;
            }
            const remainingBarTempoAutomations = realBar.masterBar.tempoAutomations.slice();
            let tempoOnBeatStart = tempoOnVoiceStart;
            const barDuration = realBar.masterBar.calculateDuration();
            for (const b of voice.beats) {
                const ratio = b.playbackStart / barDuration;
                while (remainingBarTempoAutomations.length > 0 && remainingBarTempoAutomations[0].ratioPosition <= ratio) {
                    tempoOnBeatStart = remainingBarTempoAutomations.shift().value;
                }
                this.generateBeat(b, barStartTick, realBar, tempoOnBeatStart);
            }
        }
        generateBeat(beat, barStartTick, realBar, tempoOnBeatStart) {
            let beatStart = beat.playbackStart;
            let audioDuration = beat.playbackDuration;
            const masterBarDuration = beat.voice.bar.masterBar.calculateDuration();
            if (beat.voice.bar.isEmpty) {
                audioDuration = masterBarDuration;
            }
            else if (beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel &&
                this._settings.player.playTripletFeel) {
                if (this._currentTripletFeel) {
                    beatStart -= this._currentTripletFeel.secondBeatStartOffset;
                    audioDuration = this._currentTripletFeel.secondBeatDuration;
                    this._currentTripletFeel = null;
                }
                else {
                    this._currentTripletFeel = MidiFileGenerator.calculateTripletFeelInfo(beatStart, audioDuration, beat);
                    if (this._currentTripletFeel) {
                        audioDuration = this._currentTripletFeel.firstBeatDuration;
                    }
                }
            }
            if (beat.showTimer && !this._calculatedBeatTimers.has(beat.id)) {
                beat.timer = this._currentTime;
                this._calculatedBeatTimers.add(beat.id);
            }
            this._currentTime += MidiUtils.ticksToMillis(audioDuration, tempoOnBeatStart);
            // in case of normal playback register playback
            if (realBar === beat.voice.bar) {
                this.tickLookup.addBeat(beat, beatStart, audioDuration);
            }
            const track = beat.voice.bar.staff.track;
            for (const automation of beat.automations) {
                this.generateNonTempoAutomation(beat, automation, barStartTick);
            }
            if (beat.isRest) {
                this._handler.addRest(track.index, barStartTick + beatStart, track.playbackInfo.primaryChannel);
            }
            else if (beat.deadSlapped) {
                this.generateDeadSlap(beat, barStartTick + beatStart);
            }
            else {
                const brushInfo = this.getBrushInfo(beat);
                const rasgueadoInfo = this.getRasgueadoInfo(beat, audioDuration);
                for (const n of beat.notes) {
                    this.generateNote(n, barStartTick + beatStart, audioDuration, tempoOnBeatStart, brushInfo, rasgueadoInfo);
                }
            }
            if (beat.fade !== FadeType.None) {
                this.generateFade(beat, barStartTick + beatStart, audioDuration);
            }
            if (beat.vibrato !== VibratoType.None) {
                let phaseLength = 240;
                let bendAmplitude = 3;
                switch (beat.vibrato) {
                    case VibratoType.Slight:
                        phaseLength = this._settings.player.vibrato.beatSlightLength;
                        bendAmplitude = this._settings.player.vibrato.beatSlightAmplitude;
                        break;
                    case VibratoType.Wide:
                        phaseLength = this._settings.player.vibrato.beatWideLength;
                        bendAmplitude = this._settings.player.vibrato.beatWideAmplitude;
                        break;
                }
                this.generateVibratorWithParams(barStartTick + beatStart, beat.playbackDuration, phaseLength, 0, bendAmplitude, (tick, value) => {
                    this._handler.addBend(beat.voice.bar.staff.track.index, tick, track.playbackInfo.secondaryChannel, value);
                });
            }
        }
        static calculateTripletFeelInfo(beatStart, audioDuration, beat) {
            let initialDuration;
            switch (beat.voice.bar.masterBar.tripletFeel) {
                case TripletFeel.Triplet8th:
                case TripletFeel.Dotted8th:
                case TripletFeel.Scottish8th:
                    initialDuration = Duration.Eighth;
                    break;
                case TripletFeel.Triplet16th:
                case TripletFeel.Dotted16th:
                case TripletFeel.Scottish16th:
                    initialDuration = Duration.Sixteenth;
                    break;
                default:
                    // not possible
                    return null;
            }
            const interval = MidiUtils.toTicks(initialDuration);
            // it must be a plain note with the expected duration
            // without dots, triplets, grace notes etc.
            if (audioDuration !== interval) {
                return null;
            }
            // check if the beat is aligned in respect to the duration
            // e.g. the eighth notes on a 4/4 time signature must start exactly on the following
            // times to get a triplet feel applied
            // 0 480 960 1440 1920 2400 2880 3360
            if (beatStart % interval !== 0) {
                return null;
            }
            // ensure next beat matches spec
            if (!beat.nextBeat || beat.nextBeat.voice !== beat.voice || beat.playbackDuration !== interval) {
                return null;
            }
            // looks like we have a triplet feel combination start here!
            const durations = new TripletFeelDurations();
            switch (beat.voice.bar.masterBar.tripletFeel) {
                case TripletFeel.Triplet8th:
                    durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Quarter), 3, 2);
                    durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                    break;
                case TripletFeel.Dotted8th:
                    durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                    durations.secondBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                    break;
                case TripletFeel.Scottish8th:
                    durations.firstBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                    durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                    break;
                case TripletFeel.Triplet16th:
                    durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                    durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Sixteenth), 3, 2);
                    break;
                case TripletFeel.Dotted16th:
                    durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                    durations.secondBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                    break;
                case TripletFeel.Scottish16th:
                    durations.firstBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                    durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                    break;
            }
            // calculate the number of ticks the second beat can start earlier
            durations.secondBeatStartOffset = audioDuration - durations.firstBeatDuration;
            return durations;
        }
        generateDeadSlap(beat, beatStart) {
            // we generate dead-slap as 64th note on all strings (0 fret)
            const deadSlapDuration = MidiUtils.toTicks(Duration.SixtyFourth);
            const staff = beat.voice.bar.staff;
            if (staff.tuning.length > 0) {
                for (const t of staff.tuning) {
                    this._handler.addNote(staff.track.index, beatStart, deadSlapDuration, t, MidiUtils.dynamicToVelocity(DynamicValue.F), staff.track.playbackInfo.primaryChannel);
                }
            }
        }
        needsSecondaryChannel(note) {
            return note.hasBend || note.beat.hasWhammyBar || note.beat.vibrato !== VibratoType.None;
        }
        determineChannel(track, note) {
            // on certain effects we use the secondary channel to avoid interference with other notes
            if (this.needsSecondaryChannel(note)) {
                return track.playbackInfo.secondaryChannel;
            }
            // walk back to tie chain to see if any note needs the secondary channel
            let currentNote = note;
            while (currentNote.isTieDestination) {
                currentNote = currentNote.tieOrigin;
                if (this.needsSecondaryChannel(currentNote)) {
                    return track.playbackInfo.secondaryChannel;
                }
            }
            // walk forward to tie chain to see if any note needs the secondary channel
            currentNote = note;
            while (currentNote.isTieOrigin) {
                currentNote = currentNote.tieDestination;
                if (this.needsSecondaryChannel(currentNote)) {
                    return track.playbackInfo.secondaryChannel;
                }
            }
            // can stay on primary channel
            return track.playbackInfo.primaryChannel;
        }
        generateNote(note, beatStart, beatDuration, tempoOnBeatStart, brushInfo, rasgueadoInfo) {
            const track = note.beat.voice.bar.staff.track;
            const staff = note.beat.voice.bar.staff;
            let noteKey = note.calculateRealValue(this.applyTranspositionPitches, true);
            if (note.isPercussion) {
                const articulation = PercussionMapper.getArticulation(note);
                if (articulation) {
                    noteKey = articulation.outputMidiNumber;
                }
            }
            const brushOffset = rasgueadoInfo == null && note.isStringed && note.string <= brushInfo.length
                ? brushInfo[note.string - 1]
                : 0;
            const noteStart = beatStart + brushOffset;
            const noteDuration = this.getNoteDuration(note, beatDuration, tempoOnBeatStart);
            noteDuration.untilTieOrSlideEnd -= brushOffset;
            noteDuration.noteOnly -= brushOffset;
            noteDuration.letRingEnd -= brushOffset;
            const velocity = MidiFileGenerator.getNoteVelocity(note);
            const channel = this.determineChannel(track, note);
            let initialBend = 0;
            const noteSoundDuration = Math.max(noteDuration.untilTieOrSlideEnd, noteDuration.letRingEnd);
            if (note.hasBend) {
                initialBend = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
            }
            else if (note.beat.hasWhammyBar) {
                initialBend = MidiFileGenerator.getPitchWheel(note.beat.whammyBarPoints[0].value);
            }
            else if (note.isTieDestination ||
                (note.slideOrigin && note.slideOrigin.slideOutType === SlideOutType.Legato)) {
                initialBend = -1;
            }
            else {
                initialBend = MidiFileGenerator.getPitchWheel(0);
            }
            if (initialBend >= 0) {
                this._handler.addNoteBend(track.index, noteStart, channel, noteKey, initialBend);
            }
            // Rasgueado
            if (note.beat.hasRasgueado) {
                this.generateRasgueado(track, note, noteStart, noteKey, velocity, channel, rasgueadoInfo);
                // no further generation needed / supported
                return;
            }
            // Ornaments
            if (note.ornament !== NoteOrnament.None) {
                this.generateOrnament(track, note, noteStart, noteSoundDuration, noteKey, velocity, channel);
                // no further generation needed / supported
                return;
            }
            //
            // Trill
            if (note.isTrill && !staff.isPercussion) {
                this.generateTrill(note, noteStart, noteDuration, noteKey, velocity, channel);
                // no further generation needed
                return;
            }
            //
            // Tremolo Picking
            if (note.beat.isTremolo) {
                this.generateTremoloPicking(note, noteStart, noteDuration, noteKey, velocity, channel);
                // no further generation needed
                return;
            }
            //
            // All String Bending/Variation effects
            if (note.hasBend) {
                this.generateBend(note, noteStart, noteDuration, noteKey, channel, tempoOnBeatStart);
            }
            else if (note.beat.hasWhammyBar && note.index === 0) {
                this.generateWhammy(note.beat, noteStart, noteDuration, channel, tempoOnBeatStart);
            }
            else if (note.slideInType !== SlideInType.None || note.slideOutType !== SlideOutType.None) {
                this.generateSlide(note, noteStart, noteDuration, noteKey, channel, tempoOnBeatStart);
            }
            else if (note.vibrato !== VibratoType.None ||
                (note.isTieDestination && note.tieOrigin.vibrato !== VibratoType.None)) {
                this.generateVibrato(note, noteStart, noteDuration, noteKey, channel);
            }
            // for tied notes, and target notes of legato slides we do not pick the note
            // the previous one is extended
            if (!note.isTieDestination && (!note.slideOrigin || note.slideOrigin.slideOutType !== SlideOutType.Legato)) {
                this._handler.addNote(track.index, noteStart, noteSoundDuration, noteKey, velocity, channel);
            }
        }
        generateOrnament(track, note, noteStart, noteDuration, noteKey, velocity, channel) {
            // the duration of the ornament notes preceeding the main note
            // is rather short and fixed.
            // additionally the velocity for the notes is reduced to be softer (like a hammer-on/pull-off)
            let ornamentNoteKeys;
            let ornamentNoteDurations;
            const index = noteKey % 12;
            const triplet = 1 / 3;
            switch (note.ornament) {
                case NoteOrnament.Turn:
                    // 1 note -> 4 notes
                    // 1. One note above
                    // 2. Main note
                    // 3. One note below
                    // 4. Main note (remaining duration)
                    ornamentNoteKeys = [
                        noteKey + MidiFileGenerator.OrnamentKeysUp[index],
                        noteKey,
                        noteKey + MidiFileGenerator.OrnamentKeysDown[index]
                    ];
                    ornamentNoteDurations = [
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet,
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet,
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet
                    ];
                    break;
                case NoteOrnament.InvertedTurn:
                    // 1 note -> 4 notes
                    // 1. One note below
                    // 2. Main note
                    // 3. One note above
                    // 4. Main note  (remaining duration)
                    ornamentNoteKeys = [
                        noteKey + MidiFileGenerator.OrnamentKeysDown[index],
                        noteKey,
                        noteKey + MidiFileGenerator.OrnamentKeysUp[index]
                    ];
                    ornamentNoteDurations = [
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet,
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet,
                        MidiUtils.toTicks(Duration.Sixteenth) * triplet
                    ];
                    break;
                case NoteOrnament.UpperMordent:
                    // 1 note -> 3 notes
                    // 1. Main Note
                    // 2. One note above
                    // 3. Main Note  (remaining duration)
                    ornamentNoteKeys = [noteKey, noteKey + MidiFileGenerator.OrnamentKeysUp[index]];
                    ornamentNoteDurations = [
                        MidiUtils.toTicks(Duration.ThirtySecond),
                        MidiUtils.toTicks(Duration.ThirtySecond)
                    ];
                    break;
                case NoteOrnament.LowerMordent:
                    // 1 note -> 3 notes
                    // 1. Main Note
                    // 2. One note below
                    // 3. Main Note  (remaining duration)
                    ornamentNoteKeys = [noteKey, noteKey + MidiFileGenerator.OrnamentKeysDown[index]];
                    ornamentNoteDurations = [
                        MidiUtils.toTicks(Duration.ThirtySecond),
                        MidiUtils.toTicks(Duration.ThirtySecond)
                    ];
                    break;
                default:
                    return;
            }
            // for already short notes we have to further shorten them to fit into the note duration.
            let ornamentDurationFactor = 1;
            if (noteDuration < MidiUtils.QuarterTime) {
                ornamentDurationFactor = noteDuration / MidiUtils.QuarterTime;
            }
            velocity -= MidiUtils.VelocityIncrement;
            let totalOrnamentDuration = 0;
            for (let i = 0; i < ornamentNoteKeys.length; i++) {
                const realDuration = ornamentNoteDurations[i] * ornamentDurationFactor;
                this._handler.addNote(track.index, noteStart, realDuration, ornamentNoteKeys[i], velocity, channel);
                noteStart += realDuration;
                totalOrnamentDuration += realDuration;
            }
            const remaining = noteDuration - totalOrnamentDuration;
            this._handler.addNote(track.index, noteStart, remaining, noteKey, velocity, channel);
        }
        getNoteDuration(note, duration, tempoOnBeatStart) {
            const durationWithEffects = new MidiNoteDuration();
            durationWithEffects.noteOnly = duration;
            durationWithEffects.untilTieOrSlideEnd = duration;
            durationWithEffects.letRingEnd = duration;
            if (note.isDead) {
                durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationDead, duration, tempoOnBeatStart);
                durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isPalmMute) {
                durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationPalmMute, duration, tempoOnBeatStart);
                durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isStaccato) {
                durationWithEffects.noteOnly = (duration / 2) | 0;
                durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isTieOrigin) {
                const endNote = note.tieDestination;
                // for the initial start of the tie calculate absolute duration from start to end note
                if (endNote) {
                    if (!note.isTieDestination) {
                        const startTick = note.beat.absolutePlaybackStart;
                        const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration, tempoOnBeatStart);
                        const endTick = endNote.beat.absolutePlaybackStart + tieDestinationDuration.untilTieOrSlideEnd;
                        durationWithEffects.untilTieOrSlideEnd = endTick - startTick;
                    }
                    else {
                        // for continuing ties, take the current duration + the one from the destination
                        // this branch will be entered as part of the recusion of the if branch
                        const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration, tempoOnBeatStart);
                        durationWithEffects.untilTieOrSlideEnd = duration + tieDestinationDuration.untilTieOrSlideEnd;
                    }
                }
            }
            else if (note.slideOutType === SlideOutType.Legato) {
                const endNote = note.slideTarget;
                if (endNote) {
                    const startTick = note.beat.absolutePlaybackStart;
                    const slideTargetDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration, tempoOnBeatStart);
                    const endTick = endNote.beat.absolutePlaybackStart + slideTargetDuration.untilTieOrSlideEnd;
                    durationWithEffects.untilTieOrSlideEnd = endTick - startTick;
                }
            }
            if (note.isLetRing && this._settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                // LetRing ends when:
                // - rest
                let lastLetRingBeat = note.beat;
                let letRingEnd = 0;
                const maxDuration = note.beat.voice.bar.masterBar.calculateDuration();
                while (lastLetRingBeat.nextBeat) {
                    const next = lastLetRingBeat.nextBeat;
                    if (next.isRest) {
                        break;
                    }
                    // note on the same string
                    if (note.isStringed && next.hasNoteOnString(note.string)) {
                        break;
                    }
                    lastLetRingBeat = lastLetRingBeat.nextBeat;
                    letRingEnd =
                        lastLetRingBeat.absolutePlaybackStart -
                            note.beat.absolutePlaybackStart +
                            lastLetRingBeat.playbackDuration;
                    if (letRingEnd > maxDuration) {
                        letRingEnd = maxDuration;
                        break;
                    }
                }
                if (lastLetRingBeat === note.beat) {
                    durationWithEffects.letRingEnd = duration;
                }
                else {
                    durationWithEffects.letRingEnd = letRingEnd;
                }
            }
            else {
                durationWithEffects.letRingEnd = durationWithEffects.untilTieOrSlideEnd;
            }
            return durationWithEffects;
        }
        applyStaticDuration(duration, maximum, tempo) {
            const value = ((tempo * duration) / BendPoint.MaxPosition) | 0;
            return Math.min(value, maximum);
        }
        static getNoteVelocity(note) {
            let adjustment = 0;
            // more silent on hammer destination
            if (!note.beat.voice.bar.staff.isPercussion && note.hammerPullOrigin) {
                adjustment--;
            }
            // more silent on ghost notes
            if (note.isGhost) {
                adjustment--;
            }
            // louder on accent
            switch (note.accentuated) {
                case AccentuationType.Normal:
                    adjustment++;
                    break;
                case AccentuationType.Heavy:
                    adjustment += 2;
                    break;
            }
            return MidiUtils.dynamicToVelocity(note.dynamics, adjustment);
        }
        generateFade(beat, beatStart, beatDuration) {
            const track = beat.voice.bar.staff.track;
            switch (beat.fade) {
                case FadeType.FadeIn:
                    this.generateFadeSteps(track, beatStart, beatDuration, 0, MidiFileGenerator.toChannelShort(track.playbackInfo.volume));
                    break;
                case FadeType.FadeOut:
                    this.generateFadeSteps(track, beatStart, beatDuration, MidiFileGenerator.toChannelShort(track.playbackInfo.volume), 0);
                    break;
                case FadeType.VolumeSwell:
                    const half = (beatDuration / 2) | 0;
                    this.generateFadeSteps(track, beatStart, half, 0, MidiFileGenerator.toChannelShort(track.playbackInfo.volume));
                    this.generateFadeSteps(track, beatStart + half, half, MidiFileGenerator.toChannelShort(track.playbackInfo.volume), 0);
                    break;
            }
        }
        generateFadeSteps(track, start, duration, startVolume, endVolume) {
            const tickStep = 120;
            // we want to reach the target volume a bit earlier than the end of the note
            duration = (duration * 0.8) | 0;
            const volumeFactor = (endVolume - startVolume) / duration;
            const steps = (duration / tickStep + 1) | 0;
            const endTick = start + duration;
            for (let i = 0; i < steps; i++) {
                // ensure final value at end depending on rounding we might not reach it exactly
                const isLast = i === steps - 1;
                const tick = isLast ? endTick : start + i * tickStep;
                const volume = isLast ? endVolume : Math.round(startVolume + (tick - start) * volumeFactor);
                this._handler.addControlChange(track.index, tick, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                this._handler.addControlChange(track.index, tick, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
            }
        }
        generateVibrato(note, noteStart, noteDuration, noteKey, channel) {
            let phaseLength = 0;
            let bendAmplitude = 0;
            const vibratoType = note.vibrato !== VibratoType.None
                ? note.vibrato
                : note.isTieDestination
                    ? note.tieOrigin.vibrato
                    : VibratoType.Slight; /* should never happen unless called wrongly */
            switch (vibratoType) {
                case VibratoType.Slight:
                    phaseLength = this._settings.player.vibrato.noteSlightLength;
                    bendAmplitude = this._settings.player.vibrato.noteSlightAmplitude;
                    break;
                case VibratoType.Wide:
                    phaseLength = this._settings.player.vibrato.noteWideLength;
                    bendAmplitude = this._settings.player.vibrato.noteWideAmplitude;
                    break;
                default:
                    return;
            }
            const track = note.beat.voice.bar.staff.track;
            let bendBase = 0;
            // if this is a vibrato at the end of a bend, the vibrato wave needs to start at the pitch where the bend ends
            if (note.isTieDestination && note.tieOrigin.hasBend) {
                const bendPoints = note.tieOrigin.bendPoints;
                bendBase = bendPoints[bendPoints.length - 1].value;
            }
            this.generateVibratorWithParams(noteStart, noteDuration.noteOnly, phaseLength, bendBase, bendAmplitude, (tick, value) => {
                this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
            });
        }
        generateVibratorWithParams(noteStart, noteDuration, phaseLength, bendBase, bendAmplitude, addBend) {
            const resolution = this.vibratoResolution;
            const phaseHalf = (phaseLength / 2) | 0;
            // vibrato is a sine wave with the given amplitude and phase length
            const noteEnd = noteStart + noteDuration;
            while (noteStart < noteEnd) {
                let phase = 0;
                const phaseDuration = noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
                while (phase < phaseDuration) {
                    const bend = bendBase + bendAmplitude * Math.sin((phase * Math.PI) / phaseHalf);
                    addBend((noteStart + phase) | 0, MidiFileGenerator.getPitchWheel(bend));
                    phase += resolution;
                }
                noteStart += phaseLength;
            }
            // reset at end
            addBend(noteEnd | 0, MidiFileGenerator.getPitchWheel(bendBase));
        }
        /**
         * Calculates the midi pitch wheel value for the give bend value.
         */
        static getPitchWheel(bendValue) {
            // bend values are 1/4 notes therefore we only take half a semitone value per bend value
            return SynthConstants.DefaultPitchWheel + (bendValue / 2) * MidiFileGenerator.PitchValuePerSemitone;
        }
        generateSlide(note, noteStart, noteDuration, noteKey, channel, tempoOnBeatStart) {
            const duration = note.slideOutType === SlideOutType.Legato ? noteDuration.noteOnly : noteDuration.untilTieOrSlideEnd;
            const playedBendPoints = [];
            const track = note.beat.voice.bar.staff.track;
            const simpleSlidePitchOffset = this._settings.player.slide.simpleSlidePitchOffset;
            const simpleSlideDurationOffset = Math.floor(BendPoint.MaxPosition * this._settings.player.slide.simpleSlideDurationRatio);
            const shiftSlideDurationOffset = Math.floor(BendPoint.MaxPosition * this._settings.player.slide.shiftSlideDurationRatio);
            // Shift Slide: Play note, move up to target note, play end note
            // Legato Slide: Play note, move up to target note, no pick on end note, just keep it ringing
            // 2 bend points: one on 0/0, dy/MaxPos.
            // Slide into from above/below: Play note on lower pitch, slide into it quickly at start
            // Slide out above/blow: Play note on normal pitch, slide out quickly at end
            switch (note.slideInType) {
                case SlideInType.IntoFromAbove:
                    playedBendPoints.push(new BendPoint(0, simpleSlidePitchOffset));
                    playedBendPoints.push(new BendPoint(simpleSlideDurationOffset, 0));
                    break;
                case SlideInType.IntoFromBelow:
                    playedBendPoints.push(new BendPoint(0, -simpleSlidePitchOffset));
                    playedBendPoints.push(new BendPoint(simpleSlideDurationOffset, 0));
                    break;
            }
            switch (note.slideOutType) {
                case SlideOutType.Legato:
                case SlideOutType.Shift:
                    playedBendPoints.push(new BendPoint(shiftSlideDurationOffset, 0));
                    // normal note values are in 1/2 tones, bends are in 1/4 tones
                    const dy = (note.slideTarget.calculateRealValue(this.applyTranspositionPitches, true) -
                        note.calculateRealValue(this.applyTranspositionPitches, true)) *
                        2;
                    playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, dy));
                    break;
                case SlideOutType.OutDown:
                    playedBendPoints.push(new BendPoint(BendPoint.MaxPosition - simpleSlideDurationOffset, 0));
                    playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, -simpleSlidePitchOffset));
                    break;
                case SlideOutType.OutUp:
                    playedBendPoints.push(new BendPoint(BendPoint.MaxPosition - simpleSlideDurationOffset, 0));
                    playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, simpleSlidePitchOffset));
                    break;
            }
            this.generateWhammyOrBend(noteStart, duration, playedBendPoints, tempoOnBeatStart, (tick, value) => {
                this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
            });
        }
        generateBend(note, noteStart, noteDuration, noteKey, channel, tempoOnBeatStart) {
            const bendPoints = note.bendPoints;
            const track = note.beat.voice.bar.staff.track;
            const addBend = (tick, value) => {
                this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
            };
            // if bend is extended on next tied note, we directly bend to the final bend value
            let finalBendValue = null;
            // Bends are spread across all tied notes unless they have a bend on their own.
            let duration;
            if (note.isTieOrigin && this._settings.notation.extendBendArrowsOnTiedNotes) {
                let endNote = note;
                while (endNote.isTieOrigin &&
                    !endNote.tieDestination.hasBend &&
                    endNote.tieDestination.vibrato === VibratoType.None) {
                    endNote = endNote.tieDestination;
                }
                duration =
                    endNote.beat.absolutePlaybackStart -
                        note.beat.absolutePlaybackStart +
                        this.getNoteDuration(endNote, endNote.beat.playbackDuration, tempoOnBeatStart).noteOnly;
            }
            else if (note.isTieOrigin && note.beat.graceType !== GraceType.None) {
                switch (note.tieDestination.bendType) {
                    case BendType.Bend:
                    case BendType.BendRelease:
                    case BendType.PrebendBend:
                        finalBendValue = note.tieDestination.bendPoints[1].value;
                        break;
                    case BendType.Prebend:
                    case BendType.PrebendRelease:
                        finalBendValue = note.tieDestination.bendPoints[0].value;
                        break;
                }
                duration = Math.max(noteDuration.noteOnly, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, tempoOnBeatStart));
            }
            else {
                duration = noteDuration.noteOnly;
            }
            // ensure prebends are slightly before the actual note.
            if (bendPoints[0].value > 0 && !note.isContinuedBend && noteStart > 0) {
                noteStart--;
            }
            const bendDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, tempoOnBeatStart));
            let playedBendPoints = [];
            switch (note.bendType) {
                case BendType.Custom:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.Bend:
                case BendType.Release:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, finalBendValue));
                            break;
                        case BendStyle.Fast:
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            if (note.beat.graceType === GraceType.BendGrace) {
                                this.generateSongBookWhammyOrBend(noteStart, duration, true, [note.bendPoints[0].value, finalBendValue], bendDuration, tempoOnBeatStart, addBend);
                            }
                            else {
                                this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, finalBendValue], bendDuration, tempoOnBeatStart, addBend);
                            }
                            return;
                    }
                    break;
                case BendType.BendRelease:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[2].value));
                            break;
                        case BendStyle.Fast:
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, note.bendPoints[1].value, note.bendPoints[2].value], bendDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
                case BendType.Hold:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.Prebend:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.PrebendBend:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preBendValue = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
                            addBend(noteStart, preBendValue | 0);
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, finalBendValue], bendDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
                case BendType.PrebendRelease:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preBendValue = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
                            addBend(noteStart, preBendValue | 0);
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, note.bendPoints[1].value], bendDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
            }
            this.generateWhammyOrBend(noteStart, duration, playedBendPoints, tempoOnBeatStart, addBend);
        }
        generateSongBookWhammyOrBend(noteStart, duration, bendAtBeginning, bendValues, bendDuration, tempoOnBeatStart, addBend) {
            const startTick = bendAtBeginning ? noteStart : noteStart + duration - bendDuration;
            const ticksBetweenPoints = bendDuration / (bendValues.length - 1);
            for (let i = 0; i < bendValues.length - 1; i++) {
                const currentBendValue = MidiFileGenerator.getPitchWheel(bendValues[i]);
                const nextBendValue = MidiFileGenerator.getPitchWheel(bendValues[i + 1]);
                const tick = startTick + ticksBetweenPoints * i;
                this.generateBendValues(tick, ticksBetweenPoints, currentBendValue, nextBendValue, tempoOnBeatStart, addBend);
            }
        }
        generateWhammy(beat, noteStart, noteDuration, channel, tempoOnBeatStart) {
            const bendPoints = beat.whammyBarPoints;
            const track = beat.voice.bar.staff.track;
            const duration = noteDuration.noteOnly;
            // ensure prebends are slightly before the actual note.
            if (bendPoints[0].value > 0 && !beat.isContinuedWhammy) {
                noteStart--;
            }
            const addBend = (tick, value) => {
                this._handler.addBend(track.index, tick, channel, value);
            };
            let playedBendPoints = [];
            switch (beat.whammyBarType) {
                case WhammyType.Custom:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.Dive:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, tempoOnBeatStart));
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
                case WhammyType.Dip:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[1].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[2].value));
                            break;
                        case BendStyle.Fast:
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookDipDuration, tempoOnBeatStart));
                            this.generateSongBookWhammyOrBend(noteStart, duration, true, [bendPoints[0].value, bendPoints[1].value, bendPoints[2].value], whammyDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
                case WhammyType.Hold:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.Predive:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.PrediveDive:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preDiveValue = MidiFileGenerator.getPitchWheel(bendPoints[0].value);
                            this._handler.addBend(track.index, noteStart, channel, preDiveValue | 0);
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, tempoOnBeatStart));
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration, tempoOnBeatStart, addBend);
                            return;
                    }
                    break;
            }
            this.generateWhammyOrBend(noteStart, duration, playedBendPoints, tempoOnBeatStart, addBend);
        }
        generateWhammyOrBend(noteStart, duration, playedBendPoints, tempoOnBeatStart, addBend) {
            const ticksPerPosition = duration / BendPoint.MaxPosition;
            for (let i = 0; i < playedBendPoints.length - 1; i++) {
                const currentPoint = playedBendPoints[i];
                const nextPoint = playedBendPoints[i + 1];
                // calculate the midi pitchbend values start and end values
                const currentBendValue = MidiFileGenerator.getPitchWheel(currentPoint.value);
                const nextBendValue = MidiFileGenerator.getPitchWheel(nextPoint.value);
                // how many midi ticks do we have to spend between this point and the next one?
                const ticksBetweenPoints = ticksPerPosition * (nextPoint.offset - currentPoint.offset);
                // we will generate one pitchbend message for each value
                // for this we need to calculate how many ticks to offset per value
                const tick = noteStart + ticksPerPosition * currentPoint.offset;
                this.generateBendValues(tick, ticksBetweenPoints, currentBendValue, nextBendValue, tempoOnBeatStart, addBend);
            }
        }
        generateBendValues(currentTick, ticksBetweenPoints, currentBendValue, nextBendValue, tempoOnBeatStart, addBend) {
            const millisBetweenPoints = MidiUtils.ticksToMillis(ticksBetweenPoints, tempoOnBeatStart);
            const numberOfSemitones = Math.abs(nextBendValue - currentBendValue) / MidiFileGenerator.PitchValuePerSemitone;
            const numberOfSteps = Math.max(MidiFileGenerator.MinBreakpointsPerSemitone * numberOfSemitones, millisBetweenPoints / MidiFileGenerator.MillisecondsPerBreakpoint);
            const ticksPerBreakpoint = ticksBetweenPoints / numberOfSteps;
            const pitchPerBreakpoint = (nextBendValue - currentBendValue) / numberOfSteps;
            const endTick = currentTick + ticksBetweenPoints;
            for (let i = 0; i < numberOfSteps; i++) {
                addBend(currentTick | 0, Math.round(currentBendValue));
                currentBendValue += pitchPerBreakpoint;
                currentTick += ticksPerBreakpoint;
            }
            addBend(endTick | 0, nextBendValue);
        }
        generateRasgueado(track, note, noteStart, noteKey, velocity, channel, rasgueadoInfo) {
            let tick = noteStart;
            for (let i = 0; i < rasgueadoInfo.durations.length; i++) {
                const brushInfo = rasgueadoInfo.brushInfos[i];
                const brushOffset = note.isStringed && note.string <= brushInfo.length ? brushInfo[note.string - 1] : 0;
                const duration = rasgueadoInfo.durations[i];
                this._handler.addNote(track.index, tick + brushOffset, duration - brushOffset, noteKey, velocity, channel);
                tick += duration;
            }
        }
        generateTrill(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
            const track = note.beat.voice.bar.staff.track;
            const trillKey = note.stringTuning + note.trillFret;
            let trillLength = MidiUtils.toTicks(note.trillSpeed);
            let realKey = true;
            let tick = noteStart;
            const end = noteStart + noteDuration.untilTieOrSlideEnd;
            while (tick + 10 < end) {
                // only the rest on last trill play
                if (tick + trillLength >= end) {
                    trillLength = end - tick;
                }
                this._handler.addNote(track.index, tick, trillLength, realKey ? trillKey : noteKey, dynamicValue, channel);
                realKey = !realKey;
                tick += trillLength;
            }
        }
        generateTremoloPicking(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
            const track = note.beat.voice.bar.staff.track;
            let tpLength = MidiUtils.toTicks(note.beat.tremoloSpeed);
            let tick = noteStart;
            const end = noteStart + noteDuration.untilTieOrSlideEnd;
            while (tick + 10 < end) {
                // only the rest on last trill play
                if (tick + tpLength >= end) {
                    tpLength = end - tick;
                }
                this._handler.addNote(track.index, tick, tpLength, noteKey, dynamicValue, channel);
                tick += tpLength;
            }
        }
        getRasgueadoInfo(beat, beatDuration) {
            if (!beat.hasRasgueado) {
                return null;
            }
            const info = new RasgueadoInfo();
            // stretch pattern from absolute definition to needed beat duration
            const rasgueadoPattern = MidiFileGenerator.RasgueadoDurations.get(beat.rasgueado);
            const patternDuration = rasgueadoPattern.reduce((p, v) => p + v, 0);
            info.durations = MidiFileGenerator.RasgueadoDurations.get(beat.rasgueado).map(v => (beatDuration * v) / patternDuration);
            info.brushInfos = new Array(info.durations.length);
            // precalculate the values needed for all brush infos
            const sixteenthBrush = MidiUtils.toTicks(Duration.Sixteenth);
            let stringUsed = 0;
            let stringCount = 0;
            for (const n of beat.notes) {
                if (n.isTieDestination) {
                    continue;
                }
                stringUsed |= 0x01 << (n.string - 1);
                stringCount++;
            }
            // compute brush info for all slots matching the duration
            const rasgueadoDirections = MidiFileGenerator.RasgueadoDirections.get(beat.rasgueado);
            for (let i = 0; i < info.durations.length; i++) {
                // QuarterTime -> 16th note brush
                // real duration -> ?
                const brushDuration = (info.durations[i] * sixteenthBrush) / MidiUtils.QuarterTime;
                const brushInfo = new Int32Array(beat.voice.bar.staff.tuning.length);
                info.brushInfos[i] = brushInfo;
                const brushType = rasgueadoDirections[i];
                if (brushType !== BrushType.None) {
                    this.fillBrushInfo(beat, brushInfo, brushType === BrushType.ArpeggioDown || brushType === BrushType.BrushDown, stringUsed, stringCount, brushDuration);
                }
            }
            return info;
        }
        getBrushInfo(beat) {
            const brushInfo = new Int32Array(beat.voice.bar.staff.tuning.length);
            if (beat.brushType) {
                //
                // calculate the number of
                // a mask where the single bits indicate the strings used
                let stringUsed = 0;
                let stringCount = 0;
                for (const n of beat.notes) {
                    if (n.isTieDestination) {
                        continue;
                    }
                    stringUsed |= 0x01 << (n.string - 1);
                    stringCount++;
                }
                this.fillBrushInfo(beat, brushInfo, beat.brushType === BrushType.ArpeggioDown || beat.brushType === BrushType.BrushDown, stringUsed, stringCount, beat.brushDuration);
            }
            return brushInfo;
        }
        fillBrushInfo(beat, brushInfo, down, stringUsed, stringCount, brushDuration) {
            //
            // calculate time offset for all strings
            if (beat.notes.length > 0) {
                let brushMove = 0;
                const brushIncrement = (brushDuration / (stringCount - 1)) | 0;
                for (let i = 0; i < beat.voice.bar.staff.tuning.length; i++) {
                    const index = down ? i : brushInfo.length - 1 - i;
                    if ((stringUsed & (0x01 << index)) !== 0) {
                        brushInfo[index] = brushMove;
                        brushMove += brushIncrement;
                    }
                }
            }
            return brushInfo;
        }
        generateNonTempoAutomation(beat, automation, startMove) {
            switch (automation.type) {
                case AutomationType.Instrument:
                    this.addProgramChange(beat.voice.bar.staff.track, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, (automation.value | 0) & 0xff);
                    this.addProgramChange(beat.voice.bar.staff.track, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, (automation.value | 0) & 0xff);
                    break;
                case AutomationType.Balance:
                    const balance = MidiFileGenerator.toChannelShort(automation.value);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.PanCoarse, balance);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.PanCoarse, balance);
                    break;
                case AutomationType.Volume:
                    const volume = MidiFileGenerator.toChannelShort(automation.value);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
                    break;
            }
        }
        prepareSingleBeat(beat) {
            // collect tempo and program at given beat
            let tempo = -1;
            let program = -1;
            // traverse to previous beats until we maybe hit the automations needed
            let currentBeat = beat;
            while (currentBeat && (tempo === -1 || program === -1)) {
                for (const automation of beat.automations) {
                    switch (automation.type) {
                        case AutomationType.Instrument:
                            program = automation.value;
                            break;
                        case AutomationType.Tempo:
                            tempo = automation.value;
                            break;
                    }
                }
                currentBeat = currentBeat.previousBeat;
            }
            const track = beat.voice.bar.staff.track;
            const masterBar = beat.voice.bar.masterBar;
            if (tempo === -1) {
                tempo = masterBar.score.tempo;
            }
            const positionRatio = beat.playbackStart / masterBar.calculateDuration();
            for (const automation of masterBar.tempoAutomations) {
                if (automation.ratioPosition <= positionRatio) {
                    tempo = automation.value;
                }
                else {
                    break;
                }
            }
            if (program === -1) {
                program = track.playbackInfo.program;
            }
            const volume = track.playbackInfo.volume;
            // setup channel
            this.generateTrack(track);
            this._handler.addTimeSignature(0, masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator);
            this._handler.addTempo(0, tempo);
            const volumeCoarse = MidiFileGenerator.toChannelShort(volume);
            this._handler.addControlChange(0, 0, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volumeCoarse);
            this._handler.addControlChange(0, 0, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volumeCoarse);
            return tempo;
        }
        generateSingleBeat(beat) {
            const tempo = this.prepareSingleBeat(beat);
            this.generateBeat(beat, -beat.playbackStart /* to bring it to 0*/, beat.voice.bar, tempo);
        }
        generateSingleNote(note) {
            const tempo = this.prepareSingleBeat(note.beat);
            this.generateNote(note, 0, note.beat.playbackDuration, tempo, new Int32Array(note.beat.voice.bar.staff.tuning.length), null);
        }
    }
    MidiFileGenerator.DefaultDurationDead = 30;
    MidiFileGenerator.DefaultDurationPalmMute = 80;
    /**
     * For every note within the octave, the number of keys to go up when playing ornaments.
     * For white keys this is the next white key,
     * For black keys it is either the next black or white key depending on the distance.
     *
     * Ornaments are not really a strictly defined element, alphaTab is using shipping some default.
     */
    // prettier-ignore
    MidiFileGenerator.OrnamentKeysUp = [
        /* C -> D */ 2, /* C# -> D# */ 2, /* D -> E */ 2, /* D# -> E */ 1, /* E -> F */ 1, /* F -> G */ 2,
        /* F# -> G# */ 2, /* G -> A */ 2, /* G# -> A# */ 2, /* A -> B */ 2, /* A# -> B */ 1, /* B -> C */ 1
    ];
    /**
     * For every note within the octave, the number of keys to go down when playing ornaments.
     * This is typically only a key down.
     *
     * Ornaments are not really a strictly defined element, alphaTab is using shipping some default.
     */
    // prettier-ignore
    MidiFileGenerator.OrnamentKeysDown = [
        /* C -> B */ -1, /* C# -> C */ -1, /* D -> C# */ -1, /* D# -> D */ -1, /* E -> D# */ -1, /* F -> E */ -1,
        /* F# -> F */ -1, /* G -> F# */ -1, /* G# -> G */ -1, /* A -> G# */ -1, /* A# -> A */ -1, /* B -> A# */ -1
    ];
    /**
     * Maximum semitones that are supported in bends in one direction (up or down)
     * GP has 8 full tones on whammys.
     */
    MidiFileGenerator.PitchBendRangeInSemitones = 8 * 2;
    /**
     * The value on how many pitch-values are used for one semitone
     */
    MidiFileGenerator.PitchValuePerSemitone = SynthConstants.DefaultPitchWheel / MidiFileGenerator.PitchBendRangeInSemitones;
    /**
     * The minimum number of breakpoints generated per semitone bend.
     */
    MidiFileGenerator.MinBreakpointsPerSemitone = 6;
    /**
     * How long until a new breakpoint is generated for a bend.
     */
    MidiFileGenerator.MillisecondsPerBreakpoint = 150;
    MidiFileGenerator.RasgueadoDirections = new Map([
        [Rasgueado.Ii, [BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.Mi, [BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.MiiTriplet, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.MiiAnapaest, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.PmpTriplet, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.PmpAnapaest, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.PeiTriplet, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.PeiAnapaest, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.PaiTriplet, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.PaiAnapaest, [BrushType.BrushUp, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.AmiTriplet, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.AmiAnapaest, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown]],
        [Rasgueado.Ppp, [BrushType.None, BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.Amii, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.Amip, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]],
        [Rasgueado.Eami, [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown]],
        [
            Rasgueado.Eamii,
            [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]
        ],
        [
            Rasgueado.Peami,
            [BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushDown, BrushType.BrushUp]
        ]
    ]);
    // these are the durations of the rasgueados assuming we have a quarter note
    // the patterns are then relatively scaled to the actual beat duration
    MidiFileGenerator.RasgueadoDurations = new Map([
        [Rasgueado.Ii, [MidiUtils.toTicks(Duration.Eighth), MidiUtils.toTicks(Duration.Eighth)]],
        [Rasgueado.Mi, [MidiUtils.toTicks(Duration.Eighth), MidiUtils.toTicks(Duration.Eighth)]],
        [
            Rasgueado.MiiTriplet,
            [
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.MiiAnapaest,
            [
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Eighth)
            ]
        ],
        [
            Rasgueado.PmpTriplet,
            [
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.PmpAnapaest,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.PeiTriplet,
            [
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.PeiAnapaest,
            [
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Eighth)
            ]
        ],
        [
            Rasgueado.PaiTriplet,
            [
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.PaiAnapaest,
            [
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Eighth)
            ]
        ],
        [
            Rasgueado.AmiTriplet,
            [
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.AmiAnapaest,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.Ppp,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Eighth) / 3
            ]
        ],
        [
            Rasgueado.Amii,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Eighth)
            ]
        ],
        [
            Rasgueado.Amip,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Sixteenth) / 3,
                MidiUtils.toTicks(Duration.Eighth)
            ]
        ],
        [
            Rasgueado.Eami,
            [
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth),
                MidiUtils.toTicks(Duration.Sixteenth)
            ]
        ],
        [
            Rasgueado.Eamii,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5
            ]
        ],
        [
            Rasgueado.Peami,
            [
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5,
                MidiUtils.toTicks(Duration.Sixteenth) / 5
            ]
        ]
    ]);

    /**
     * Represents a range of the song that should be played.
     */
    class PlaybackRange {
        constructor() {
            /**
             * The position in midi ticks from where the song should start.
             */
            this.startTick = 0;
            /**
             * The position in midi ticks to where the song should be played.
             */
            this.endTick = 0;
        }
    }

    /**
     * A glyph is a single symbol which can be added to a GlyphBarRenderer for automated
     * layouting and drawing of stacked symbols.
     */
    class Glyph {
        constructor(x, y) {
            this.width = 0;
            this.height = 0;
            this.x = x;
            this.y = y;
        }
        doLayout() {
        }
        paint(cx, cy, canvas) {
        }
    }

    /**
     * Effect-Glyphs implementing this public interface get notified
     * as they are expanded over multiple beats.
     */
    class EffectGlyph extends Glyph {
        constructor(x = 0, y = 0) {
            super(x, y);
            /**
             * Gets or sets the beat where the glyph belongs to.
             */
            this.beat = null;
            /**
             * Gets or sets the next glyph of the same type in case
             * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
             */
            this.nextGlyph = null;
            /**
             * Gets or sets the previous glyph of the same type in case
             * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
             */
            this.previousGlyph = null;
        }
    }

    /**
     * Stores the sizes for the {@link MusicFontSymbol} glyphs.
     */
    class MusicFontSymbolSizes {
    }
    // NOTE: with https://github.com/CoderLine/alphaTab/issues/1949 we fill this list properly from the input font metadata
    /**
     * The widths of the bounding box for the respective glyphs.
     */
    MusicFontSymbolSizes.Widths = new Map([
        [MusicFontSymbol.Brace, 3],
        [MusicFontSymbol.BracketTop, 0],
        [MusicFontSymbol.BracketBottom, 0],
        [MusicFontSymbol.SystemDivider, 0],
        [MusicFontSymbol.GClef, 28],
        [MusicFontSymbol.CClef, 28],
        [MusicFontSymbol.FClef, 28],
        [MusicFontSymbol.UnpitchedPercussionClef1, 15],
        [MusicFontSymbol.SixStringTabClef, 28],
        [MusicFontSymbol.FourStringTabClef, 28],
        [MusicFontSymbol.TimeSig0, 14],
        [MusicFontSymbol.TimeSig1, 10],
        [MusicFontSymbol.TimeSig2, 14],
        [MusicFontSymbol.TimeSig3, 14],
        [MusicFontSymbol.TimeSig4, 14],
        [MusicFontSymbol.TimeSig5, 14],
        [MusicFontSymbol.TimeSig6, 14],
        [MusicFontSymbol.TimeSig7, 14],
        [MusicFontSymbol.TimeSig8, 14],
        [MusicFontSymbol.TimeSig9, 14],
        [MusicFontSymbol.TimeSigCommon, 14],
        [MusicFontSymbol.TimeSigCutCommon, 14],
        [MusicFontSymbol.NoteheadDoubleWholeSquare, 14],
        [MusicFontSymbol.NoteheadDoubleWhole, 14],
        [MusicFontSymbol.NoteheadWhole, 14],
        [MusicFontSymbol.NoteheadHalf, 9],
        [MusicFontSymbol.NoteheadBlack, 9],
        [MusicFontSymbol.NoteheadNull, 9],
        [MusicFontSymbol.NoteheadXOrnate, 9],
        [MusicFontSymbol.NoteheadPlusDoubleWhole, 16],
        [MusicFontSymbol.NoteheadPlusWhole, 10],
        [MusicFontSymbol.NoteheadPlusHalf, 10],
        [MusicFontSymbol.NoteheadPlusBlack, 10],
        [MusicFontSymbol.NoteheadSquareWhite, 11],
        [MusicFontSymbol.NoteheadSquareBlack, 11],
        [MusicFontSymbol.NoteheadTriangleUpDoubleWhole, 16],
        [MusicFontSymbol.NoteheadTriangleUpWhole, 11],
        [MusicFontSymbol.NoteheadTriangleUpHalf, 11],
        [MusicFontSymbol.NoteheadTriangleUpBlack, 11],
        [MusicFontSymbol.NoteheadTriangleRightWhite, 11],
        [MusicFontSymbol.NoteheadTriangleRightBlack, 11],
        [MusicFontSymbol.NoteheadTriangleDownDoubleWhole, 16],
        [MusicFontSymbol.NoteheadTriangleDownWhole, 11],
        [MusicFontSymbol.NoteheadTriangleDownHalf, 11],
        [MusicFontSymbol.NoteheadTriangleDownBlack, 11],
        [MusicFontSymbol.NoteheadDiamondDoubleWhole, 16],
        [MusicFontSymbol.NoteheadDiamondWhole, 9],
        [MusicFontSymbol.NoteheadDiamondHalf, 9],
        [MusicFontSymbol.NoteheadDiamondBlack, 9],
        [MusicFontSymbol.NoteheadDiamondBlackWide, 10],
        [MusicFontSymbol.NoteheadDiamondWhite, 9],
        [MusicFontSymbol.NoteheadDiamondWhiteWide, 9],
        [MusicFontSymbol.NoteheadCircleXDoubleWhole, 16],
        [MusicFontSymbol.NoteheadCircleXWhole, 9],
        [MusicFontSymbol.NoteheadCircleXHalf, 9],
        [MusicFontSymbol.NoteheadCircleX, 9],
        [MusicFontSymbol.NoteheadXDoubleWhole, 16],
        [MusicFontSymbol.NoteheadXWhole, 9],
        [MusicFontSymbol.NoteheadXHalf, 9],
        [MusicFontSymbol.NoteheadXBlack, 9],
        [MusicFontSymbol.NoteheadParenthesis, 9],
        [MusicFontSymbol.NoteheadSlashedBlack1, 9],
        [MusicFontSymbol.NoteheadSlashedBlack2, 9],
        [MusicFontSymbol.NoteheadSlashedHalf1, 9],
        [MusicFontSymbol.NoteheadSlashedHalf2, 9],
        [MusicFontSymbol.NoteheadSlashedWhole1, 9],
        [MusicFontSymbol.NoteheadSlashedWhole2, 9],
        [MusicFontSymbol.NoteheadSlashedDoubleWhole1, 16],
        [MusicFontSymbol.NoteheadSlashedDoubleWhole2, 16],
        [MusicFontSymbol.NoteheadCircledBlack, 9],
        [MusicFontSymbol.NoteheadCircledHalf, 9],
        [MusicFontSymbol.NoteheadCircledWhole, 9],
        [MusicFontSymbol.NoteheadCircledDoubleWhole, 16],
        [MusicFontSymbol.NoteheadCircleSlash, 9],
        [MusicFontSymbol.NoteheadHeavyX, 13],
        [MusicFontSymbol.NoteheadHeavyXHat, 13],
        [MusicFontSymbol.NoteheadSlashVerticalEnds, 12],
        [MusicFontSymbol.NoteheadSlashWhiteWhole, 32],
        [MusicFontSymbol.NoteheadSlashWhiteHalf, 25],
        [MusicFontSymbol.NoteheadRoundWhiteWithDot, 9],
        [MusicFontSymbol.NoteheadSquareBlackLarge, 9],
        [MusicFontSymbol.NoteheadSquareBlackWhite, 9],
        [MusicFontSymbol.NoteheadClusterDoubleWhole3rd, 16],
        [MusicFontSymbol.NoteheadClusterWhole3rd, 12],
        [MusicFontSymbol.NoteheadClusterHalf3rd, 12],
        [MusicFontSymbol.NoteheadClusterQuarter3rd, 12],
        [MusicFontSymbol.NoteShapeRoundWhite, 9],
        [MusicFontSymbol.NoteShapeRoundBlack, 9],
        [MusicFontSymbol.NoteShapeSquareWhite, 12],
        [MusicFontSymbol.NoteShapeSquareBlack, 12],
        [MusicFontSymbol.NoteShapeTriangleRightWhite, 12],
        [MusicFontSymbol.NoteShapeTriangleRightBlack, 12],
        [MusicFontSymbol.NoteShapeTriangleLeftWhite, 12],
        [MusicFontSymbol.NoteShapeTriangleLeftBlack, 12],
        [MusicFontSymbol.NoteShapeDiamondWhite, 9],
        [MusicFontSymbol.NoteShapeDiamondBlack, 9],
        [MusicFontSymbol.NoteShapeTriangleUpWhite, 12],
        [MusicFontSymbol.NoteShapeTriangleUpBlack, 12],
        [MusicFontSymbol.NoteShapeMoonWhite, 12],
        [MusicFontSymbol.NoteShapeMoonBlack, 12],
        [MusicFontSymbol.NoteShapeTriangleRoundWhite, 12],
        [MusicFontSymbol.NoteShapeTriangleRoundBlack, 12],
        [MusicFontSymbol.NoteQuarterUp, 10],
        [MusicFontSymbol.NoteEighthUp, 10],
        [MusicFontSymbol.TextBlackNoteLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac8thLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac16thLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac32ndLongStem, 0],
        [MusicFontSymbol.TextCont8thBeamLongStem, 0],
        [MusicFontSymbol.TextCont16thBeamLongStem, 0],
        [MusicFontSymbol.TextCont32ndBeamLongStem, 0],
        [MusicFontSymbol.TextAugmentationDot, 0],
        [MusicFontSymbol.TextTupletBracketStartLongStem, 0],
        [MusicFontSymbol.TextTuplet3LongStem, 0],
        [MusicFontSymbol.TextTupletBracketEndLongStem, 0],
        [MusicFontSymbol.Tremolo3, 12],
        [MusicFontSymbol.Tremolo2, 12],
        [MusicFontSymbol.Tremolo1, 12],
        [MusicFontSymbol.FlagEighthUp, 0],
        [MusicFontSymbol.FlagEighthDown, 0],
        [MusicFontSymbol.FlagSixteenthUp, 0],
        [MusicFontSymbol.FlagSixteenthDown, 0],
        [MusicFontSymbol.FlagThirtySecondUp, 0],
        [MusicFontSymbol.FlagThirtySecondDown, 0],
        [MusicFontSymbol.FlagSixtyFourthUp, 0],
        [MusicFontSymbol.FlagSixtyFourthDown, 0],
        [MusicFontSymbol.FlagOneHundredTwentyEighthUp, 0],
        [MusicFontSymbol.FlagOneHundredTwentyEighthDown, 0],
        [MusicFontSymbol.FlagTwoHundredFiftySixthUp, 0],
        [MusicFontSymbol.FlagTwoHundredFiftySixthDown, 0],
        [MusicFontSymbol.AccidentalFlat, 8],
        [MusicFontSymbol.AccidentalNatural, 8],
        [MusicFontSymbol.AccidentalSharp, 8],
        [MusicFontSymbol.AccidentalDoubleSharp, 8],
        [MusicFontSymbol.AccidentalDoubleFlat, 18],
        [MusicFontSymbol.AccidentalQuarterToneFlatArrowUp, 8],
        [MusicFontSymbol.AccidentalQuarterToneSharpArrowUp, 8],
        [MusicFontSymbol.AccidentalQuarterToneNaturalArrowUp, 8],
        [MusicFontSymbol.Segno, 0],
        [MusicFontSymbol.Coda, 0],
        [MusicFontSymbol.ArticAccentAbove, 9],
        [MusicFontSymbol.ArticAccentBelow, 9],
        [MusicFontSymbol.ArticStaccatoAbove, 9],
        [MusicFontSymbol.ArticStaccatoBelow, 9],
        [MusicFontSymbol.ArticTenutoAbove, 9],
        [MusicFontSymbol.ArticTenutoBelow, 9],
        [MusicFontSymbol.ArticMarcatoAbove, 9],
        [MusicFontSymbol.ArticMarcatoBelow, 9],
        [MusicFontSymbol.FermataAbove, 23],
        [MusicFontSymbol.FermataShortAbove, 23],
        [MusicFontSymbol.FermataLongAbove, 23],
        [MusicFontSymbol.RestLonga, 9],
        [MusicFontSymbol.RestDoubleWhole, 9],
        [MusicFontSymbol.RestWhole, 9],
        [MusicFontSymbol.RestHalf, 9],
        [MusicFontSymbol.RestQuarter, 9],
        [MusicFontSymbol.RestEighth, 9],
        [MusicFontSymbol.RestSixteenth, 9],
        [MusicFontSymbol.RestThirtySecond, 12],
        [MusicFontSymbol.RestSixtyFourth, 14],
        [MusicFontSymbol.RestOneHundredTwentyEighth, 14],
        [MusicFontSymbol.RestTwoHundredFiftySixth, 14],
        [MusicFontSymbol.RestHBarLeft, 0],
        [MusicFontSymbol.RestHBarMiddle, 0],
        [MusicFontSymbol.RestHBarRight, 0],
        [MusicFontSymbol.Repeat1Bar, 0],
        [MusicFontSymbol.Repeat2Bars, 0],
        [MusicFontSymbol.Ottava, 0],
        [MusicFontSymbol.OttavaAlta, 32],
        [MusicFontSymbol.OttavaBassaVb, 29],
        [MusicFontSymbol.Quindicesima, 23],
        [MusicFontSymbol.QuindicesimaAlta, 46],
        [MusicFontSymbol.DynamicPPPPPP, 0],
        [MusicFontSymbol.DynamicPPPPP, 0],
        [MusicFontSymbol.DynamicPPPP, 0],
        [MusicFontSymbol.DynamicPPP, 0],
        [MusicFontSymbol.DynamicPP, 0],
        [MusicFontSymbol.DynamicPiano, 0],
        [MusicFontSymbol.DynamicMP, 0],
        [MusicFontSymbol.DynamicMF, 0],
        [MusicFontSymbol.DynamicPF, 0],
        [MusicFontSymbol.DynamicForte, 0],
        [MusicFontSymbol.DynamicFF, 0],
        [MusicFontSymbol.DynamicFFF, 0],
        [MusicFontSymbol.DynamicFFFF, 0],
        [MusicFontSymbol.DynamicFFFFF, 0],
        [MusicFontSymbol.DynamicFFFFFF, 0],
        [MusicFontSymbol.DynamicFortePiano, 0],
        [MusicFontSymbol.DynamicNiente, 0],
        [MusicFontSymbol.DynamicSforzando1, 0],
        [MusicFontSymbol.DynamicSforzandoPiano, 0],
        [MusicFontSymbol.DynamicSforzandoPianissimo, 0],
        [MusicFontSymbol.DynamicSforzato, 0],
        [MusicFontSymbol.DynamicSforzatoPiano, 0],
        [MusicFontSymbol.DynamicSforzatoFF, 0],
        [MusicFontSymbol.DynamicRinforzando1, 0],
        [MusicFontSymbol.DynamicRinforzando2, 0],
        [MusicFontSymbol.DynamicForzando, 0],
        [MusicFontSymbol.OrnamentTrill, 20],
        [MusicFontSymbol.OrnamentTurn, 26],
        [MusicFontSymbol.OrnamentTurnInverted, 26],
        [MusicFontSymbol.OrnamentShortTrill, 0],
        [MusicFontSymbol.OrnamentMordent, 26],
        [MusicFontSymbol.StringsDownBow, 9],
        [MusicFontSymbol.StringsUpBow, 9],
        [MusicFontSymbol.KeyboardPedalPed, 35],
        [MusicFontSymbol.KeyboardPedalUp, 16],
        [MusicFontSymbol.PictEdgeOfCymbal, 44],
        [MusicFontSymbol.GuitarString0, 20],
        [MusicFontSymbol.GuitarString1, 20],
        [MusicFontSymbol.GuitarString2, 20],
        [MusicFontSymbol.GuitarString3, 20],
        [MusicFontSymbol.GuitarString4, 20],
        [MusicFontSymbol.GuitarString5, 20],
        [MusicFontSymbol.GuitarString6, 20],
        [MusicFontSymbol.GuitarString7, 20],
        [MusicFontSymbol.GuitarString8, 20],
        [MusicFontSymbol.GuitarString9, 20],
        [MusicFontSymbol.GuitarOpenPedal, 11],
        [MusicFontSymbol.GuitarClosePedal, 11],
        [MusicFontSymbol.GuitarGolpe, 13.4],
        [MusicFontSymbol.GuitarFadeIn, 13],
        [MusicFontSymbol.GuitarFadeOut, 13],
        [MusicFontSymbol.GuitarVolumeSwell, 26],
        [MusicFontSymbol.FretboardX, 0],
        [MusicFontSymbol.FretboardO, 0],
        [MusicFontSymbol.WiggleTrill, 9],
        [MusicFontSymbol.WiggleVibratoMediumFast, 10],
        [MusicFontSymbol.OctaveBaselineM, 13],
        [MusicFontSymbol.OctaveBaselineB, 9]
    ]);
    /**
     * The heights of the bounding box for the respective glyphs.
     */
    MusicFontSymbolSizes.Heights = new Map([
        [MusicFontSymbol.Brace, 34],
        [MusicFontSymbol.BracketTop, 0],
        [MusicFontSymbol.BracketBottom, 0],
        [MusicFontSymbol.SystemDivider, 0],
        [MusicFontSymbol.GClef, 0],
        [MusicFontSymbol.CClef, 0],
        [MusicFontSymbol.FClef, 0],
        [MusicFontSymbol.UnpitchedPercussionClef1, 0],
        [MusicFontSymbol.SixStringTabClef, 0],
        [MusicFontSymbol.FourStringTabClef, 0],
        [MusicFontSymbol.TimeSig0, 0],
        [MusicFontSymbol.TimeSig1, 0],
        [MusicFontSymbol.TimeSig2, 0],
        [MusicFontSymbol.TimeSig3, 0],
        [MusicFontSymbol.TimeSig4, 0],
        [MusicFontSymbol.TimeSig5, 0],
        [MusicFontSymbol.TimeSig6, 0],
        [MusicFontSymbol.TimeSig7, 0],
        [MusicFontSymbol.TimeSig8, 0],
        [MusicFontSymbol.TimeSig9, 0],
        [MusicFontSymbol.TimeSigCommon, 0],
        [MusicFontSymbol.TimeSigCutCommon, 0],
        [MusicFontSymbol.NoteheadDoubleWholeSquare, 8],
        [MusicFontSymbol.NoteheadDoubleWhole, 8],
        [MusicFontSymbol.NoteheadWhole, 8],
        [MusicFontSymbol.NoteheadHalf, 8],
        [MusicFontSymbol.NoteheadBlack, 8],
        [MusicFontSymbol.NoteheadNull, 8],
        [MusicFontSymbol.NoteheadXOrnate, 8],
        [MusicFontSymbol.NoteheadPlusDoubleWhole, 8],
        [MusicFontSymbol.NoteheadPlusWhole, 8],
        [MusicFontSymbol.NoteheadPlusHalf, 8],
        [MusicFontSymbol.NoteheadPlusBlack, 8],
        [MusicFontSymbol.NoteheadSquareWhite, 8],
        [MusicFontSymbol.NoteheadSquareBlack, 8],
        [MusicFontSymbol.NoteheadTriangleUpDoubleWhole, 8],
        [MusicFontSymbol.NoteheadTriangleUpWhole, 8],
        [MusicFontSymbol.NoteheadTriangleUpHalf, 8],
        [MusicFontSymbol.NoteheadTriangleUpBlack, 8],
        [MusicFontSymbol.NoteheadTriangleRightWhite, 8],
        [MusicFontSymbol.NoteheadTriangleRightBlack, 8],
        [MusicFontSymbol.NoteheadTriangleDownDoubleWhole, 8],
        [MusicFontSymbol.NoteheadTriangleDownWhole, 8],
        [MusicFontSymbol.NoteheadTriangleDownHalf, 8],
        [MusicFontSymbol.NoteheadTriangleDownBlack, 8],
        [MusicFontSymbol.NoteheadDiamondDoubleWhole, 8],
        [MusicFontSymbol.NoteheadDiamondWhole, 8],
        [MusicFontSymbol.NoteheadDiamondHalf, 8],
        [MusicFontSymbol.NoteheadDiamondBlack, 8],
        [MusicFontSymbol.NoteheadDiamondBlackWide, 9],
        [MusicFontSymbol.NoteheadDiamondWhite, 9],
        [MusicFontSymbol.NoteheadDiamondWhiteWide, 9],
        [MusicFontSymbol.NoteheadCircleXDoubleWhole, 8],
        [MusicFontSymbol.NoteheadCircleXWhole, 8],
        [MusicFontSymbol.NoteheadCircleXHalf, 8],
        [MusicFontSymbol.NoteheadCircleX, 8],
        [MusicFontSymbol.NoteheadXDoubleWhole, 8],
        [MusicFontSymbol.NoteheadXWhole, 8],
        [MusicFontSymbol.NoteheadXHalf, 8],
        [MusicFontSymbol.NoteheadXBlack, 8],
        [MusicFontSymbol.NoteheadParenthesis, 8],
        [MusicFontSymbol.NoteheadSlashedBlack1, 8],
        [MusicFontSymbol.NoteheadSlashedBlack2, 8],
        [MusicFontSymbol.NoteheadSlashedHalf1, 8],
        [MusicFontSymbol.NoteheadSlashedHalf2, 8],
        [MusicFontSymbol.NoteheadSlashedWhole1, 8],
        [MusicFontSymbol.NoteheadSlashedWhole2, 8],
        [MusicFontSymbol.NoteheadSlashedDoubleWhole1, 8],
        [MusicFontSymbol.NoteheadSlashedDoubleWhole2, 8],
        [MusicFontSymbol.NoteheadCircledBlack, 8],
        [MusicFontSymbol.NoteheadCircledHalf, 8],
        [MusicFontSymbol.NoteheadCircledWhole, 8],
        [MusicFontSymbol.NoteheadCircledDoubleWhole, 8],
        [MusicFontSymbol.NoteheadCircleSlash, 8],
        [MusicFontSymbol.NoteheadHeavyX, 8],
        [MusicFontSymbol.NoteheadHeavyXHat, 8],
        [MusicFontSymbol.NoteheadSlashVerticalEnds, 17],
        [MusicFontSymbol.NoteheadSlashWhiteWhole, 17],
        [MusicFontSymbol.NoteheadSlashWhiteHalf, 17],
        [MusicFontSymbol.NoteheadRoundWhiteWithDot, 8],
        [MusicFontSymbol.NoteheadSquareBlackLarge, 8],
        [MusicFontSymbol.NoteheadSquareBlackWhite, 8],
        [MusicFontSymbol.NoteheadClusterDoubleWhole3rd, 8],
        [MusicFontSymbol.NoteheadClusterWhole3rd, 8],
        [MusicFontSymbol.NoteheadClusterHalf3rd, 8],
        [MusicFontSymbol.NoteheadClusterQuarter3rd, 8],
        [MusicFontSymbol.NoteShapeRoundWhite, 8],
        [MusicFontSymbol.NoteShapeRoundBlack, 8],
        [MusicFontSymbol.NoteShapeSquareWhite, 8],
        [MusicFontSymbol.NoteShapeSquareBlack, 8],
        [MusicFontSymbol.NoteShapeTriangleRightWhite, 8],
        [MusicFontSymbol.NoteShapeTriangleRightBlack, 8],
        [MusicFontSymbol.NoteShapeTriangleLeftWhite, 8],
        [MusicFontSymbol.NoteShapeTriangleLeftBlack, 8],
        [MusicFontSymbol.NoteShapeDiamondWhite, 8],
        [MusicFontSymbol.NoteShapeDiamondBlack, 8],
        [MusicFontSymbol.NoteShapeTriangleUpWhite, 8],
        [MusicFontSymbol.NoteShapeTriangleUpBlack, 8],
        [MusicFontSymbol.NoteShapeMoonWhite, 8],
        [MusicFontSymbol.NoteShapeMoonBlack, 8],
        [MusicFontSymbol.NoteShapeTriangleRoundWhite, 8],
        [MusicFontSymbol.NoteShapeTriangleRoundBlack, 8],
        [MusicFontSymbol.NoteQuarterUp, 8],
        [MusicFontSymbol.NoteEighthUp, 8],
        [MusicFontSymbol.TextBlackNoteLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac8thLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac16thLongStem, 0],
        [MusicFontSymbol.TextBlackNoteFrac32ndLongStem, 0],
        [MusicFontSymbol.TextCont8thBeamLongStem, 0],
        [MusicFontSymbol.TextCont16thBeamLongStem, 0],
        [MusicFontSymbol.TextCont32ndBeamLongStem, 0],
        [MusicFontSymbol.TextAugmentationDot, 0],
        [MusicFontSymbol.TextTupletBracketStartLongStem, 0],
        [MusicFontSymbol.TextTuplet3LongStem, 0],
        [MusicFontSymbol.TextTupletBracketEndLongStem, 0],
        [MusicFontSymbol.Tremolo3, 0],
        [MusicFontSymbol.Tremolo2, 0],
        [MusicFontSymbol.Tremolo1, 0],
        [MusicFontSymbol.FlagEighthUp, 0],
        [MusicFontSymbol.FlagEighthDown, 0],
        [MusicFontSymbol.FlagSixteenthUp, 0],
        [MusicFontSymbol.FlagSixteenthDown, 0],
        [MusicFontSymbol.FlagThirtySecondUp, 0],
        [MusicFontSymbol.FlagThirtySecondDown, 0],
        [MusicFontSymbol.FlagSixtyFourthUp, 0],
        [MusicFontSymbol.FlagSixtyFourthDown, 0],
        [MusicFontSymbol.FlagOneHundredTwentyEighthUp, 0],
        [MusicFontSymbol.FlagOneHundredTwentyEighthDown, 0],
        [MusicFontSymbol.FlagTwoHundredFiftySixthUp, 0],
        [MusicFontSymbol.FlagTwoHundredFiftySixthDown, 0],
        [MusicFontSymbol.AccidentalFlat, 0],
        [MusicFontSymbol.AccidentalNatural, 0],
        [MusicFontSymbol.AccidentalSharp, 0],
        [MusicFontSymbol.AccidentalDoubleSharp, 0],
        [MusicFontSymbol.AccidentalDoubleFlat, 0],
        [MusicFontSymbol.AccidentalQuarterToneFlatArrowUp, 0],
        [MusicFontSymbol.AccidentalQuarterToneSharpArrowUp, 0],
        [MusicFontSymbol.AccidentalQuarterToneNaturalArrowUp, 0],
        [MusicFontSymbol.Segno, 0],
        [MusicFontSymbol.Coda, 0],
        [MusicFontSymbol.ArticAccentAbove, 9],
        [MusicFontSymbol.ArticAccentBelow, 9],
        [MusicFontSymbol.ArticStaccatoAbove, 9],
        [MusicFontSymbol.ArticStaccatoBelow, 9],
        [MusicFontSymbol.ArticTenutoAbove, 9],
        [MusicFontSymbol.ArticTenutoBelow, 9],
        [MusicFontSymbol.ArticMarcatoAbove, 9],
        [MusicFontSymbol.ArticMarcatoBelow, 9],
        [MusicFontSymbol.FermataAbove, 12],
        [MusicFontSymbol.FermataShortAbove, 12],
        [MusicFontSymbol.FermataLongAbove, 12],
        [MusicFontSymbol.RestLonga, 0],
        [MusicFontSymbol.RestDoubleWhole, 0],
        [MusicFontSymbol.RestWhole, 0],
        [MusicFontSymbol.RestHalf, 0],
        [MusicFontSymbol.RestQuarter, 0],
        [MusicFontSymbol.RestEighth, 0],
        [MusicFontSymbol.RestSixteenth, 0],
        [MusicFontSymbol.RestThirtySecond, 0],
        [MusicFontSymbol.RestSixtyFourth, 0],
        [MusicFontSymbol.RestOneHundredTwentyEighth, 0],
        [MusicFontSymbol.RestTwoHundredFiftySixth, 0],
        [MusicFontSymbol.RestHBarLeft, 0],
        [MusicFontSymbol.RestHBarMiddle, 0],
        [MusicFontSymbol.RestHBarRight, 0],
        [MusicFontSymbol.Repeat1Bar, 0],
        [MusicFontSymbol.Repeat2Bars, 0],
        [MusicFontSymbol.Ottava, 13],
        [MusicFontSymbol.OttavaAlta, 13],
        [MusicFontSymbol.OttavaBassaVb, 13],
        [MusicFontSymbol.Quindicesima, 13],
        [MusicFontSymbol.QuindicesimaAlta, 13],
        [MusicFontSymbol.DynamicPPPPPP, 28.4],
        [MusicFontSymbol.DynamicPPPPP, 28.4],
        [MusicFontSymbol.DynamicPPPP, 28.4],
        [MusicFontSymbol.DynamicPPP, 28.4],
        [MusicFontSymbol.DynamicPP, 28.4],
        [MusicFontSymbol.DynamicPiano, 28.4],
        [MusicFontSymbol.DynamicMP, 28.4],
        [MusicFontSymbol.DynamicMF, 28.4],
        [MusicFontSymbol.DynamicPF, 28.4],
        [MusicFontSymbol.DynamicForte, 28.4],
        [MusicFontSymbol.DynamicFF, 28.4],
        [MusicFontSymbol.DynamicFFF, 28.4],
        [MusicFontSymbol.DynamicFFFF, 28.4],
        [MusicFontSymbol.DynamicFFFFF, 28.4],
        [MusicFontSymbol.DynamicFFFFFF, 28.4],
        [MusicFontSymbol.DynamicFortePiano, 28.4],
        [MusicFontSymbol.DynamicNiente, 28.4],
        [MusicFontSymbol.DynamicSforzando1, 28.4],
        [MusicFontSymbol.DynamicSforzandoPiano, 28.4],
        [MusicFontSymbol.DynamicSforzandoPianissimo, 28.4],
        [MusicFontSymbol.DynamicSforzato, 28.4],
        [MusicFontSymbol.DynamicSforzatoPiano, 28.4],
        [MusicFontSymbol.DynamicSforzatoFF, 28.4],
        [MusicFontSymbol.DynamicRinforzando1, 28.4],
        [MusicFontSymbol.DynamicRinforzando2, 28.4],
        [MusicFontSymbol.DynamicForzando, 28.4],
        [MusicFontSymbol.OrnamentTrill, 24],
        [MusicFontSymbol.OrnamentTurn, 18],
        [MusicFontSymbol.OrnamentTurnInverted, 18],
        [MusicFontSymbol.OrnamentShortTrill, 18],
        [MusicFontSymbol.OrnamentMordent, 18],
        [MusicFontSymbol.StringsDownBow, 13 / 0.75],
        [MusicFontSymbol.StringsUpBow, 13 / 0.75],
        [MusicFontSymbol.KeyboardPedalPed, 19],
        [MusicFontSymbol.KeyboardPedalUp, 16],
        [MusicFontSymbol.PictEdgeOfCymbal, 30],
        [MusicFontSymbol.GuitarString0, 20],
        [MusicFontSymbol.GuitarString1, 20],
        [MusicFontSymbol.GuitarString2, 20],
        [MusicFontSymbol.GuitarString3, 20],
        [MusicFontSymbol.GuitarString4, 20],
        [MusicFontSymbol.GuitarString5, 20],
        [MusicFontSymbol.GuitarString6, 20],
        [MusicFontSymbol.GuitarString7, 20],
        [MusicFontSymbol.GuitarString8, 20],
        [MusicFontSymbol.GuitarString9, 20],
        [MusicFontSymbol.GuitarOpenPedal, 11],
        [MusicFontSymbol.GuitarClosePedal, 11],
        [MusicFontSymbol.GuitarGolpe, 13.4],
        [MusicFontSymbol.GuitarFadeIn, 13],
        [MusicFontSymbol.GuitarFadeOut, 13],
        [MusicFontSymbol.GuitarVolumeSwell, 13],
        [MusicFontSymbol.FretboardX, 0],
        [MusicFontSymbol.FretboardO, 0],
        [MusicFontSymbol.WiggleTrill, 6],
        [MusicFontSymbol.WiggleVibratoMediumFast, 10],
        [MusicFontSymbol.OctaveBaselineM, 0],
        [MusicFontSymbol.OctaveBaselineB, 0]
    ]);

    class MusicFontGlyph extends EffectGlyph {
        constructor(x, y, glyphScale, symbol) {
            super(x, y);
            this.glyphScale = 0;
            this.center = false;
            this.glyphScale = glyphScale;
            this.symbol = symbol;
        }
        doLayout() {
            this.width = MusicFontSymbolSizes.Widths.has(this.symbol)
                ? MusicFontSymbolSizes.Widths.get(this.symbol) * this.glyphScale
                : 0;
            this.height = MusicFontSymbolSizes.Heights.has(this.symbol)
                ? MusicFontSymbolSizes.Heights.get(this.symbol) * this.glyphScale
                : 0;
        }
        paint(cx, cy, canvas) {
            const c = canvas.color;
            if (this.colorOverride) {
                canvas.color = this.colorOverride;
            }
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y, this.glyphScale, this.symbol, this.center);
            canvas.color = c;
        }
    }

    class NoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, duration, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, NoteHeadGlyph.getSymbol(duration));
            this.centerOnStem = false;
            this._isGrace = isGrace;
        }
        paint(cx, cy, canvas) {
            const offset = this._isGrace ? 1 : 0;
            if (this.centerOnStem) {
                this.center = true;
            }
            super.paint(cx, cy + offset, canvas);
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                    return MusicFontSymbol.NoteheadDoubleWholeSquare;
                case Duration.DoubleWhole:
                    return MusicFontSymbol.NoteheadDoubleWhole;
                case Duration.Whole:
                    return MusicFontSymbol.NoteheadWhole;
                case Duration.Half:
                    return MusicFontSymbol.NoteheadHalf;
                default:
                    return MusicFontSymbol.NoteheadBlack;
            }
        }
    }
    NoteHeadGlyph.GraceScale = 0.75;

    class FlagGlyph extends MusicFontGlyph {
        constructor(x, y, duration, direction, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, FlagGlyph.getSymbol(duration, direction, isGrace));
        }
        static getSymbol(duration, direction, isGrace) {
            if (isGrace) {
                duration = Duration.Eighth;
            }
            if (direction === BeamDirection.Up) {
                switch (duration) {
                    case Duration.Eighth:
                        return MusicFontSymbol.FlagEighthUp;
                    case Duration.Sixteenth:
                        return MusicFontSymbol.FlagSixteenthUp;
                    case Duration.ThirtySecond:
                        return MusicFontSymbol.FlagThirtySecondUp;
                    case Duration.SixtyFourth:
                        return MusicFontSymbol.FlagSixtyFourthUp;
                    case Duration.OneHundredTwentyEighth:
                        return MusicFontSymbol.FlagOneHundredTwentyEighthUp;
                    case Duration.TwoHundredFiftySixth:
                        return MusicFontSymbol.FlagTwoHundredFiftySixthUp;
                    default:
                        return MusicFontSymbol.FlagEighthUp;
                }
            }
            switch (duration) {
                case Duration.Eighth:
                    return MusicFontSymbol.FlagEighthDown;
                case Duration.Sixteenth:
                    return MusicFontSymbol.FlagSixteenthDown;
                case Duration.ThirtySecond:
                    return MusicFontSymbol.FlagThirtySecondDown;
                case Duration.SixtyFourth:
                    return MusicFontSymbol.FlagSixtyFourthDown;
                case Duration.OneHundredTwentyEighth:
                    return MusicFontSymbol.FlagOneHundredTwentyEighthDown;
                case Duration.TwoHundredFiftySixth:
                    return MusicFontSymbol.FlagOneHundredTwentyEighthDown;
                default:
                    return MusicFontSymbol.FlagEighthDown;
            }
        }
    }
    FlagGlyph.FlagWidth = 11;

    class BeatContainerGlyph extends Glyph {
        get onTimeX() {
            return this.onNotes.x + this.onNotes.centerX;
        }
        constructor(beat, voiceContainer) {
            super(0, 0);
            this.ties = [];
            this.minWidth = 0;
            this.beat = beat;
            this.ties = [];
            this.voiceContainer = voiceContainer;
        }
        addTie(tie) {
            tie.renderer = this.renderer;
            this.ties.push(tie);
        }
        drawBeamHelperAsFlags(helper) {
            return helper.hasFlag(false, undefined);
        }
        registerLayoutingInfo(layoutings) {
            const preBeatStretch = this.preNotes.computedWidth + this.onNotes.centerX;
            let postBeatStretch = this.onNotes.computedWidth - this.onNotes.centerX;
            // make space for flag
            const helper = this.renderer.helpers.getBeamingHelperForBeat(this.beat);
            if (this.beat.graceType !== GraceType.None) {
                // flagged grace
                if (this.beat.graceGroup.beats.length === 1) {
                    postBeatStretch += FlagGlyph.FlagWidth * NoteHeadGlyph.GraceScale;
                }
                else if (this.beat.graceIndex < this.beat.graceGroup.beats.length - 1) {
                    postBeatStretch += 7;
                }
                else {
                    postBeatStretch += BeatContainerGlyph.GraceBeatPadding;
                }
            }
            else if (helper && this.drawBeamHelperAsFlags(helper)) {
                postBeatStretch += FlagGlyph.FlagWidth;
            }
            for (const tie of this.ties) {
                postBeatStretch += tie.width;
            }
            layoutings.addBeatSpring(this.beat, preBeatStretch, postBeatStretch);
        }
        applyLayoutingInfo(info) {
            this.onNotes.updateBeamingHelper();
            this.updateWidth();
        }
        doLayout() {
            this.preNotes.x = 0;
            this.preNotes.renderer = this.renderer;
            this.preNotes.container = this;
            this.preNotes.doLayout();
            this.onNotes.x = this.preNotes.x + this.preNotes.width;
            this.onNotes.renderer = this.renderer;
            this.onNotes.container = this;
            this.onNotes.doLayout();
            let i = this.beat.notes.length - 1;
            while (i >= 0) {
                this.createTies(this.beat.notes[i--]);
            }
            this.renderer.registerTies(this.ties);
            this.updateWidth();
        }
        updateWidth() {
            this.minWidth = this.preNotes.width + this.onNotes.width;
            if (!this.beat.isRest) {
                if (this.onNotes.beamingHelper.beats.length === 1) {
                    // make space for flag
                    if (this.beat.duration >= Duration.Eighth) {
                        this.minWidth += 20;
                    }
                }
                else {
                    // ensure some space for small notes
                    switch (this.beat.duration) {
                        case Duration.OneHundredTwentyEighth:
                        case Duration.TwoHundredFiftySixth:
                            this.minWidth += 10;
                            break;
                    }
                }
            }
            let tieWidth = 0;
            for (const tie of this.ties) {
                if (tie.width > tieWidth) {
                    tieWidth = tie.width;
                }
            }
            this.minWidth += tieWidth;
            this.width = this.minWidth;
        }
        scaleToWidth(beatWidth) {
            this.onNotes.updateBeamingHelper();
            this.width = beatWidth;
        }
        createTies(n) {
        }
        static getGroupId(beat) {
            return `b${beat.id}`;
        }
        paint(cx, cy, canvas) {
            // var c = canvas.color;
            // var ta = canvas.textAlign;
            // canvas.color = new Color(255, 0, 0);
            // canvas.textAlign = TextAlign.Left;
            // canvas.fillText(this.beat.playbackStart.toString(), cx + this.x, cy + this.y - 10);
            // canvas.color = c;
            // canvas.textAlign = ta;
            // canvas.color = Color.random();
            // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.renderer.height);
            // var oldColor = canvas.color;
            // canvas.color = Color.random(100);
            // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.renderer.height);
            // canvas.color = oldColor;
            // canvas.color = new Color(200, 0, 0, 100);
            // canvas.strokeRect(cx + this.x, cy + this.y + 15 * this.beat.voice.index, this.width, 10);
            // canvas.font = new Font("Arial", 10);
            // canvas.color = new Color(0, 0, 0);
            // canvas.fillText(this.beat.voice.index + ":" + this.beat.index, cx + this.x, cy + this.y + 15 * this.beat.voice.index);
            // const c = canvas.color;
            // if (this.beat.voice.index === 0) {
            //     canvas.color = new Color(0, 0, 200, 100);
            //     canvas.strokeRect(cx + this.x, cy + this.y, this.width, 10);
            //     canvas.color = new Color(200, 0, 0, 100);
            //     canvas.strokeRect(cx + this.x + this.preNotes.x, cy + this.y + 10, this.preNotes.width, 10);
            //     canvas.color = new Color(0, 200, 0, 100);
            //     canvas.strokeRect(cx + this.x + this.onNotes.x, cy + this.y + 10, this.onNotes.width, 10);
            //     canvas.color = new Color(0, 200, 200, 100);
            //     canvas.strokeRect(cx + this.x  + this.onNotes.x + this.onNotes.centerX, cy, 1, this.renderer.height);
            // }
            // canvas.color = c;
            const isEmptyGlyph = this.preNotes.isEmpty && this.onNotes.isEmpty && this.ties.length === 0;
            if (isEmptyGlyph) {
                return;
            }
            canvas.beginGroup(BeatContainerGlyph.getGroupId(this.beat));
            this.preNotes.paint(cx + this.x, cy + this.y, canvas);
            this.onNotes.paint(cx + this.x, cy + this.y, canvas);
            // reason: we have possibly multiple staves involved and need to calculate the correct positions.
            const staffX = cx - this.voiceContainer.x - this.renderer.x;
            const staffY = cy - this.voiceContainer.y - this.renderer.y;
            for (let i = 0, j = this.ties.length; i < j; i++) {
                const t = this.ties[i];
                t.renderer = this.renderer;
                t.paint(staffX, staffY, canvas);
            }
            canvas.endGroup();
        }
        buildBoundingsLookup(barBounds, cx, cy, isEmptyBar) {
            const beatBoundings = new BeatBounds();
            beatBoundings.beat = this.beat;
            if (this.beat.isEmpty) {
                beatBoundings.visualBounds = new Bounds();
                beatBoundings.visualBounds.x = cx + this.x;
                beatBoundings.visualBounds.y = barBounds.visualBounds.y;
                beatBoundings.visualBounds.w = this.width;
                beatBoundings.visualBounds.h = barBounds.visualBounds.h;
                beatBoundings.realBounds = new Bounds();
                beatBoundings.realBounds.x = cx + this.x;
                beatBoundings.realBounds.y = barBounds.realBounds.y;
                beatBoundings.realBounds.w = this.width;
                beatBoundings.realBounds.h = barBounds.realBounds.h;
                beatBoundings.onNotesX = cx + this.x + this.onNotes.centerX;
            }
            else {
                beatBoundings.visualBounds = new Bounds();
                beatBoundings.visualBounds.x = cx + this.x;
                if (!this.preNotes.isEmpty) {
                    beatBoundings.visualBounds.x = cx + this.x + this.preNotes.x;
                }
                else if (!this.onNotes.isEmpty) {
                    beatBoundings.visualBounds.x = cx + this.x + this.onNotes.x;
                }
                else {
                    beatBoundings.visualBounds.x = cx + this.x;
                }
                let visualEndX = 0;
                if (!this.onNotes.isEmpty) {
                    visualEndX = cx + this.x + this.onNotes.x + this.onNotes.width;
                }
                else if (!this.preNotes.isEmpty) {
                    visualEndX = cx + this.x + this.preNotes.x + this.preNotes.width;
                }
                else {
                    visualEndX = cx + this.x + this.width;
                }
                beatBoundings.visualBounds.w = visualEndX - beatBoundings.visualBounds.x;
                const helper = this.renderer.helpers.getBeamingHelperForBeat(this.beat);
                if ((helper && this.drawBeamHelperAsFlags(helper)) || this.beat.graceType !== GraceType.None) {
                    beatBoundings.visualBounds.w +=
                        FlagGlyph.FlagWidth * (this.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1);
                }
                beatBoundings.visualBounds.y = barBounds.visualBounds.y;
                beatBoundings.visualBounds.h = barBounds.visualBounds.h;
                beatBoundings.realBounds = new Bounds();
                beatBoundings.realBounds.x = cx + this.x;
                beatBoundings.realBounds.y = barBounds.realBounds.y;
                beatBoundings.realBounds.w = this.width;
                beatBoundings.realBounds.h = barBounds.realBounds.h;
                beatBoundings.onNotesX = cx + this.x + this.onNotes.x + this.onNotes.centerX;
            }
            barBounds.addBeat(beatBoundings);
            if (this.renderer.settings.core.includeNoteBounds) {
                this.onNotes.buildBoundingsLookup(beatBoundings, cx + this.x, cy + this.y);
            }
        }
    }
    BeatContainerGlyph.GraceBeatPadding = 3;

    /**
     * Represents the information related to a resize event.
     */
    class ResizeEventArgs {
        constructor() {
            /**
             * Gets the size before the resizing happened.
             */
            this.oldWidth = 0;
            /**
             * Gets the size after the resize was complete.
             */
            this.newWidth = 0;
            /**
             * Gets the settings currently used for rendering.
             */
            this.settings = null;
        }
        core() {
            if (this.settings && this.causeIssue()) {
                return this.settings.core;
            }
            return new CoreSettings();
        }
        causeIssue() {
            this.settings = null;
            return true;
        }
    }

    /**
     * Represents the information related to the beats actively being played now.
     */
    class ActiveBeatsChangedEventArgs {
        constructor(activeBeats) {
            this.activeBeats = activeBeats;
        }
    }

    class BackingTrackAudioSynthesizer {
        constructor() {
            this._midiEventQueue = new Queue();
            this.masterVolume = 1;
            this.metronomeVolume = 0;
            this.outSampleRate = 44100;
            this.currentTempo = 120;
            this.timeSignatureNumerator = 4;
            this.timeSignatureDenominator = 4;
            this.activeVoiceCount = 0;
        }
        noteOffAll(_immediate) {
        }
        resetSoft() {
        }
        resetPresets() {
        }
        loadPresets(_hydra, _instrumentPrograms, _percussionKeys, _append) {
        }
        setupMetronomeChannel(_metronomeVolume) {
        }
        synthesizeSilent(_sampleCount) {
            this.fakeSynthesize();
        }
        processMidiMessage(e) {
        }
        dispatchEvent(synthEvent) {
            this._midiEventQueue.enqueue(synthEvent);
        }
        synthesize(_buffer, _bufferPos, _sampleCount) {
            return this.fakeSynthesize();
        }
        fakeSynthesize() {
            const processedEvents = [];
            while (!this._midiEventQueue.isEmpty) {
                const m = this._midiEventQueue.dequeue();
                if (m.isMetronome && this.metronomeVolume > 0) ;
                else if (m.event) {
                    this.processMidiMessage(m.event);
                }
                processedEvents.push(m);
            }
            return processedEvents;
        }
        applyTranspositionPitches(transpositionPitches) {
        }
        setChannelTranspositionPitch(channel, semitones) {
        }
        channelSetMute(channel, mute) {
        }
        channelSetSolo(channel, solo) {
        }
        resetChannelStates() {
        }
        channelSetMixVolume(channel, volume) {
        }
        hasSamplesForProgram(program) {
            return true;
        }
        hasSamplesForPercussion(key) {
            return true;
        }
    }
    class BackingTrackPlayer extends AlphaSynthBase {
        constructor(backingTrackOutput, bufferTimeInMilliseconds) {
            super(backingTrackOutput, new BackingTrackAudioSynthesizer(), bufferTimeInMilliseconds);
            this.synthesizer.output = backingTrackOutput;
            this._backingTrackOutput = backingTrackOutput;
            backingTrackOutput.timeUpdate.on(timePosition => {
                const alphaTabTimePosition = this.sequencer.mainTimePositionFromBackingTrack(timePosition, backingTrackOutput.backingTrackDuration);
                this.sequencer.fillMidiEventQueueToEndTime(alphaTabTimePosition);
                this.synthesizer.fakeSynthesize();
                this.updateTimePosition(alphaTabTimePosition, false);
                this.checkForFinish();
            });
        }
        updateMasterVolume(value) {
            super.updateMasterVolume(value);
            this._backingTrackOutput.masterVolume = value;
        }
        updatePlaybackSpeed(value) {
            super.updatePlaybackSpeed(value);
            this._backingTrackOutput.playbackRate = value;
        }
        onSampleRequest() {
        }
        loadMidiFile(midi) {
            if (!this.isSoundFontLoaded) {
                this.isSoundFontLoaded = true;
                this.soundFontLoaded.trigger();
            }
            super.loadMidiFile(midi);
        }
        updateTimePosition(timePosition, isSeek) {
            super.updateTimePosition(timePosition, isSeek);
            if (isSeek) {
                this._backingTrackOutput.seekTo(this.sequencer.mainTimePositionToBackingTrack(timePosition, this._backingTrackOutput.backingTrackDuration));
            }
        }
        loadBackingTrack(score) {
            const backingTrackInfo = score.backingTrack;
            if (backingTrackInfo) {
                this._backingTrackOutput.loadBackingTrack(backingTrackInfo);
                this.timePosition = 0;
            }
        }
        updateSyncPoints(syncPoints) {
            this.sequencer.mainUpdateSyncPoints(syncPoints);
            this.tickPosition = this.tickPosition;
        }
    }

    class ExternalMediaSynthOutput {
        constructor() {
            // fake rate
            this.sampleRate = 44100;
            this._seekPosition = 0;
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.timeUpdate = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
        }
        get handler() {
            return this._handler;
        }
        set handler(value) {
            if (value) {
                if (this._seekPosition !== 0) {
                    value.seekTo(this._seekPosition);
                    this._seekPosition = 0;
                }
            }
            this._handler = value;
        }
        get backingTrackDuration() {
            return this.handler?.backingTrackDuration ?? 0;
        }
        get playbackRate() {
            return this.handler?.playbackRate ?? 1;
        }
        set playbackRate(value) {
            const handler = this.handler;
            if (handler) {
                handler.playbackRate = value;
            }
        }
        get masterVolume() {
            return this.handler?.masterVolume ?? 1;
        }
        set masterVolume(value) {
            const handler = this.handler;
            if (handler) {
                handler.masterVolume = value;
            }
        }
        seekTo(time) {
            const handler = this.handler;
            if (handler) {
                handler.seekTo(time);
            }
            else {
                this._seekPosition = time;
            }
        }
        loadBackingTrack(_backingTrack) {
        }
        open(_bufferTimeInMilliseconds) {
            this.ready.trigger();
        }
        updatePosition(currentTime) {
            this.timeUpdate.trigger(currentTime);
        }
        play() {
            this.handler?.play();
        }
        destroy() {
        }
        pause() {
            this.handler?.pause();
        }
        addSamples(_samples) {
        }
        resetSamples() {
        }
        activate() {
        }
        async enumerateOutputDevices() {
            const empty = [];
            return empty;
        }
        async setOutputDevice(_device) {
        }
        async getOutputDevice() {
            return null;
        }
    }
    class ExternalMediaPlayer extends BackingTrackPlayer {
        get handler() {
            return this.output.handler;
        }
        set handler(value) {
            this.output.handler = value;
        }
        constructor(bufferTimeInMilliseconds) {
            super(new ExternalMediaSynthOutput(), bufferTimeInMilliseconds);
        }
    }

    /**
     * A {@link IAlphaSynth} implementation wrapping and underling other {@link IAlphaSynth}
     * allowing dynamic changing of the underlying instance without loosing aspects like the
     * main playback information and event listeners.
     *
     * @remarks
     * This wrapper is used when re-exposing the underlying player via {@link AlphaTabApiBase} to integrators.
     * Even with dynamic switching between synthesizer, backing tracks etc. aspects like volume, playbackspeed,
     * event listeners etc. should not be lost.
     */
    class AlphaSynthWrapper {
        constructor() {
            // relevant state information we want to remember when switching between player instances
            this._masterVolume = 1;
            this._metronomeVolume = 0;
            this._countInVolume = 0;
            this._playbackSpeed = 1;
            this._isLooping = false;
            this._midiEventsPlayedFilter = [];
            this.ready = new EventEmitter();
            this.readyForPlayback = new EventEmitter();
            this.finished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.soundFontLoadFailed = new EventEmitterOfT();
            this.midiLoaded = new EventEmitterOfT();
            this.midiLoadFailed = new EventEmitterOfT();
            this.stateChanged = new EventEmitterOfT();
            this.positionChanged = new EventEmitterOfT();
            this.midiEventsPlayed = new EventEmitterOfT();
            this.playbackRangeChanged = new EventEmitterOfT();
        }
        get instance() {
            return this._instance;
        }
        set instance(value) {
            this._instance = value;
            // unregister all events from previous instance
            const unregister = this._instanceEventUnregister;
            if (unregister) {
                for (const e of unregister) {
                    e();
                }
            }
            if (value) {
                // regsiter to events of new player and forward them to existing listeners
                const newUnregister = [];
                newUnregister.push(value.ready.on(() => this.ready.trigger()));
                newUnregister.push(value.readyForPlayback.on(() => this.readyForPlayback.trigger()));
                newUnregister.push(value.finished.on(() => this.finished.trigger()));
                newUnregister.push(value.soundFontLoaded.on(() => this.soundFontLoaded.trigger()));
                newUnregister.push(value.soundFontLoadFailed.on(e => this.soundFontLoadFailed.trigger(e)));
                newUnregister.push(value.midiLoaded.on(e => this.midiLoaded.trigger(e)));
                newUnregister.push(value.midiLoadFailed.on(e => this.midiLoadFailed.trigger(e)));
                newUnregister.push(value.stateChanged.on(e => this.stateChanged.trigger(e)));
                newUnregister.push(value.positionChanged.on(e => this.positionChanged.trigger(e)));
                newUnregister.push(value.midiEventsPlayed.on(e => this.midiEventsPlayed.trigger(e)));
                newUnregister.push(value.playbackRangeChanged.on(e => this.playbackRangeChanged.trigger(e)));
                this._instanceEventUnregister = newUnregister;
                // restore state on new player
                if (this.isReady) {
                    value.masterVolume = this._masterVolume;
                    value.metronomeVolume = this._metronomeVolume;
                    value.countInVolume = this._countInVolume;
                    value.playbackSpeed = this._playbackSpeed;
                    value.isLooping = this._isLooping;
                    value.midiEventsPlayedFilter = this._midiEventsPlayedFilter;
                    this.ready.trigger();
                }
                else {
                    newUnregister.push(value.ready.on(() => {
                        value.masterVolume = this._masterVolume;
                        value.metronomeVolume = this._metronomeVolume;
                        value.countInVolume = this._countInVolume;
                        value.playbackSpeed = this._playbackSpeed;
                        value.isLooping = this._isLooping;
                        value.midiEventsPlayedFilter = this._midiEventsPlayedFilter;
                    }));
                }
            }
            else {
                this._instanceEventUnregister = undefined;
            }
        }
        get output() {
            return this._instance.output;
        }
        get isReady() {
            return this._instance ? this._instance.isReady : false;
        }
        get isReadyForPlayback() {
            return this._instance ? this._instance.isReadyForPlayback : false;
        }
        get state() {
            return this._instance ? this._instance.state : PlayerState.Paused;
        }
        get logLevel() {
            return Logger.logLevel;
        }
        set logLevel(value) {
            Logger.logLevel = value;
            if (this._instance) {
                this._instance.logLevel = value;
            }
        }
        get masterVolume() {
            return this._masterVolume;
        }
        set masterVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._masterVolume = value;
            if (this._instance) {
                this._instance.masterVolume = value;
            }
        }
        get metronomeVolume() {
            return this._metronomeVolume;
        }
        set metronomeVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._metronomeVolume = value;
            if (this._instance) {
                this._instance.metronomeVolume = value;
            }
        }
        get playbackSpeed() {
            return this._playbackSpeed;
        }
        set playbackSpeed(value) {
            this._playbackSpeed = value;
            if (this._instance) {
                this._instance.playbackSpeed = value;
            }
        }
        get tickPosition() {
            return this._instance ? this._instance.tickPosition : 0;
        }
        set tickPosition(value) {
            if (this._instance) {
                this._instance.tickPosition = value;
            }
        }
        get timePosition() {
            return this._instance ? this._instance.timePosition : 0;
        }
        set timePosition(value) {
            if (this._instance) {
                this._instance.timePosition = value;
            }
        }
        get playbackRange() {
            return this._instance ? this._instance.playbackRange : null;
        }
        set playbackRange(value) {
            if (this._instance) {
                this._instance.playbackRange = value;
            }
        }
        get isLooping() {
            return this._isLooping;
        }
        set isLooping(value) {
            this._isLooping = value;
            if (this._instance) {
                this._instance.isLooping = value;
            }
        }
        get countInVolume() {
            return this._countInVolume;
        }
        set countInVolume(value) {
            this._countInVolume = value;
            if (this._instance) {
                this._instance.countInVolume = value;
            }
        }
        get midiEventsPlayedFilter() {
            return this._midiEventsPlayedFilter;
        }
        set midiEventsPlayedFilter(value) {
            this._midiEventsPlayedFilter = value;
            if (this._instance) {
                this._instance.midiEventsPlayedFilter = value;
            }
        }
        destroy() {
            if (this._instance) {
                this._instance.destroy();
                this._instance = undefined;
            }
        }
        play() {
            return this._instance ? this._instance.play() : false;
        }
        pause() {
            if (this._instance) {
                this._instance.pause();
            }
        }
        playPause() {
            if (this._instance) {
                this._instance.playPause();
            }
        }
        stop() {
            if (this._instance) {
                this._instance.stop();
            }
        }
        playOneTimeMidiFile(midi) {
            if (this._instance) {
                this._instance.playOneTimeMidiFile(midi);
            }
        }
        loadSoundFont(data, append) {
            if (this._instance) {
                this._instance.loadSoundFont(data, append);
            }
        }
        resetSoundFonts() {
            if (this._instance) {
                this._instance.resetSoundFonts();
            }
        }
        loadMidiFile(midi) {
            if (this._instance) {
                this._instance.loadMidiFile(midi);
            }
        }
        loadBackingTrack(score) {
            if (this._instance) {
                this._instance.loadBackingTrack(score);
            }
        }
        updateSyncPoints(syncPoints) {
            if (this._instance) {
                this._instance.updateSyncPoints(syncPoints);
            }
        }
        applyTranspositionPitches(transpositionPitches) {
            if (this._instance) {
                this._instance.applyTranspositionPitches(transpositionPitches);
            }
        }
        setChannelTranspositionPitch(channel, semitones) {
            if (this._instance) {
                this._instance.setChannelTranspositionPitch(channel, semitones);
            }
        }
        setChannelMute(channel, mute) {
            if (this._instance) {
                this._instance.setChannelMute(channel, mute);
            }
        }
        resetChannelStates() {
            if (this._instance) {
                this._instance.resetChannelStates();
            }
        }
        setChannelSolo(channel, solo) {
            if (this._instance) {
                this._instance.setChannelSolo(channel, solo);
            }
        }
        setChannelVolume(channel, volume) {
            if (this._instance) {
                this._instance.setChannelVolume(channel, volume);
            }
        }
    }

    /**
     * A {@link IScoreRenderer} implementation wrapping and underling other {@link IScoreRenderer}
     * allowing dynamic changing of the underlying instance without loosing aspects like the
     * event listeners.
     */
    class ScoreRendererWrapper {
        constructor() {
            this._width = 0;
            this._score = null;
            this._trackIndexes = null;
            this.preRender = new EventEmitterOfT();
            this.renderFinished = new EventEmitterOfT();
            this.partialRenderFinished = new EventEmitterOfT();
            this.partialLayoutFinished = new EventEmitterOfT();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
        }
        get instance() {
            return this._instance;
        }
        set instance(value) {
            this._instance = value;
            // unregister all events from previous instance
            const unregister = this._instanceEventUnregister;
            if (unregister) {
                for (const e of unregister) {
                    e();
                }
            }
            if (value) {
                // regsiter to events of new player and forward them to existing listeners
                const newUnregister = [];
                newUnregister.push(value.preRender.on(v => this.preRender.trigger(v)));
                newUnregister.push(value.renderFinished.on(v => this.renderFinished.trigger(v)));
                newUnregister.push(value.partialRenderFinished.on(v => this.partialRenderFinished.trigger(v)));
                newUnregister.push(value.partialLayoutFinished.on(v => this.partialLayoutFinished.trigger(v)));
                newUnregister.push(value.postRenderFinished.on(() => this.postRenderFinished.trigger()));
                newUnregister.push(value.error.on(v => this.error.trigger(v)));
                this._instanceEventUnregister = newUnregister;
                if (this._settings) {
                    value.updateSettings(this._settings);
                }
                value.width = this._width;
                if (this._score !== null) {
                    value.renderScore(this._score, this._trackIndexes);
                }
            }
            else {
                this._instanceEventUnregister = undefined;
            }
        }
        get boundsLookup() {
            return this._instance ? this._instance.boundsLookup : null;
        }
        get width() {
            return this._instance ? this._instance.width : 0;
        }
        set width(value) {
            this._width = value;
            if (this._instance) {
                this._instance.width = value;
            }
        }
        render() {
            this._instance?.render();
        }
        resizeRender() {
            this._instance?.resizeRender();
        }
        renderScore(score, trackIndexes) {
            this._score = score;
            this._trackIndexes = trackIndexes;
            this._instance?.renderScore(score, trackIndexes);
        }
        renderResult(resultId) {
            this._instance?.renderResult(resultId);
        }
        updateSettings(settings) {
            this._settings = settings;
            this._instance?.updateSettings(settings);
        }
        destroy() {
            this._instance?.destroy();
            this._instance = undefined;
        }
    }

    class SelectionInfo {
        constructor(beat) {
            this.bounds = null;
            this.beat = beat;
        }
    }
    /**
     * This class represents the public API of alphaTab and provides all logic to display
     * a music sheet in any UI using the given {@link IUiFacade}
     * @param <TSettings> The UI object holding the settings.
     * @csharp_public
     */
    class AlphaTabApiBase {
        /**
         * The actual player mode which is currently active.
         * @remarks
         * Allows determining whether a backing track or the synthesizer is active in case automatic detection is enabled.
         * @category Properties - Player
         * @since 1.6.0
         */
        get actualPlayerMode() {
            return this._actualPlayerMode;
        }
        /**
         * The score renderer used for rendering the music sheet.
         * @remarks
         * This is the low-level API responsible for the actual rendering engine.
         * Gets access to the underling {@link IScoreRenderer} that is used for the rendering.
         *
         * @category Properties - Core
         * @since 0.9.4
         */
        get renderer() {
            return this._renderer;
        }
        /**
         * The score holding all information about the song being rendered
         * @category Properties - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * updateScoreInfo(api.score);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * UpdateScoreInfo(api.Score);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * updateScoreInfo(api.score)
         * ```
         */
        get score() {
            return this._score;
        }
        /**
         * The list of the tracks that are currently rendered.
         *
         * @category Properties - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * highlightCurrentTracksInTrackSelector(api.tracks);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * HighlightCurrentTracksInTrackSelector(api.Tracks);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * highlightCurrentTracksInTrackSelector(api.tracks)
         * ```
         */
        get tracks() {
            return this._tracks;
        }
        /**
         * Initializes a new instance of the {@link AlphaTabApiBase} class.
         * @param uiFacade The UI facade to use for interacting with the user interface.
         * @param settings The UI settings object to use for loading the settings.
         */
        constructor(uiFacade, settings) {
            this._startTime = 0;
            this._trackIndexes = null;
            this._trackIndexLookup = null;
            this._isDestroyed = false;
            this._score = null;
            this._tracks = [];
            this._actualPlayerMode = exports.PlayerMode.Disabled;
            this._tickCache = null;
            this._cursorWrapper = null;
            this._barCursor = null;
            this._beatCursor = null;
            this._selectionWrapper = null;
            this._previousTick = 0;
            this._currentBeat = null;
            this._currentBeatBounds = null;
            this._isInitialBeatCursorUpdate = true;
            this._previousStateForCursor = PlayerState.Paused;
            this._previousCursorCache = null;
            this._lastScroll = 0;
            /**
             * This event is fired when the played beat changed.
             *
             * @eventProperty
             * @category Events - Player
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.playedBeatChanged.on((beat) => {
             *     updateFretboard(beat);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.PlayedBeatChanged.On(beat =>
             * {
             *     UpdateFretboard(beat);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.playedBeatChanged.on { beat ->
             *     updateFretboard(beat)
             * }
             * ```
             *
             */
            this.playedBeatChanged = new EventEmitterOfT();
            /**
             * This event is fired when the currently active beats across all tracks change.
             *
             * @remarks
             * Unlike the {@link playedBeatChanged} event this event contains the beats of all tracks and voices independent of them being rendered.
             *
             * @eventProperty
             * @category Events - Player
             * @since 1.2.3
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.activeBeatsChanged.on(args => {
             *    updateHighlights(args.activeBeats);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.ActiveBeatsChanged.On(args =>
             * {
             *     UpdateHighlights(args.ActiveBeats);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.activeBeatsChanged.on { args ->
             *     updateHighlights(args.activeBeats)
             * }
             * ```
             *
             */
            this.activeBeatsChanged = new EventEmitterOfT();
            this._beatMouseDown = false;
            this._noteMouseDown = false;
            this._selectionStart = null;
            this._selectionEnd = null;
            /**
             * This event is fired whenever a the user presses the mouse button on a beat.
             * @eventProperty
             * @category Events - Player
             * @since 0.9.7
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.beatMouseDown.on((beat) => {
             *     startSelectionOnBeat(beat);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.BeatMouseDown.On(beat =>
             * {
             *     StartSelectionOnBeat(args);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.beatMouseDown.on { beat ->
             *     startSelectionOnBeat(args)
             * }
             * ```
             */
            this.beatMouseDown = new EventEmitterOfT();
            /**
             * This event is fired whenever the user moves the mouse over a beat after the user already pressed the button on a beat.
             * @eventProperty
             * @category Events - Player
             * @since 0.9.7
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.beatMouseMove.on((beat) => {
             *     expandSelectionToBeat(beat);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.BeatMouseMove.On(beat =>
             * {
             *     ExpandSelectionToBeat(beat);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.beatMouseMove.on { beat ->
             *     expandSelectionToBeat(beat)
             * }
             * ```
             */
            this.beatMouseMove = new EventEmitterOfT();
            /**
             * This event is fired whenever the user releases the mouse after a mouse press on a beat.
             * @remarks
             * This event is fired regardless of whether the mouse was released on a beat.
             * The parameter is null if the mouse was released somewhere beside the beat.
             *
             * @eventProperty
             * @category Events - Player
             * @since 0.9.7
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.beatMouseUp.on((beat) => {
             *     hideSelection(beat);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.BeatMouseUp.On(beat =>
             * {
             *     HideSelection(beat);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.beatMouseUp.on { beat ->
             *     hideSelection(beat)
             * }
             * ```
             */
            this.beatMouseUp = new EventEmitterOfT();
            /**
             * This event is fired whenever a the user presses the mouse button on a note head/number.
             * @remarks
             * This event is fired whenever a the user presses the mouse button on a note.
             * It is only fired if {@link CoreSettings.includeNoteBounds} was set to `true` because
             * only then this hit detection can be done. A click on a note is considered if the note head or the note number on tabs are clicked as documented in {@link boundsLookup}.
             *
             * @eventProperty
             * @category Events - Player
             * @since 1.2.3
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.noteMouseDown.on((note) => {
             *     api.playNote(note);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.NoteMouseDown.On(note =>
             * {
             *     api.PlayNote(note);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.noteMouseDown.on { note ->
             *     api.playNote(note)
             * }
             * ```
             *
             */
            this.noteMouseDown = new EventEmitterOfT();
            /**
             * This event is fired whenever the user moves the mouse over a note after the user already pressed the button on a note.
             * @remarks
             * This event is fired whenever the user moves the mouse over a note after the user already pressed the button on a note.
             * It is only fired if {@link CoreSettings.includeNoteBounds} was set to `true` because
             * only then this hit detection can be done. A click on a note is considered if the note head or the note number on tabs are clicked as documented in {@link boundsLookup}
             *
             * @eventProperty
             * @category Events - Player
             * @since 1.2.3
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.noteMouseMove.on((note) => {
             *     changeNote(note)
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.NoteMouseMove.On(note =>
             * {
             *     ChangeNote(note);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.noteMouseMove.on { note ->
             *     changeNote(note)
             * }
             * ```
             *
             */
            this.noteMouseMove = new EventEmitterOfT();
            /**
             * This event is fired whenever the user releases the mouse after a mouse press on a note.
             * @remarks
             * This event is fired whenever a the user presses the mouse button on a note.
             * This event is fired regardless of whether the mouse was released on a note.
             * The parameter is null if the mouse was released somewhere beside the note.
             * It is only fired if {@link CoreSettings.includeNoteBounds} was set to `true` because
             * only then this hit detection can be done. A click on a note is considered if the note head or the note number on tabs are clicked as documented in the {@link boundsLookup}.
             *
             * @eventProperty
             * @category Events - Player
             * @since 1.2.3
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.noteMouseUp.on((note) => {
             *     api.playNote(note);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.NoteMouseUp.On(note =>
             * {
             *     api.PlayNote(note);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.noteMouseUp.on { note ->
             *     api.playNote(note)
             * }
             * ```
             *
             */
            this.noteMouseUp = new EventEmitterOfT();
            /**
             * This event is fired whenever a new song is loaded.
             * @remarks
             * This event is fired whenever a new song is loaded or changing due to {@link renderScore} or {@link renderTracks} calls.
             * It is fired after the transposition midi pitches from the settings were applied, but before any midi is generated or rendering is started.
             * This allows any modification of the score before further processing.
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.scoreLoaded.on((score) => {
             *     updateSongInformationInUi(score);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.ScoreLoaded.On(score =>
             * {
             *     UpdateSongInformationInUi(score);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.scoreLoaded.on { score ->
             *     updateSongInformationInUi(score)
             * }
             * ```
             *
             */
            this.scoreLoaded = new EventEmitterOfT();
            /**
             * This event is fired when alphaTab was resized and is about to rerender the music notation.
             * @remarks
             * This event is fired when alphaTab was resized and is about to rerender the music notation. Before the re-rendering on resize
             * the settings will be updated in the related components. This means that any changes to the layout options or other display settings are
             * considered. This allows to implement scenarios where maybe the scale or the layout mode dynamically changes along the resizing.
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.resize.on((args) => {
             *     args.settings.scale = args.newWidth > 1300
             *         ? 1.5
             *         : (args.newWidth > 800) ? 1.3 : 1;
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.Resize.On(args =>
             * {
             *     args.Settings.Display.Scale = args.NewWidth > 1300
             *         ? 1.5
             *         : (args.NewWidth > 800) ? 1.3 : 1;
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.resize.on { args ->
             *     args.settings.display.scale = args.newWidth > 1300
             *         ? 1.5
             *         : (args.newWidth > 800) ? 1.3 : 1;
             * });
             * ```
             *
             */
            this.resize = new EventEmitterOfT();
            /**
             * This event is fired when the rendering of the whole music sheet is starting.
             * @remarks
             * All preparations are completed and the layout and render sequence is about to start.
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.renderStarted.on(() => {
             *     updateProgressBar("Rendering");
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.RenderStarted.On(resized =>
             * {
             *     UpdateProgressBar("Rendering");
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.renderStarted.on { resized ->
             *     updateProgressBar("Rendering");
             * }
             * ```
             *
             */
            this.renderStarted = new EventEmitterOfT();
            /**
             * This event is fired when the rendering of the whole music sheet is finished.
             * @remarks
             * This event is fired when the rendering of the whole music sheet is finished from the render engine side. There might be still tasks open for
             * the display component to visually display the rendered components when this event is notified (e.g. resizing of DOM elements are done).
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.renderFinished.on(() => {
             *     updateProgressBar("Finishing");
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.RenderFinished.On(() =>
             * {
             *     UpdateProgressBar("Finishing");
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.renderFinished.on {
             *     updateProgressBar("Finishing")
             * }
             * ```
             *
             */
            this.renderFinished = new EventEmitterOfT();
            /**
             * This event is fired when the rendering of the whole music sheet is finished, and all handlers of `renderFinished` ran.
             * @remarks
             * If {@link CoreSettings.enableLazyLoading} is enabled not all partial images of the music sheet might be rendered.
             * In this case the `renderFinished` event rather represents that the whole music sheet has been layouted and arranged
             * and every partial image can be requested for rendering. If you neeed more fine-grained access
             * to the actual layouting and rendering progress, you need to look at the low-level apis {@link IScoreRenderer.partialLayoutFinished} and
             * {@link IScoreRenderer.partialRenderFinished} accessible via {@link renderer}.
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.postRenderFinished.on(() => {
             *     hideLoadingIndicator();
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.PostRenderFinished.On(() =>
             * {
             *     HideLoadingIndicator();
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.postRenderFinished.on {
             *     hideLoadingIndicator();
             * }
             * ```
             *
             */
            this.postRenderFinished = new EventEmitter();
            /**
             * This event is fired when an error within alphatab occurred.
             *
             * @remarks
             * This event is fired when an error within alphatab occurred. Use this event as global error handler to show errors
             * to end-users. Due to the asynchronous nature of alphaTab, no call to the API will directly throw an error if it fails.
             * Instead a signal to this error handlers will be sent.
             *
             * @eventProperty
             * @category Events - Core
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.error.on((error) {
             *     displayError(error);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.Error.On((error) =>
             * {
             *     DisplayError(error);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.error.on { error ->
             *     displayError(error)
             * }
             * ```
             *
             */
            this.error = new EventEmitterOfT();
            /**
             * This event is fired when a Midi file is being loaded.
             *
             * @remarks
             * This event is fired when a Midi file for the song was generated and is being loaded
             * by the synthesizer. This event can be used to inspect or modify the midi events
             * which will be played for the song. This can be used to generate other visual representations
             * of the song.
             *
             * > [!NOTE]
             * > The generated midi file will NOT contain any metronome and count-in related events. The metronome and
             * > count-in ticks are handled within the synthesizer.
             *
             * @eventProperty
             * @category Events - Player
             * @since 1.2.0
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.midiLoad.on(file => {
             *     initializePianoPractice(file);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.MidiLoad.On(file =>
             * {
             *     InitializePianoPractice(file);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.midiLoad.on { file ->
             *     initializePianoPractice(file)
             * }
             * ```
             *
             */
            this.midiLoad = new EventEmitterOfT();
            /**
             * This event is fired when the Midi file needed for playback was loaded.
             *
             * @eventProperty
             * @category Events - Player
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.midiLoaded.on(e => {
             *     hideGeneratingAudioIndicator();
             *     updateSongDuration(e.endTime);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.MidiLoaded.On(e =>
             * {
             *     HideGeneratingAudioIndicator();
             *     UpdateSongDuration(e.EndTime);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.midiLoaded.on { e ->
             *     hideGeneratingAudioIndicator()
             *     updateSongDuration(e.endTime)
             * }
             * ```
             *
             */
            this.midiLoaded = new EventEmitterOfT();
            /**
             * This event is fired when a settings update was requested.
             *
             * @eventProperty
             * @category Events - Core
             * @since 1.6.0
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.settingsUpdated.on(() => {
             *     updateSettingsUI(api.settings);
             * });
             * ```
             *
             * @example
             * C#
             * ```cs
             * var api = new AlphaTabApi<MyControl>(...);
             * api.SettingsUpdated.On(() =>
             * {
             *     UpdateSettingsUI(api.settings);
             * });
             * ```
             *
             * @example
             * Android
             * ```kotlin
             * val api = AlphaTabApi<MyControl>(...)
             * api.SettingsUpdated.on {
             *     updateSettingsUI(api.settings)
             * }
             * ```
             *
             */
            this.settingsUpdated = new EventEmitter();
            this.uiFacade = uiFacade;
            this.container = uiFacade.rootContainer;
            uiFacade.initialize(this, settings);
            Logger.logLevel = this.settings.core.logLevel;
            // backwards compatibility: remove in 2.0
            if (this.settings.player.playerMode === exports.PlayerMode.Disabled && this.settings.player.enablePlayer) {
                this.settings.player.playerMode = exports.PlayerMode.EnabledAutomatic;
            }
            Environment.printEnvironmentInfo(false);
            this.canvasElement = uiFacade.createCanvasElement();
            this.container.appendChild(this.canvasElement);
            this._renderer = new ScoreRendererWrapper();
            if (this.settings.core.useWorkers &&
                this.uiFacade.areWorkersSupported &&
                Environment.getRenderEngineFactory(this.settings.core.engine).supportsWorkers) {
                this._renderer.instance = this.uiFacade.createWorkerRenderer();
            }
            else {
                this._renderer.instance = new ScoreRenderer(this.settings);
            }
            this.container.resize.on(Environment.throttle(() => {
                if (this._isDestroyed) {
                    return;
                }
                if (this.container.width !== this._renderer.width) {
                    this.triggerResize();
                }
            }, uiFacade.resizeThrottle));
            const initialResizeEventInfo = new ResizeEventArgs();
            initialResizeEventInfo.oldWidth = this._renderer.width;
            initialResizeEventInfo.newWidth = this.container.width | 0;
            initialResizeEventInfo.settings = this.settings;
            this.onResize(initialResizeEventInfo);
            this._renderer.preRender.on(this.onRenderStarted.bind(this));
            this._renderer.renderFinished.on(renderingResult => {
                this.onRenderFinished(renderingResult);
            });
            this._renderer.postRenderFinished.on(() => {
                const duration = Date.now() - this._startTime;
                Logger.debug('rendering', `Rendering completed in ${duration}ms`);
                this.onPostRenderFinished();
            });
            this._renderer.preRender.on(_ => {
                this._startTime = Date.now();
            });
            this._renderer.partialLayoutFinished.on(r => this.appendRenderResult(r, false));
            this._renderer.partialRenderFinished.on(this.updateRenderResult.bind(this));
            this._renderer.renderFinished.on(r => {
                this.appendRenderResult(r, true);
            });
            this._renderer.error.on(this.onError.bind(this));
            this.setupPlayerWrapper();
            if (this.settings.player.playerMode !== exports.PlayerMode.Disabled) {
                this.setupOrDestroyPlayer();
            }
            this.setupClickHandling();
            // delay rendering to allow ui to hook up with events first.
            this.uiFacade.beginInvoke(() => {
                this.uiFacade.initialRender();
            });
        }
        setupPlayerWrapper() {
            const player = new AlphaSynthWrapper();
            this._player = player;
            player.ready.on(() => {
                this.loadMidiForScore();
            });
            player.readyForPlayback.on(() => {
                this.onPlayerReady();
                if (this.tracks) {
                    for (const track of this.tracks) {
                        const volume = track.playbackInfo.volume / 16;
                        player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
                        player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
                    }
                }
            });
            player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
            player.soundFontLoadFailed.on(e => {
                this.onError(e);
            });
            player.midiLoaded.on(this.onMidiLoaded.bind(this));
            player.midiLoadFailed.on(e => {
                this.onError(e);
            });
            player.stateChanged.on(this.onPlayerStateChanged.bind(this));
            player.positionChanged.on(this.onPlayerPositionChanged.bind(this));
            player.midiEventsPlayed.on(this.onMidiEventsPlayed.bind(this));
            player.playbackRangeChanged.on(this.onPlaybackRangeChanged.bind(this));
            player.finished.on(this.onPlayerFinished.bind(this));
        }
        /**
         * Destroys the alphaTab control and restores the initial state of the UI.
         * @remarks
         * This function destroys the alphaTab control and tries to restore the initial state of the UI. This might be useful if
         * our website is quite dynamic and you need to uninitialize alphaTab from an element again. After destroying alphaTab
         * it cannot be used anymore. Any further usage leads to unexpected behavior.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.destroy();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Destroy();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.destroy()
         * ```
         */
        destroy() {
            this._isDestroyed = true;
            this._player.destroy();
            this.uiFacade.destroy();
            this._renderer.destroy();
        }
        /**
         * Applies any changes that were done to the settings object.
         * @remarks
         * It also informs the {@link renderer} about any new values to consider.
         * By default alphaTab will not trigger any re-rendering or settings update just if the settings object itself was changed. This method must be called
         * to trigger an update of the settings in all components. Then a re-rendering can be initiated using the {@link render} method.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.settings.display.scale = 2.0;
         * api.updateSettings();
         * api.render();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         *
         * api.Settings.Display.Scale = 2.0;
         * api.UpdateSettings();
         * api.Render()
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         *
         * api.settings.display.scale = 2.0
         * api.updateSettings()
         * api.render()
         * ```
         */
        updateSettings() {
            const score = this.score;
            if (score) {
                ModelUtils.applyPitchOffsets(this.settings, score);
            }
            this.updateRenderer();
            this._renderer.updateSettings(this.settings);
            this.setupOrDestroyPlayer();
            this.onSettingsUpdated();
        }
        updateRenderer() {
            const renderer = this._renderer;
            if (this.settings.core.useWorkers &&
                this.uiFacade.areWorkersSupported &&
                Environment.getRenderEngineFactory(this.settings.core.engine).supportsWorkers) {
                // switch from non-worker to worker renderer
                if (renderer.instance instanceof ScoreRenderer) {
                    renderer.destroy();
                    renderer.instance = this.uiFacade.createWorkerRenderer();
                }
            }
            else {
                // switch from worker to non-worker renderer
                if (!(renderer.instance instanceof ScoreRenderer)) {
                    renderer.destroy();
                    renderer.instance = new ScoreRenderer(this.settings);
                }
            }
        }
        /**
         * Initiates a load of the score using the given data.
         * @returns true if the data object is supported and a load was initiated, otherwise false
         * @param scoreData The data container supported by {@link IUiFacade}.  The supported types is depending on the platform:
         *
         * * A `alphaTab.model.Score` instance (all platforms)
         * * A `ArrayBuffer` or `Uint8Array` containing one of the supported file formats (all platforms, native byte array or input streams on other platforms)
         * * A url from where to download the binary data of one of the supported file formats (browser only)
         *
         * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
         * song will be shown.
         * @category Methods - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.load('/assets/MyFile.gp');
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Load(System.IO.File.OpenRead("MyFile.gp"));
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * contentResolver.openInputStream(uri).use {
         *     api.load(it)
         * }
         * ```
         */
        load(scoreData, trackIndexes) {
            try {
                return this.uiFacade.load(scoreData, score => {
                    this.renderScore(score, trackIndexes);
                }, error => {
                    this.onError(error);
                });
            }
            catch (e) {
                this.onError(e);
                return false;
            }
        }
        /**
         * Initiates a rendering of the given score.
         * @param score The score containing the tracks to be rendered.
         * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
         * song will be shown.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.RenderScore(generateScore(),[ 2, 3 ]);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.RenderScore(GenerateScore(), new double[] { 2, 3 });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.renderScore(generateScore(), alphaTab.collections.DoubleList(2, 3));
         * ```
         */
        renderScore(score, trackIndexes) {
            const tracks = [];
            if (!trackIndexes) {
                if (score.tracks.length > 0) {
                    tracks.push(score.tracks[0]);
                }
            }
            else {
                if (trackIndexes.length === 0) {
                    if (score.tracks.length > 0) {
                        tracks.push(score.tracks[0]);
                    }
                }
                else if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
                    for (const track of score.tracks) {
                        tracks.push(track);
                    }
                }
                else {
                    for (const index of trackIndexes) {
                        if (index >= 0 && index <= score.tracks.length) {
                            tracks.push(score.tracks[index]);
                        }
                    }
                }
            }
            this.internalRenderTracks(score, tracks);
        }
        /**
         * Renders the given list of tracks.
         * @param tracks The tracks to render. They must all belong to the same score.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.renderTracks([api.score.tracks[0], api.score.tracks[1]]);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.RenderTracks(new []{
         *     api.Score.Tracks[2],
         *     api.Score.Tracks[3]
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.renderTracks(alphaTab.collections.List(
         *     api.score.tracks[2],
         *     api.score.tracks[3]
         * }
         * ```
         */
        renderTracks(tracks) {
            if (tracks.length > 0) {
                const score = tracks[0].score;
                for (const track of tracks) {
                    if (track.score !== score) {
                        this.onError(new AlphaTabError(exports.AlphaTabErrorType.General, 'All rendered tracks must belong to the same score.'));
                        return;
                    }
                }
                this.internalRenderTracks(score, tracks);
            }
        }
        internalRenderTracks(score, tracks) {
            ModelUtils.applyPitchOffsets(this.settings, score);
            if (score !== this.score) {
                this._score = score;
                this._tracks = tracks;
                this._tickCache = null;
                this._trackIndexes = [];
                for (const track of tracks) {
                    this._trackIndexes.push(track.index);
                }
                this._trackIndexLookup = new Set(this._trackIndexes);
                this.onScoreLoaded(score);
                this.loadMidiForScore();
                this.render();
            }
            else {
                this._tracks = tracks;
                const startIndex = ModelUtils.computeFirstDisplayedBarIndex(score, this.settings);
                const endIndex = ModelUtils.computeLastDisplayedBarIndex(score, this.settings, startIndex);
                if (this._tickCache) {
                    this._tickCache.multiBarRestInfo = ModelUtils.buildMultiBarRestInfo(this.tracks, startIndex, endIndex);
                }
                this._trackIndexes = [];
                for (const track of tracks) {
                    this._trackIndexes.push(track.index);
                }
                this._trackIndexLookup = new Set(this._trackIndexes);
                this.render();
            }
        }
        /**
         * @internal
         */
        triggerResize() {
            if (!this.container.isVisible) {
                Logger.warning('Rendering', 'AlphaTab container was invisible while autosizing, waiting for element to become visible', null);
                this.uiFacade.rootContainerBecameVisible.on(() => {
                    Logger.debug('Rendering', 'AlphaTab container became visible, doing autosizing', null);
                    this.triggerResize();
                });
            }
            else {
                const resizeEventInfo = new ResizeEventArgs();
                resizeEventInfo.oldWidth = this._renderer.width;
                resizeEventInfo.newWidth = this.container.width;
                resizeEventInfo.settings = this.settings;
                this.onResize(resizeEventInfo);
                this._renderer.updateSettings(this.settings);
                this._renderer.width = this.container.width;
                this._renderer.resizeRender();
            }
        }
        appendRenderResult(result, isLast) {
            // resizing the canvas and wrapper elements at the end is enough
            // it avoids flickering on resizes and re-renders.
            // the individual partials are anyhow sized correctly
            if (isLast) {
                this.canvasElement.width = result.totalWidth;
                this.canvasElement.height = result.totalHeight;
                if (this._cursorWrapper) {
                    this._cursorWrapper.width = result.totalWidth;
                    this._cursorWrapper.height = result.totalHeight;
                }
            }
            if (result.width > 0 || result.height > 0) {
                this.uiFacade.beginAppendRenderResults(result);
            }
            if (isLast) {
                this.uiFacade.beginAppendRenderResults(null);
            }
        }
        updateRenderResult(result) {
            if (result && result.renderResult) {
                this.uiFacade.beginUpdateRenderResults(result);
            }
        }
        /**
         * Tells alphaTab to render the given alphaTex.
         * @param tex The alphaTex code to render.
         * @param tracks If set, the given tracks will be rendered, otherwise the first track only will be rendered.
         * @category Methods - Core
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.tex("\\title 'Test' . 3.3.4");
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Tex("\\title 'Test' . 3.3.4");
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.tex("\\title 'Test' . 3.3.4");
         * ```
         */
        tex(tex, tracks) {
            try {
                const parser = new AlphaTexImporter();
                parser.logErrors = true;
                parser.initFromString(tex, this.settings);
                const score = parser.readScore();
                this.renderScore(score, tracks);
            }
            catch (e) {
                this.onError(e);
            }
        }
        /**
         * Triggers a load of the soundfont from the given data.
         * @remarks
         * AlphaTab only supports SoundFont2 and SoundFont3 {@since 1.4.0} encoded soundfonts for loading. To load a soundfont the player must be enabled in advance.
         *
         * @param data The data object to decode. The supported data types is depending on the platform.
         *
         * * A `ArrayBuffer` or `Uint8Array` (all platforms, native byte array or input streams on other platforms)
         * * A url from where to download the binary data of one of the supported file formats (browser only)
         *
         * @param append Whether to fully replace or append the data from the given soundfont.
         * @returns `true` if the passed in object is a supported format and loading was initiated, otherwise `false`.
         *
         * @category Methods - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.loadSoundFont('/assets/MyFile.sf2');
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.LoadSoundFont(System.IO.File.OpenRead("MyFile.sf2"));
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * contentResolver.openInputStream(uri).use {
         *     api.loadSoundFont(it)
         * }
         * ```
         */
        loadSoundFont(data, append = false) {
            return this.uiFacade.loadSoundFont(data, append);
        }
        /**
         * Unloads all presets from previously loaded SoundFonts.
         * @remarks
         * This function resets the player internally to not have any SoundFont loaded anymore. This allows you to reduce the memory usage of the page
         * if multiple partial SoundFonts are loaded via `loadSoundFont(..., true)`. Depending on the workflow you might also just want to use `loadSoundFont(..., false)` once
         * instead of unloading the previous SoundFonts.
         *
         * @category Methods - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.loadSoundFont('/assets/guitars.sf2', true);
         * api.loadSoundFont('/assets/pianos.sf2', true);
         * // ..
         * api.resetSoundFonts();
         * api.loadSoundFont('/assets/synths.sf2', true);
         * ```
         *
         * @example
         * C#
         * ```cs
         *var api = new AlphaTabApi<MyControl>(...);
         *api.LoadSoundFont(System.IO.File.OpenRead("guitars.sf2"), true);
         *api.LoadSoundFont(System.IO.File.OpenRead("pianos.sf2"), true);
         *...
         *api.ResetSoundFonts();
         *api.LoadSoundFont(System.IO.File.OpenRead("synths.sf2"), true);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.loadSoundFont(readResource("guitars.sf2"), true)
         * api.loadSoundFont(readResource("pianos.sf2"), true)
         * ...
         * api.resetSoundFonts()
         * api.loadSoundFont(readResource("synths.sf2"), true)
         * ```
         */
        resetSoundFonts() {
            this._player.resetSoundFonts();
        }
        /**
         * Initiates a re-rendering of the current setup.
         * @remarks
         * If rendering is not yet possible, it will be deferred until the UI changes to be ready for rendering.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.render();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Render();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.render()
         * ```
         */
        render() {
            if (this.uiFacade.canRender) {
                // when font is finally loaded, start rendering
                this._renderer.width = this.container.width;
                this._renderer.renderScore(this.score, this._trackIndexes);
            }
            else {
                this.uiFacade.canRenderChanged.on(() => this.render());
            }
        }
        /**
         * The tick cache allowing lookup of midi ticks to beats.
         * @remarks
         * Gets the tick cache allowing lookup of midi ticks to beats. If the player is enabled, a midi file will be generated
         * for the loaded {@link Score} for later playback. During this generation this tick cache is filled with the
         * exact midi ticks when beats are played.
         *
         * The {@link MidiTickLookup.findBeat} method allows a lookup of the beat related to a given input midi tick.
         *
         * @category Properties - Player
         * @since 1.2.3
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * const lookupResult = api.tickCache.findBeat(new Set([0, 1]), 100);
         * const currentBeat = lookupResult?.currentBeat;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * var lookupResult = api.TickCache.FindBeat(new AlphaTab.Core.EcmaScript.Set(0, 1), 100);
         * var currentBeat = lookupResult?.CurrentBeat;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * val lookupResult = api.tickCache.findBeat(alphaTab.core.ecmaScript.Set(0, 1), 100);
         * val currentBeat = lookupResult?.CurrentBeat;
         * ```
         */
        get tickCache() {
            return this._tickCache;
        }
        /**
         * The tick cache allowing lookup of midi ticks to beats.
         * @remarks
         * In older versions of alphaTab you can access the `boundsLookup` via {@link IScoreRenderer.boundsLookup} on {@link renderer}.
         *
         * After the rendering completed alphaTab exposes via this lookup the location of the individual
         * notation elements. The lookup provides fast access to the bars and beats at a given location.
         * If the {@link CoreSettings.includeNoteBounds} option was activated also the location of the individual notes can be obtained.
         *
         * The property contains a `BoundsLookup` instance which follows a hierarchical structure that represents
         * the tree of rendered elements.
         *
         * The hierarchy is: `staffSystems > bars(1) > bars(2) > beats > notes`
         *
         * * `staffSystems` - Represent the bounds of the individual systems ("rows") where staves are contained.
         * * `bars(1)` - Represent the bounds of all bars for a particular master bar across all tracks.
         * * `bars(2)` - Represent the bounds of an individual bar of a track. The bounds on y-axis span the region of the staff and notes might exceed this bounds.
         * * `beats` - Represent the bounds of the individual beats within a track. The bounds on y-axis are equal to the bar bounds.
         * * `notes` - Represent the bounds of the individual note heads/numbers within a track.
         *
         * Each bounds hierarchy have a `visualBounds` and `realBounds`.
         *
         * * `visualBounds` - Represent the area covering all visually visible elements
         * * `realBounds` - Represents the actual bounds of the elements in this beat including whitespace areas.
         * * `noteHeadBounds` (only on `notes` level) - Represents the area of the note heads or number based on the staff
         *
         * You can check out the individual sizes and regions.
         * @category Properties - Core
         * @since 1.5.0
         */
        get boundsLookup() {
            return this._renderer.boundsLookup;
        }
        /**
         * The alphaSynth player used for playback.
         * @remarks
         * This is the low-level API to the Midi synthesizer used for playback.
         * Gets access to the underling {@link IAlphaSynth} that is used for the audio playback.
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * setupPlayerEvents(api.settings);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * SetupPlayerEvents(api.Player);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * setupPlayerEvents(api.player)
         * ```
         */
        get player() {
            return this._player.instance ? this._player : null;
        }
        /**
         * Whether the player is ready for starting the playback.
         * @remarks
         * Gets whether the synthesizer is ready for playback. The player is ready for playback when
         * all background workers are started, the audio output is initialized, a soundfont is loaded, and a song was loaded into the player as midi file.
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * if(api.isReadyForPlayback)) api.play();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * if(api.IsReadyForPlayback) api.Play();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * if (api.isReadyForPlayback) api.play()
         * ```
         */
        get isReadyForPlayback() {
            return this._player.isReadyForPlayback;
        }
        /**
         * The current player state.
         * @remarks
         * Gets the current player state, meaning whether it is paused or playing.
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * if(api.playerState != alphaTab.synth.PlayerState.Playing) api.play();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * if(api.PlayerState != PlayerState.Playing) api.Play();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * if (api.playerState != PlayerState.Playing) api.play()
         * ```
         */
        get playerState() {
            return this._player.state;
        }
        /**
         * The current master volume as percentage (0-1).
         * @remarks
         * Gets or sets the master volume of the overall audio being played. The volume is annotated in percentage where 1.0 would be the normal volume and 0.5 only 50%.
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.masterVolume = 0.5;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.MasterVolume = 0.5;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.masterVolume = 0.5
         * ```
         */
        get masterVolume() {
            return this._player.masterVolume;
        }
        set masterVolume(value) {
            this._player.masterVolume = value;
        }
        /**
         * The metronome volume as percentage (0-1).
         * @remarks
         * Gets or sets the volume of the metronome. By default the metronome is disabled but can be enabled by setting the volume different.
         * @category Properties - Player
         * @defaultValue `0`
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.metronomeVolume = 0.5;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.MetronomeVolume = 0.5;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.metronomeVolume = 0.5
         * ```
         */
        get metronomeVolume() {
            return this._player.metronomeVolume;
        }
        set metronomeVolume(value) {
            this._player.metronomeVolume = value;
        }
        /**
         * The volume of the count-in metronome ticks.
         * @remarks
         * Gets or sets the volume of the metronome during the count-in of the song. By default the count-in is disabled but can be enabled by setting the volume different.
         * @category Properties - Player
         * @since 1.1.0
         * @defaultValue `0`
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.countInVolume = 0.5;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.CountInVolume = 0.5;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.countInVolume = 0.5
         * ```
         */
        get countInVolume() {
            return this._player.countInVolume;
        }
        set countInVolume(value) {
            this._player.countInVolume = value;
        }
        /**
         * The midi events which will trigger the `midiEventsPlayed` event
         * @remarks
         * Gets or sets the midi events which will trigger the `midiEventsPlayed` event. With this filter set you can enable
         * that alphaTab will signal any midi events as they are played by the synthesizer. This allows reacing on various low level
         * audio playback elements like notes/rests played or metronome ticks.
         *
         * Refer to the [related guide](https://alphatab.net/docs/guides/handling-midi-events) to learn more about this feature.
         * @defaultValue `[]`
         * @category Properties - Player
         * @since 1.2.0
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.midiEventsPlayedFilter = [alphaTab.midi.MidiEventType.AlphaTabMetronome];
         * api.midiEventsPlayed.on(function(e) {
         *   for(const midi of e.events) {
         *     if(midi.isMetronome) {
         *       console.log('Metronome tick ' + midi.metronomeNumerator);
         *     }
         *   }
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.MidiEventsPlayedFilter = new MidiEventType[] { AlphaTab.Midi.MidiEventType.AlphaTabMetronome };
         * api.MidiEventsPlayed.On(e =>
         * {
         *   foreach(var midi of e.events)
         *   {
         *     if(midi is AlphaTab.Midi.AlphaTabMetronomeEvent metronome)
         *     {
         *       Console.WriteLine("Metronome tick " + metronome.MetronomeNumerator);
         *     }
         *   }
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...);
         * api.midiEventsPlayedFilter = alphaTab.collections.List<alphaTab.midi.MidiEventType>( alphaTab.midi.MidiEventType.AlphaTabMetronome )
         * api.midiEventsPlayed.on { e ->
         *   for (midi in e.events) {
         *     if(midi instanceof alphaTab.midi.AlphaTabMetronomeEvent && midi.isMetronome) {
         *       println("Metronome tick " + midi.tick);
         *     }
         *   }
         * }
         * ```
         */
        get midiEventsPlayedFilter() {
            return this._player.midiEventsPlayedFilter;
        }
        set midiEventsPlayedFilter(value) {
            this._player.midiEventsPlayedFilter = value;
        }
        /**
         * The position within the song in midi ticks.
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.tickPosition = 4000;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.TickPosition = 4000;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.tickPosition = 4000
         * ```
         */
        get tickPosition() {
            return this._player.tickPosition;
        }
        set tickPosition(value) {
            this._player.tickPosition = value;
        }
        /**
         * The position within the song in milliseconds
         * @category Properties - Player
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.timePosition = 4000;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.TimePosition = 4000;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.timePosition = 4000
         * ```
         */
        get timePosition() {
            return this._player.timePosition;
        }
        set timePosition(value) {
            this._player.timePosition = value;
        }
        /**
         * The range of the song that should be played.
         * @remarks
         * Gets or sets the range of the song that should be played. The range is defined in midi ticks or the whole song is played if the range is set to null
         * @category Properties - Player
         * @defaultValue `null`
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playbackRange = { startTick: 1000, endTick: 50000 };
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlaybackRange = new PlaybackRange { StartTick = 1000, EndTick = 50000 };
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playbackRange = PlaybackRange.apply {
         *     startTick = 1000
         *     endTick = 50000
         * }
         * ```
         */
        get playbackRange() {
            return this._player.playbackRange;
        }
        set playbackRange(value) {
            this._player.playbackRange = value;
            this.updateSelectionCursor(value);
        }
        /**
         * The current playback speed as percentage
         * @remarks
         * Controls the current playback speed as percentual value. Normal speed is 1.0 (100%) and 0.5 would be 50%.
         * @category Properties - Player
         * @defaultValue `1`
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playbackSpeed = 0.5;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlaybackSpeed = 0.5;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playbackSpeed = 0.5
         * ```
         */
        get playbackSpeed() {
            return this._player.playbackSpeed;
        }
        set playbackSpeed(value) {
            this._player.playbackSpeed = value;
        }
        /**
         * Whether the playback should automatically restart after it finished.
         * @remarks
         * This setting controls whether the playback should automatically restart after it finished to create a playback loop.
         * @category Properties - Player
         * @defaultValue `false`
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.isLooping = true;
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.IsLooping = true;
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.isLooping = true
         * ```
         */
        get isLooping() {
            return this._player.isLooping;
        }
        set isLooping(value) {
            this._player.isLooping = value;
        }
        destroyPlayer() {
            this._player.destroy();
            this._previousTick = 0;
            this.destroyCursors();
        }
        /**
         *
         * @returns true if a new player was created, false if no player was created (includes destroy & reuse of the current one)
         */
        setupOrDestroyPlayer() {
            let mode = this.settings.player.playerMode;
            if (mode === exports.PlayerMode.EnabledAutomatic) {
                const score = this.score;
                if (!score) {
                    return false;
                }
                if (score?.backingTrack?.rawAudioFile) {
                    mode = exports.PlayerMode.EnabledBackingTrack;
                }
                else {
                    mode = exports.PlayerMode.EnabledSynthesizer;
                }
            }
            let newPlayer = null;
            if (mode !== this._actualPlayerMode) {
                this.destroyPlayer();
                this.updateCursors();
                switch (mode) {
                    case exports.PlayerMode.Disabled:
                        newPlayer = null;
                        break;
                    case exports.PlayerMode.EnabledSynthesizer:
                        newPlayer = this.uiFacade.createWorkerPlayer();
                        break;
                    case exports.PlayerMode.EnabledBackingTrack:
                        newPlayer = this.uiFacade.createBackingTrackPlayer();
                        break;
                    case exports.PlayerMode.EnabledExternalMedia:
                        newPlayer = new ExternalMediaPlayer(this.settings.player.bufferTimeInMilliseconds);
                        break;
                }
            }
            else {
                // no change in player mode, just update song info if needed
                this.updateCursors();
                return false;
            }
            this._actualPlayerMode = mode;
            if (!newPlayer) {
                return false;
            }
            this._player.instance = newPlayer;
            return false;
        }
        /**
         * Re-creates the midi for the current score and loads it.
         * @remarks
         * This will result in the player to stop playback. Some setting changes require re-genration of the midi song.
         * @category Methods - Player
         * @since 1.6.0
         */
        loadMidiForScore() {
            if (!this.score) {
                return;
            }
            const score = this.score;
            Logger.debug('AlphaTab', 'Generating Midi');
            const midiFile = new MidiFile();
            const handler = new AlphaSynthMidiFileHandler(midiFile);
            const generator = new MidiFileGenerator(score, this.settings, handler);
            const startIndex = ModelUtils.computeFirstDisplayedBarIndex(score, this.settings);
            const endIndex = ModelUtils.computeLastDisplayedBarIndex(score, this.settings, startIndex);
            generator.tickLookup.multiBarRestInfo = ModelUtils.buildMultiBarRestInfo(this.tracks, startIndex, endIndex);
            // we pass the transposition pitches separately to alphaSynth.
            generator.applyTranspositionPitches = false;
            generator.generate();
            this._tickCache = generator.tickLookup;
            this.onMidiLoad(midiFile);
            const player = this._player;
            player.loadMidiFile(midiFile);
            player.loadBackingTrack(score);
            player.updateSyncPoints(generator.syncPoints);
            player.applyTranspositionPitches(generator.transpositionPitches);
        }
        /**
         * Triggers an update of the sync points for the current score after modification within the data model
         * @category Methods - Player
         * @since 1.6.0
         */
        updateSyncPoints() {
            if (!this.score) {
                return;
            }
            const score = this.score;
            const player = this._player;
            player.updateSyncPoints(MidiFileGenerator.generateSyncPoints(score));
        }
        /**
         * Changes the volume of the given tracks.
         * @param tracks The tracks for which the volume should be changed.
         * @param volume The volume to set for all tracks in percent (0-1)
         *
         * @remarks
         * This will result in a volume change of the primary and secondary midi channel that the track uses for playback.
         * If the track shares the channels with another track, all related tracks will be changed as they cannot be distinguished.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.changeTrackVolume([api.score.tracks[0], api.score.tracks[1]], 1.5);
         * api.changeTrackVolume([api.score.tracks[2]], 0.5);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.ChangeTrackVolume(new Track[] { api.Score.Tracks[0], api.Score.Tracks[1] }, 1.5);
         * api.ChangeTrackVolume(new Track[] { api.Score.Tracks[2] }, 0.5);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...);
         * api.changeTrackVolume(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[0], api.score.tracks[1]), 1.5);
         * api.changeTrackVolume(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[2]), 0.5);
         * ```
         */
        changeTrackVolume(tracks, volume) {
            for (const track of tracks) {
                this._player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
                this._player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
            }
        }
        /**
         * Changes the given tracks to be played solo or not.
         * @param tracks The list of tracks to play solo or not.
         * @param solo If set to true, the tracks will be added to the solo list. If false, they are removed.
         *
         * @remarks
         * If any track is set to solo, all other tracks are muted, unless they are also flagged as solo.
         * This will result in a solo playback of the primary and secondary midi channel that the track uses for playback.
         * If the track shares the channels with another track, all related tracks will be played as they cannot be distinguished.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.changeTrackSolo([api.score.tracks[0], api.score.tracks[1]], true);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.ChangeTrackSolo(new Track[] { api.Score.Tracks[0], api.Score.Tracks[1] }, true);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.changeTrackSolo(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[0], api.score.tracks[1]), true);
         * ```
         */
        changeTrackSolo(tracks, solo) {
            for (const track of tracks) {
                this._player.setChannelSolo(track.playbackInfo.primaryChannel, solo);
                this._player.setChannelSolo(track.playbackInfo.secondaryChannel, solo);
            }
        }
        /**
         * Changes the given tracks to be muted or not.
         * @param tracks The list of track to mute or unmute.
         * @param mute If set to true, the tracks will be muted. If false they are unmuted.
         *
         * @remarks
         * This will result in a muting of the primary and secondary midi channel that the track uses
         * for playback. If the track shares the channels with another track, all tracks will be muted as during playback they cannot be distinguished.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.changeTrackMute([api.score.tracks[0], api.score.tracks[1]], true);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.ChangeTrackMute(new Track[] { api.Score.Tracks[0], api.Score.Tracks[1] }, true);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.changeTrackMute(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[0], api.score.tracks[1]), true);
         * ```
         */
        changeTrackMute(tracks, mute) {
            for (const track of tracks) {
                this._player.setChannelMute(track.playbackInfo.primaryChannel, mute);
                this._player.setChannelMute(track.playbackInfo.secondaryChannel, mute);
            }
        }
        /**
         * Changes the pitch transpose applied to the given tracks.
         * @param tracks The list of tracks to change.
         * @param semitones The number of semitones to apply as pitch offset.
         *
         * @remarks
         * These pitches are additional to the ones applied to the song via the settings and data model and allows a more live-update via a UI.
         * @category Methods - Player
         * @since 1.4.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.changeTrackTranspositionPitch([api.score.tracks[0], api.score.tracks[1]], 3);
         * api.changeTrackTranspositionPitch([api.score.tracks[2]], 2);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.ChangeTrackTranspositionPitch(new Track[] { api.Score.Tracks[0], api.Score.Tracks[1] }, 3);
         * api.ChangeTrackTranspositionPitch(new Track[] { api.Score.Tracks[2] }, 3);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...);
         * api.changeTrackTranspositionPitch(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[0], api.score.tracks[1]), 3);
         * api.changeTrackTranspositionPitch(alphaTab.collections.List<alphaTab.model.Track>(api.score.tracks[2]), 2);
         * ```
         */
        changeTrackTranspositionPitch(tracks, semitones) {
            for (const track of tracks) {
                this._player.setChannelTranspositionPitch(track.playbackInfo.primaryChannel, semitones);
                this._player.setChannelTranspositionPitch(track.playbackInfo.secondaryChannel, semitones);
            }
        }
        /**
         * Starts the playback of the current song.
         * @returns true if the playback was started, otherwise false. Reasons for not starting can be that the player is not ready or already playing.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.play();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Play();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.play()
         * ```
         */
        play() {
            return this._player.play();
        }
        /**
         * Pauses the playback of the current song.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.pause();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Pause();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.pause();
         * ```
         */
        pause() {
            this._player.pause();
        }
        /**
         * Toggles between play/pause depending on the current player state.
         * @remarks
         * If the player was playing, it will pause. If it is paused, it will initiate a play.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playPause();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayPause();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playPause()
         * ```
         */
        playPause() {
            this._player.playPause();
        }
        /**
         * Stops the playback of the current song, and moves the playback position back to the start.
         * @remarks
         * If a dedicated playback range is selected, it will move the playback position to the start of this range, not the whole song.
         * @category Methods - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.stop();
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.Stop();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.stop()
         * ```
         */
        stop() {
            this._player.stop();
        }
        /**
         * Triggers the play of the given beat.
         * @param beat the single beat to play
         * @remarks
         * This will stop the any other current ongoing playback.
         * This method can be used in applications when individual beats need to be played for lesson or editor style purposes.
         * The player will not report any change in state or playback position during the playback of the requested beat.
         * It is a playback of audio separate to the main song playback.
         * @returns true if the playback was started, otherwise false. Reasons for not starting can be that the player is not ready or already playing.
         * @category Methods - Player
         * @since 1.1.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playBeat(api.score.tracks[0].staves[0].bars[0].voices[0].beats[0]);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayBeat(api.Score.Tracks[0].Staves[0].Bars[0].Voices[0].Beats[0]);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playBeat(api.score.tracks[0].staves[0].bars[0].voices[0].beats[0])
         * ```
         */
        playBeat(beat) {
            // we generate a new midi file containing only the beat
            const midiFile = new MidiFile();
            const handler = new AlphaSynthMidiFileHandler(midiFile);
            const generator = new MidiFileGenerator(beat.voice.bar.staff.track.score, this.settings, handler);
            generator.generateSingleBeat(beat);
            this._player.playOneTimeMidiFile(midiFile);
        }
        /**
         * Triggers the play of the given note.
         * @param note the single note to play
         * @remarks
         * This will stop the any other current ongoing playback.
         * This method can be used in applications when individual notes need to be played for lesson or editor style purposes.
         * The player will not report any change in state or playback position during the playback of the requested note.
         * It is a playback of audio separate to the main song playback.
         * @category Methods - Player
         * @since 1.1.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playNote(api.score.tracks[0].staves[0].bars[0].voices[0].beats[0].notes[0]);
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayNote(api.Score.Tracks[0].Staves[0].Bars[0].Voices[0].Beats[0].Notes[0]);
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playNote(api.score.tracks[0].staves[0].bars[0].voices[0].beats[0].notes[0]);
         * ```
         */
        playNote(note) {
            // we generate a new midi file containing only the beat
            const midiFile = new MidiFile();
            const handler = new AlphaSynthMidiFileHandler(midiFile);
            const generator = new MidiFileGenerator(note.beat.voice.bar.staff.track.score, this.settings, handler);
            generator.generateSingleNote(note);
            this._player.playOneTimeMidiFile(midiFile);
        }
        destroyCursors() {
            if (!this._cursorWrapper) {
                return;
            }
            this.uiFacade.destroyCursors();
            this._cursorWrapper = null;
            this._barCursor = null;
            this._beatCursor = null;
            this._selectionWrapper = null;
        }
        updateCursors() {
            const enable = this.hasCursor;
            if (enable && !this._cursorWrapper) {
                //
                // Create cursors
                const cursors = this.uiFacade.createCursors();
                if (cursors) {
                    // store options and created elements for fast access
                    this._cursorWrapper = cursors.cursorWrapper;
                    this._barCursor = cursors.barCursor;
                    this._beatCursor = cursors.beatCursor;
                    this._selectionWrapper = cursors.selectionWrapper;
                    this._isInitialBeatCursorUpdate = true;
                }
                if (this._currentBeat !== null) {
                    this.cursorUpdateBeat(this._currentBeat, false, this._previousTick > 10, 1, true);
                }
            }
            else if (!enable && this._cursorWrapper) {
                this.destroyCursors();
            }
        }
        /**
         * updates the cursors to highlight the beat at the specified tick position
         * @param tick
         * @param stop
         * @param shouldScroll whether we should scroll to the bar (if scrolling is active)
         */
        cursorUpdateTick(tick, stop, cursorSpeed, shouldScroll = false, forceUpdate = false) {
            this._previousTick = tick;
            const cache = this._tickCache;
            if (cache) {
                const tracks = this._trackIndexLookup;
                if (tracks != null && tracks.size > 0) {
                    const beat = cache.findBeat(tracks, tick, this._currentBeat);
                    if (beat) {
                        this.cursorUpdateBeat(beat, stop, shouldScroll, cursorSpeed, forceUpdate || this.playerState === PlayerState.Paused);
                    }
                }
            }
        }
        /**
         * updates the cursors to highlight the specified beat
         */
        cursorUpdateBeat(lookupResult, stop, shouldScroll, cursorSpeed, forceUpdate = false) {
            const beat = lookupResult.beat;
            const nextBeat = lookupResult.nextBeat?.beat ?? null;
            const duration = lookupResult.duration;
            const beatsToHighlight = lookupResult.beatLookup.highlightedBeats;
            if (!beat) {
                return;
            }
            const cache = this._renderer.boundsLookup;
            if (!cache) {
                return;
            }
            const previousBeat = this._currentBeat;
            const previousCache = this._previousCursorCache;
            const previousState = this._previousStateForCursor;
            if (!forceUpdate &&
                beat === previousBeat?.beat &&
                cache === previousCache &&
                previousState === this._player.state &&
                previousBeat?.start === lookupResult.start) {
                return;
            }
            const beatBoundings = cache.findBeat(beat);
            if (!beatBoundings) {
                return;
            }
            // only if we really found some bounds we remember the beat and cache we used to
            // actually show the cursor
            this._currentBeat = lookupResult;
            this._previousCursorCache = cache;
            this._previousStateForCursor = this._player.state;
            this.uiFacade.beginInvoke(() => {
                this.internalCursorUpdateBeat(beat, nextBeat, duration, stop, beatsToHighlight, cache, beatBoundings, shouldScroll, lookupResult.cursorMode, cursorSpeed);
            });
        }
        /**
         * Initiates a scroll to the cursor.
         * @since 1.2.3
         * @category Methods - Player
         */
        scrollToCursor() {
            const beatBounds = this._currentBeatBounds;
            if (beatBounds) {
                this.internalScrollToCursor(beatBounds.barBounds.masterBarBounds);
            }
        }
        internalScrollToCursor(barBoundings) {
            const scrollElement = this.uiFacade.getScrollContainer();
            const isVertical = Environment.getLayoutEngineFactory(this.settings.display.layoutMode).vertical;
            const mode = this.settings.player.scrollMode;
            if (isVertical) {
                // when scrolling on the y-axis, we preliminary check if the new beat/bar have
                // moved on the y-axis
                const y = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
                if (y !== this._lastScroll) {
                    this._lastScroll = y;
                    switch (mode) {
                        case exports.ScrollMode.Continuous:
                            const elementOffset = this.uiFacade.getOffset(scrollElement, this.container);
                            this.uiFacade.scrollToY(scrollElement, elementOffset.y + y, this.settings.player.scrollSpeed);
                            break;
                        case exports.ScrollMode.OffScreen:
                            const elementBottom = scrollElement.scrollTop + this.uiFacade.getOffset(null, scrollElement).h;
                            if (barBoundings.visualBounds.y + barBoundings.visualBounds.h >= elementBottom ||
                                barBoundings.visualBounds.y < scrollElement.scrollTop) {
                                const scrollTop = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
                                this.uiFacade.scrollToY(scrollElement, scrollTop, this.settings.player.scrollSpeed);
                            }
                            break;
                    }
                }
            }
            else {
                // when scrolling on the x-axis, we preliminary check if the new bar has
                // moved on the x-axis
                const x = barBoundings.visualBounds.x;
                if (x !== this._lastScroll) {
                    this._lastScroll = x;
                    switch (mode) {
                        case exports.ScrollMode.Continuous:
                            const scrollLeftContinuous = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                            this._lastScroll = barBoundings.visualBounds.x;
                            this.uiFacade.scrollToX(scrollElement, scrollLeftContinuous, this.settings.player.scrollSpeed);
                            break;
                        case exports.ScrollMode.OffScreen:
                            const elementRight = scrollElement.scrollLeft + this.uiFacade.getOffset(null, scrollElement).w;
                            if (barBoundings.visualBounds.x + barBoundings.visualBounds.w >= elementRight ||
                                barBoundings.visualBounds.x < scrollElement.scrollLeft) {
                                const scrollLeftOffScreen = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                                this._lastScroll = barBoundings.visualBounds.x;
                                this.uiFacade.scrollToX(scrollElement, scrollLeftOffScreen, this.settings.player.scrollSpeed);
                            }
                            break;
                    }
                }
            }
        }
        internalCursorUpdateBeat(beat, nextBeat, duration, stop, beatsToHighlight, cache, beatBoundings, shouldScroll, cursorMode, cursorSpeed) {
            const barCursor = this._barCursor;
            const beatCursor = this._beatCursor;
            const barBoundings = beatBoundings.barBounds.masterBarBounds;
            const barBounds = barBoundings.visualBounds;
            const previousBeatBounds = this._currentBeatBounds;
            this._currentBeatBounds = beatBoundings;
            if (barCursor) {
                barCursor.setBounds(barBounds.x, barBounds.y, barBounds.w, barBounds.h);
            }
            const isPlayingUpdate = this._player.state === PlayerState.Playing && !stop;
            let nextBeatX = barBoundings.visualBounds.x + barBoundings.visualBounds.w;
            // get position of next beat on same system
            if (nextBeat && cursorMode === MidiTickLookupFindBeatResultCursorMode.ToNextBext) {
                // if we are moving within the same bar or to the next bar
                // transition to the next beat, otherwise transition to the end of the bar.
                const nextBeatBoundings = cache.findBeat(nextBeat);
                if (nextBeatBoundings &&
                    nextBeatBoundings.barBounds.masterBarBounds.staffSystemBounds === barBoundings.staffSystemBounds) {
                    nextBeatX = nextBeatBoundings.onNotesX;
                }
            }
            let startBeatX = beatBoundings.onNotesX;
            if (beatCursor) {
                // relative positioning of the cursor
                if (this.settings.player.enableAnimatedBeatCursor) {
                    const animationWidth = nextBeatX - beatBoundings.onNotesX;
                    const relativePosition = this._previousTick - this._currentBeat.start;
                    const ratioPosition = this._currentBeat.tickDuration > 0 ? relativePosition / this._currentBeat.tickDuration : 0;
                    startBeatX = beatBoundings.onNotesX + animationWidth * ratioPosition;
                    duration -= duration * ratioPosition;
                    if (isPlayingUpdate) {
                        // we do not "reset" the cursor if we are smoothly moving from left to right.
                        const jumpCursor = !previousBeatBounds ||
                            this._isInitialBeatCursorUpdate ||
                            barBounds.y !== previousBeatBounds.barBounds.masterBarBounds.visualBounds.y ||
                            startBeatX < previousBeatBounds.onNotesX ||
                            barBoundings.index > previousBeatBounds.barBounds.masterBarBounds.index + 1;
                        if (jumpCursor) {
                            beatCursor.transitionToX(0, startBeatX);
                            beatCursor.setBounds(startBeatX, barBounds.y, 1, barBounds.h);
                        }
                        // we need to put the transition to an own animation frame
                        // otherwise the stop animation above is not applied.
                        this.uiFacade.beginInvoke(() => {
                            // it can happen that the cursor reaches the target position slightly too early (especially on backing tracks)
                            // to avoid the cursor stopping, causing a wierd look, we animate the cursor to the double position in double time.
                            // beatCursor!.transitionToX((duration / cursorSpeed), nextBeatX);
                            const factor = cursorMode === MidiTickLookupFindBeatResultCursorMode.ToNextBext ? 2 : 1;
                            const doubleEndBeatX = startBeatX + (nextBeatX - startBeatX) * factor;
                            beatCursor.transitionToX((duration / cursorSpeed) * factor, doubleEndBeatX);
                        });
                    }
                    else {
                        beatCursor.transitionToX(0, startBeatX);
                        beatCursor.setBounds(startBeatX, barBounds.y, 1, barBounds.h);
                    }
                }
                else {
                    // ticking cursor
                    beatCursor.transitionToX(0, startBeatX);
                    beatCursor.setBounds(startBeatX, barBounds.y, 1, barBounds.h);
                }
                this._isInitialBeatCursorUpdate = false;
            }
            else {
                this._isInitialBeatCursorUpdate = true;
            }
            // if playing, animate the cursor to the next beat
            this.uiFacade.removeHighlights();
            // actively playing? -> animate cursor and highlight items
            let shouldNotifyBeatChange = false;
            if (isPlayingUpdate) {
                if (this.settings.player.enableElementHighlighting) {
                    for (const highlight of beatsToHighlight) {
                        const className = BeatContainerGlyph.getGroupId(highlight.beat);
                        this.uiFacade.highlightElements(className, beat.voice.bar.index);
                    }
                }
                shouldScroll = !stop;
                shouldNotifyBeatChange = true;
            }
            if (shouldScroll && !this._beatMouseDown && this.settings.player.scrollMode !== exports.ScrollMode.Off) {
                this.internalScrollToCursor(barBoundings);
            }
            // trigger an event for others to indicate which beat/bar is played
            if (shouldNotifyBeatChange) {
                this.onPlayedBeatChanged(beat);
                this.onActiveBeatsChanged(new ActiveBeatsChangedEventArgs(beatsToHighlight.map(i => i.beat)));
            }
        }
        onPlayedBeatChanged(beat) {
            if (this._isDestroyed) {
                return;
            }
            this.playedBeatChanged.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'playedBeatChanged', beat);
        }
        onActiveBeatsChanged(e) {
            if (this._isDestroyed) {
                return;
            }
            this.activeBeatsChanged.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'activeBeatsChanged', e);
        }
        get hasCursor() {
            return this.settings.player.playerMode !== exports.PlayerMode.Disabled && this.settings.player.enableCursor;
        }
        onBeatMouseDown(originalEvent, beat) {
            if (this._isDestroyed) {
                return;
            }
            if (this.hasCursor && this.settings.player.enableUserInteraction) {
                this._selectionStart = new SelectionInfo(beat);
                this._selectionEnd = null;
            }
            this._beatMouseDown = true;
            this.beatMouseDown.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseDown', beat, originalEvent);
        }
        onNoteMouseDown(originalEvent, note) {
            if (this._isDestroyed) {
                return;
            }
            this._noteMouseDown = true;
            this.noteMouseDown.trigger(note);
            this.uiFacade.triggerEvent(this.container, 'noteMouseDown', note, originalEvent);
        }
        onBeatMouseMove(originalEvent, beat) {
            if (this._isDestroyed) {
                return;
            }
            if (this.settings.player.enableUserInteraction) {
                if (!this._selectionEnd || this._selectionEnd.beat !== beat) {
                    this._selectionEnd = new SelectionInfo(beat);
                    this.cursorSelectRange(this._selectionStart, this._selectionEnd);
                }
            }
            this.beatMouseMove.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseMove', beat, originalEvent);
        }
        onNoteMouseMove(originalEvent, note) {
            if (this._isDestroyed) {
                return;
            }
            this.noteMouseMove.trigger(note);
            this.uiFacade.triggerEvent(this.container, 'noteMouseMove', note, originalEvent);
        }
        onBeatMouseUp(originalEvent, beat) {
            if (this._isDestroyed) {
                return;
            }
            if (this.hasCursor && this.settings.player.enableUserInteraction) {
                if (this._selectionEnd) {
                    const startTick = this._tickCache?.getBeatStart(this._selectionStart.beat) ??
                        this._selectionStart.beat.absolutePlaybackStart;
                    const endTick = this._tickCache?.getBeatStart(this._selectionEnd.beat) ??
                        this._selectionEnd.beat.absolutePlaybackStart;
                    if (endTick < startTick) {
                        const t = this._selectionStart;
                        this._selectionStart = this._selectionEnd;
                        this._selectionEnd = t;
                    }
                }
                if (this._selectionStart && this._tickCache) {
                    // get the start and stop ticks (which consider properly repeats)
                    const tickCache = this._tickCache;
                    const realMasterBarStart = tickCache.getMasterBarStart(this._selectionStart.beat.voice.bar.masterBar);
                    // move to selection start
                    this._currentBeat = null; // reset current beat so it is updating the cursor
                    if (this._player.state === PlayerState.Paused) {
                        this.cursorUpdateTick(this._tickCache.getBeatStart(this._selectionStart.beat), false, 1);
                    }
                    this.tickPosition = realMasterBarStart + this._selectionStart.beat.playbackStart;
                    // set playback range
                    if (this._selectionEnd && this._selectionStart.beat !== this._selectionEnd.beat) {
                        const realMasterBarEnd = tickCache.getMasterBarStart(this._selectionEnd.beat.voice.bar.masterBar);
                        const range = new PlaybackRange();
                        range.startTick = realMasterBarStart + this._selectionStart.beat.playbackStart;
                        range.endTick =
                            realMasterBarEnd +
                                this._selectionEnd.beat.playbackStart +
                                this._selectionEnd.beat.playbackDuration -
                                50;
                        this.playbackRange = range;
                    }
                    else {
                        this._selectionStart = null;
                        this.playbackRange = null;
                        this.cursorSelectRange(this._selectionStart, this._selectionEnd);
                    }
                }
            }
            this.beatMouseUp.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseUp', beat, originalEvent);
            this._beatMouseDown = false;
        }
        onNoteMouseUp(originalEvent, note) {
            if (this._isDestroyed) {
                return;
            }
            this.noteMouseUp.trigger(note);
            this.uiFacade.triggerEvent(this.container, 'noteMouseUp', note, originalEvent);
            this._noteMouseDown = false;
        }
        updateSelectionCursor(range) {
            if (!this._tickCache) {
                return;
            }
            if (range) {
                const startBeat = this._tickCache.findBeat(this._trackIndexLookup, range.startTick);
                const endBeat = this._tickCache.findBeat(this._trackIndexLookup, range.endTick);
                if (startBeat && endBeat) {
                    const selectionStart = new SelectionInfo(startBeat.beat);
                    const selectionEnd = new SelectionInfo(endBeat.beat);
                    this.cursorSelectRange(selectionStart, selectionEnd);
                }
            }
            else {
                this.cursorSelectRange(null, null);
            }
        }
        setupClickHandling() {
            this.canvasElement.mouseDown.on(e => {
                if (!e.isLeftMouseButton) {
                    return;
                }
                if (this.settings.player.enableUserInteraction) {
                    e.preventDefault();
                }
                const relX = e.getX(this.canvasElement);
                const relY = e.getY(this.canvasElement);
                const beat = this._renderer.boundsLookup?.getBeatAtPos(relX, relY) ?? null;
                if (beat) {
                    this.onBeatMouseDown(e, beat);
                    if (this.settings.core.includeNoteBounds) {
                        const note = this._renderer.boundsLookup?.getNoteAtPos(beat, relX, relY);
                        if (note) {
                            this.onNoteMouseDown(e, note);
                        }
                    }
                }
            });
            this.canvasElement.mouseMove.on(e => {
                if (!this._beatMouseDown) {
                    return;
                }
                const relX = e.getX(this.canvasElement);
                const relY = e.getY(this.canvasElement);
                const beat = this._renderer.boundsLookup?.getBeatAtPos(relX, relY) ?? null;
                if (beat) {
                    this.onBeatMouseMove(e, beat);
                    if (this._noteMouseDown) {
                        const note = this._renderer.boundsLookup?.getNoteAtPos(beat, relX, relY);
                        if (note) {
                            this.onNoteMouseMove(e, note);
                        }
                    }
                }
            });
            this.canvasElement.mouseUp.on(e => {
                if (!this._beatMouseDown) {
                    return;
                }
                if (this.settings.player.enableUserInteraction) {
                    e.preventDefault();
                }
                const relX = e.getX(this.canvasElement);
                const relY = e.getY(this.canvasElement);
                const beat = this._renderer.boundsLookup?.getBeatAtPos(relX, relY) ?? null;
                this.onBeatMouseUp(e, beat);
                if (this._noteMouseDown) {
                    if (beat) {
                        const note = this._renderer.boundsLookup?.getNoteAtPos(beat, relX, relY) ?? null;
                        this.onNoteMouseUp(e, note);
                    }
                    else {
                        this.onNoteMouseUp(e, null);
                    }
                }
            });
            this._renderer.postRenderFinished.on(() => {
                if (!this._selectionStart || !this.hasCursor || !this.settings.player.enableUserInteraction) {
                    return;
                }
                this.cursorSelectRange(this._selectionStart, this._selectionEnd);
            });
        }
        cursorSelectRange(startBeat, endBeat) {
            const cache = this._renderer.boundsLookup;
            if (!cache) {
                return;
            }
            const selectionWrapper = this._selectionWrapper;
            if (!selectionWrapper) {
                return;
            }
            selectionWrapper.clear();
            if (!startBeat || !endBeat || startBeat.beat === endBeat.beat) {
                return;
            }
            if (!startBeat.bounds) {
                startBeat.bounds = cache.findBeat(startBeat.beat);
            }
            if (!endBeat.bounds) {
                endBeat.bounds = cache.findBeat(endBeat.beat);
            }
            const startTick = this._tickCache?.getBeatStart(startBeat.beat) ?? startBeat.beat.absolutePlaybackStart;
            const endTick = this._tickCache?.getBeatStart(endBeat.beat) ?? endBeat.beat.absolutePlaybackStart;
            if (endTick < startTick) {
                const t = startBeat;
                startBeat = endBeat;
                endBeat = t;
            }
            const startX = startBeat.bounds.realBounds.x;
            let endX = endBeat.bounds.realBounds.x + endBeat.bounds.realBounds.w;
            if (endBeat.beat.index === endBeat.beat.voice.beats.length - 1) {
                endX =
                    endBeat.bounds.barBounds.masterBarBounds.realBounds.x +
                        endBeat.bounds.barBounds.masterBarBounds.realBounds.w;
            }
            // if the selection goes across multiple staves, we need a special selection highlighting
            if (startBeat.bounds.barBounds.masterBarBounds.staffSystemBounds !==
                endBeat.bounds.barBounds.masterBarBounds.staffSystemBounds) {
                // from the startbeat to the end of the staff,
                // then fill all staffs until the end-beat staff
                // then from staff-start to the end beat (or to end of bar if it's the last beat)
                const staffStartX = startBeat.bounds.barBounds.masterBarBounds.staffSystemBounds.visualBounds.x;
                const staffEndX = startBeat.bounds.barBounds.masterBarBounds.staffSystemBounds.visualBounds.x +
                    startBeat.bounds.barBounds.masterBarBounds.staffSystemBounds.visualBounds.w;
                const startSelection = this.uiFacade.createSelectionElement();
                startSelection.setBounds(startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.y, staffEndX - startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
                selectionWrapper.appendChild(startSelection);
                const staffStartIndex = startBeat.bounds.barBounds.masterBarBounds.staffSystemBounds.index + 1;
                const staffEndIndex = endBeat.bounds.barBounds.masterBarBounds.staffSystemBounds.index;
                for (let staffIndex = staffStartIndex; staffIndex < staffEndIndex; staffIndex++) {
                    const staffBounds = cache.staffSystems[staffIndex];
                    const middleSelection = this.uiFacade.createSelectionElement();
                    middleSelection.setBounds(staffStartX, staffBounds.visualBounds.y, staffEndX - staffStartX, staffBounds.visualBounds.h);
                    selectionWrapper.appendChild(middleSelection);
                }
                const endSelection = this.uiFacade.createSelectionElement();
                endSelection.setBounds(staffStartX, endBeat.bounds.barBounds.masterBarBounds.visualBounds.y, endX - staffStartX, endBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
                selectionWrapper.appendChild(endSelection);
            }
            else {
                // if the beats are on the same staff, we simply highlight from the startbeat to endbeat
                const selection = this.uiFacade.createSelectionElement();
                selection.setBounds(startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.y, endX - startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
                selectionWrapper.appendChild(selection);
            }
        }
        onScoreLoaded(score) {
            if (this._isDestroyed) {
                return;
            }
            this.scoreLoaded.trigger(score);
            this.uiFacade.triggerEvent(this.container, 'scoreLoaded', score);
            if (!this.setupOrDestroyPlayer()) {
                // feed midi into current player (a new player will trigger a midi generation once the player is ready)
                this.loadMidiForScore();
            }
        }
        onResize(e) {
            if (this._isDestroyed) {
                return;
            }
            this.resize.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'resize', e);
        }
        onRenderStarted(resize) {
            if (this._isDestroyed) {
                return;
            }
            this.renderStarted.trigger(resize);
            this.uiFacade.triggerEvent(this.container, 'renderStarted', resize);
        }
        onRenderFinished(renderingResult) {
            if (this._isDestroyed) {
                return;
            }
            this.renderFinished.trigger(renderingResult);
            this.uiFacade.triggerEvent(this.container, 'renderFinished', renderingResult);
        }
        onPostRenderFinished() {
            if (this._isDestroyed) {
                return;
            }
            this._currentBeat = null;
            this.cursorUpdateTick(this._previousTick, false, 1, true, true);
            this.postRenderFinished.trigger();
            this.uiFacade.triggerEvent(this.container, 'postRenderFinished', null);
        }
        /**
         * @internal
         */
        onError(error) {
            if (this._isDestroyed) {
                return;
            }
            Logger.error('API', 'An unexpected error occurred', error);
            this.error.trigger(error);
            this.uiFacade.triggerEvent(this.container, 'error', error);
        }
        /**
         * This event is fired when all required data for playback is loaded and ready.
         * @remarks
         * This event is fired when all required data for playback is loaded and ready. The player is ready for playback when
         * all background workers are started, the audio output is initialized, a soundfont is loaded, and a song was loaded into the player as midi file.
         *
         * @eventProperty
         * @category Events - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playerReady.on(() => {
         *     enablePlayerControls();
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayerReady.On(() =>
         * {
         *     EnablePlayerControls()
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playerReady.on {
         *     enablePlayerControls()
         * }
         * ```
         */
        get playerReady() {
            return this._player.readyForPlayback;
        }
        onPlayerReady() {
            if (this._isDestroyed) {
                return;
            }
            this.uiFacade.triggerEvent(this.container, 'playerReady', null);
        }
        /**
         * This event is fired when the playback of the whole song finished.
         * @remarks
         * This event is finished regardless on whether looping is enabled or not.
         *
         * @eventProperty
         * @category Events - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playerFinished.on((args) => {
         *     // speed trainer
         *     api.playbackSpeed = Math.min(1.0, api.playbackSpeed + 0.1);
         * });
         * api.isLooping = true;
         * api.playbackSpeed = 0.5;
         * api.play()
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayerFinished.On(() =>
         * {
         *     // speed trainer
         *     api.PlaybackSpeed = Math.Min(1.0, api.PlaybackSpeed + 0.1);
         * });
         * api.IsLooping = true;
         * api.PlaybackSpeed = 0.5;
         * api.Play();
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playerFinished.on {
         *     // speed trainer
         *     api.playbackSpeed = min(1.0, api.playbackSpeed + 0.1);
         * }
         * api.isLooping = true
         * api.playbackSpeed = 0.5
         * api.play()
         * ```
         *
         */
        get playerFinished() {
            return this._player.finished;
        }
        onPlayerFinished() {
            if (this._isDestroyed) {
                return;
            }
            this.uiFacade.triggerEvent(this.container, 'playerFinished', null);
        }
        /**
         * This event is fired when the SoundFont needed for playback was loaded.
         *
         * @eventProperty
         * @category Events - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.soundFontLoaded.on(() => {
         *     hideSoundFontLoadingIndicator();
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.SoundFontLoaded.On(() =>
         * {
         *     HideSoundFontLoadingIndicator();
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...);
         * api.soundFontLoaded.on {
         *     hideSoundFontLoadingIndicator();
         * }
         * ```
         *
         */
        get soundFontLoaded() {
            return this._player.soundFontLoaded;
        }
        onSoundFontLoaded() {
            if (this._isDestroyed) {
                return;
            }
            this.uiFacade.triggerEvent(this.container, 'soundFontLoaded', null);
        }
        onMidiLoad(e) {
            if (this._isDestroyed) {
                return;
            }
            this.midiLoad.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'midiLoad', e);
        }
        onMidiLoaded(e) {
            if (this._isDestroyed) {
                return;
            }
            this.midiLoaded.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'midiFileLoaded', e);
        }
        /**
         * This event is fired when the playback state changed.
         *
         * @eventProperty
         * @category Events - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playerStateChanged.on((args) => {
         *     updatePlayerControls(args.state, args.stopped);
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayerStateChanged.On(args =>
         * {
         *     UpdatePlayerControls(args);
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playerStateChanged.on { args ->
         *     updatePlayerControls(args)
         * }
         * ```
         *
         */
        get playerStateChanged() {
            return this._player.stateChanged;
        }
        onPlayerStateChanged(e) {
            if (this._isDestroyed) {
                return;
            }
            if (!e.stopped && e.state === PlayerState.Paused) {
                const currentBeat = this._currentBeat;
                const tickCache = this._tickCache;
                if (currentBeat && tickCache) {
                    this._player.tickPosition = tickCache.getBeatStart(currentBeat.beat);
                }
            }
            this.uiFacade.triggerEvent(this.container, 'playerStateChanged', e);
        }
        /**
         * This event is fired when the current playback position of the song changed.
         *
         * @eventProperty
         * @category Events - Player
         * @since 0.9.4
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playerPositionChanged.on((args) => {
         *     updatePlayerPosition(args);
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlayerPositionChanged.On(args =>
         * {
         *     UpdatePlayerPosition(args);
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playerPositionChanged.on { args ->
         *     updatePlayerPosition(args)
         * }
         * ```
         *
         */
        get playerPositionChanged() {
            return this._player.positionChanged;
        }
        onPlayerPositionChanged(e) {
            if (this._isDestroyed) {
                return;
            }
            this._previousTick = e.currentTick;
            this.uiFacade.beginInvoke(() => {
                const cursorSpeed = e.modifiedTempo / e.originalTempo;
                this.cursorUpdateTick(e.currentTick, false, cursorSpeed, false, e.isSeek);
            });
            this.uiFacade.triggerEvent(this.container, 'playerPositionChanged', e);
        }
        /**
         * This event is fired when the synthesizer played certain midi events.
         *
         * @remarks
         * This event is fired when the synthesizer played certain midi events. This allows reacing on various low level
         * audio playback elements like notes/rests played or metronome ticks.
         *
         * Refer to the [related guide](https://www.alphatab.net/docs/guides/handling-midi-events) to learn more about this feature.
         *
         * Also note that the provided data models changed significantly in {@version 1.3.0}. We try to provide backwards compatibility
         * until some extend but highly encourage changing to the new models in case of problems.
         *
         * @eventProperty
         * @category Events - Player
         * @since 1.2.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.midiEventsPlayedFilter = [alphaTab.midi.MidiEventType.AlphaTabMetronome];
         * api.midiEventsPlayed.on(function(e) {
         *   for(const midi of e.events) {
         *     if(midi.isMetronome) {
         *       console.log('Metronome tick ' + midi.tick);
         *     }
         *   }
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.MidiEventsPlayedFilter = new MidiEventType[] { AlphaTab.Midi.MidiEventType.AlphaTabMetronome };
         * api.MidiEventsPlayed.On(e =>
         * {
         *   foreach(var midi of e.events)
         *   {
         *     if(midi is AlphaTab.Midi.AlphaTabMetronomeEvent sysex && sysex.IsMetronome)
         *     {
         *       Console.WriteLine("Metronome tick " + midi.Tick);
         *     }
         *   }
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...);
         * api.midiEventsPlayedFilter = alphaTab.collections.List<alphaTab.midi.MidiEventType>( alphaTab.midi.MidiEventType.AlphaTabMetronome )
         * api.midiEventsPlayed.on { e ->
         *   for (midi in e.events) {
         *     if(midi instanceof alphaTab.midi.AlphaTabMetronomeEvent && midi.isMetronome) {
         *       println("Metronome tick " + midi.tick);
         *     }
         *   }
         * }
         * ```
         * @see {@link MidiEvent}
         * @see {@link TimeSignatureEvent}
         * @see {@link AlphaTabMetronomeEvent}
         * @see {@link AlphaTabRestEvent}
         * @see {@link NoteOnEvent}
         * @see {@link NoteOffEvent}
         * @see {@link ControlChangeEvent}
         * @see {@link ProgramChangeEvent}
         * @see {@link TempoChangeEvent}
         * @see {@link PitchBendEvent}
         * @see {@link NoteBendEvent}
         * @see {@link EndOfTrackEvent}
         * @see {@link MetaEvent}
         * @see {@link MetaDataEvent}
         * @see {@link MetaNumberEvent}
         * @see {@link Midi20PerNotePitchBendEvent}
         * @see {@link SystemCommonEvent}
         * @see {@link SystemExclusiveEvent}
         */
        get midiEventsPlayed() {
            return this._player.midiEventsPlayed;
        }
        onMidiEventsPlayed(e) {
            if (this._isDestroyed) {
                return;
            }
            this.uiFacade.triggerEvent(this.container, 'midiEventsPlayed', e);
        }
        /**
         * This event is fired when the playback range changed.
         *
         * @eventProperty
         * @category Events - Player
         * @since 1.2.3
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.playbackRangeChanged.on((args) => {
         *     if (args.playbackRange) {
         *         highlightRangeInProgressBar(args.playbackRange.startTick, args.playbackRange.endTick);
         *     } else {
         *         clearHighlightInProgressBar();
         *     }
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * api.PlaybackRangeChanged.On(args =>
         * {
         *     if (args.PlaybackRange != null)
         *     {
         *         HighlightRangeInProgressBar(args.PlaybackRange.StartTick, args.PlaybackRange.EndTick);
         *     }
         *     else
         *     {
         *         ClearHighlightInProgressBar();
         *     }
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * val api = AlphaTabApi<MyControl>(...)
         * api.playbackRangeChanged.on { args ->
         *     val playbackRange = args.playbackRange
         *     if (playbackRange != null) {
         *         highlightRangeInProgressBar(playbackRange.startTick, playbackRange.endTick)
         *     } else {
         *         clearHighlightInProgressBar()
         *     }
         * }
         * ```
         *
         */
        get playbackRangeChanged() {
            return this._player.playbackRangeChanged;
        }
        onPlaybackRangeChanged(e) {
            if (this._isDestroyed) {
                return;
            }
            this.uiFacade.triggerEvent(this.container, 'playbackRangeChanged', e);
        }
        onSettingsUpdated() {
            if (this._isDestroyed) {
                return;
            }
            this.settingsUpdated.trigger();
            this.uiFacade.triggerEvent(this.container, 'settingsUpdated', null);
        }
        /**
         * Loads and lists the available output devices which can be used by the player.
         * @returns the list of available devices or an empty list if there are no permissions, or the player is not enabled.
         *
         * @remarks
         * Will request permissions if needed.
         *
         * The values provided, can be passed into {@link setOutputDevice} to change dynamically the output device on which
         * the sound is played.
         *
         * In the web version this functionality relies on experimental APIs and might not yet be available in all browsers. https://caniuse.com/mdn-api_audiocontext_sinkid
         * @category Methods - Player
         * @since 1.5.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * const devices = await api.enumerateOutputDevices();
         *
         * buildDeviceSelector(devices, async selectedDevice => {
         *   await api.setOutputDevice(selectedDevice);
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * var devices = await api.EnumerateOutputDevices();
         *
         * BuildDeviceSelector(devices, async selectedDevice => {
         *   await api.SetOutputDevice(selectedDevice);
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * fun init() = kotlinx.coroutines.runBlocking {
         *   val api = AlphaTabApi<MyControl>(...)
         *   val devices = api.enumerateOutputDevices().await()
         *
         *   buildDeviceSelector(devices, fun (selectedDevice) {
         *     suspend {
         *       await api.setOutputDevice(selectedDevice)
         *     }
         *   });
         * }
         * ```
         */
        async enumerateOutputDevices() {
            return await this._player.output.enumerateOutputDevices();
        }
        /**
         * Changes the output device which should be used for playing the audio (player must be enabled).
         * @param device The output device to use, or null to switch to the default device.
         *
         * @remarks
         * Use {@link enumerateOutputDevices} to load the list of available devices.
         *
         * In the web version this functionality relies on experimental APIs and might not yet be available in all browsers. https://caniuse.com/mdn-api_audiocontext_sinkid
         * @category Methods - Player
         * @since 1.5.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * const devices = await api.enumerateOutputDevices();
         *
         * buildDeviceSelector(devices, async selectedDevice => {
         *   await api.setOutputDevice(selectedDevice);
         * });
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * var devices = await api.EnumerateOutputDevices();
         *
         * BuildDeviceSelector(devices, async selectedDevice => {
         *   await api.SetOutputDevice(selectedDevice);
         * });
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * fun init() = kotlinx.coroutines.runBlocking {
         *   val api = AlphaTabApi<MyControl>(...)
         *   val devices = api.enumerateOutputDevices().await()
         *
         *   buildDeviceSelector(devices, fun (selectedDevice) {
         *     suspend {
         *       await api.setOutputDevice(selectedDevice)
         *     }
         *   });
         * }
         * ```
         */
        async setOutputDevice(device) {
            await this._player.output.setOutputDevice(device);
        }
        /**
         * The currently configured output device if changed via {@link setOutputDevice}.
         * @returns The custom configured output device which was set via {@link setOutputDevice} or `null`
         * if the default outputDevice is used.
         * The output device might change dynamically if devices are connected/disconnected (e.g. bluetooth headset).
         *
         * @remarks
         * Assumes {@link setOutputDevice} has been used.
         * In the web version this functionality relies on experimental APIs and might not yet be available in all browsers. https://caniuse.com/mdn-api_audiocontext_sinkid
         *
         * @category Methods - Player
         * @since 1.5.0
         *
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * updateOutputDeviceUI(await api.getOutputDevice())
         * ```
         *
         * @example
         * C#
         * ```cs
         * var api = new AlphaTabApi<MyControl>(...);
         * UpdateOutputDeviceUI(await api.GetOutputDevice())
         * ```
         *
         * @example
         * Android
         * ```kotlin
         * fun init() = kotlinx.coroutines.runBlocking {
         *   val api = AlphaTabApi<MyControl>(...)
         *   updateOutputDeviceUI(api.getOutputDevice().await())
         * }
         * ```
         *
         */
        async getOutputDevice() {
            return await this._player.output.getOutputDevice();
        }
        /**
         * Starts the audio export for the currently loaded song.
         * @remarks
         * This will not export or use any backing track media but will always use the synthesizer to generate the output.
         * This method works with any PlayerMode active but changing the mode during export can lead to unexpected side effects.
         *
         * See [Audio Export](https://www.alphatab.net/docs/guides/audio-export) for further guidance how to use this feature.
         *
         * @param options The export options.
         * @category Methods - Player
         * @since 1.6.0
         * @returns An exporter instance to export the audio in a streaming fashion.
         */
        async exportAudio(options) {
            if (!this.score) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'No song loaded');
            }
            let exporter;
            switch (this._actualPlayerMode) {
                case exports.PlayerMode.EnabledSynthesizer:
                    exporter = this.uiFacade.createWorkerAudioExporter(this._player.instance);
                    break;
                default:
                    exporter = this.uiFacade.createWorkerAudioExporter(null);
                    break;
            }
            const score = this.score;
            const midiFile = new MidiFile();
            const handler = new AlphaSynthMidiFileHandler(midiFile);
            const generator = new MidiFileGenerator(score, this.settings, handler);
            generator.applyTranspositionPitches = false;
            generator.generate();
            const optionsWithChannels = new AudioExportOptions();
            optionsWithChannels.soundFonts = options.soundFonts;
            optionsWithChannels.sampleRate = options.sampleRate;
            optionsWithChannels.useSyncPoints = options.useSyncPoints;
            optionsWithChannels.masterVolume = options.masterVolume;
            optionsWithChannels.metronomeVolume = options.metronomeVolume;
            optionsWithChannels.playbackRange = options.playbackRange;
            for (const [trackIndex, volume] of options.trackVolume) {
                if (trackIndex < this.score.tracks.length) {
                    const track = this.score.tracks[trackIndex];
                    optionsWithChannels.trackVolume.set(track.playbackInfo.primaryChannel, volume);
                    optionsWithChannels.trackVolume.set(track.playbackInfo.secondaryChannel, volume);
                }
            }
            for (const [trackIndex, semitones] of options.trackTranspositionPitches) {
                if (trackIndex < this.score.tracks.length) {
                    const track = this.score.tracks[trackIndex];
                    optionsWithChannels.trackTranspositionPitches.set(track.playbackInfo.primaryChannel, semitones);
                    optionsWithChannels.trackTranspositionPitches.set(track.playbackInfo.secondaryChannel, semitones);
                }
            }
            await exporter.initialize(optionsWithChannels, midiFile, generator.syncPoints, generator.transpositionPitches);
            return exporter;
        }
    }

    /**
     * @target web
     */
    class FileLoadError extends AlphaTabError {
        constructor(message, xhr) {
            super(exports.AlphaTabErrorType.General, message);
            this.xhr = xhr;
            Object.setPrototypeOf(this, FileLoadError.prototype);
        }
    }

    /**
     * The ScoreLoader enables you easy loading of Scores using all
     * available importers
     */
    class ScoreLoader {
        /**
         * Loads the given alphaTex string.
         * @param tex The alphaTex string.
         * @param settings The settings to use for parsing.
         * @returns The parsed {@see Score}.
         */
        static loadAlphaTex(tex, settings) {
            const parser = new AlphaTexImporter();
            parser.logErrors = true;
            parser.initFromString(tex, settings ?? new Settings());
            return parser.readScore();
        }
        /**
         * Loads a score asynchronously from the given datasource
         * @param path the source path to load the binary file from
         * @param success this function is called if the Score was successfully loaded from the datasource
         * @param error this function is called if any error during the loading occured.
         * @param settings settings for the score import
         * @target web
         */
        static loadScoreAsync(path, success, error, settings) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', path, true, null, null);
            xhr.responseType = 'arraybuffer';
            xhr.onreadystatechange = () => {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    const response = xhr.response;
                    if (xhr.status === 200 || (xhr.status === 0 && response)) {
                        try {
                            const buffer = xhr.response;
                            const reader = new Uint8Array(buffer);
                            const score = ScoreLoader.loadScoreFromBytes(reader, settings);
                            success(score);
                        }
                        catch (e) {
                            error(e);
                        }
                    }
                    else if (xhr.status === 0) {
                        error(new FileLoadError('You are offline!!\n Please Check Your Network.', xhr));
                    }
                    else if (xhr.status === 404) {
                        error(new FileLoadError('Requested URL not found.', xhr));
                    }
                    else if (xhr.status === 500) {
                        error(new FileLoadError('Internel Server Error.', xhr));
                    }
                    else if (xhr.statusText === 'parsererror') {
                        error(new FileLoadError('Error.\nParsing JSON Request failed.', xhr));
                    }
                    else if (xhr.statusText === 'timeout') {
                        error(new FileLoadError('Request Time out.', xhr));
                    }
                    else {
                        error(new FileLoadError(`Unknow Error: ${xhr.responseText}`, xhr));
                    }
                }
            };
            xhr.send();
        }
        /**
         * Loads the score from the given binary data.
         * @param data The binary data containing a score in any known file format.
         * @param settings The settings to use during importing.
         * @returns The loaded score.
         */
        static loadScoreFromBytes(data, settings) {
            if (!settings) {
                settings = new Settings();
            }
            const importers = Environment.buildImporters();
            Logger.debug('ScoreLoader', `Loading score from ${data.length} bytes using ${importers.length} importers`);
            let score = null;
            const bb = ByteBuffer.fromBuffer(data);
            for (const importer of importers) {
                bb.reset();
                try {
                    Logger.debug('ScoreLoader', `Importing using importer ${importer.name}`);
                    importer.init(bb, settings);
                    score = importer.readScore();
                    Logger.debug('ScoreLoader', `Score imported using ${importer.name}`);
                    break;
                }
                catch (e) {
                    if (e instanceof UnsupportedFormatError) {
                        Logger.debug('ScoreLoader', `${importer.name} does not support the file`);
                    }
                    else {
                        Logger.error('ScoreLoader', 'Score import failed due to unexpected error: ', e);
                        throw e;
                    }
                }
            }
            if (score) {
                return score;
            }
            throw new UnsupportedFormatError('No compatible importer found for file');
        }
    }

    /**
     * @target web
     */
    class BrowserMouseEventArgs {
        get isLeftMouseButton() {
            return this.mouseEvent.button === 0;
        }
        getX(relativeTo) {
            const relativeToElement = relativeTo.element;
            const bounds = relativeToElement.getBoundingClientRect();
            const left = bounds.left + relativeToElement.ownerDocument.defaultView.pageXOffset;
            return this.mouseEvent.pageX - left;
        }
        getY(relativeTo) {
            const relativeToElement = relativeTo.element;
            const bounds = relativeToElement.getBoundingClientRect();
            const top = bounds.top + relativeToElement.ownerDocument.defaultView.pageYOffset;
            return this.mouseEvent.pageY - top;
        }
        preventDefault() {
            this.mouseEvent.preventDefault();
        }
        constructor(e) {
            this.mouseEvent = e;
        }
    }

    /**
     * @target web
     */
    class HtmlElementContainer {
        get width() {
            return this.element.offsetWidth;
        }
        set width(value) {
            this.element.style.width = `${value}px`;
        }
        get scrollLeft() {
            return this.element.scrollLeft;
        }
        set scrollLeft(value) {
            this.element.scrollLeft = value;
        }
        get scrollTop() {
            return this.element.scrollTop;
        }
        set scrollTop(value) {
            this.element.scrollTop = value;
        }
        get height() {
            return this.element.offsetHeight;
        }
        set height(value) {
            if (value >= 0) {
                this.element.style.height = `${value}px`;
            }
            else {
                this.element.style.height = '100%';
            }
        }
        get isVisible() {
            return !!this.element.offsetWidth || !!this.element.offsetHeight || !!this.element.getClientRects().length;
        }
        constructor(element) {
            this._resizeListeners = 0;
            this.lastBounds = new Bounds();
            this.element = element;
            this.mouseDown = {
                on: (value) => {
                    const nativeListener = e => {
                        value(new BrowserMouseEventArgs(e));
                    };
                    this.element.addEventListener('mousedown', nativeListener, true);
                    return () => {
                        this.element.removeEventListener('mousedown', nativeListener, true);
                    };
                },
                off: (value) => {
                }
            };
            this.mouseUp = {
                on: (value) => {
                    const nativeListener = e => {
                        value(new BrowserMouseEventArgs(e));
                    };
                    this.element.addEventListener('mouseup', nativeListener, true);
                    return () => {
                        this.element.removeEventListener('mouseup', nativeListener, true);
                    };
                },
                off: (value) => {
                }
            };
            this.mouseMove = {
                on: (value) => {
                    const nativeListener = e => {
                        value(new BrowserMouseEventArgs(e));
                    };
                    this.element.addEventListener('mousemove', nativeListener, true);
                    return () => {
                        this.element.removeEventListener('mousemove', nativeListener, true);
                    };
                },
                off: (_) => {
                }
            };
            const container = this;
            this.resize = {
                on: function (value) {
                    if (container._resizeListeners === 0) {
                        HtmlElementContainer.resizeObserver.value.observe(container.element);
                    }
                    container.element.addEventListener('resize', value, true);
                    container._resizeListeners++;
                    return () => this.off(value);
                },
                off: (value) => {
                    this.element.removeEventListener('resize', value, true);
                    this._resizeListeners--;
                    if (this._resizeListeners <= 0) {
                        this._resizeListeners = 0;
                        HtmlElementContainer.resizeObserver.value.unobserve(this.element);
                    }
                }
            };
        }
        stopAnimation() {
            this.element.style.transition = 'none';
        }
        transitionToX(duration, x) {
            this.element.style.transition = `transform ${duration}ms linear`;
            this.setBounds(x, Number.NaN, Number.NaN, Number.NaN);
        }
        setBounds(x, y, w, h) {
            if (Number.isNaN(x)) {
                x = this.lastBounds.x;
            }
            if (Number.isNaN(y)) {
                y = this.lastBounds.y;
            }
            if (Number.isNaN(w)) {
                w = this.lastBounds.w;
            }
            if (Number.isNaN(h)) {
                h = this.lastBounds.h;
            }
            this.element.style.transform = `translate(${x}px, ${y}px) scale(${w}, ${h})`;
            this.element.style.transformOrigin = 'top left';
            this.lastBounds.x = x;
            this.lastBounds.y = y;
            this.lastBounds.w = w;
            this.lastBounds.h = h;
        }
        appendChild(child) {
            this.element.appendChild(child.element);
        }
        clear() {
            this.element.innerHTML = '';
        }
    }
    HtmlElementContainer.resizeObserver = new Lazy(() => new ResizeObserver((entries) => {
        for (const e of entries) {
            const evt = new CustomEvent('resize', {
                detail: e
            });
            e.target.dispatchEvent(evt);
        }
    }));

    /**
     * This small utility helps to detect whether a particular font is already loaded.
     * @target web
     */
    class FontLoadingChecker {
        constructor(families) {
            this._isStarted = false;
            this.isFontLoaded = false;
            this.fontLoaded = new EventEmitterOfT();
            this._originalFamilies = families;
            this._families = families;
        }
        checkForFontAvailability() {
            if (Environment.isRunningInWorker) {
                // no web fonts in web worker
                this.isFontLoaded = false;
                return;
            }
            if (this._isStarted) {
                return;
            }
            this._isStarted = true;
            let failCounter = 0;
            const failCounterId = window.setInterval(() => {
                Logger.warning('Rendering', `Could not load font '${this._families[0]}' within ${(failCounter + 1) * 5} seconds`, null);
                // try loading next font if there are more than 1 left
                if (this._families.length > 1) {
                    this._families.shift();
                    failCounter = 0;
                }
                else {
                    failCounter++;
                }
            }, 5000);
            Logger.debug('Font', `Start checking for font availablility: ${this._families.join(', ')}`);
            const errorHandler = (e) => {
                if (this._families.length > 1) {
                    Logger.debug('Font', `[${this._families[0]}] Loading Failed, switching to ${this._families[1]}`, e);
                    this._families.shift();
                    window.setTimeout(() => {
                        // tslint:disable-next-line: no-floating-promises
                        checkFont();
                    }, 0);
                }
                else {
                    Logger.error('Font', `[${this._originalFamilies.join(',')}] Loading Failed, rendering cannot start`, e);
                    window.clearInterval(failCounterId);
                }
            };
            const successHandler = (font) => {
                Logger.debug('Font', `[${font}] Font API signaled available`);
                this.isFontLoaded = true;
                window.clearInterval(failCounterId);
                this.fontLoaded.trigger(this._families[0]);
            };
            const checkFont = async () => {
                // Fast Path: check if one of the specified fonts is already available.
                for (const font of this._families) {
                    if (await this.isFontAvailable(font, false)) {
                        successHandler(font);
                        return;
                    }
                }
                // Slow path: Wait for fonts to be loaded sequentially
                try {
                    await document.fonts.load(`1em ${this._families[0]}`);
                }
                catch (e) {
                    errorHandler(e);
                }
                Logger.debug('Font', `[${this._families[0]}] Font API signaled loaded`);
                if (await this.isFontAvailable(this._families[0], true)) {
                    successHandler(this._families[0]);
                }
                else {
                    errorHandler('Font not available');
                }
                return true;
            };
            document.fonts.ready.then(() => {
                // tslint:disable-next-line: no-floating-promises
                checkFont();
            });
        }
        isFontAvailable(family, advancedCheck) {
            return new Promise(resolve => {
                // In some very rare occasions Chrome reports false for the font.
                // in this case we try to force some refresh and reload by creating an element with this font.
                const fontString = `1em ${family}`;
                if (document.fonts.check(fontString)) {
                    resolve(true);
                }
                else if (advancedCheck) {
                    Logger.debug('Font', `Font ${family} not available, creating test element to trigger load`);
                    const testElement = document.createElement('div');
                    testElement.style.font = fontString;
                    testElement.style.opacity = '0';
                    testElement.style.position = 'absolute';
                    testElement.style.top = '0';
                    testElement.style.left = '0';
                    testElement.innerText = `Trigger ${family} load`;
                    document.body.appendChild(testElement);
                    setTimeout(() => {
                        document.body.removeChild(testElement);
                        if (document.fonts.check(fontString)) {
                            resolve(true);
                        }
                        else {
                            resolve(false);
                        }
                    }, 200);
                }
                else {
                    resolve(false);
                }
            });
        }
    }

    /**
     * Represents a fixed size circular sample buffer that can be written to and read from.
     * @csharp_public
     */
    class CircularSampleBuffer {
        /**
         * Initializes a new instance of the {@link CircularSampleBuffer} class.
         * @param size The size.
         */
        constructor(size) {
            this._writePosition = 0;
            this._readPosition = 0;
            /**
             * Gets the number of samples written to the buffer.
             */
            this.count = 0;
            this._buffer = new Float32Array(size);
        }
        /**
         * Clears all samples written to this buffer.
         */
        clear() {
            this._readPosition = 0;
            this._writePosition = 0;
            this.count = 0;
            this._buffer = new Float32Array(this._buffer.length);
        }
        /**
         * Writes the given samples to this buffer.
         * @param data The sample array to read from.
         * @param offset
         * @param count
         * @returns
         */
        write(data, offset, count) {
            let samplesWritten = 0;
            if (count > this._buffer.length - this.count) {
                count = this._buffer.length - this.count;
            }
            const writeToEnd = Math.min(this._buffer.length - this._writePosition, count);
            this._buffer.set(data.subarray(offset, offset + writeToEnd), this._writePosition);
            this._writePosition += writeToEnd;
            this._writePosition %= this._buffer.length;
            samplesWritten += writeToEnd;
            if (samplesWritten < count) {
                this._buffer.set(data.subarray(offset + samplesWritten, offset + samplesWritten + count - samplesWritten), this._writePosition);
                this._writePosition += count - samplesWritten;
                samplesWritten = count;
            }
            this.count += samplesWritten;
            return samplesWritten;
        }
        /**
         * Reads the requested amount of samples from the buffer.
         * @param data The sample array to store the read elements.
         * @param offset The offset within the destination buffer to put the items at.
         * @param count The number of items to read from this buffer.
         * @returns The number of items actually read from the buffer.
         */
        read(data, offset, count) {
            if (count > this.count) {
                count = this.count;
            }
            let samplesRead = 0;
            const readToEnd = Math.min(this._buffer.length - this._readPosition, count);
            data.set(this._buffer.subarray(this._readPosition, this._readPosition + readToEnd), offset);
            samplesRead += readToEnd;
            this._readPosition += readToEnd;
            this._readPosition %= this._buffer.length;
            if (samplesRead < count) {
                data.set(this._buffer.subarray(this._readPosition, this._readPosition + count - samplesRead), offset + samplesRead);
                this._readPosition += count - samplesRead;
                samplesRead = count;
            }
            this.count -= samplesRead;
            return samplesRead;
        }
    }

    /**
     * @target web
     */
    class AlphaSynthWebAudioSynthOutputDevice {
        constructor(device) {
            this.isDefault = false;
            this.device = device;
        }
        get deviceId() {
            return this.device.deviceId;
        }
        get label() {
            return this.device.label;
        }
    }
    /**
     * Some shared web audio stuff.
     * @target web
     */
    class WebAudioHelper {
        static findKnownDevice(sinkId) {
            return WebAudioHelper._knownDevices.find(d => d.deviceId === sinkId);
        }
        static createAudioContext() {
            if ('AudioContext' in Environment.globalThis) {
                return new AudioContext();
            }
            if ('webkitAudioContext' in Environment.globalThis) {
                return new webkitAudioContext();
            }
            throw new AlphaTabError(exports.AlphaTabErrorType.General, 'AudioContext not found');
        }
        static async checkSinkIdSupport() {
            // https://caniuse.com/mdn-api_audiocontext_sinkid
            const context = WebAudioHelper.createAudioContext();
            if (!('setSinkId' in context)) {
                Logger.warning('WebAudio', 'Browser does not support changing the output device');
                return false;
            }
            return true;
        }
        static async enumerateOutputDevices() {
            try {
                if (!(await WebAudioHelper.checkSinkIdSupport())) {
                    return [];
                }
                // Request permissions
                try {
                    await navigator.mediaDevices.getUserMedia({ audio: true });
                }
                catch (e) {
                    // sometimes we get an error but can still enumerate, e.g. if microphone access is denied,
                    // we can still load the output devices in some cases.
                    Logger.warning('WebAudio', 'Output device permission rejected', e);
                }
                // load devices
                const devices = await navigator.mediaDevices.enumerateDevices();
                // default device candidates
                let defaultDeviceGroupId = '';
                let defaultDeviceId = '';
                const realDevices = new Map();
                for (const device of devices) {
                    if (device.kind === 'audiooutput') {
                        realDevices.set(device.groupId, new AlphaSynthWebAudioSynthOutputDevice(device));
                        // chromium has the default device as deviceID: 'default'
                        // the standard defines empty-string as default
                        if (device.deviceId === 'default' || device.deviceId === '') {
                            defaultDeviceGroupId = device.groupId;
                            defaultDeviceId = device.deviceId;
                        }
                    }
                }
                const final = Array.from(realDevices.values());
                // flag default device
                let defaultDevice = final.find(d => d.deviceId === defaultDeviceId);
                if (!defaultDevice) {
                    defaultDevice = final.find(d => d.device.groupId === defaultDeviceGroupId);
                }
                if (!defaultDevice && final.length > 0) {
                    defaultDevice = final[0];
                }
                if (defaultDevice) {
                    defaultDevice.isDefault = true;
                }
                WebAudioHelper._knownDevices = final;
                return final;
            }
            catch (e) {
                Logger.error('WebAudio', 'Failed to enumerate output devices', e);
                return [];
            }
        }
    }
    WebAudioHelper._knownDevices = [];
    /**
     * @target web
     */
    class AlphaSynthWebAudioOutputBase {
        constructor() {
            this._context = null;
            this._buffer = null;
            this._source = null;
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
        }
        get sampleRate() {
            return this._context ? this._context.sampleRate : AlphaSynthWebAudioOutputBase.PreferredSampleRate;
        }
        activate(resumedCallback) {
            if (!this._context) {
                this._context = WebAudioHelper.createAudioContext();
            }
            if (this._context.state === 'suspended' || this._context.state === 'interrupted') {
                Logger.debug('WebAudio', 'Audio Context is suspended, trying resume');
                this._context.resume().then(() => {
                    Logger.debug('WebAudio', `Audio Context resume success: state=${this._context?.state}, sampleRate:${this._context?.sampleRate}`);
                    if (resumedCallback) {
                        resumedCallback();
                    }
                }, reason => {
                    Logger.warning('WebAudio', `Audio Context resume failed: state=${this._context?.state}, sampleRate:${this._context?.sampleRate}, reason=${reason}`);
                });
            }
        }
        patchIosSampleRate() {
            const ua = navigator.userAgent;
            if (ua.indexOf('iPhone') !== -1 || ua.indexOf('iPad') !== -1) {
                const context = WebAudioHelper.createAudioContext();
                const buffer = context.createBuffer(1, 1, AlphaSynthWebAudioOutputBase.PreferredSampleRate);
                const dummy = context.createBufferSource();
                dummy.buffer = buffer;
                dummy.connect(context.destination);
                dummy.start(0);
                dummy.disconnect(0);
                // tslint:disable-next-line: no-floating-promises
                context.close();
            }
        }
        open(bufferTimeInMilliseconds) {
            this.patchIosSampleRate();
            this._context = WebAudioHelper.createAudioContext();
            const ctx = this._context;
            if (ctx.state === 'suspended') {
                this.registerResumeHandler();
            }
        }
        registerResumeHandler() {
            this._resumeHandler = (() => {
                this.activate(() => {
                    this.unregisterResumeHandler();
                });
            }).bind(this);
            document.body.addEventListener('touchend', this._resumeHandler, false);
            document.body.addEventListener('click', this._resumeHandler, false);
        }
        unregisterResumeHandler() {
            const resumeHandler = this._resumeHandler;
            if (resumeHandler) {
                document.body.removeEventListener('touchend', resumeHandler, false);
                document.body.removeEventListener('click', resumeHandler, false);
            }
        }
        play() {
            const ctx = this._context;
            this.activate();
            // create an empty buffer source (silence)
            this._buffer = ctx.createBuffer(2, AlphaSynthWebAudioOutputBase.BufferSize, ctx.sampleRate);
            this._source = ctx.createBufferSource();
            this._source.buffer = this._buffer;
            this._source.loop = true;
        }
        pause() {
            if (this._source) {
                this._source.stop(0);
                this._source.disconnect();
            }
            this._source = null;
        }
        destroy() {
            this.pause();
            this._context?.close();
            this._context = null;
            this.unregisterResumeHandler();
        }
        onSamplesPlayed(numberOfSamples) {
            this.samplesPlayed.trigger(numberOfSamples);
        }
        onSampleRequest() {
            this.sampleRequest.trigger();
        }
        onReady() {
            this.ready.trigger();
        }
        enumerateOutputDevices() {
            return WebAudioHelper.enumerateOutputDevices();
        }
        async setOutputDevice(device) {
            if (!(await WebAudioHelper.checkSinkIdSupport())) {
                return;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/setSinkId
            if (!device) {
                await this._context.setSinkId('');
            }
            else {
                await this._context.setSinkId(device.deviceId);
            }
        }
        async getOutputDevice() {
            if (!(await WebAudioHelper.checkSinkIdSupport())) {
                return null;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sinkId
            const sinkId = this._context.sinkId;
            if (typeof sinkId !== 'string' || sinkId === '' || sinkId === 'default') {
                return null;
            }
            // fast path -> cached devices list
            let device = WebAudioHelper.findKnownDevice(sinkId);
            if (device) {
                return device;
            }
            // slow path -> enumerate devices
            const allDevices = await this.enumerateOutputDevices();
            device = allDevices.find(d => d.deviceId === sinkId);
            if (device) {
                return device;
            }
            Logger.warning('WebAudio', 'Could not find output device in device list', sinkId, allDevices);
            return null;
        }
    }
    AlphaSynthWebAudioOutputBase.BufferSize = 4096;
    AlphaSynthWebAudioOutputBase.PreferredSampleRate = 44100;

    // tslint:disable: deprecation
    /**
     * This class implements a HTML5 Web Audio API based audio output device
     * for alphaSynth using the legacy ScriptProcessor node.
     * @target web
     */
    class AlphaSynthScriptProcessorOutput extends AlphaSynthWebAudioOutputBase {
        constructor() {
            super(...arguments);
            this._audioNode = null;
            this._bufferCount = 0;
            this._requestedBufferCount = 0;
            this._outputBuffer = new Float32Array(0);
        }
        open(bufferTimeInMilliseconds) {
            super.open(bufferTimeInMilliseconds);
            this._bufferCount = Math.floor((bufferTimeInMilliseconds * this.sampleRate) / 1000 / AlphaSynthWebAudioOutputBase.BufferSize);
            this._circularBuffer = new CircularSampleBuffer(AlphaSynthWebAudioOutputBase.BufferSize * this._bufferCount);
            this.onReady();
        }
        play() {
            super.play();
            const ctx = this._context;
            // create a script processor node which will replace the silence with the generated audio
            this._audioNode = ctx.createScriptProcessor(4096, 0, 2);
            this._audioNode.onaudioprocess = this.generateSound.bind(this);
            this._circularBuffer.clear();
            this.requestBuffers();
            this._source = ctx.createBufferSource();
            this._source.buffer = this._buffer;
            this._source.loop = true;
            this._source.connect(this._audioNode, 0, 0);
            this._source.start(0);
            this._audioNode.connect(ctx.destination, 0, 0);
        }
        pause() {
            super.pause();
            if (this._audioNode) {
                this._audioNode.disconnect(0);
            }
            this._audioNode = null;
        }
        addSamples(f) {
            this._circularBuffer.write(f, 0, f.length);
            this._requestedBufferCount--;
        }
        resetSamples() {
            this._circularBuffer.clear();
        }
        requestBuffers() {
            // if we fall under the half of buffers
            // we request one half
            const halfBufferCount = (this._bufferCount / 2) | 0;
            const halfSamples = halfBufferCount * AlphaSynthWebAudioOutputBase.BufferSize;
            // Issue #631: it can happen that requestBuffers is called multiple times
            // before we already get samples via addSamples, therefore we need to
            // remember how many buffers have been requested, and consider them as available.
            const bufferedSamples = this._circularBuffer.count + this._requestedBufferCount * AlphaSynthWebAudioOutputBase.BufferSize;
            if (bufferedSamples < halfSamples) {
                for (let i = 0; i < halfBufferCount; i++) {
                    this.onSampleRequest();
                }
                this._requestedBufferCount += halfBufferCount;
            }
        }
        generateSound(e) {
            const left = e.outputBuffer.getChannelData(0);
            const right = e.outputBuffer.getChannelData(1);
            const samples = left.length + right.length;
            let buffer = this._outputBuffer;
            if (buffer.length !== samples) {
                buffer = new Float32Array(samples);
                this._outputBuffer = buffer;
            }
            const samplesFromBuffer = this._circularBuffer.read(buffer, 0, Math.min(buffer.length, this._circularBuffer.count));
            let s = 0;
            const min = Math.min(left.length, samplesFromBuffer);
            for (let i = 0; i < min; i++) {
                left[i] = buffer[s++];
                right[i] = buffer[s++];
            }
            if (samplesFromBuffer < left.length) {
                for (let i = samplesFromBuffer; i < left.length; i++) {
                    left[i] = 0;
                    right[i] = 0;
                }
            }
            this.onSamplesPlayed(samplesFromBuffer / SynthConstants.AudioChannels);
            this.requestBuffers();
        }
    }

    /**
     * a WebWorker based alphaSynth which uses the given player as output.
     * @target web
     */
    class AlphaSynthWebWorkerApi {
        get output() {
            return this._output;
        }
        get isReady() {
            return this._workerIsReady && this._outputIsReady;
        }
        get isReadyForPlayback() {
            return this._workerIsReadyForPlayback;
        }
        get state() {
            return this._state;
        }
        get logLevel() {
            return Logger.logLevel;
        }
        get worker() {
            return this._synth;
        }
        set logLevel(value) {
            Logger.logLevel = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setLogLevel',
                value: value
            });
        }
        get masterVolume() {
            return this._masterVolume;
        }
        set masterVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._masterVolume = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setMasterVolume',
                value: value
            });
        }
        get metronomeVolume() {
            return this._metronomeVolume;
        }
        set metronomeVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._metronomeVolume = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setMetronomeVolume',
                value: value
            });
        }
        get countInVolume() {
            return this._countInVolume;
        }
        set countInVolume(value) {
            value = Math.max(value, SynthConstants.MinVolume);
            this._countInVolume = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setCountInVolume',
                value: value
            });
        }
        get midiEventsPlayedFilter() {
            return this._midiEventsPlayedFilter;
        }
        set midiEventsPlayedFilter(value) {
            this._midiEventsPlayedFilter = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setMidiEventsPlayedFilter',
                value: Environment.prepareForPostMessage(value)
            });
        }
        get playbackSpeed() {
            return this._playbackSpeed;
        }
        set playbackSpeed(value) {
            value = ModelUtils.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
            this._playbackSpeed = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setPlaybackSpeed',
                value: value
            });
        }
        get tickPosition() {
            return this._tickPosition;
        }
        set tickPosition(value) {
            if (value < 0) {
                value = 0;
            }
            this._tickPosition = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setTickPosition',
                value: value
            });
        }
        get timePosition() {
            return this._timePosition;
        }
        set timePosition(value) {
            if (value < 0) {
                value = 0;
            }
            this._timePosition = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setTimePosition',
                value: value
            });
        }
        get isLooping() {
            return this._isLooping;
        }
        set isLooping(value) {
            this._isLooping = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setIsLooping',
                value: value
            });
        }
        get playbackRange() {
            return this._playbackRange;
        }
        set playbackRange(value) {
            if (value) {
                if (value.startTick < 0) {
                    value.startTick = 0;
                }
                if (value.endTick < 0) {
                    value.endTick = 0;
                }
            }
            this._playbackRange = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setPlaybackRange',
                value: Environment.prepareForPostMessage(value)
            });
        }
        constructor(player, settings) {
            this._workerIsReadyForPlayback = false;
            this._workerIsReady = false;
            this._outputIsReady = false;
            this._state = PlayerState.Paused;
            this._masterVolume = 0;
            this._metronomeVolume = 0;
            this._countInVolume = 0;
            this._playbackSpeed = 0;
            this._tickPosition = 0;
            this._timePosition = 0;
            this._isLooping = false;
            this._playbackRange = null;
            this._midiEventsPlayedFilter = [];
            this.ready = new EventEmitter();
            this.readyForPlayback = new EventEmitter();
            this.finished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.soundFontLoadFailed = new EventEmitterOfT();
            this.midiLoaded = new EventEmitterOfT();
            this.midiLoadFailed = new EventEmitterOfT();
            this.stateChanged = new EventEmitterOfT();
            this.positionChanged = new EventEmitterOfT();
            this.midiEventsPlayed = new EventEmitterOfT();
            this.playbackRangeChanged = new EventEmitterOfT();
            this._workerIsReadyForPlayback = false;
            this._workerIsReady = false;
            this._outputIsReady = false;
            this._state = PlayerState.Paused;
            this._masterVolume = 0.0;
            this._metronomeVolume = 0.0;
            this._playbackSpeed = 0.0;
            this._tickPosition = 0;
            this._timePosition = 0.0;
            this._isLooping = false;
            this._playbackRange = null;
            this._output = player;
            this._output.ready.on(this.onOutputReady.bind(this));
            this._output.samplesPlayed.on(this.onOutputSamplesPlayed.bind(this));
            this._output.sampleRequest.on(this.onOutputSampleRequest.bind(this));
            this._output.open(settings.player.bufferTimeInMilliseconds);
            try {
                this._synth = Environment.createWebWorker(settings);
            }
            catch (e) {
                Logger.error('AlphaSynth', `Failed to create WebWorker: ${e}`);
            }
            this._synth.addEventListener('message', this.handleWorkerMessage.bind(this), false);
            this._synth.postMessage({
                cmd: 'alphaSynth.initialize',
                sampleRate: this._output.sampleRate,
                logLevel: settings.core.logLevel,
                bufferTimeInMilliseconds: settings.player.bufferTimeInMilliseconds
            });
            this.masterVolume = 1;
            this.playbackSpeed = 1;
            this.metronomeVolume = 0;
        }
        destroy() {
            this._synth.postMessage({
                cmd: 'alphaSynth.destroy'
            });
        }
        //
        // API communicating with the web worker
        play() {
            this._output.activate();
            this._synth.postMessage({
                cmd: 'alphaSynth.play'
            });
            return true;
        }
        pause() {
            this._synth.postMessage({
                cmd: 'alphaSynth.pause'
            });
        }
        playPause() {
            this._output.activate();
            this._synth.postMessage({
                cmd: 'alphaSynth.playPause'
            });
        }
        stop() {
            this._synth.postMessage({
                cmd: 'alphaSynth.stop'
            });
        }
        playOneTimeMidiFile(midi) {
            this._synth.postMessage({
                cmd: 'alphaSynth.playOneTimeMidiFile',
                midi: JsonConverter.midiFileToJsObject(Environment.prepareForPostMessage(midi))
            });
        }
        loadSoundFont(data, append) {
            this._synth.postMessage({
                cmd: 'alphaSynth.loadSoundFontBytes',
                data: Environment.prepareForPostMessage(data),
                append: append
            });
        }
        resetSoundFonts() {
            this._synth.postMessage({
                cmd: 'alphaSynth.resetSoundFonts'
            });
        }
        loadMidiFile(midi) {
            this._synth.postMessage({
                cmd: 'alphaSynth.loadMidi',
                midi: JsonConverter.midiFileToJsObject(Environment.prepareForPostMessage(midi))
            });
        }
        applyTranspositionPitches(transpositionPitches) {
            this._synth.postMessage({
                cmd: 'alphaSynth.applyTranspositionPitches',
                transpositionPitches: JSON.stringify(Array.from(Environment.prepareForPostMessage(transpositionPitches).entries()))
            });
        }
        setChannelTranspositionPitch(channel, semitones) {
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelTranspositionPitch',
                channel: channel,
                semitones: semitones
            });
        }
        setChannelMute(channel, mute) {
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelMute',
                channel: channel,
                mute: mute
            });
        }
        resetChannelStates() {
            this._synth.postMessage({
                cmd: 'alphaSynth.resetChannelStates'
            });
        }
        setChannelSolo(channel, solo) {
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelSolo',
                channel: channel,
                solo: solo
            });
        }
        setChannelVolume(channel, volume) {
            volume = Math.max(volume, SynthConstants.MinVolume);
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelVolume',
                channel: channel,
                volume: volume
            });
        }
        handleWorkerMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.ready':
                    this._workerIsReady = true;
                    this.checkReady();
                    break;
                case 'alphaSynth.destroyed':
                    this._synth.terminate();
                    break;
                case 'alphaSynth.readyForPlayback':
                    this._workerIsReadyForPlayback = true;
                    this.checkReadyForPlayback();
                    break;
                case 'alphaSynth.positionChanged':
                    this._timePosition = data.currentTime;
                    this._tickPosition = data.currentTick;
                    this.positionChanged.trigger(new PositionChangedEventArgs(data.currentTime, data.endTime, data.currentTick, data.endTick, data.isSeek, data.originalTempo, data.modifiedTempo));
                    break;
                case 'alphaSynth.midiEventsPlayed':
                    this.midiEventsPlayed.trigger(new MidiEventsPlayedEventArgs(data.events.map(JsonConverter.jsObjectToMidiEvent)));
                    break;
                case 'alphaSynth.playerStateChanged':
                    this._state = data.state;
                    this.stateChanged.trigger(new PlayerStateChangedEventArgs(data.state, data.stopped));
                    break;
                case 'alphaSynth.playbackRangeChanged':
                    this._playbackRange = data.playbackRange;
                    this.playbackRangeChanged.trigger(new PlaybackRangeChangedEventArgs(this._playbackRange));
                    break;
                case 'alphaSynth.finished':
                    this.finished.trigger();
                    break;
                case 'alphaSynth.soundFontLoaded':
                    this.soundFontLoaded.trigger();
                    break;
                case 'alphaSynth.soundFontLoadFailed':
                    this.soundFontLoadFailed.trigger(data.error);
                    break;
                case 'alphaSynth.midiLoaded':
                    this.checkReadyForPlayback();
                    this.midiLoaded.trigger(new PositionChangedEventArgs(data.currentTime, data.endTime, data.currentTick, data.endTick, data.isSeek, data.originalTempo, data.modifiedTempo));
                    break;
                case 'alphaSynth.midiLoadFailed':
                    this.checkReadyForPlayback();
                    this.midiLoadFailed.trigger(data.error);
                    break;
                case 'alphaSynth.output.addSamples':
                    this._output.addSamples(data.samples);
                    break;
                case 'alphaSynth.output.play':
                    this._output.play();
                    break;
                case 'alphaSynth.output.pause':
                    this._output.pause();
                    break;
                case 'alphaSynth.output.destroy':
                    this._output.destroy();
                    break;
                case 'alphaSynth.output.resetSamples':
                    this._output.resetSamples();
                    break;
            }
        }
        checkReady() {
            if (this.isReady) {
                this.ready.trigger();
            }
        }
        checkReadyForPlayback() {
            if (this.isReadyForPlayback) {
                this.readyForPlayback.trigger();
            }
        }
        //
        // output communication ( output -> worker )
        onOutputSampleRequest() {
            this._synth.postMessage({
                cmd: 'alphaSynth.output.sampleRequest'
            });
        }
        onOutputSamplesPlayed(samples) {
            this._synth.postMessage({
                cmd: 'alphaSynth.output.samplesPlayed',
                samples: samples
            });
        }
        onOutputReady() {
            this._outputIsReady = true;
            this.checkReady();
        }
        loadBackingTrack(_score) {
        }
        updateSyncPoints(_syncPoints) {
        }
    }

    /**
     * @target web
     */
    class AlphaTabWorkerScoreRenderer {
        constructor(api, settings) {
            this._width = 0;
            this.boundsLookup = null;
            this.preRender = new EventEmitterOfT();
            this.partialRenderFinished = new EventEmitterOfT();
            this.partialLayoutFinished = new EventEmitterOfT();
            this.renderFinished = new EventEmitterOfT();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
            this._api = api;
            try {
                this._worker = Environment.createWebWorker(settings);
            }
            catch (e) {
                Logger.error('Rendering', `Failed to create WebWorker: ${e}`);
                return;
            }
            this._worker.postMessage({
                cmd: 'alphaTab.initialize',
                settings: this.serializeSettingsForWorker(settings)
            });
            this._worker.addEventListener('message', this.handleWorkerMessage.bind(this));
        }
        destroy() {
            this._worker.terminate();
        }
        updateSettings(settings) {
            this._worker.postMessage({
                cmd: 'alphaTab.updateSettings',
                settings: this.serializeSettingsForWorker(settings)
            });
        }
        serializeSettingsForWorker(settings) {
            const jsObject = JsonConverter.settingsToJsObject(Environment.prepareForPostMessage(settings));
            // cut out player settings, they are only needed on UI thread side
            jsObject.delete('player');
            return jsObject;
        }
        render() {
            this._worker.postMessage({
                cmd: 'alphaTab.render'
            });
        }
        resizeRender() {
            this._worker.postMessage({
                cmd: 'alphaTab.resizeRender'
            });
        }
        renderResult(resultId) {
            this._worker.postMessage({
                cmd: 'alphaTab.renderResult',
                resultId: resultId
            });
        }
        get width() {
            return this._width;
        }
        set width(value) {
            this._width = value;
            this._worker.postMessage({
                cmd: 'alphaTab.setWidth',
                width: value
            });
        }
        handleWorkerMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            switch (cmd) {
                case 'alphaTab.preRender':
                    this.preRender.trigger(data.resize);
                    break;
                case 'alphaTab.partialRenderFinished':
                    this.partialRenderFinished.trigger(data.result);
                    break;
                case 'alphaTab.partialLayoutFinished':
                    this.partialLayoutFinished.trigger(data.result);
                    break;
                case 'alphaTab.renderFinished':
                    this.renderFinished.trigger(data.result);
                    break;
                case 'alphaTab.postRenderFinished':
                    this.boundsLookup = BoundsLookup.fromJson(data.boundsLookup, this._api.score);
                    this.boundsLookup.finish();
                    this.postRenderFinished.trigger();
                    break;
                case 'alphaTab.error':
                    this.error.trigger(data.error);
                    break;
            }
        }
        renderScore(score, trackIndexes) {
            const jsObject = score == null ? null : JsonConverter.scoreToJsObject(Environment.prepareForPostMessage(score));
            this._worker.postMessage({
                cmd: 'alphaTab.renderScore',
                score: jsObject,
                trackIndexes: Environment.prepareForPostMessage(trackIndexes),
                fontSizes: FontSizes.FontSizeLookupTables
            });
        }
    }

    /**
     * This wrapper holds all cursor related elements.
     */
    class Cursors {
        /**
         * Initializes a new instance of the {@link Cursors} class.
         * @param cursorWrapper
         * @param barCursor
         * @param beatCursor
         * @param selectionWrapper
         */
        constructor(cursorWrapper, barCursor, beatCursor, selectionWrapper) {
            this.cursorWrapper = cursorWrapper;
            this.barCursor = barCursor;
            this.beatCursor = beatCursor;
            this.selectionWrapper = selectionWrapper;
        }
    }

    /**
     * This class implements a HTML5 Web Audio API based audio output device
     * for alphaSynth using the modern Audio Worklets.
     * @target web
     */
    class AlphaSynthWebWorklet {
        static init() {
            var _a;
            if (AlphaSynthWebWorklet._isRegistered) {
                return;
            }
            AlphaSynthWebWorklet._isRegistered = true;
            registerProcessor('alphatab', (_a = class AlphaSynthWebWorkletProcessor extends AudioWorkletProcessor {
                    constructor(options) {
                        super(options);
                        this._outputBuffer = new Float32Array(0);
                        this._bufferCount = 0;
                        this._requestedBufferCount = 0;
                        this._isStopped = false;
                        Logger.debug('WebAudio', 'creating processor');
                        this._bufferCount = Math.floor((options.processorOptions.bufferTimeInMilliseconds * sampleRate) /
                            1000 /
                            _a.BufferSize);
                        this._circularBuffer = new CircularSampleBuffer(_a.BufferSize * this._bufferCount);
                        this.port.onmessage = this.handleMessage.bind(this);
                    }
                    handleMessage(e) {
                        const data = e.data;
                        const cmd = data.cmd;
                        switch (cmd) {
                            case AlphaSynthWorkerSynthOutput.CmdOutputAddSamples:
                                const f = data.samples;
                                this._circularBuffer.write(f, 0, f.length);
                                this._requestedBufferCount--;
                                break;
                            case AlphaSynthWorkerSynthOutput.CmdOutputResetSamples:
                                this._circularBuffer.clear();
                                break;
                            case AlphaSynthWorkerSynthOutput.CmdOutputStop:
                                this._isStopped = true;
                                break;
                        }
                    }
                    process(_inputs, outputs, _parameters) {
                        if (outputs.length !== 1 && outputs[0].length !== 2) {
                            return false;
                        }
                        const left = outputs[0][0];
                        const right = outputs[0][1];
                        if (!left || !right) {
                            return true;
                        }
                        const samples = left.length + right.length;
                        let buffer = this._outputBuffer;
                        if (buffer.length !== samples) {
                            buffer = new Float32Array(samples);
                            this._outputBuffer = buffer;
                        }
                        const samplesFromBuffer = this._circularBuffer.read(buffer, 0, Math.min(buffer.length, this._circularBuffer.count));
                        let s = 0;
                        const min = Math.min(left.length, samplesFromBuffer);
                        for (let i = 0; i < min; i++) {
                            left[i] = buffer[s++];
                            right[i] = buffer[s++];
                        }
                        if (samplesFromBuffer < left.length) {
                            for (let i = samplesFromBuffer; i < left.length; i++) {
                                left[i] = 0;
                                right[i] = 0;
                            }
                        }
                        this.port.postMessage({
                            cmd: AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed,
                            samples: samplesFromBuffer / SynthConstants.AudioChannels
                        });
                        this.requestBuffers();
                        return this._circularBuffer.count > 0 || !this._isStopped;
                    }
                    requestBuffers() {
                        // if we fall under the half of buffers
                        // we request one half
                        const halfBufferCount = (this._bufferCount / 2) | 0;
                        const halfSamples = halfBufferCount * _a.BufferSize;
                        // Issue #631: it can happen that requestBuffers is called multiple times
                        // before we already get samples via addSamples, therefore we need to
                        // remember how many buffers have been requested, and consider them as available.
                        const bufferedSamples = this._circularBuffer.count +
                            this._requestedBufferCount * _a.BufferSize;
                        if (bufferedSamples < halfSamples) {
                            for (let i = 0; i < halfBufferCount; i++) {
                                this.port.postMessage({
                                    cmd: AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest
                                });
                            }
                            this._requestedBufferCount += halfBufferCount;
                        }
                    }
                },
                _a.BufferSize = 4096,
                _a));
        }
    }
    AlphaSynthWebWorklet._isRegistered = false;
    /**
     * This class implements a HTML5 Web Audio API based audio output device
     * for alphaSynth. It can be controlled via a JS API.
     * @target web
     */
    class AlphaSynthAudioWorkletOutput extends AlphaSynthWebAudioOutputBase {
        constructor(settings) {
            super();
            this._worklet = null;
            this._bufferTimeInMilliseconds = 0;
            this._settings = settings;
        }
        open(bufferTimeInMilliseconds) {
            super.open(bufferTimeInMilliseconds);
            this._bufferTimeInMilliseconds = bufferTimeInMilliseconds;
            this.onReady();
        }
        play() {
            super.play();
            const ctx = this._context;
            // create a script processor node which will replace the silence with the generated audio
            Environment.createAudioWorklet(ctx, this._settings).then(() => {
                this._worklet = new AudioWorkletNode(ctx, 'alphatab', {
                    numberOfOutputs: 1,
                    outputChannelCount: [2],
                    processorOptions: {
                        bufferTimeInMilliseconds: this._bufferTimeInMilliseconds
                    }
                });
                this._worklet.port.onmessage = this.handleMessage.bind(this);
                this._source.connect(this._worklet);
                this._source.start(0);
                this._worklet.connect(ctx.destination);
            }, reason => {
                Logger.error('WebAudio', `Audio Worklet creation failed: reason=${reason}`);
            });
        }
        handleMessage(e) {
            const data = e.data;
            const cmd = data.cmd;
            switch (cmd) {
                case AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed:
                    this.onSamplesPlayed(data.samples);
                    break;
                case AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest:
                    this.onSampleRequest();
                    break;
            }
        }
        pause() {
            super.pause();
            if (this._worklet) {
                this._worklet.port.postMessage({
                    cmd: AlphaSynthWorkerSynthOutput.CmdOutputStop
                });
                this._worklet.port.onmessage = null;
                this._worklet.disconnect();
            }
            this._worklet = null;
        }
        addSamples(f) {
            this._worklet?.port.postMessage({
                cmd: AlphaSynthWorkerSynthOutput.CmdOutputAddSamples,
                samples: Environment.prepareForPostMessage(f)
            });
        }
        resetSamples() {
            this._worklet?.port.postMessage({
                cmd: AlphaSynthWorkerSynthOutput.CmdOutputResetSamples
            });
        }
    }

    /**
     * An IContainer implementation which can be used for cursors and select ranges
     * where browser scaling is relevant.
     *
     * The problem is that with having 1x1 pixel elements which are sized then to the actual size with a
     * scale transform this cannot be combined properly with a browser zoom.
     *
     * The browser will apply first the browser zoom to the 1x1px element and then apply the scale leaving it always
     * at full scale instead of a 50% browser zoom.
     *
     * This is solved in this container by scaling the element first up to a higher degree (as specified)
     * so that the browser can do a scaling according to typical zoom levels and then the scaling will work.
     * @target web
     */
    class ScalableHtmlElementContainer extends HtmlElementContainer {
        constructor(element, xscale, yscale) {
            super(element);
            this._xscale = xscale;
            this._yscale = yscale;
        }
        get width() {
            return this.element.offsetWidth / this._xscale;
        }
        set width(value) {
            this.element.style.width = `${value * this._xscale}px`;
        }
        get height() {
            return this.element.offsetHeight / this._yscale;
        }
        set height(value) {
            if (value >= 0) {
                this.element.style.height = `${value * this._yscale}px`;
            }
            else {
                this.element.style.height = '100%';
            }
        }
        setBounds(x, y, w, h) {
            if (Number.isNaN(x)) {
                x = this.lastBounds.x;
            }
            if (Number.isNaN(y)) {
                y = this.lastBounds.y;
            }
            if (Number.isNaN(w)) {
                w = this.lastBounds.w;
            }
            else {
                w = w / this._xscale;
            }
            if (Number.isNaN(h)) {
                h = this.lastBounds.h;
            }
            else {
                h = h / this._yscale;
            }
            this.element.style.transform = `translate(${x}px, ${y}px) scale(${w}, ${h})`;
            this.element.style.transformOrigin = 'top left';
            this.lastBounds.x = x;
            this.lastBounds.y = y;
            this.lastBounds.w = w;
            this.lastBounds.h = h;
        }
    }

    /**
     * @target web
     */
    class AudioElementBackingTrackSynthOutput {
        constructor() {
            // fake rate
            this.sampleRate = 44100;
            this._updateInterval = 0;
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.timeUpdate = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
        }
        get backingTrackDuration() {
            const duration = this.audioElement.duration ?? 0;
            return Number.isFinite(duration) ? duration * 1000 : 0;
        }
        get playbackRate() {
            return this.audioElement.playbackRate;
        }
        set playbackRate(value) {
            this.audioElement.playbackRate = value;
        }
        get masterVolume() {
            return this.audioElement.volume;
        }
        set masterVolume(value) {
            this.audioElement.volume = value;
        }
        seekTo(time) {
            this.audioElement.currentTime = time / 1000;
        }
        loadBackingTrack(backingTrack) {
            if (this.audioElement?.src) {
                URL.revokeObjectURL(this.audioElement.src);
            }
            const blob = new Blob([backingTrack.rawAudioFile]);
            // https://html.spec.whatwg.org/multipage/media.html#loading-the-media-resource
            // Step 8. resets the playbackRate, we need to remember and restore it. 
            const playbackRate = this.audioElement.playbackRate;
            this.audioElement.src = URL.createObjectURL(blob);
            this.audioElement.playbackRate = playbackRate;
        }
        open(_bufferTimeInMilliseconds) {
            const audioElement = document.createElement('audio');
            audioElement.style.display = 'none';
            document.body.appendChild(audioElement);
            audioElement.addEventListener('seeked', () => {
                this.updatePosition();
            });
            audioElement.addEventListener('timeupdate', () => {
                this.updatePosition();
            });
            this.audioElement = audioElement;
            this.ready.trigger();
        }
        updatePosition() {
            const timePos = this.audioElement.currentTime * 1000;
            this.timeUpdate.trigger(timePos);
        }
        play() {
            this.audioElement.play();
            this._updateInterval = window.setInterval(() => {
                this.updatePosition();
            }, 50);
        }
        destroy() {
            const audioElement = this.audioElement;
            if (audioElement) {
                document.body.removeChild(audioElement);
            }
        }
        pause() {
            this.audioElement.pause();
            window.clearInterval(this._updateInterval);
        }
        addSamples(_samples) {
        }
        resetSamples() {
        }
        activate() {
        }
        async enumerateOutputDevices() {
            return WebAudioHelper.enumerateOutputDevices();
        }
        async setOutputDevice(device) {
            if (!(await WebAudioHelper.checkSinkIdSupport())) {
                return;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/setSinkId
            if (!device) {
                await this.audioElement.setSinkId('');
            }
            else {
                await this.audioElement.setSinkId(device.deviceId);
            }
        }
        async getOutputDevice() {
            if (!(await WebAudioHelper.checkSinkIdSupport())) {
                return null;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sinkId
            const sinkId = this.audioElement.sinkId;
            if (typeof sinkId !== 'string' || sinkId === '' || sinkId === 'default') {
                return null;
            }
            // fast path -> cached devices list
            let device = WebAudioHelper.findKnownDevice(sinkId);
            if (device) {
                return device;
            }
            // slow path -> enumerate devices
            const allDevices = await this.enumerateOutputDevices();
            device = allDevices.find(d => d.deviceId === sinkId);
            if (device) {
                return device;
            }
            Logger.warning('WebAudio', 'Could not find output device in device list', sinkId, allDevices);
            return null;
        }
    }

    /**
     * @target web
     */
    class AlphaSynthAudioExporterWorkerApi {
        constructor(synthWorker, ownsWorker) {
            this._promise = null;
            this._exporterId = AlphaSynthAudioExporterWorkerApi._nextExporterId++;
            this._worker = synthWorker;
            this._ownsWorker = ownsWorker;
        }
        async initialize(options, midi, syncPoints, transpositionPitches) {
            const onmessage = this.handleWorkerMessage.bind(this);
            this._worker.worker.addEventListener('message', onmessage, false);
            this._unsubscribe = () => {
                this._worker.worker.removeEventListener('message', onmessage, false);
            };
            this._promise = Promise.withResolvers();
            this._worker.worker.postMessage({
                cmd: 'alphaSynth.exporter.initialize',
                exporterId: this._exporterId,
                options: Environment.prepareForPostMessage(options),
                midi: JsonConverter.midiFileToJsObject(Environment.prepareForPostMessage(midi)),
                syncPoints: Environment.prepareForPostMessage(syncPoints),
                transpositionPitches: Environment.prepareForPostMessage(transpositionPitches)
            });
            await this._promise.promise;
        }
        handleWorkerMessage(e) {
            const data = e.data;
            // for us?
            if (data.exporterId !== this._exporterId) {
                return;
            }
            const cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.exporter.initialized':
                    this._promise?.resolve(null);
                    this._promise = null;
                    break;
                case 'alphaSynth.exporter.error':
                    this._promise?.reject(data.error);
                    this._promise = null;
                    break;
                case 'alphaSynth.exporter.rendered':
                    this._promise?.resolve(data.chunk);
                    this._promise = null;
                    break;
                case 'alphaSynth.destroyed':
                    this._promise?.reject(new AlphaTabError(exports.AlphaTabErrorType.General, 'Worker was destroyed'));
                    this._promise = null;
                    break;
            }
        }
        async render(milliseconds) {
            if (this._promise) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'There is already an ongoing operation, wait for initialize to complete before requesting render');
            }
            this._promise = Promise.withResolvers();
            this._worker.worker.postMessage({
                cmd: 'alphaSynth.exporter.render',
                exporterId: this._exporterId,
                milliseconds: milliseconds
            });
            return (await this._promise.promise);
        }
        destroy() {
            this._worker.worker.postMessage({
                cmd: 'alphaSynth.exporter.destroy',
                exporterId: this._exporterId
            });
            this._unsubscribe();
            if (this._ownsWorker) {
                this._worker.destroy();
            }
        }
        [Symbol.dispose]() {
            this.destroy();
        }
    }
    AlphaSynthAudioExporterWorkerApi._nextExporterId = 1;

    /**
     * @target web
     */
    var ResultState;
    (function (ResultState) {
        ResultState[ResultState["LayoutDone"] = 0] = "LayoutDone";
        ResultState[ResultState["RenderRequested"] = 1] = "RenderRequested";
        ResultState[ResultState["RenderDone"] = 2] = "RenderDone";
        ResultState[ResultState["Detached"] = 3] = "Detached";
    })(ResultState || (ResultState = {}));
    /**
     * @target web
     */
    class BrowserUiFacade {
        get resizeThrottle() {
            return 10;
        }
        get canRender() {
            return this.areAllFontsLoaded();
        }
        areAllFontsLoaded() {
            let isAnyNotLoaded = false;
            for (const checker of this._fontCheckers.values()) {
                if (!checker.isFontLoaded) {
                    isAnyNotLoaded = true;
                }
            }
            if (isAnyNotLoaded) {
                return false;
            }
            Logger.debug('Font', `All fonts loaded: ${this._fontCheckers.size}`);
            return true;
        }
        onFontLoaded(family) {
            FontSizes.generateFontLookup(family);
            if (this.areAllFontsLoaded()) {
                this.canRenderChanged.trigger();
            }
        }
        constructor(rootElement) {
            this._fontCheckers = new Map();
            this._contents = null;
            this._file = null;
            this._totalResultCount = 0;
            this._initialTrackIndexes = null;
            this._barToElementLookup = new Map();
            this._resultIdToElementLookup = new Map();
            this.rootContainerBecameVisible = new EventEmitter();
            this.canRenderChanged = new EventEmitter();
            this._highlightedElements = [];
            this._scrollContainer = null;
            if (Environment.webPlatform !== exports.WebPlatform.Browser && Environment.webPlatform !== exports.WebPlatform.BrowserModule) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Usage of AlphaTabApi is only possible in browser environments. For usage in node use the Low Level APIs');
            }
            rootElement.classList.add('alphaTab');
            this.rootContainer = new HtmlElementContainer(rootElement);
            this.areWorkersSupported = 'Worker' in window;
            this._intersectionObserver = new IntersectionObserver(this.onElementVisibilityChanged.bind(this), {
                threshold: [0, 0.01, 1]
            });
            this._intersectionObserver.observe(rootElement);
        }
        onElementVisibilityChanged(entries) {
            for (const e of entries) {
                const htmlElement = e.target;
                if (htmlElement === this.rootContainer.element) {
                    if (e.isIntersecting) {
                        this.rootContainerBecameVisible.trigger();
                        this._intersectionObserver.unobserve(this.rootContainer.element);
                    }
                }
                else if ('layoutResultId' in htmlElement && this._api.settings.core.enableLazyLoading) {
                    const placeholder = htmlElement;
                    if (e.isIntersecting) {
                        // missing result or result not matching layout -> request render
                        if (placeholder.renderedResultId !== placeholder.layoutResultId) {
                            if (this._resultIdToElementLookup.has(placeholder.layoutResultId)) {
                                if (placeholder.resultState !== ResultState.RenderRequested) {
                                    placeholder.resultState = ResultState.RenderRequested;
                                    this._api.renderer.renderResult(placeholder.layoutResultId);
                                }
                            }
                            else {
                                htmlElement.replaceChildren();
                            }
                        }
                        else if (placeholder.resultState === ResultState.Detached) {
                            htmlElement.replaceChildren(...placeholder.renderedResult);
                            placeholder.resultState = ResultState.RenderDone;
                        }
                    }
                    else if (placeholder.resultState === ResultState.RenderDone) {
                        placeholder.resultState = ResultState.Detached;
                        placeholder.replaceChildren();
                    }
                }
            }
        }
        createWorkerRenderer() {
            return new AlphaTabWorkerScoreRenderer(this._api, this._api.settings);
        }
        initialize(api, raw) {
            this._api = api;
            let settings;
            if (raw instanceof Settings) {
                settings = raw;
            }
            else {
                settings = JsonConverter.jsObjectToSettings(raw);
            }
            const dataAttributes = this.getDataAttributes();
            SettingsSerializer.fromJson(settings, dataAttributes);
            if (settings.notation.notationMode === exports.NotationMode.SongBook) {
                settings.setSongBookModeSettings();
            }
            api.settings = settings;
            this.setupFontCheckers(settings);
            this._initialTrackIndexes = this.parseTracks(settings.core.tracks);
            this._contents = '';
            const element = api.container;
            if (settings.core.tex) {
                this._contents = element.element.innerHTML;
                element.element.innerHTML = '';
            }
            this.createStyleElements(settings);
            this._file = settings.core.file;
        }
        setupFontCheckers(settings) {
            this.registerFontChecker(settings.display.resources.copyrightFont);
            this.registerFontChecker(settings.display.resources.effectFont);
            this.registerFontChecker(settings.display.resources.fingeringFont);
            this.registerFontChecker(settings.display.resources.graceFont);
            this.registerFontChecker(settings.display.resources.markerFont);
            this.registerFontChecker(settings.display.resources.tablatureFont);
            this.registerFontChecker(settings.display.resources.titleFont);
            this.registerFontChecker(settings.display.resources.wordsFont);
            this.registerFontChecker(settings.display.resources.barNumberFont);
            this.registerFontChecker(settings.display.resources.fretboardNumberFont);
            this.registerFontChecker(settings.display.resources.subTitleFont);
        }
        registerFontChecker(font) {
            if (!this._fontCheckers.has(font.families.join(', '))) {
                const checker = new FontLoadingChecker(font.families);
                this._fontCheckers.set(font.families.join(', '), checker);
                checker.fontLoaded.on(this.onFontLoaded.bind(this));
                checker.checkForFontAvailability();
            }
        }
        destroy() {
            this.rootContainer.element.innerHTML = '';
            const webFont = this._webFont;
            webFont.usages--;
            if (webFont.usages <= 0) {
                webFont.element.remove();
                BrowserUiFacade._registeredWebFonts.delete(webFont.hash);
            }
        }
        createCanvasElement() {
            const canvasElement = document.createElement('div');
            canvasElement.classList.add('at-surface', `at${this._webFont.fontSuffix}`);
            canvasElement.style.fontSize = '0';
            canvasElement.style.overflow = 'hidden';
            canvasElement.style.lineHeight = '0';
            canvasElement.style.position = 'relative';
            return new HtmlElementContainer(canvasElement);
        }
        triggerEvent(container, name, details = null, originalEvent) {
            const element = container.element;
            name = `alphaTab.${name}`;
            const e = document.createEvent('CustomEvent');
            const originalMouseEvent = originalEvent
                ? originalEvent.mouseEvent
                : null;
            e.initCustomEvent(name, false, false, details);
            if (originalMouseEvent) {
                e.originalEvent = originalMouseEvent;
            }
            element.dispatchEvent(e);
            if (window && 'jQuery' in window) {
                const jquery = window.jQuery;
                const args = [];
                args.push(details);
                if (originalMouseEvent) {
                    args.push(originalMouseEvent);
                }
                jquery(element).trigger(name, args);
            }
        }
        load(data, success, error) {
            if (data instanceof Score) {
                success(data);
                return true;
            }
            if (data instanceof ArrayBuffer) {
                const byteArray = new Uint8Array(data);
                success(ScoreLoader.loadScoreFromBytes(byteArray, this._api.settings));
                return true;
            }
            if (data instanceof Uint8Array) {
                success(ScoreLoader.loadScoreFromBytes(data, this._api.settings));
                return true;
            }
            if (typeof data === 'string') {
                ScoreLoader.loadScoreAsync(data, success, error, this._api.settings);
                return true;
            }
            return false;
        }
        loadSoundFont(data, append) {
            if (!this._api.player) {
                return false;
            }
            if (data instanceof ArrayBuffer) {
                this._api.player.loadSoundFont(new Uint8Array(data), append);
                return true;
            }
            if (data instanceof Uint8Array) {
                this._api.player.loadSoundFont(data, append);
                return true;
            }
            if (typeof data === 'string') {
                this._api.loadSoundFontFromUrl(data, append);
                return true;
            }
            return false;
        }
        initialRender() {
            this._api.renderer.preRender.on((_) => {
                this._totalResultCount = 0;
                this._resultIdToElementLookup.clear();
                this._barToElementLookup.clear();
            });
            const initialRender = () => {
                // rendering was possibly delayed due to invisible element
                // in this case we need the correct width for autosize
                this._api.renderer.width = this.rootContainer.width | 0;
                this._api.renderer.updateSettings(this._api.settings);
                if (this._contents) {
                    this._api.tex(this._contents, this._initialTrackIndexes ?? undefined);
                    this._initialTrackIndexes = null;
                }
                else if (this._file) {
                    ScoreLoader.loadScoreAsync(this._file, s => {
                        this._api.renderScore(s, this._initialTrackIndexes ?? undefined);
                        this._initialTrackIndexes = null;
                    }, e => {
                        this._api.onError(e);
                    }, this._api.settings);
                }
            };
            if (!this.rootContainer.isVisible) {
                this.rootContainerBecameVisible.on(initialRender);
            }
            else {
                initialRender();
            }
        }
        createStyleElements(settings) {
            const root = this._api.container.element.ownerDocument;
            BrowserUiFacade.createSharedStyleElement(root);
            // SmuFl Font Specific style
            const smuflFontSources = settings.core.smuflFontSources ?? CoreSettings.buildDefaultSmuflFontSources(settings.core.fontDirectory);
            // create a simple unique hash for the font source definition
            // as data urls might be used we don't want to just use the plain strings.
            const hash = BrowserUiFacade.cyrb53(smuflFontSources.values());
            // reuse existing style if available
            const registeredWebFonts = BrowserUiFacade._registeredWebFonts;
            if (registeredWebFonts.has(hash)) {
                const webFont = registeredWebFonts.get(hash);
                webFont.usages++;
                webFont.checker.fontLoaded.on(this.onFontLoaded.bind(this));
                this._webFont = webFont;
                return;
            }
            const fontSuffix = registeredWebFonts.size === 0 ? '' : String(registeredWebFonts.size);
            const familyName = `alphaTab${fontSuffix}`;
            const src = Array.from(smuflFontSources.entries())
                .map(e => `url(${JSON.stringify(e[1])}) format('${BrowserUiFacade.cssFormat(e[0])}')`)
                .join(',');
            const css = `
            @font-face {
                font-display: block;
                font-family: '${familyName}';
                src: ${src};
                font-weight: normal;
                font-style: normal;
            }
            .at-surface.at${fontSuffix} .at {
                font-family: '${familyName}';
                speak: none;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
                font-size: ${Environment.MusicFontSize}px;
                overflow: visible !important;
            }`;
            const styleElement = root.createElement('style');
            styleElement.id = `alphaTabStyle${fontSuffix}`;
            styleElement.innerHTML = css;
            root.getElementsByTagName('head').item(0).appendChild(styleElement);
            const checker = new FontLoadingChecker([familyName]);
            checker.fontLoaded.on(this.onFontLoaded.bind(this));
            this._fontCheckers.set(familyName, checker);
            checker.checkForFontAvailability();
            settings.display.resources.smuflFont = new Font(familyName, Environment.MusicFontSize, FontStyle.Plain, FontWeight.Regular);
            const webFont = {
                hash,
                element: styleElement,
                fontSuffix,
                usages: 1,
                checker
            };
            registeredWebFonts.set(hash, webFont);
            this._webFont = webFont;
        }
        static cssFormat(format) {
            switch (format) {
                case exports.FontFileFormat.EmbeddedOpenType:
                    return 'embedded-opentype';
                case exports.FontFileFormat.Woff:
                    return 'woff';
                case exports.FontFileFormat.Woff2:
                    return 'woff2';
                case exports.FontFileFormat.OpenType:
                    return 'opentype';
                case exports.FontFileFormat.TrueType:
                    return 'truetype';
                case exports.FontFileFormat.Svg:
                    return 'svg';
            }
        }
        /**
         * cyrb53 (c) 2018 bryc (github.com/bryc)
         * License: Public domain (or MIT if needed). Attribution appreciated.
         * A fast and simple 53-bit string hash function with decent collision resistance.
         * Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity
         * @param str
         * @param seed
         * @returns
         */
        static cyrb53(strings, seed = 0) {
            let h1 = 0xdeadbeef ^ seed;
            let h2 = 0x41c6ce57 ^ seed;
            for (const str of strings) {
                for (let i = 0; i < str.length; i++) {
                    const ch = str.charCodeAt(i);
                    h1 = Math.imul(h1 ^ ch, 2654435761);
                    h2 = Math.imul(h2 ^ ch, 1597334677);
                }
            }
            h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507);
            h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);
            h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507);
            h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);
            return 4294967296 * (2097151 & h2) + (h1 >>> 0);
        }
        /**
         * Creates the default CSS styles used across all alphaTab instances.
         * @target web
         * @internal
         */
        static createSharedStyleElement(root) {
            let styleElement = root.getElementById('alphaTabStyle');
            if (!styleElement) {
                styleElement = document.createElement('style');
                styleElement.id = 'alphaTabStyleShared';
                const css = `
                .at-surface * {
                    cursor: default;
                    vertical-align: top;
                    overflow: visible;
                }
                .at-surface-svg text {
                    dominant-baseline: central;
                    white-space:pre;
                }`;
                styleElement.innerHTML = css;
                document.getElementsByTagName('head').item(0).appendChild(styleElement);
            }
        }
        parseTracks(tracksData) {
            if (!tracksData) {
                return [];
            }
            const tracks = [];
            // decode string
            if (typeof tracksData === 'string') {
                try {
                    if (tracksData === 'all') {
                        return [-1];
                    }
                    tracksData = JSON.parse(tracksData);
                }
                catch (e) {
                    tracksData = [0];
                }
            }
            // decode array
            if (typeof tracksData === 'number') {
                tracks.push(tracksData);
            }
            else if ('length' in tracksData) {
                const length = tracksData.length;
                const array = tracksData;
                for (let i = 0; i < length; i++) {
                    const item = array[i];
                    let value = 0;
                    if (typeof item === 'number') {
                        value = item;
                    }
                    else if ('index' in item) {
                        value = item.index;
                    }
                    else {
                        value = Number.parseInt(item.toString());
                    }
                    if (value >= 0 || value === -1) {
                        tracks.push(value);
                    }
                }
            }
            else if ('index' in tracksData) {
                tracks.push(tracksData.index);
            }
            return tracks;
        }
        getDataAttributes() {
            const dataAttributes = new Map();
            const element = this._api.container.element;
            if (element.dataset) {
                for (const key of Object.keys(element.dataset)) {
                    let value = element.dataset[key];
                    try {
                        const stringValue = value;
                        value = JSON.parse(stringValue);
                    }
                    catch (e) {
                        if (value === '') {
                            value = null;
                        }
                    }
                    dataAttributes.set(key, value);
                }
            }
            else {
                for (let i = 0; i < element.attributes.length; i++) {
                    const attr = element.attributes.item(i);
                    const nodeName = attr.nodeName;
                    if (nodeName.startsWith('data-')) {
                        const keyParts = nodeName.substr(5).split('-');
                        let key = keyParts[0];
                        for (let j = 1; j < keyParts.length; j++) {
                            key += keyParts[j].substr(0, 1).toUpperCase() + keyParts[j].substr(1);
                        }
                        let value = attr.nodeValue;
                        try {
                            value = JSON.parse(value);
                        }
                        catch (e) {
                            if (value === '') {
                                value = null;
                            }
                        }
                        dataAttributes.set(key, value);
                    }
                }
            }
            return dataAttributes;
        }
        beginUpdateRenderResults(renderResult) {
            if (!this._resultIdToElementLookup.has(renderResult.id)) {
                return;
            }
            const placeholder = this._resultIdToElementLookup.get(renderResult.id);
            const body = renderResult.renderResult;
            if (typeof body === 'string') {
                placeholder.innerHTML = body;
            }
            else if ('nodeType' in body) {
                placeholder.replaceChildren(body);
            }
            placeholder.resultState = ResultState.RenderDone;
            placeholder.renderedResultId = renderResult.id;
            placeholder.renderedResult = Array.from(placeholder.children);
        }
        beginAppendRenderResults(renderResult) {
            const canvasElement = this._api.canvasElement.element;
            // null result indicates that the rendering finished
            if (!renderResult) {
                // so we remove elements that might be from a previous render session
                while (canvasElement.childElementCount > this._totalResultCount) {
                    if (this._api.settings.core.enableLazyLoading) {
                        this._intersectionObserver.unobserve(canvasElement.lastChild);
                    }
                    canvasElement.removeChild(canvasElement.lastElementChild);
                }
            }
            else {
                let placeholder;
                if (this._totalResultCount < canvasElement.childElementCount) {
                    placeholder = canvasElement.childNodes.item(this._totalResultCount);
                }
                else {
                    placeholder = document.createElement('div');
                    canvasElement.appendChild(placeholder);
                }
                placeholder.style.zIndex = '1';
                placeholder.style.position = 'absolute';
                placeholder.style.left = `${renderResult.x}px`;
                placeholder.style.top = `${renderResult.y}px`;
                placeholder.style.width = `${renderResult.width}px`;
                placeholder.style.height = `${renderResult.height}px`;
                placeholder.style.display = 'inline-block';
                placeholder.layoutResultId = renderResult.id;
                placeholder.resultState = ResultState.LayoutDone;
                placeholder.renderedResultId = undefined;
                placeholder.renderedResult = undefined;
                this._resultIdToElementLookup.set(renderResult.id, placeholder);
                // remember which bar is contained in which node for faster lookup
                // on highlight/unhighlight
                for (let i = renderResult.firstMasterBarIndex; i <= renderResult.lastMasterBarIndex; i++) {
                    if (i >= 0) {
                        this._barToElementLookup.set(i, placeholder);
                    }
                }
                if (this._api.settings.core.enableLazyLoading) {
                    // re-observe to fire event
                    this._intersectionObserver.unobserve(placeholder);
                    this._intersectionObserver.observe(placeholder);
                }
                this._totalResultCount++;
            }
        }
        /**
         * This method creates the player. It detects browser compatibility and
         * initializes a alphaSynth version for the client.
         */
        createWorkerPlayer() {
            let player = null;
            const supportsScriptProcessor = 'ScriptProcessorNode' in window;
            const supportsAudioWorklets = window.isSecureContext && 'AudioWorkletNode' in window;
            if (supportsAudioWorklets && this._api.settings.player.outputMode === exports.PlayerOutputMode.WebAudioAudioWorklets) {
                Logger.debug('Player', 'Will use webworkers for synthesizing and web audio api with worklets for playback');
                player = new AlphaSynthWebWorkerApi(new AlphaSynthAudioWorkletOutput(this._api.settings), this._api.settings);
            }
            else if (supportsScriptProcessor) {
                Logger.debug('Player', 'Will use webworkers for synthesizing and web audio api with ScriptProcessor for playback');
                player = new AlphaSynthWebWorkerApi(new AlphaSynthScriptProcessorOutput(), this._api.settings);
            }
            if (!player) {
                Logger.error('Player', 'Player requires webworkers and web audio api, browser unsupported', null);
            }
            else {
                player.ready.on(() => {
                    if (this._api.settings.player.soundFont) {
                        this._api.loadSoundFontFromUrl(this._api.settings.player.soundFont, false);
                    }
                });
            }
            return player;
        }
        createWorkerAudioExporter(synth) {
            const needNewWorker = synth === null || !(synth instanceof AlphaSynthWebWorkerApi);
            if (needNewWorker) {
                // nowadays we require browsers with workers
                synth = this.createWorkerPlayer();
            }
            return new AlphaSynthAudioExporterWorkerApi(synth, needNewWorker);
        }
        beginInvoke(action) {
            window.requestAnimationFrame(() => {
                action();
            });
        }
        highlightElements(groupId, masterBarIndex) {
            const element = this._barToElementLookup.get(masterBarIndex);
            if (element) {
                const elementsToHighlight = element.getElementsByClassName(groupId);
                for (let i = 0; i < elementsToHighlight.length; i++) {
                    elementsToHighlight.item(i).classList.add('at-highlight');
                    this._highlightedElements.push(elementsToHighlight.item(i));
                }
            }
        }
        removeHighlights() {
            const highlightedElements = this._highlightedElements;
            if (!highlightedElements) {
                return;
            }
            for (const element of highlightedElements) {
                element.classList.remove('at-highlight');
            }
            this._highlightedElements = [];
        }
        destroyCursors() {
            const element = this._api.container.element;
            const cursorWrapper = element.querySelector('.at-cursors');
            element.removeChild(cursorWrapper);
        }
        createCursors() {
            const element = this._api.container.element;
            const cursorWrapper = document.createElement('div');
            cursorWrapper.classList.add('at-cursors');
            const selectionWrapper = document.createElement('div');
            selectionWrapper.classList.add('at-selection');
            const barCursorContainer = this.createScalingElement();
            const beatCursorContainer = this.createScalingElement();
            const barCursor = barCursorContainer.element;
            barCursor.classList.add('at-cursor-bar');
            const beatCursor = beatCursorContainer.element;
            beatCursor.classList.add('at-cursor-beat');
            // required css styles
            element.style.position = 'relative';
            element.style.textAlign = 'left';
            cursorWrapper.style.position = 'absolute';
            cursorWrapper.style.zIndex = '1000';
            cursorWrapper.style.display = 'inline';
            cursorWrapper.style.pointerEvents = 'none';
            selectionWrapper.style.position = 'absolute';
            barCursor.style.position = 'absolute';
            barCursor.style.left = '0';
            barCursor.style.top = '0';
            barCursor.style.willChange = 'transform';
            barCursorContainer.width = 1;
            barCursorContainer.height = 1;
            barCursorContainer.setBounds(0, 0, 1, 1);
            beatCursor.style.position = 'absolute';
            beatCursor.style.transition = 'all 0s linear';
            beatCursor.style.left = '0';
            beatCursor.style.top = '0';
            beatCursor.style.willChange = 'transform';
            beatCursorContainer.width = 3;
            beatCursorContainer.height = 1;
            beatCursorContainer.setBounds(0, 0, 1, 1);
            // add cursors to UI
            element.insertBefore(cursorWrapper, element.firstChild);
            cursorWrapper.appendChild(selectionWrapper);
            cursorWrapper.appendChild(barCursor);
            cursorWrapper.appendChild(beatCursor);
            return new Cursors(new HtmlElementContainer(cursorWrapper), barCursorContainer, beatCursorContainer, new HtmlElementContainer(selectionWrapper));
        }
        getOffset(scrollContainer, container) {
            const element = container.element;
            const bounds = element.getBoundingClientRect();
            let top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
            let left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
            if (scrollContainer) {
                const scrollElement = scrollContainer.element;
                const nodeName = scrollElement.nodeName.toLowerCase();
                if (nodeName !== 'html' && nodeName !== 'body') {
                    const scrollElementOffset = this.getOffset(null, scrollContainer);
                    top = top + scrollElement.scrollTop - scrollElementOffset.y;
                    left = left + scrollElement.scrollLeft - scrollElementOffset.x;
                }
            }
            const b = new Bounds();
            b.x = left;
            b.y = top;
            b.w = bounds.width;
            b.h = bounds.height;
            return b;
        }
        getScrollContainer() {
            if (this._scrollContainer) {
                return this._scrollContainer;
            }
            let scrollElement = 
            // tslint:disable-next-line: strict-type-predicates
            typeof this._api.settings.player.scrollElement === 'string'
                ? document.querySelector(this._api.settings.player.scrollElement)
                : this._api.settings.player.scrollElement;
            const nodeName = scrollElement.nodeName.toLowerCase();
            if (nodeName === 'html' || nodeName === 'body') {
                // https://github.com/CoderLine/alphaTab/issues/205
                // https://github.com/CoderLine/alphaTab/issues/354
                // https://dev.opera.com/articles/fixing-the-scrolltop-bug/
                if ('scrollingElement' in document) {
                    scrollElement = document.scrollingElement;
                }
                else {
                    const userAgent = navigator.userAgent;
                    if (userAgent.indexOf('WebKit') !== -1) {
                        scrollElement = document.body;
                    }
                    else {
                        scrollElement = document.documentElement;
                    }
                }
            }
            this._scrollContainer = new HtmlElementContainer(scrollElement);
            return this._scrollContainer;
        }
        createSelectionElement() {
            return this.createScalingElement();
        }
        createScalingElement() {
            const element = document.createElement('div');
            element.style.position = 'absolute';
            // to typical browser zoom levels are:
            // Chromium: 25,33,50,67,75,80,90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500
            // Firefox: 30, 50, 67, 80, 90, 100, 110, 120, 133, 150, 170, 200, 240, 300, 400, 500
            // with having a 100x100 scaling container we should be able to provide appropriate scaling
            const container = new ScalableHtmlElementContainer(element, 100, 100);
            container.width = 1;
            container.height = 1;
            container.setBounds(0, 0, 1, 1);
            return container;
        }
        scrollToY(element, scrollTargetY, speed) {
            this.internalScrollToY(element.element, scrollTargetY, speed);
        }
        scrollToX(element, scrollTargetY, speed) {
            this.internalScrollToX(element.element, scrollTargetY, speed);
        }
        internalScrollToY(element, scrollTargetY, speed) {
            if (this._api.settings.player.nativeBrowserSmoothScroll) {
                element.scrollTo({
                    top: scrollTargetY,
                    behavior: 'smooth'
                });
            }
            else {
                const startY = element.scrollTop;
                const diff = scrollTargetY - startY;
                let start = 0;
                const step = (x) => {
                    if (start === 0) {
                        start = x;
                    }
                    const time = x - start;
                    const percent = Math.min(time / speed, 1);
                    element.scrollTop = (startY + diff * percent) | 0;
                    if (time < speed) {
                        window.requestAnimationFrame(step);
                    }
                };
                window.requestAnimationFrame(step);
            }
        }
        internalScrollToX(element, scrollTargetX, speed) {
            if (this._api.settings.player.nativeBrowserSmoothScroll) {
                element.scrollTo({
                    left: scrollTargetX,
                    behavior: 'smooth'
                });
            }
            else {
                const startX = element.scrollLeft;
                const diff = scrollTargetX - startX;
                let start = 0;
                const step = (t) => {
                    if (start === 0) {
                        start = t;
                    }
                    const time = t - start;
                    const percent = Math.min(time / speed, 1);
                    element.scrollLeft = (startX + diff * percent) | 0;
                    if (time < speed) {
                        window.requestAnimationFrame(step);
                    }
                };
                window.requestAnimationFrame(step);
            }
        }
        createBackingTrackPlayer() {
            return new BackingTrackPlayer(new AudioElementBackingTrackSynthOutput(), this._api.settings.player.bufferTimeInMilliseconds);
        }
    }
    BrowserUiFacade._registeredWebFonts = new Map();

    /**
     * Represents the progress of any data being loaded.
     */
    class ProgressEventArgs {
        /**
         * Initializes a new instance of the {@link ProgressEventArgs} class.
         * @param loaded
         * @param total
         */
        constructor(loaded, total) {
            this.loaded = loaded;
            this.total = total;
        }
    }

    /**
     * @target web
     */
    class AlphaTabApi extends AlphaTabApiBase {
        /**
         * Initializes a new instance of the {@link AlphaTabApi} class.
         * @param element The HTML element into which alphaTab should be initialized.
         * @param settings The settings to use.
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'), { display: { scale: 1.2 }});
         * ```
         */
        constructor(element, options) {
            super(new BrowserUiFacade(element), options);
            /**
             * This event is fired when the SoundFont is being loaded.
             * @remarks
             * This event is fired when the SoundFont is being loaded and reports the progress accordingly.
             *
             * @eventProperty
             * @category Events - Player
             * @since 0.9.4
             *
             * @example
             * JavaScript
             * ```js
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
             * api.soundFontLoad.on((e) => {
             *     updateProgress(e.loaded, e.total);
             * });
             * ```
             */
            this.soundFontLoad = new EventEmitterOfT();
        }
        /**
         * @inheritdoc
         */
        tex(tex, tracks) {
            const browser = this.uiFacade;
            super.tex(tex, browser.parseTracks(tracks));
        }
        /**
         * Opens a popup window with the rendered music notation for printing.
         * @param width An optional custom width as CSS width that should be used. Best is to use a CSS width that is suitable for your preferred page size.
         * @param additionalSettings An optional parameter to specify additional setting values which should be respected during printing ({@since 1.2.0})
         * @remarks
         * Opens a popup window with the rendered music notation for printing. The default display of alphaTab in the browser is not very
         * suitable for printing. The items are lazy loaded, the width can be dynamic, and the scale might be better suitable for screens.
         * This function opens a popup window which is filled with a by-default A4 optimized view of the rendered score:
         *
         * * Lazy loading is disabled
         * * The scale is reduced to 0.8
         * * The stretch force is reduced to 0.8
         * * The width is optimized to A4. Portrait if the page-layout is used, landscape if the horizontal-layout is used.
         *
         * @category Methods - Core
         * @since 0.9.4
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.print();
         * api.print(undefined, { display: { barsPerRow: 5 } });
         * ```
         */
        print(width, additionalSettings = null) {
            // prepare a popup window for printing (a4 width, window height, centered)
            const preview = window.open('', '', 'width=0,height=0');
            const a4 = preview.document.createElement('div');
            if (width) {
                a4.style.width = width;
            }
            else {
                if (this.settings.display.layoutMode === exports.LayoutMode.Horizontal) {
                    a4.style.width = '297mm';
                }
                else {
                    a4.style.width = '210mm';
                }
            }
            // the style is a workaround for browser having problems with printing using absolute positions.
            preview.document.write(`
        <!DOCTYPE html>
        <html>
          <head>
            <style>
            .at-surface {
                width: auto !important;
                height: auto !important;
            }
            .at-surface > div {
                position: relative!important;
                left: auto !important;
                top: auto !important;
                break-inside: avoid;
            }
            </style>
          </head>
          <body></body>
        </html>
        `);
            const score = this.score;
            if (score) {
                if (score.artist && score.title) {
                    preview.document.title = `${score.title} - ${score.artist}`;
                }
                else if (score.title) {
                    preview.document.title = `${score.title}`;
                }
            }
            preview.document.body.appendChild(a4);
            const dualScreenLeft = typeof window.screenLeft !== 'undefined' ? window.screenLeft : window.left;
            const dualScreenTop = typeof window.screenTop !== 'undefined' ? window.screenTop : window.top;
            const screenWidth = 'innerWidth' in window
                ? window.innerWidth
                : 'clientWidth' in document.documentElement
                    ? document.documentElement.clientWidth
                    : window.screen.width;
            const screenHeight = 'innerHeight' in window
                ? window.innerHeight
                : 'clientHeight' in document.documentElement
                    ? document.documentElement.clientHeight
                    : window.screen.height;
            const w = a4.offsetWidth + 50;
            const h = window.innerHeight;
            const left = ((screenWidth / 2) | 0) - ((w / 2) | 0) + dualScreenLeft;
            const top = ((screenHeight / 2) | 0) - ((h / 2) | 0) + dualScreenTop;
            preview.resizeTo(w, h);
            preview.moveTo(left, top);
            preview.focus();
            // render alphaTab
            const settings = JsonConverter.jsObjectToSettings(JsonConverter.settingsToJsObject(this.settings));
            settings.core.enableLazyLoading = false;
            settings.core.useWorkers = true;
            settings.core.file = null;
            settings.core.tracks = null;
            settings.player.enableCursor = false;
            settings.player.playerMode = exports.PlayerMode.Disabled;
            settings.player.enableElementHighlighting = false;
            settings.player.enableUserInteraction = false;
            settings.player.soundFont = null;
            settings.display.scale = 0.8;
            settings.display.stretchForce = 0.8;
            SettingsSerializer.fromJson(settings, additionalSettings);
            const alphaTab = new AlphaTabApi(a4, settings);
            preview.onunload = () => {
                alphaTab.destroy();
            };
            alphaTab.renderer.postRenderFinished.on(() => {
                preview.print();
            });
            alphaTab.renderTracks(this.tracks);
        }
        /**
         * Generates an SMF1.0 file and downloads it
         * @remarks
         * Generates a SMF1.0 compliant MIDI file of the currently loaded song and starts the download of it.
         * Please be aware that SMF1.0 does not support bends per note which might result in wrong bend effects
         * in case multiple bends are applied on the same beat (e.g. two notes bending or vibrato + bends).
         *
         * @category Methods - Core
         * @since 1.3.0
         * @example
         * JavaScript
         * ```js
         * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'));
         * api.downloadMidi();
         * ```
         */
        downloadMidi(format = MidiFileFormat.SingleTrackMultiChannel) {
            if (!this.score) {
                return;
            }
            const midiFile = new MidiFile();
            midiFile.format = format;
            const handler = new AlphaSynthMidiFileHandler(midiFile, true);
            const generator = new MidiFileGenerator(this.score, this.settings, handler);
            generator.generate();
            const binary = midiFile.toBinary();
            const fileName = !this.score.title ? 'File.mid' : `${this.score.title}.mid`;
            const dlLink = document.createElement('a');
            dlLink.download = fileName;
            const blob = new Blob([binary], {
                type: 'audio/midi'
            });
            const url = URL.createObjectURL(blob);
            dlLink.href = url;
            dlLink.style.display = 'none';
            document.body.appendChild(dlLink);
            dlLink.click();
            document.body.removeChild(dlLink);
        }
        /**
         * @inheritdoc
         */
        changeTrackMute(tracks, mute) {
            const trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackMute(trackList, mute);
        }
        /**
         * @inheritdoc
         */
        changeTrackSolo(tracks, solo) {
            const trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackSolo(trackList, solo);
        }
        /**
         * @inheritdoc
         */
        changeTrackVolume(tracks, volume) {
            const trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackVolume(trackList, volume);
        }
        trackIndexesToTracks(trackIndexes) {
            if (!this.score) {
                return [];
            }
            const tracks = [];
            if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
                for (const track of this.score.tracks) {
                    tracks.push(track);
                }
            }
            else {
                for (const index of trackIndexes) {
                    if (index >= 0 && index < this.score.tracks.length) {
                        tracks.push(this.score.tracks[index]);
                    }
                }
            }
            return tracks;
        }
        /**
         * Triggers a load of the soundfont from the given URL.
         * @param url The URL from which to load the soundfont
         * @param append Whether to fully replace or append the data from the given soundfont.
         * @category Methods - Player
         * @since 0.9.4
         */
        loadSoundFontFromUrl(url, append) {
            const player = this.player;
            if (!player) {
                return;
            }
            Logger.debug('AlphaSynth', `Start loading Soundfont from url ${url}`);
            const request = new XMLHttpRequest();
            request.open('GET', url, true, null, null);
            request.responseType = 'arraybuffer';
            request.onload = _ => {
                const buffer = new Uint8Array(request.response);
                this.loadSoundFont(buffer, append);
            };
            request.onerror = e => {
                Logger.error('AlphaSynth', `Loading failed: ${e.message}`);
                player.soundFontLoadFailed.trigger(new FileLoadError(e.message, request));
            };
            request.onprogress = e => {
                Logger.debug('AlphaSynth', `Soundfont downloading: ${e.loaded}/${e.total} bytes`);
                const args = new ProgressEventArgs(e.loaded, e.total);
                this.soundFontLoad.trigger(args);
                this.uiFacade.triggerEvent(this.container, 'soundFontLoad', args);
            };
            request.send();
        }
    }

    /**
     * @target web
     * @deprecated Migrate to {@link AlphaTabApi}.
     */
    class JQueryAlphaTab {
        constructor() {
            this._initListeners = [];
        }
        exec(element, method, args) {
            if (typeof method !== 'string') {
                args = [method];
                method = 'init';
            }
            if (method.charCodeAt(0) === 95 || method === 'exec') {
                return null;
            }
            const jElement = new jQuery(element);
            const context = jElement.data('alphaTab');
            if (method === 'destroy' && !context) {
                return null;
            }
            if (method !== 'init' && !context) {
                throw new Error('alphaTab not initialized');
            }
            // biome-ignore lint/complexity/noBannedTypes: Special use within jQuery plugin
            const apiMethod = this[method];
            if (apiMethod) {
                const realArgs = [jElement, context].concat(args);
                return apiMethod.apply(this, realArgs);
            }
            Logger.error('Api', `Method '${method}' does not exist on jQuery.alphaTab`);
            return null;
        }
        init(element, context, options) {
            if (!context) {
                context = new AlphaTabApi(element[0], options);
                element.data('alphaTab', context);
                for (const listener of this._initListeners) {
                    listener(element, context, options);
                }
            }
        }
        destroy(element, context) {
            element.removeData('alphaTab');
            context.destroy();
        }
        print(element, context, width, additionalSettings) {
            context.print(width, additionalSettings);
        }
        load(element, context, data, tracks) {
            return context.load(data, tracks);
        }
        render(element, context) {
            context.render();
        }
        renderScore(element, context, score, tracks) {
            context.renderScore(score, tracks);
        }
        renderTracks(element, context, tracks) {
            context.renderTracks(tracks);
        }
        invalidate(element, context) {
            context.render();
        }
        tex(element, context, tex, tracks) {
            context.tex(tex, tracks);
        }
        muteTrack(element, context, tracks, mute) {
            context.changeTrackMute(tracks, mute);
        }
        soloTrack(element, context, tracks, solo) {
            context.changeTrackSolo(tracks, solo);
        }
        trackVolume(element, context, tracks, volume) {
            context.changeTrackVolume(tracks, volume);
        }
        loadSoundFont(element, context, value, append) {
            context.loadSoundFont(value, append);
        }
        resetSoundFonts(element, context) {
            context.resetSoundFonts();
        }
        pause(element, context) {
            context.pause();
        }
        play(element, context) {
            return context.play();
        }
        playPause(element, context) {
            context.playPause();
        }
        stop(element, context) {
            context.stop();
        }
        api(element, context) {
            return context;
        }
        player(element, context) {
            return context.player;
        }
        isReadyForPlayback(element, context) {
            return context.isReadyForPlayback;
        }
        playerState(element, context) {
            return context.playerState;
        }
        masterVolume(element, context, masterVolume) {
            if (typeof masterVolume === 'number') {
                context.masterVolume = masterVolume;
            }
            return context.masterVolume;
        }
        metronomeVolume(element, context, metronomeVolume) {
            if (typeof metronomeVolume === 'number') {
                context.metronomeVolume = metronomeVolume;
            }
            return context.metronomeVolume;
        }
        countInVolume(element, context, countInVolume) {
            if (typeof countInVolume === 'number') {
                context.countInVolume = countInVolume;
            }
            return context.countInVolume;
        }
        midiEventsPlayedFilter(element, context, midiEventsPlayedFilter) {
            if (Array.isArray(midiEventsPlayedFilter)) {
                context.midiEventsPlayedFilter = midiEventsPlayedFilter;
            }
            return context.midiEventsPlayedFilter;
        }
        playbackSpeed(element, context, playbackSpeed) {
            if (typeof playbackSpeed === 'number') {
                context.playbackSpeed = playbackSpeed;
            }
            return context.playbackSpeed;
        }
        tickPosition(element, context, tickPosition) {
            if (typeof tickPosition === 'number') {
                context.tickPosition = tickPosition;
            }
            return context.tickPosition;
        }
        timePosition(element, context, timePosition) {
            if (typeof timePosition === 'number') {
                context.timePosition = timePosition;
            }
            return context.timePosition;
        }
        loop(element, context, loop) {
            if (typeof loop === 'boolean') {
                context.isLooping = loop;
            }
            return context.isLooping;
        }
        renderer(element, context) {
            return context.renderer;
        }
        score(element, context) {
            return context.score;
        }
        settings(element, context) {
            return context.settings;
        }
        tracks(element, context) {
            return context.tracks;
        }
        _oninit(listener) {
            this._initListeners.push(listener);
        }
        static restore(selector) {
            new jQuery(selector).empty().removeData('alphaTab');
        }
    }

    /**
     * A canvas implementation storing SVG data
     */
    class SvgCanvas {
        constructor() {
            this.buffer = '';
            this._currentPath = '';
            this._currentPathIsEmpty = true;
            this.scale = 1;
            this.color = new Color(255, 255, 255, 0xff);
            this.lineWidth = 1;
            this.font = new Font('Arial', 10, FontStyle.Plain);
            this.textAlign = TextAlign.Left;
            this.textBaseline = TextBaseline.Top;
        }
        destroy() {
        }
        beginRender(width, height) {
            this.scale = this.settings.display.scale;
            this.buffer = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="${width | 0}px" height="${height | 0}px" class="at-surface-svg">\n`;
            this._currentPath = '';
            this._currentPathIsEmpty = true;
            this.textBaseline = TextBaseline.Top;
        }
        beginGroup(identifier) {
            this.buffer += `<g class="${identifier}">`;
        }
        endGroup() {
            this.buffer += '</g>';
        }
        endRender() {
            this.buffer += '</svg>';
            return this.buffer;
        }
        fillRect(x, y, w, h) {
            if (w > 0) {
                this.buffer += `<rect x="${(x * this.scale) | 0}" y="${(y * this.scale) | 0}" width="${w * this.scale}" height="${h * this.scale}" fill="${this.color.rgba}" />\n`;
            }
        }
        strokeRect(x, y, w, h) {
            const blurOffset = (this.lineWidth * this.scale) % 2 === 0 ? 0 : 0.5;
            this.buffer += `<rect x="${((x * this.scale) | 0) + blurOffset}" y="${((y * this.scale) | 0) + blurOffset}" width="${w * this.scale}" height="${h * this.scale}" stroke="${this.color.rgba}"`;
            if (this.lineWidth !== 1) {
                this.buffer += ` stroke-width="${this.lineWidth * this.scale}"`;
            }
            this.buffer += ' fill="transparent" />\n';
        }
        beginPath() {
        }
        closePath() {
            this._currentPath += ' z';
        }
        moveTo(x, y) {
            this._currentPath += ` M${x * this.scale},${y * this.scale}`;
        }
        lineTo(x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` L${x * this.scale},${y * this.scale}`;
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` Q${cpx * this.scale},${cpy * this.scale},${x * this.scale},${y * this.scale}`;
        }
        bezierCurveTo(cp1X, cp1Y, cp2X, cp2Y, x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` C${cp1X * this.scale},${cp1Y * this.scale},${cp2X * this.scale},${cp2Y * this.scale},${x * this.scale},${y * this.scale}`;
        }
        fillCircle(x, y, radius) {
            this._currentPathIsEmpty = false;
            x *= this.scale;
            y *= this.scale;
            radius *= this.scale;
            //
            // M0,250 A1,1 0 0,0 500,250 A1,1 0 0,0 0,250 z
            this._currentPath += ` M${x - radius},${y} A1,1 0 0,0 ${x + radius},${y} A1,1 0 0,0 ${x - radius},${y} z`;
            this.fill();
        }
        strokeCircle(x, y, radius) {
            this._currentPathIsEmpty = false;
            x *= this.scale;
            y *= this.scale;
            radius *= this.scale;
            //
            // M0,250 A1,1 0 0,0 500,250 A1,1 0 0,0 0,250 z
            this._currentPath += ` M${x - radius},${y} A1,1 0 0,0 ${x + radius},${y} A1,1 0 0,0 ${x - radius},${y} z`;
            this.stroke();
        }
        fill() {
            if (!this._currentPathIsEmpty) {
                this.buffer += `<path d="${this._currentPath}"`;
                if (this.color.rgba !== '#000000') {
                    this.buffer += ` fill="${this.color.rgba}"`;
                }
                this.buffer += ' style="stroke: none"/>';
            }
            this._currentPath = '';
            this._currentPathIsEmpty = true;
        }
        stroke() {
            if (!this._currentPathIsEmpty) {
                let s = `<path d="${this._currentPath}" stroke="${this.color.rgba}"`;
                if (this.lineWidth !== 1 || this.scale !== 1) {
                    s += ` stroke-width="${this.lineWidth * this.scale}"`;
                }
                s += ' style="fill: none" />';
                this.buffer += s;
            }
            this._currentPath = '';
            this._currentPathIsEmpty = true;
        }
        fillText(text, x, y) {
            if (text === '') {
                return;
            }
            let s = `<text x="${(x * this.scale) | 0}" y="${(y * this.scale) | 0}" style='stroke: none; font:${this.font.toCssString(this.settings.display.scale)}; ${this.getSvgBaseLine()}'`;
            if (this.color.rgba !== '#000000') {
                s += ` fill="${this.color.rgba}"`;
            }
            if (this.textAlign !== TextAlign.Left) {
                s += ` text-anchor="${this.getSvgTextAlignment(this.textAlign)}"`;
            }
            s += `>${SvgCanvas.escapeText(text)}</text>`;
            this.buffer += s;
        }
        static escapeText(text) {
            return text
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
        }
        getSvgTextAlignment(textAlign) {
            switch (textAlign) {
                case TextAlign.Left:
                    return 'start';
                case TextAlign.Center:
                    return 'middle';
                case TextAlign.Right:
                    return 'end';
            }
            return '';
        }
        getSvgBaseLine() {
            switch (this.textBaseline) {
                case TextBaseline.Top:
                    return 'dominant-baseline: hanging';
                case TextBaseline.Bottom:
                    return 'dominant-baseline: ideographic';
                // case TextBaseline.Middle:
                default:
                    // middle is set as default on the SVG tag via css
                    return '';
            }
        }
        measureText(text) {
            if (!text) {
                return new MeasuredText(0, 0);
            }
            return FontSizes.measureString(text, this.font.families, this.font.size * this.scale, this.font.style, this.font.weight);
        }
        onRenderFinished() {
            // nothing to do
            return null;
        }
        beginRotate(centerX, centerY, angle) {
            this.buffer += `<g transform="translate(${centerX * this.scale} ,${centerY * this.scale}) rotate( ${angle})">`;
        }
        endRotate() {
            this.buffer += '</g>';
        }
    }

    /**
     * This SVG canvas renders the music symbols by adding a CSS class 'at' to all elements.
     */
    class CssFontSvgCanvas extends SvgCanvas {
        fillMusicFontSymbol(x, y, relativeScale, symbol, centerAtPosition) {
            if (symbol === MusicFontSymbol.None) {
                return;
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, `&#${symbol};`, centerAtPosition);
        }
        fillMusicFontSymbols(x, y, relativeScale, symbols, centerAtPosition) {
            let s = '';
            for (const symbol of symbols) {
                if (symbol !== MusicFontSymbol.None) {
                    s += `&#${symbol};`;
                }
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, s, centerAtPosition);
        }
        fillMusicFontSymbolText(x, y, relativeScale, symbols, centerAtPosition) {
            x *= this.scale;
            y *= this.scale;
            this.buffer += `<g transform="translate(${x} ${y})" class="at" ><text`;
            const scale = this.scale * relativeScale;
            if (scale !== 1) {
                this.buffer += ` style="font-size: ${scale * 100}%; stroke:none"`;
            }
            else {
                this.buffer += ' style="stroke:none"';
            }
            if (this.color.rgba !== '#000000') {
                this.buffer += ` fill="${this.color.rgba}"`;
            }
            if (centerAtPosition) {
                this.buffer += ` text-anchor="${this.getSvgTextAlignment(TextAlign.Center)}"`;
            }
            this.buffer += `>${symbols}</text></g>`;
        }
    }

    /**
     * This is the base public class for creating factories providing BarRenderers
     */
    class BarRendererFactory {
        constructor() {
            this.isInsideBracket = true;
            this.isRelevantForBoundsLookup = true;
            this.hideOnMultiTrack = false;
            this.hideOnPercussionTrack = false;
        }
        canCreate(track, staff) {
            return !this.hideOnPercussionTrack || !staff.isPercussion;
        }
    }

    /**
     * Lists the different position modes for {@link BarRendererBase.getBeatX}
     */
    var BeatXPosition;
    (function (BeatXPosition) {
        /**
         * Gets the pre-notes position which is located before the accidentals
         */
        BeatXPosition[BeatXPosition["PreNotes"] = 0] = "PreNotes";
        /**
         * Gets the on-notes position which is located after the accidentals but before the note heads.
         */
        BeatXPosition[BeatXPosition["OnNotes"] = 1] = "OnNotes";
        /**
         * Gets the middle-notes position which is located after in the middle the note heads.
         */
        BeatXPosition[BeatXPosition["MiddleNotes"] = 2] = "MiddleNotes";
        /**
         * Gets position of the stem for this beat
         */
        BeatXPosition[BeatXPosition["Stem"] = 3] = "Stem";
        /**
         * Get the post-notes position which is located at after the note heads.
         */
        BeatXPosition[BeatXPosition["PostNotes"] = 4] = "PostNotes";
        /**
         * Get the end-beat position which is located at the end of the beat. This position is almost
         * equal to the pre-notes position of the next beat.
         */
        BeatXPosition[BeatXPosition["EndBeat"] = 5] = "EndBeat";
    })(BeatXPosition || (BeatXPosition = {}));

    /**
     * This glyph allows to group several other glyphs to be
     * drawn at the same x position
     */
    class GlyphGroup extends Glyph {
        constructor() {
            super(...arguments);
            this.glyphs = null;
        }
        get isEmpty() {
            return !this.glyphs || this.glyphs.length === 0;
        }
        doLayout() {
            if (!this.glyphs || this.glyphs.length === 0) {
                this.width = 0;
                return;
            }
            let w = 0;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                const g = this.glyphs[i];
                g.renderer = this.renderer;
                g.doLayout();
                w = Math.max(w, g.width);
            }
            this.width = w;
        }
        addGlyph(g) {
            if (!this.glyphs) {
                this.glyphs = [];
            }
            if (this.renderer) {
                g.renderer = this.renderer;
            }
            this.glyphs.push(g);
        }
        paint(cx, cy, canvas) {
            const glyphs = this.glyphs;
            if (!glyphs || glyphs.length === 0) {
                return;
            }
            for (const g of glyphs) {
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class LeftToRightLayoutingGlyphGroup extends GlyphGroup {
        constructor() {
            super(0, 0);
            this.glyphs = [];
        }
        doLayout() {
        }
        addGlyph(g) {
            g.x = this.width;
            g.renderer = this.renderer;
            g.doLayout();
            this.width = g.x + g.width;
            super.addGlyph(g);
        }
    }

    /**
     * A helper to apply element styles in a specific rendering scope via the `using` keyword
     */
    class ElementStyleHelper {
        static score(canvas, element, score, forceDefault = false) {
            if (!score.style && !forceDefault) {
                return undefined;
            }
            const defaultColor = ElementStyleHelper.scoreDefaultColor(canvas.settings.display.resources, element);
            return new ElementStyleScope(canvas, element, score.style, defaultColor);
        }
        static scoreColor(res, element, score) {
            const defaultColor = ElementStyleHelper.scoreDefaultColor(res, element);
            if (score.style && score.style.colors.has(element)) {
                return score.style.colors.get(element) ?? defaultColor;
            }
            return undefined;
        }
        static scoreDefaultColor(res, element) {
            const defaultColor = res.mainGlyphColor;
            return defaultColor;
        }
        static bar(canvas, element, bar, forceDefault = false) {
            if (!bar.style && !forceDefault) {
                return undefined;
            }
            let defaultColor = canvas.settings.display.resources.mainGlyphColor;
            switch (element) {
                case BarSubElement.StandardNotationRepeats:
                case BarSubElement.GuitarTabsRepeats:
                case BarSubElement.SlashRepeats:
                case BarSubElement.NumberedRepeats:
                case BarSubElement.StandardNotationClef:
                case BarSubElement.GuitarTabsClef:
                case BarSubElement.StandardNotationKeySignature:
                case BarSubElement.NumberedKeySignature:
                case BarSubElement.StandardNotationTimeSignature:
                case BarSubElement.GuitarTabsTimeSignature:
                case BarSubElement.SlashTimeSignature:
                case BarSubElement.NumberedTimeSignature:
                    break;
                case BarSubElement.StandardNotationBarLines:
                case BarSubElement.GuitarTabsBarLines:
                case BarSubElement.SlashBarLines:
                case BarSubElement.NumberedBarLines:
                    defaultColor = canvas.settings.display.resources.barSeparatorColor;
                    break;
                case BarSubElement.StandardNotationBarNumber:
                case BarSubElement.SlashBarNumber:
                case BarSubElement.NumberedBarNumber:
                case BarSubElement.GuitarTabsBarNumber:
                    defaultColor = canvas.settings.display.resources.barNumberColor;
                    break;
                case BarSubElement.StandardNotationStaffLine:
                case BarSubElement.GuitarTabsStaffLine:
                case BarSubElement.SlashStaffLine:
                case BarSubElement.NumberedStaffLine:
                    defaultColor = canvas.settings.display.resources.staffLineColor;
                    break;
            }
            return new ElementStyleScope(canvas, element, bar.style, defaultColor);
        }
        static voice(canvas, element, voice, forceDefault = false) {
            if (!voice.style && !forceDefault) {
                return undefined;
            }
            const defaultColor = voice.index === 0
                ? canvas.settings.display.resources.mainGlyphColor
                : canvas.settings.display.resources.secondaryGlyphColor;
            return new ElementStyleScope(canvas, element, voice.style, defaultColor);
        }
        static trackColor(res, element, track) {
            const defaultColor = ElementStyleHelper.trackDefaultColor(res, element);
            if (track.style && track.style.colors.has(element)) {
                return track.style.colors.get(element) ?? defaultColor;
            }
            return undefined;
        }
        static trackDefaultColor(res, element) {
            let defaultColor = res.mainGlyphColor;
            switch (element) {
                case TrackSubElement.TrackName:
                case TrackSubElement.SystemSeparator:
                case TrackSubElement.StringTuning:
                    break;
                case TrackSubElement.BracesAndBrackets:
                    defaultColor = res.barSeparatorColor;
                    break;
            }
            return defaultColor;
        }
        static track(canvas, element, track, forceDefault = false) {
            if (!track.style && !forceDefault) {
                return undefined;
            }
            const defaultColor = ElementStyleHelper.trackDefaultColor(canvas.settings.display.resources, element);
            return new ElementStyleScope(canvas, element, track.style, defaultColor);
        }
        static beatColor(res, element, beat) {
            const defaultColor = ElementStyleHelper.beatDefaultColor(res, element, beat);
            if (beat.style && beat.style.colors.has(element)) {
                return beat.style.colors.get(element) ?? defaultColor;
            }
            return undefined;
        }
        static beatDefaultColor(res, element, beat) {
            const defaultColor = beat.voice.index === 0 ? res.mainGlyphColor : res.secondaryGlyphColor;
            return defaultColor;
        }
        static beat(canvas, element, beat, forceDefault = false) {
            if (!beat.style && !forceDefault) {
                return undefined;
            }
            const defaultColor = ElementStyleHelper.beatDefaultColor(canvas.settings.display.resources, element, beat);
            return new ElementStyleScope(canvas, element, beat.style, defaultColor);
        }
        static noteColor(res, element, note) {
            const defaultColor = ElementStyleHelper.noteDefaultColor(res, element, note);
            if (note.style && note.style.colors.has(element)) {
                return note.style.colors.get(element) ?? defaultColor;
            }
            return undefined;
        }
        static noteDefaultColor(res, element, note) {
            const defaultColor = note.beat.voice.index === 0 ? res.mainGlyphColor : res.secondaryGlyphColor;
            return defaultColor;
        }
        static note(canvas, element, note, forceDefault = false) {
            if (!note.style && !forceDefault) {
                return undefined;
            }
            const defaultColor = note.beat.voice.index === 0
                ? canvas.settings.display.resources.mainGlyphColor
                : canvas.settings.display.resources.secondaryGlyphColor;
            return new ElementStyleScope(canvas, element, note.style, defaultColor);
        }
    }
    /**
     * A helper class for applying elements styles to the canvas and restoring the previous state afterwards.
     */
    class ElementStyleScope {
        constructor(canvas, element, container, defaultColor) {
            this._canvas = canvas;
            if (container && container.colors.has(element)) {
                this._previousColor = canvas.color;
                canvas.color = container.colors.get(element) ?? defaultColor;
            }
            else if (!container) {
                this._previousColor = canvas.color;
                canvas.color = defaultColor;
            }
        }
        [Symbol.dispose]() {
            if (this._previousColor) {
                this._canvas.color = this._previousColor;
            }
        }
    }

    /**
     * This glyph acts as container for handling
     * multiple voice rendering
     */
    class VoiceContainerGlyph extends GlyphGroup {
        constructor(x, y, voice) {
            super(x, y);
            this.voice = voice;
            this.beatGlyphs = [];
            this.tupletGroups = [];
        }
        scaleToWidth(width) {
            const force = this.renderer.layoutingInfo.spaceToForce(width);
            this.scaleToForce(force);
        }
        scaleToForce(force) {
            this.width = this.renderer.layoutingInfo.calculateVoiceWidth(force);
            const positions = this.renderer.layoutingInfo.buildOnTimePositions(force);
            const beatGlyphs = this.beatGlyphs;
            for (let i = 0, j = beatGlyphs.length; i < j; i++) {
                const currentBeatGlyph = beatGlyphs[i];
                switch (currentBeatGlyph.beat.graceType) {
                    case GraceType.None:
                        currentBeatGlyph.x =
                            positions.get(currentBeatGlyph.beat.absoluteDisplayStart) - currentBeatGlyph.onTimeX;
                        break;
                    default:
                        const graceDisplayStart = currentBeatGlyph.beat.graceGroup.beats[0].absoluteDisplayStart;
                        const graceGroupId = currentBeatGlyph.beat.graceGroup.id;
                        // placement for proper grace notes which have a following note
                        if (currentBeatGlyph.beat.graceGroup.isComplete && positions.has(graceDisplayStart)) {
                            currentBeatGlyph.x = positions.get(graceDisplayStart) - currentBeatGlyph.onTimeX;
                            const graceSprings = this.renderer.layoutingInfo.allGraceRods.get(graceGroupId);
                            // get the pre beat stretch of this voice/staff, not the
                            // shared space. This way we use the potentially empty space (see discussions/1092).
                            const afterGraceBeat = currentBeatGlyph.beat.graceGroup.beats[currentBeatGlyph.beat.graceGroup.beats.length - 1]
                                .nextBeat;
                            const preBeatStretch = afterGraceBeat
                                ? this.renderer.layoutingInfo.getPreBeatSize(afterGraceBeat) +
                                    BeatContainerGlyph.GraceBeatPadding
                                : 0;
                            // move right in front to the note
                            currentBeatGlyph.x -= preBeatStretch;
                            // respect the post beat width of the grace note
                            currentBeatGlyph.x -= graceSprings[currentBeatGlyph.beat.graceIndex].postSpringWidth;
                            // shift to right position of the particular grace note
                            currentBeatGlyph.x += graceSprings[currentBeatGlyph.beat.graceIndex].graceBeatWidth;
                            // move the whole group again forward for cases where another track has e.g. 3 beats and here we have only 2.
                            // so we shift the whole group of this voice to stick to the end of the group.
                            const lastGraceSpring = graceSprings[currentBeatGlyph.beat.graceGroup.beats.length - 1];
                            currentBeatGlyph.x -= lastGraceSpring.graceBeatWidth;
                        }
                        else {
                            // placement for improper grace beats where no beat in the same bar follows
                            const graceSpring = this.renderer.layoutingInfo.incompleteGraceRods.get(graceGroupId);
                            const relativeOffset = graceSpring[currentBeatGlyph.beat.graceIndex].postSpringWidth -
                                graceSpring[currentBeatGlyph.beat.graceIndex].preSpringWidth;
                            if (i > 0) {
                                if (currentBeatGlyph.beat.graceIndex === 0) {
                                    // we place the grace beat directly after the previous one
                                    // otherwise this causes flickers on resizing
                                    currentBeatGlyph.x = beatGlyphs[i - 1].x + beatGlyphs[i - 1].width;
                                }
                                else {
                                    // for the multiple grace glyphs we take the width of the grace rod
                                    // this width setting is aligned with the positioning logic below
                                    currentBeatGlyph.x =
                                        beatGlyphs[i - 1].x +
                                            graceSpring[currentBeatGlyph.beat.graceIndex - 1].postSpringWidth -
                                            graceSpring[currentBeatGlyph.beat.graceIndex - 1].preSpringWidth -
                                            relativeOffset;
                                }
                            }
                            else {
                                currentBeatGlyph.x = -relativeOffset;
                            }
                        }
                        break;
                }
                // size always previous glyph after we know the position
                // of the next glyph
                if (i > 0) {
                    const beatWidth = currentBeatGlyph.x - beatGlyphs[i - 1].x;
                    beatGlyphs[i - 1].scaleToWidth(beatWidth);
                }
                // for the last glyph size based on the full width
                if (i === j - 1) {
                    const beatWidth = this.width - beatGlyphs[beatGlyphs.length - 1].x;
                    currentBeatGlyph.scaleToWidth(beatWidth);
                }
            }
        }
        registerLayoutingInfo(info) {
            const beatGlyphs = this.beatGlyphs;
            for (const b of beatGlyphs) {
                b.registerLayoutingInfo(info);
            }
        }
        applyLayoutingInfo(info) {
            const beatGlyphs = this.beatGlyphs;
            for (const b of beatGlyphs) {
                b.applyLayoutingInfo(info);
            }
            this.scaleToForce(Math.max(this.renderer.settings.display.stretchForce, info.minStretchForce));
        }
        addGlyph(g) {
            const bg = g;
            g.x =
                this.beatGlyphs.length === 0
                    ? 0
                    : this.beatGlyphs[this.beatGlyphs.length - 1].x + this.beatGlyphs[this.beatGlyphs.length - 1].width;
            g.renderer = this.renderer;
            g.doLayout();
            this.beatGlyphs.push(bg);
            this.width = g.x + g.width;
            if (bg.beat.hasTuplet && bg.beat.tupletGroup.beats[0].id === bg.beat.id) {
                this.tupletGroups.push(bg.beat.tupletGroup);
            }
        }
        doLayout() {
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.voice(canvas, VoiceSubElement.Glyphs, this.voice, true);
            try {
                for (let i = 0, j = this.beatGlyphs.length; i < j; i++) {
                    this.beatGlyphs[i].paint(cx + this.x, cy + this.y, canvas);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }
    VoiceContainerGlyph.KeySizeBeat = 'Beat';

    class BeatLinePositions {
        constructor() {
            this.staffId = '';
            this.up = 0;
            this.down = 0;
        }
    }
    class BeamingHelperDrawInfo {
        constructor() {
            this.startBeat = null;
            this.startX = 0;
            this.startY = 0;
            this.endBeat = null;
            this.endX = 0;
            this.endY = 0;
        }
        //
        /**
         * calculates the Y-position given a X-pos using the current start end point
         * @param x
         */
        calcY(x) {
            // get the y position of the given beat on this curve
            if (this.startX === this.endX) {
                return this.startY;
            }
            // y(x)  = ( (y2 - y1) / (x2 - x1) )  * (x - x1) + y1;
            return ((this.endY - this.startY) / (this.endX - this.startX)) * (x - this.startX) + this.startY;
        }
    }
    /**
     * This public class helps drawing beams and bars for notes.
     */
    class BeamingHelper {
        get isRestBeamHelper() {
            return this.beats.length === 1 && this.beats[0].isRest;
        }
        hasLine(forceFlagOnSingleBeat, beat) {
            return ((forceFlagOnSingleBeat && this.beatHasLine(beat)) ||
                (!forceFlagOnSingleBeat && this.beats.length === 1 && this.beatHasLine(beat)));
        }
        beatHasLine(beat) {
            return beat.duration > Duration.Whole;
        }
        hasFlag(forceFlagOnSingleBeat, beat) {
            return ((forceFlagOnSingleBeat && this.beatHasFlag(beat)) ||
                (!forceFlagOnSingleBeat && this.beats.length === 1 && this.beatHasFlag(this.beats[0])));
        }
        beatHasFlag(beat) {
            return (!beat.deadSlapped && !beat.isRest && (beat.duration > Duration.Quarter || beat.graceType !== GraceType.None));
        }
        constructor(staff, renderer) {
            this._beatLineXPositions = new Map();
            this._firstNonRestBeat = null;
            this._lastNonRestBeat = null;
            this.voice = null;
            this.beats = [];
            this.shortestDuration = Duration.QuadrupleWhole;
            /**
             * an indicator whether any beat has a tuplet on it.
             */
            this.hasTuplet = false;
            this.slashBeats = [];
            this._firstBeatLowestNoteCompareValue = -1;
            this._firstBeatHighestNoteCompareValue = -1;
            this._lastBeatLowestNoteCompareValue = -1;
            this._lastBeatHighestNoteCompareValue = -1;
            this.lowestNoteInHelper = null;
            this._lowestNoteCompareValueInHelper = -1;
            this.highestNoteInHelper = null;
            this._highestNoteCompareValueInHelper = -1;
            this.invertBeamDirection = false;
            this.preferredBeamDirection = null;
            this.isGrace = false;
            this.minRestLine = null;
            this.beatOfMinRestLine = null;
            this.maxRestLine = null;
            this.beatOfMaxRestLine = null;
            this.direction = BeamDirection.Up;
            this.drawingInfos = new Map();
            this._staff = staff;
            this._renderer = renderer;
            this.beats = [];
        }
        getBeatLineX(beat, direction) {
            direction = direction ?? this.direction;
            if (this.hasBeatLineX(beat)) {
                if (direction === BeamDirection.Up) {
                    return this._beatLineXPositions.get(beat.index).up;
                }
                return this._beatLineXPositions.get(beat.index).down;
            }
            return 0;
        }
        hasBeatLineX(beat) {
            return this._beatLineXPositions.has(beat.index);
        }
        registerBeatLineX(staffId, beat, up, down) {
            const positions = this.getOrCreateBeatPositions(beat);
            positions.staffId = staffId;
            positions.up = up;
            positions.down = down;
            for (const v of this.drawingInfos.values()) {
                if (v.startBeat === beat) {
                    v.startX = this.getBeatLineX(beat);
                }
                else if (v.endBeat === beat) {
                    v.endX = this.getBeatLineX(beat);
                }
            }
        }
        getOrCreateBeatPositions(beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                this._beatLineXPositions.set(beat.index, new BeatLinePositions());
            }
            return this._beatLineXPositions.get(beat.index);
        }
        finish() {
            this.direction = this.calculateDirection();
        }
        calculateDirection() {
            let direction = null;
            if (!this.voice) {
                // no proper voice (should not happen usually)
                direction = BeamDirection.Up;
            }
            else if (this.preferredBeamDirection !== null) {
                // we have a preferred direction
                direction = this.preferredBeamDirection;
            }
            else if (this.voice.index > 0) {
                // on multi-voice setups secondary voices are always down
                direction = this.invert(BeamDirection.Down);
            }
            else if (this.voice.bar.isMultiVoice) {
                // on multi-voice setups primary voices are always up
                direction = this.invert(BeamDirection.Up);
            }
            else if (this.beats[0].graceType !== GraceType.None) {
                // grace notes are always up
                direction = this.invert(BeamDirection.Up);
            }
            // the average line is used for determination
            //      key lowerequal than middle line -> up
            //      key higher than middle line -> down
            if (this.highestNoteInHelper && this.lowestNoteInHelper) {
                const highestNotePosition = this._renderer.getNoteY(this.highestNoteInHelper, NoteYPosition.Center);
                const lowestNotePosition = this._renderer.getNoteY(this.lowestNoteInHelper, NoteYPosition.Center);
                if (direction === null) {
                    const avg = (highestNotePosition + lowestNotePosition) / 2;
                    direction = this.invert(this._renderer.middleYPosition < avg ? BeamDirection.Up : BeamDirection.Down);
                }
                this._renderer.completeBeamingHelper(this);
            }
            else {
                direction = this.invert(BeamDirection.Up);
                this._renderer.completeBeamingHelper(this);
            }
            return direction;
        }
        static computeLineHeightsForRest(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                    return [2, 2];
                case Duration.DoubleWhole:
                    return [2, 2];
                case Duration.Whole:
                    return [0, 1];
                case Duration.Half:
                    return [1, 0];
                case Duration.Quarter:
                    return [3, 3];
                case Duration.Eighth:
                    return [2, 2];
                case Duration.Sixteenth:
                    return [2, 4];
                case Duration.ThirtySecond:
                    return [4, 4];
                case Duration.SixtyFourth:
                    return [4, 6];
                case Duration.OneHundredTwentyEighth:
                    return [6, 6];
                case Duration.TwoHundredFiftySixth:
                    return [6, 8];
            }
            return [0, 0];
        }
        /**
         * Registers a rest beat within the accidental helper so the rest
         * symbol is considered properly during beaming.
         * @param beat The rest beat.
         * @param line The line on which the rest symbol is placed
         */
        applyRest(beat, line) {
            // do not accept rests after the last beat which has notes
            if ((this._lastNonRestBeat && beat.index >= this._lastNonRestBeat.index) ||
                (this._firstNonRestBeat && beat.index <= this._firstNonRestBeat.index)) {
                return;
            }
            // correct the line of the glyph to a note which would
            // be placed at the upper / lower end of the glyph.
            let aboveRest = line;
            let belowRest = line;
            const offsets = BeamingHelper.computeLineHeightsForRest(beat.duration);
            aboveRest -= offsets[0];
            belowRest += offsets[1];
            const minRestLine = this.minRestLine;
            const maxRestLine = this.maxRestLine;
            if (minRestLine === null || minRestLine > aboveRest) {
                this.minRestLine = aboveRest;
                this.beatOfMinRestLine = beat;
            }
            if (maxRestLine === null || maxRestLine < belowRest) {
                this.maxRestLine = belowRest;
                this.beatOfMaxRestLine = beat;
            }
        }
        invert(direction) {
            if (!this.invertBeamDirection) {
                return direction;
            }
            switch (direction) {
                case BeamDirection.Down:
                    return BeamDirection.Up;
                // case BeamDirection.Up:
                default:
                    return BeamDirection.Down;
            }
        }
        checkBeat(beat) {
            if (beat.invertBeamDirection) {
                this.invertBeamDirection = true;
            }
            if (!this.voice) {
                this.voice = beat.voice;
            }
            // allow adding if there are no beats yet
            let add = false;
            if (this.beats.length === 0) {
                add = true;
            }
            else {
                switch (this.beats[this.beats.length - 1].beamingMode) {
                    case BeatBeamingMode.Auto:
                    case BeatBeamingMode.ForceSplitOnSecondaryToNext:
                        add = BeamingHelper.canJoin(this.beats[this.beats.length - 1], beat);
                        break;
                    case BeatBeamingMode.ForceSplitToNext:
                        add = false;
                        break;
                    case BeatBeamingMode.ForceMergeWithNext:
                        add = true;
                        break;
                }
            }
            if (add) {
                if (this.preferredBeamDirection == null && beat.preferredBeamDirection !== null) {
                    this.preferredBeamDirection = beat.preferredBeamDirection;
                }
                if (beat.hasTuplet) {
                    this.hasTuplet = true;
                }
                if (beat.graceType !== GraceType.None) {
                    this.isGrace = true;
                }
                if (!beat.isRest) {
                    if (this.isRestBeamHelper) {
                        this.beats = [];
                    }
                    this.beats.push(beat);
                    this.checkNote(beat.minNote);
                    this.checkNote(beat.maxNote);
                    if (this.shortestDuration < beat.duration) {
                        this.shortestDuration = beat.duration;
                    }
                    if (!this._firstNonRestBeat) {
                        this._firstNonRestBeat = beat;
                    }
                    this._lastNonRestBeat = beat;
                }
                else if (this.beats.length === 0) {
                    this.beats.push(beat);
                }
                if (beat.slashed) {
                    this.slashBeats.push(beat);
                }
            }
            return add;
        }
        checkNote(note) {
            if (!note) {
                return;
            }
            // a note can expand to 2 note heads if it has a harmonic
            let lowestValueForNote;
            let highestValueForNote;
            // For percussion we use the line as value to compare whether it is
            // higher or lower.
            if (this.voice && note.isPercussion) {
                lowestValueForNote = -AccidentalHelper.getPercussionLine(this.voice.bar, AccidentalHelper.getNoteValue(note));
                highestValueForNote = lowestValueForNote;
            }
            else {
                lowestValueForNote = AccidentalHelper.getNoteValue(note);
                highestValueForNote = lowestValueForNote;
                if (note.harmonicType !== HarmonicType.None && note.harmonicType !== HarmonicType.Natural) {
                    highestValueForNote = note.realValue - this._staff.displayTranspositionPitch;
                }
            }
            if (this.beats.length === 1 && this.beats[0] === note.beat) {
                if (this._firstBeatLowestNoteCompareValue === -1 ||
                    lowestValueForNote < this._firstBeatLowestNoteCompareValue) {
                    this._firstBeatLowestNoteCompareValue = lowestValueForNote;
                }
                if (this._firstBeatHighestNoteCompareValue === -1 ||
                    highestValueForNote > this._firstBeatHighestNoteCompareValue) {
                    this._firstBeatHighestNoteCompareValue = highestValueForNote;
                }
            }
            if (this._lastBeatLowestNoteCompareValue === -1 || lowestValueForNote < this._lastBeatLowestNoteCompareValue) {
                this._lastBeatLowestNoteCompareValue = lowestValueForNote;
            }
            if (this._lastBeatHighestNoteCompareValue === -1 ||
                highestValueForNote > this._lastBeatHighestNoteCompareValue) {
                this._lastBeatHighestNoteCompareValue = highestValueForNote;
            }
            if (!this.lowestNoteInHelper || lowestValueForNote < this._lowestNoteCompareValueInHelper) {
                this.lowestNoteInHelper = note;
                this._lowestNoteCompareValueInHelper = lowestValueForNote;
            }
            if (!this.highestNoteInHelper || highestValueForNote > this._highestNoteCompareValueInHelper) {
                this.highestNoteInHelper = note;
                this._highestNoteCompareValueInHelper = highestValueForNote;
            }
        }
        // TODO: Check if this beaming is really correct, I'm not sure if we are connecting beats correctly
        static canJoin(b1, b2) {
            // is this a voice we can join with?
            if (!b1 ||
                !b2 ||
                b1.graceType !== b2.graceType ||
                b1.graceType === GraceType.BendGrace ||
                b2.graceType === GraceType.BendGrace ||
                b1.deadSlapped ||
                b2.deadSlapped) {
                return false;
            }
            if (b1.graceType !== GraceType.None && b2.graceType !== GraceType.None) {
                return true;
            }
            const m1 = b1.voice.bar;
            const m2 = b2.voice.bar;
            // only join on same measure
            if (m1 !== m2) {
                return false;
            }
            // get times of those voices and check if the times
            // are in the same division
            const start1 = b1.playbackStart;
            const start2 = b2.playbackStart;
            // we can only join 8th, 16th, 32th and 64th voices
            if (!BeamingHelper.canJoinDuration(b1.duration) || !BeamingHelper.canJoinDuration(b2.duration)) {
                return start1 === start2;
            }
            // break between different tuplet groups
            if (b1.tupletGroup !== b2.tupletGroup) {
                return false;
            }
            if (b1.hasTuplet && b2.hasTuplet) {
                // force joining for full tuplet groups
                if (b1.tupletGroup === b2.tupletGroup && b1.tupletGroup.isFull) {
                    return true;
                }
            }
            // TODO: create more rules for automatic beaming
            let divisionLength = MidiUtils.QuarterTime;
            switch (m1.masterBar.timeSignatureDenominator) {
                case 8:
                    if (m1.masterBar.timeSignatureNumerator % 3 === 0) {
                        divisionLength += (MidiUtils.QuarterTime / 2) | 0;
                    }
                    break;
            }
            // check if they are on the same division
            const division1 = ((divisionLength + start1) / divisionLength) | 0 | 0;
            const division2 = ((divisionLength + start2) / divisionLength) | 0 | 0;
            return division1 === division2;
        }
        static canJoinDuration(d) {
            switch (d) {
                case Duration.Whole:
                case Duration.Half:
                case Duration.Quarter:
                    return false;
                default:
                    return true;
            }
        }
        static isFullBarJoin(a, b, barIndex) {
            // TODO: this getindex call seems expensive since we call this method very often.
            return ModelUtils.getIndex(a.duration) - 2 - barIndex > 0 && ModelUtils.getIndex(b.duration) - 2 - barIndex > 0;
        }
        get beatOfLowestNote() {
            return this.lowestNoteInHelper.beat;
        }
        get beatOfHighestNote() {
            return this.highestNoteInHelper.beat;
        }
        /**
         * Returns whether the the position of the given beat, was registered by the staff of the given ID
         * @param staffId
         * @param beat
         * @returns
         */
        isPositionFrom(staffId, beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                return true;
            }
            return (this._beatLineXPositions.get(beat.index).staffId === staffId ||
                !this._beatLineXPositions.get(beat.index).staffId);
        }
    }

    class ReservedLayoutAreaSlot {
        constructor(topY, bottomY) {
            this.topY = 0;
            this.bottomY = 0;
            this.topY = topY;
            this.bottomY = bottomY;
        }
    }
    class ReservedLayoutArea {
        constructor(beat) {
            this.topY = -1e3;
            this.bottomY = -1e3;
            this.slots = [];
            this.beat = beat;
        }
        addSlot(topY, bottomY) {
            this.slots.push(new ReservedLayoutAreaSlot(topY, bottomY));
            if (this.topY === -1e3) {
                this.topY = topY;
                this.bottomY = bottomY;
            }
            else {
                const min = Math.min(topY, bottomY);
                const max = Math.max(topY, bottomY);
                if (min < this.topY) {
                    this.topY = min;
                }
                if (max > this.bottomY) {
                    this.bottomY = max;
                }
            }
        }
    }
    class BarCollisionHelper {
        constructor() {
            this.reservedLayoutAreasByDisplayTime = new Map();
            this.restDurationsByDisplayTime = new Map();
        }
        getBeatMinMaxY() {
            let minY = -1e3;
            let maxY = -1e3;
            for (const v of this.reservedLayoutAreasByDisplayTime.values()) {
                if (minY === -1e3) {
                    minY = v.topY;
                    maxY = v.bottomY;
                }
                else {
                    if (minY > v.topY) {
                        minY = v.topY;
                    }
                    if (maxY < v.bottomY) {
                        maxY = v.bottomY;
                    }
                }
            }
            if (minY === -1e3) {
                return [0, 0];
            }
            return [minY, maxY];
        }
        reserveBeatSlot(beat, topY, bottomY) {
            if (topY === bottomY) {
                return;
            }
            if (!this.reservedLayoutAreasByDisplayTime.has(beat.displayStart)) {
                this.reservedLayoutAreasByDisplayTime.set(beat.displayStart, new ReservedLayoutArea(beat));
            }
            this.reservedLayoutAreasByDisplayTime.get(beat.displayStart).addSlot(topY, bottomY);
            if (beat.isRest) {
                this.registerRest(beat);
            }
        }
        registerRest(beat) {
            if (!this.restDurationsByDisplayTime.has(beat.displayStart)) {
                this.restDurationsByDisplayTime.set(beat.displayStart, new Map());
            }
            if (!this.restDurationsByDisplayTime.get(beat.displayStart).has(beat.playbackDuration)) {
                this.restDurationsByDisplayTime.get(beat.displayStart).set(beat.playbackDuration, beat.id);
            }
        }
        applyRestCollisionOffset(beat, currentY, linesToPixel) {
            // for the first voice we do not need collision detection on rests
            // we just place it normally
            if (beat.voice.index > 0) {
                // From the Spring-Rod poisitioning we have the guarantee
                // that 2 timewise subsequent elements can never collide
                // on the horizontal axis. So we only need to check for collisions
                // of elements at the current time position
                // if there are none, we can just use the line
                if (this.reservedLayoutAreasByDisplayTime.has(beat.playbackStart)) {
                    // do check for collisions we need to obtain the range on which the
                    // restglyph is placed
                    // rest glyphs have their ancor
                    const restSizes = BeamingHelper.computeLineHeightsForRest(beat.duration).map(i => i * linesToPixel);
                    const oldRestTopY = currentY - restSizes[0];
                    const oldRestBottomY = currentY + restSizes[1];
                    let newRestTopY = oldRestTopY;
                    const reservedSlots = this.reservedLayoutAreasByDisplayTime.get(beat.playbackStart);
                    let hasCollision = false;
                    for (const slot of reservedSlots.slots) {
                        if ((oldRestTopY >= slot.topY && oldRestTopY <= slot.bottomY) ||
                            (oldRestBottomY >= slot.topY && oldRestBottomY <= slot.bottomY)) {
                            hasCollision = true;
                            break;
                        }
                    }
                    if (hasCollision) {
                        // second voice above, the others below
                        if (beat.voice.index === 1) {
                            // move rest above top position
                            // TODO: rest must align with note lines
                            newRestTopY = reservedSlots.topY - restSizes[1] - restSizes[0];
                        }
                        else {
                            // move rest above top position
                            // TODO: rest must align with note lines
                            newRestTopY = reservedSlots.bottomY;
                        }
                        const newRestBottomY = newRestTopY + restSizes[0] + restSizes[1];
                        // moving always happens in full stave spaces
                        const staveSpace = linesToPixel * 2;
                        const distanceInLines = Math.ceil(Math.abs(newRestTopY - oldRestTopY) / staveSpace);
                        // register new min/max offsets
                        reservedSlots.addSlot(newRestTopY, newRestBottomY);
                        if (newRestTopY < oldRestTopY) {
                            return distanceInLines * -staveSpace;
                        }
                        return distanceInLines * staveSpace;
                    }
                }
            }
            return 0;
        }
    }

    class BarHelpers {
        constructor(renderer) {
            this.beamHelpers = [];
            this.beamHelperLookup = [];
            this.preferredBeamDirection = null;
            this._renderer = renderer;
            this.collisionHelper = new BarCollisionHelper();
        }
        initialize() {
            const barRenderer = this._renderer;
            const bar = this._renderer.bar;
            let currentBeamHelper = null;
            let currentGraceBeamHelper = null;
            for (let i = 0, j = bar.voices.length; i < j; i++) {
                const v = bar.voices[i];
                this.beamHelpers.push([]);
                this.beamHelperLookup.push(new Map());
                for (let k = 0, l = v.beats.length; k < l; k++) {
                    const b = v.beats[k];
                    let helperForBeat;
                    if (b.graceType !== GraceType.None) {
                        helperForBeat = currentGraceBeamHelper;
                    }
                    else {
                        helperForBeat = currentBeamHelper;
                        currentGraceBeamHelper = null;
                    }
                    // if a new beaming helper was started, we close our tuplet grouping as well
                    // try to fit beam to current beamhelper
                    if (!helperForBeat || !helperForBeat.checkBeat(b)) {
                        if (helperForBeat) {
                            helperForBeat.finish();
                        }
                        // if not possible, create the next beaming helper
                        helperForBeat = new BeamingHelper(bar.staff, barRenderer);
                        helperForBeat.preferredBeamDirection = this.preferredBeamDirection;
                        helperForBeat.checkBeat(b);
                        if (b.graceType !== GraceType.None) {
                            currentGraceBeamHelper = helperForBeat;
                        }
                        else {
                            currentBeamHelper = helperForBeat;
                        }
                        this.beamHelpers[v.index].push(helperForBeat);
                    }
                    this.beamHelperLookup[v.index].set(b.index, helperForBeat);
                }
                if (currentBeamHelper) {
                    currentBeamHelper.finish();
                }
                if (currentGraceBeamHelper) {
                    currentGraceBeamHelper.finish();
                }
                currentBeamHelper = null;
                currentGraceBeamHelper = null;
            }
        }
        getBeamingHelperForBeat(beat) {
            return this.beamHelperLookup[beat.voice.index].get(beat.index);
        }
    }

    class ChordDiagramGlyph extends EffectGlyph {
        constructor(x, y, chord) {
            super(x, y);
            this._textRow = 0;
            this._fretRow = 0;
            this._firstFretSpacing = 0;
            this._chord = chord;
        }
        doLayout() {
            super.doLayout();
            const res = this.renderer.resources;
            this._textRow = res.effectFont.size * 1.5;
            this._fretRow = res.effectFont.size * 1.5;
            if (this._chord.firstFret > 1) {
                this._firstFretSpacing = ChordDiagramGlyph.FretSpacing;
            }
            else {
                this._firstFretSpacing = 0;
            }
            this.height =
                this._textRow +
                    this._fretRow +
                    ChordDiagramGlyph.Frets * ChordDiagramGlyph.FretSpacing +
                    2 * ChordDiagramGlyph.Padding[1];
            this.width =
                this._firstFretSpacing +
                    (this._chord.strings.length - 1) * ChordDiagramGlyph.StringSpacing +
                    2 * ChordDiagramGlyph.Padding[0];
        }
        paint(cx, cy, canvas) {
            cx += this.x + ChordDiagramGlyph.Padding[0] + this._firstFretSpacing;
            cy += this.y;
            const stringSpacing = ChordDiagramGlyph.StringSpacing;
            const fretSpacing = ChordDiagramGlyph.FretSpacing;
            const res = this.renderer.resources;
            const circleRadius = ChordDiagramGlyph.CircleRadius;
            const w = this.width - 2 * ChordDiagramGlyph.Padding[0] - this._firstFretSpacing;
            const align = canvas.textAlign;
            const baseline = canvas.textBaseline;
            canvas.font = res.effectFont;
            canvas.textAlign = TextAlign.Center;
            canvas.textBaseline = TextBaseline.Top;
            if (this._chord.showName) {
                canvas.fillText(this._chord.name, cx + w / 2, cy + res.effectFont.size / 2);
            }
            cy += this._textRow;
            canvas.font = res.fretboardNumberFont;
            canvas.textBaseline = TextBaseline.Middle;
            for (let i = 0; i < this._chord.strings.length; i++) {
                const x = cx + i * stringSpacing;
                const y = cy + this._fretRow / 2;
                let fret = this._chord.strings[this._chord.strings.length - i - 1];
                if (fret < 0) {
                    canvas.fillMusicFontSymbol(x, y, 1, MusicFontSymbol.FretboardX, true);
                }
                else if (fret === 0) {
                    canvas.fillMusicFontSymbol(x, y, 1, MusicFontSymbol.FretboardO, true);
                }
                else {
                    fret -= this._chord.firstFret - 1;
                    canvas.fillText(fret.toString(), x, y);
                }
            }
            cy += this._fretRow;
            for (let i = 0; i < this._chord.strings.length; i++) {
                const x = cx + i * stringSpacing;
                canvas.fillRect(x, cy, 1, fretSpacing * ChordDiagramGlyph.Frets + 1);
            }
            if (this._chord.firstFret > 1) {
                canvas.textAlign = TextAlign.Left;
                canvas.fillText(this._chord.firstFret.toString(), cx - this._firstFretSpacing, cy + fretSpacing / 2);
            }
            canvas.fillRect(cx, cy - 1, w, 2);
            for (let i = 0; i <= ChordDiagramGlyph.Frets; i++) {
                const y = cy + i * fretSpacing;
                canvas.fillRect(cx, y, w, 1);
            }
            const barreLookup = new Map();
            for (const barreFret of this._chord.barreFrets) {
                const strings = [-1, -1];
                barreLookup.set(barreFret - this._chord.firstFret, strings);
            }
            for (let guitarString = 0; guitarString < this._chord.strings.length; guitarString++) {
                let fret = this._chord.strings[guitarString];
                if (fret > 0) {
                    fret -= this._chord.firstFret;
                    if (barreLookup.has(fret)) {
                        const info = barreLookup.get(fret);
                        if (info[0] === -1 || guitarString < info[0]) {
                            info[0] = guitarString;
                        }
                        if (info[1] === -1 || guitarString > info[1]) {
                            info[1] = guitarString;
                        }
                    }
                    const y = cy + fret * fretSpacing + fretSpacing / 2 + 0.5;
                    const x = cx + (this._chord.strings.length - guitarString - 1) * stringSpacing;
                    canvas.fillCircle(x, y, circleRadius);
                }
            }
            for (const [fret, strings] of barreLookup) {
                const y = cy + fret * fretSpacing + fretSpacing / 2 + 0.5;
                const xLeft = cx + (this._chord.strings.length - strings[1] - 1) * stringSpacing;
                const xRight = cx + (this._chord.strings.length - strings[0] - 1) * stringSpacing;
                canvas.fillRect(xLeft, y - circleRadius, xRight - xLeft, circleRadius * 2);
            }
            canvas.textAlign = align;
            canvas.textBaseline = baseline;
        }
    }
    ChordDiagramGlyph.Padding = [5, 2];
    ChordDiagramGlyph.Frets = 5;
    ChordDiagramGlyph.CircleRadius = 2.5;
    ChordDiagramGlyph.StringSpacing = 10;
    ChordDiagramGlyph.FretSpacing = 12;

    class RowGlyphContainer extends GlyphGroup {
        constructor(x, y, align = TextAlign.Center) {
            super(x, y);
            this._glyphWidth = 0;
            this.glyphs = [];
            this._align = align;
        }
        doLayout() {
            let x = 0;
            switch (this._align) {
                case TextAlign.Left:
                    x = 0;
                    break;
                case TextAlign.Center:
                    x = (this.width - this._glyphWidth) / 2;
                    break;
                case TextAlign.Right:
                    x = this.width - this._glyphWidth;
                    break;
            }
            for (const glyph of this.glyphs) {
                glyph.x = x;
                x += glyph.width;
            }
        }
        addGlyphToRow(glyph) {
            this.glyphs.push(glyph);
            this._glyphWidth += glyph.width;
            if (glyph.height > this.height) {
                this.height = glyph.height;
            }
        }
    }

    class RowContainerGlyph extends GlyphGroup {
        constructor(x, y, align = TextAlign.Center) {
            super(x, y);
            this._rows = [];
            this.height = 0.0;
            this.glyphs = [];
            this._align = align;
        }
        doLayout() {
            let x = 0;
            let y = 0;
            const padding = RowContainerGlyph.Padding;
            this._rows = [];
            let row = new RowGlyphContainer(x, y, this._align);
            row.width = this.width;
            for (const g of this.glyphs) {
                if (x + g.width < this.width) {
                    row.addGlyphToRow(g);
                    x += g.width;
                }
                else {
                    if (!row.isEmpty) {
                        row.doLayout();
                        this._rows.push(row);
                        y += row.height + padding;
                    }
                    x = 0;
                    row = new RowGlyphContainer(x, y, this._align);
                    row.width = this.width;
                    row.addGlyphToRow(g);
                    x += g.width;
                }
            }
            if (!row.isEmpty) {
                row.doLayout();
                this._rows.push(row);
                y += row.height + padding;
            }
            this.height = y;
        }
        paint(cx, cy, canvas) {
            for (const row of this._rows) {
                row.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }
    RowContainerGlyph.Padding = 3;

    class ChordDiagramContainerGlyph extends RowContainerGlyph {
        addChord(chord) {
            if (chord.strings.length > 0) {
                const chordDiagram = new ChordDiagramGlyph(0, 0, chord);
                chordDiagram.renderer = this.renderer;
                chordDiagram.doLayout();
                this.glyphs.push(chordDiagram);
            }
        }
        paint(cx, cy, canvas) {
            if (this.glyphs.length > 0) {
                const _ = ElementStyleHelper.score(canvas, ScoreSubElement.ChordDiagramList, this.renderer.scoreRenderer.score);
                try {
                    super.paint(cx, cy, canvas);
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
    }

    class TextGlyph extends EffectGlyph {
        constructor(x, y, text, font, textAlign = TextAlign.Left, testBaseline = null, color) {
            super(x, y);
            this._lineHeights = null;
            this._lines = text.split('\n');
            this.font = font;
            this.textAlign = textAlign;
            this.textBaseline = testBaseline;
            this.colorOverride = color;
        }
        doLayout() {
            super.doLayout();
            this._lineHeights = [];
            const c = this.renderer.scoreRenderer.canvas;
            for (const line of this._lines) {
                c.font = this.font;
                const size = c.measureText(line);
                const h = size.height;
                this._lineHeights.push(h);
                this.height += h;
                this.width = Math.max(this.width, size.width);
            }
        }
        paint(cx, cy, canvas) {
            const color = canvas.color;
            canvas.color = this.colorOverride ?? color;
            canvas.font = this.font;
            const old = canvas.textAlign;
            const oldBaseLine = canvas.textBaseline;
            canvas.textAlign = this.textAlign;
            if (this.textBaseline !== null) {
                canvas.textBaseline = this.textBaseline;
            }
            let y = cy + this.y;
            for (let i = 0; i < this._lines.length; i++) {
                canvas.fillText(this._lines[i], cx + this.x, y);
                y += this._lineHeights[i];
            }
            canvas.textAlign = old;
            canvas.textBaseline = oldBaseLine;
            canvas.color = color;
        }
    }

    /**
     * A Staff represents a single line within a StaffSystem.
     * It stores BarRenderer instances created from a given factory.
     */
    class RenderStaff {
        get staffId() {
            return this._factory.staffId;
        }
        get contentTop() {
            return this.y + this.staveTop + this.topSpacing + this.topOverflow;
        }
        get contentBottom() {
            return this.y + this.topSpacing + this.topOverflow + this.staveBottom;
        }
        constructor(trackIndex, staff, factory) {
            this._sharedLayoutData = new Map();
            this.barRenderers = [];
            this.x = 0;
            this.y = 0;
            this.height = 0;
            this.index = 0;
            this.staffIndex = 0;
            this.isFirstInSystem = false;
            /**
             * This is the index of the track being rendered. This is not the index of the track within the model,
             * but the n-th track being rendered. It is the index of the {@link ScoreRenderer.tracks} array defining
             * which tracks should be rendered.
             * For single-track rendering this will always be zero.
             */
            this.trackIndex = 0;
            /**
             * This is the visual offset from top where the
             * Staff contents actually start. Used for grouping
             * using a accolade
             */
            this.staveTop = 0;
            this.topSpacing = 0;
            this.bottomSpacing = 0;
            /**
             * This is the visual offset from top where the
             * Staff contents actually ends. Used for grouping
             * using a accolade
             */
            this.staveBottom = 0;
            this._factory = factory;
            this.trackIndex = trackIndex;
            this.modelStaff = staff;
        }
        getSharedLayoutData(key, def) {
            if (this._sharedLayoutData.has(key)) {
                return this._sharedLayoutData.get(key);
            }
            return def;
        }
        setSharedLayoutData(key, def) {
            this._sharedLayoutData.set(key, def);
        }
        get isInsideBracket() {
            return this._factory.isInsideBracket;
        }
        get isRelevantForBoundsLookup() {
            return this._factory.isRelevantForBoundsLookup;
        }
        registerStaffTop(offset) {
            this.staveTop = offset;
        }
        registerStaffBottom(offset) {
            this.staveBottom = offset;
        }
        addBarRenderer(renderer) {
            renderer.staff = this;
            renderer.index = this.barRenderers.length;
            renderer.reLayout();
            this.barRenderers.push(renderer);
            this.system.layout.registerBarRenderer(this.staffId, renderer);
        }
        addBar(bar, layoutingInfo, additionalMultiBarsRestBars) {
            const renderer = this._factory.create(this.system.layout.renderer, bar);
            renderer.additionalMultiRestBars = additionalMultiBarsRestBars;
            renderer.staff = this;
            renderer.index = this.barRenderers.length;
            renderer.layoutingInfo = layoutingInfo;
            renderer.doLayout();
            renderer.registerLayoutingInfo();
            // For cases like in the horizontal layout we need to set the fixed width early
            // to have correct partials splitting
            const barDisplayWidth = renderer.barDisplayWidth;
            if (barDisplayWidth > 0 &&
                this.system.layout.systemsLayoutMode === InternalSystemsLayoutMode.FromModelWithWidths) {
                renderer.width = barDisplayWidth;
            }
            this.barRenderers.push(renderer);
            if (bar) {
                this.system.layout.registerBarRenderer(this.staffId, renderer);
            }
        }
        revertLastBar() {
            const lastBar = this.barRenderers[this.barRenderers.length - 1];
            this.barRenderers.splice(this.barRenderers.length - 1, 1);
            this.system.layout.unregisterBarRenderer(this.staffId, lastBar);
            for (const r of this.barRenderers) {
                r.applyLayoutingInfo();
            }
            return lastBar;
        }
        scaleToWidth(width) {
            this._sharedLayoutData = new Map();
            const topOverflow = this.topOverflow;
            let x = 0;
            switch (this.system.layout.systemsLayoutMode) {
                case InternalSystemsLayoutMode.Automatic:
                    // Note: here we could do some "intelligent" distribution of
                    // the space over the bar renderers, for now we evenly apply the space to all bars
                    const difference = width - this.system.computedWidth;
                    const spacePerBar = difference / this.barRenderers.length;
                    for (const renderer of this.barRenderers) {
                        renderer.x = x;
                        renderer.y = this.topSpacing + topOverflow;
                        const actualBarWidth = renderer.computedWidth + spacePerBar;
                        renderer.scaleToWidth(actualBarWidth);
                        x += renderer.width;
                    }
                    break;
                case InternalSystemsLayoutMode.FromModelWithScale:
                    // each bar holds a percentual size where the sum of all scales make the width.
                    // hence we can calculate the width accordingly by calculating how big each column needs to be percentual.
                    width -= this.system.accoladeWidth;
                    const totalScale = this.system.totalBarDisplayScale;
                    for (const renderer of this.barRenderers) {
                        renderer.x = x;
                        renderer.y = this.topSpacing + topOverflow;
                        const actualBarWidth = (renderer.barDisplayScale * width) / totalScale;
                        renderer.scaleToWidth(actualBarWidth);
                        x += renderer.width;
                    }
                    break;
                case InternalSystemsLayoutMode.FromModelWithWidths:
                    for (const renderer of this.barRenderers) {
                        renderer.x = x;
                        renderer.y = this.topSpacing + topOverflow;
                        const displayWidth = renderer.barDisplayWidth;
                        if (displayWidth > 0) {
                            renderer.scaleToWidth(displayWidth);
                        }
                        else {
                            renderer.scaleToWidth(renderer.computedWidth);
                        }
                        x += renderer.width;
                    }
                    break;
            }
        }
        get topOverflow() {
            let m = 0;
            for (let i = 0, j = this.barRenderers.length; i < j; i++) {
                const r = this.barRenderers[i];
                if (r.topOverflow > m) {
                    m = r.topOverflow;
                }
            }
            return m;
        }
        get bottomOverflow() {
            let m = 0;
            for (let i = 0, j = this.barRenderers.length; i < j; i++) {
                const r = this.barRenderers[i];
                if (r.bottomOverflow > m) {
                    m = r.bottomOverflow;
                }
            }
            return m;
        }
        /**
         * Performs an early calculation of the expected staff height for the size calculation in the
         * accolade (e.g. for braces). This typically happens after the first bar renderers were created
         * and we can do an early placement of the render staffs.
         */
        calculateHeightForAccolade() {
            this.topSpacing = this._factory.getStaffPaddingTop(this);
            this.bottomSpacing = this._factory.getStaffPaddingBottom(this);
            this.height = this.barRenderers.length > 0 ? this.barRenderers[0].height : 0;
            if (this.height > 0) {
                this.height += this.topSpacing + this.topOverflow + this.bottomOverflow + this.bottomSpacing;
            }
        }
        finalizeStaff() {
            this.topSpacing = this._factory.getStaffPaddingTop(this);
            this.bottomSpacing = this._factory.getStaffPaddingBottom(this);
            this.height = 0;
            // 1st pass: let all renderers finalize themselves, this might cause
            // changes in the overflows
            let needsSecondPass = false;
            let topOverflow = this.topOverflow;
            for (let i = 0; i < this.barRenderers.length; i++) {
                this.barRenderers[i].y = this.topSpacing + topOverflow;
                this.height = Math.max(this.height, this.barRenderers[i].height);
                if (this.barRenderers[i].finalizeRenderer()) {
                    needsSecondPass = true;
                }
            }
            // 2nd pass: move renderers to correct position respecting the new overflows
            if (needsSecondPass) {
                topOverflow = this.topOverflow;
                // shift all the renderers to the new position to match required spacing
                for (let i = 0; i < this.barRenderers.length; i++) {
                    this.barRenderers[i].y = this.topSpacing + topOverflow;
                }
                // finalize again (to align ties)
                for (let i = 0; i < this.barRenderers.length; i++) {
                    this.barRenderers[i].finalizeRenderer();
                }
            }
            if (this.height > 0) {
                this.height += this.topSpacing + topOverflow + this.bottomOverflow + this.bottomSpacing;
            }
        }
        paint(cx, cy, canvas, startIndex, count) {
            if (this.height === 0 || count === 0) {
                return;
            }
            // canvas.color = Color.random();
            // canvas.fillRect(cx + this.x, cy + this.y, this.system.width - this.x, this.height);
            for (let i = startIndex, j = Math.min(startIndex + count, this.barRenderers.length); i < j; i++) {
                this.barRenderers[i].paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class Spring {
        constructor() {
            this.timePosition = 0;
            this.longestDuration = 0;
            this.smallestDuration = 0;
            this.force = 0;
            this.springConstant = 0;
            this.preBeatWidth = 0;
            this.graceBeatWidth = 0;
            this.postSpringWidth = 0;
            this.allDurations = new Set();
        }
        get springWidth() {
            return this.preSpringWidth + this.postSpringWidth;
        }
        get preSpringWidth() {
            return this.preBeatWidth + this.graceBeatWidth;
        }
    }

    /**
     * This public class stores size information about a stave.
     * It is used by the layout engine to collect the sizes of score parts
     * to align the parts across multiple staves.
     */
    class BarLayoutingInfo {
        constructor() {
            this._timeSortedSprings = [];
            this._minTime = -1;
            this._onTimePositionsForce = 0;
            this._onTimePositions = new Map();
            this._incompleteGraceRodsWidth = 0;
            // the smallest duration we have between two springs to ensure we have positive spring constants
            this._minDuration = BarLayoutingInfo.MinDuration;
            /**
             * an internal version number that increments whenever a change was made.
             */
            this.version = 0;
            this.preBeatSize = 0;
            this.postBeatSize = 0;
            this.minStretchForce = 0;
            this.totalSpringConstant = 0;
            this.incompleteGraceRods = new Map();
            this.allGraceRods = new Map();
            this.springs = new Map();
            this.height = 0;
        }
        updateMinStretchForce(force) {
            if (this.minStretchForce < force) {
                this.minStretchForce = force;
            }
        }
        getPreBeatSize(beat) {
            if (beat.graceType !== GraceType.None) {
                const groupId = beat.graceGroup.id;
                const graceRod = this.allGraceRods.get(groupId)[beat.graceIndex];
                return graceRod.preBeatWidth;
            }
            const start = beat.absoluteDisplayStart;
            if (!this.springs.has(start)) {
                return 0;
            }
            return this.springs.get(start).preBeatWidth;
        }
        getPostBeatSize(beat) {
            if (beat.graceType !== GraceType.None) {
                const groupId = beat.graceGroup.id;
                const graceRod = this.allGraceRods.get(groupId)[beat.graceIndex];
                return graceRod.postSpringWidth;
            }
            const start = beat.absoluteDisplayStart;
            if (!this.springs.has(start)) {
                return 0;
            }
            return this.springs.get(start).postSpringWidth;
        }
        addSpring(start, duration, graceBeatWidth, preBeatWidth, postSpringSize) {
            this.version++;
            let spring;
            if (!this.springs.has(start)) {
                spring = new Spring();
                spring.timePosition = start;
                spring.allDurations.add(duration);
                // check in the previous spring for the shortest duration that overlaps with this spring
                // Gourlay defines that we need the smallest note duration that either starts **or continues** on the current spring.
                if (this._timeSortedSprings.length > 0) {
                    const previousSpring = this._timeSortedSprings[this._timeSortedSprings.length - 1];
                    for (const prevDuration of previousSpring.allDurations) {
                        previousSpring.timePosition + prevDuration;
                    }
                    //spring.smallestDuration = duration;
                    if (duration < this._minDuration) {
                        this._minDuration = duration;
                    }
                }
                spring.longestDuration = duration;
                spring.postSpringWidth = postSpringSize;
                spring.graceBeatWidth = graceBeatWidth;
                spring.preBeatWidth = preBeatWidth;
                this.springs.set(start, spring);
                const timeSorted = this._timeSortedSprings;
                let insertPos = timeSorted.length - 1;
                while (insertPos > 0 && timeSorted[insertPos].timePosition > start) {
                    insertPos--;
                }
                this._timeSortedSprings.splice(insertPos + 1, 0, spring);
            }
            else {
                spring = this.springs.get(start);
                if (spring.postSpringWidth < postSpringSize) {
                    spring.postSpringWidth = postSpringSize;
                }
                if (spring.graceBeatWidth < graceBeatWidth) {
                    spring.graceBeatWidth = graceBeatWidth;
                }
                if (spring.preBeatWidth < preBeatWidth) {
                    spring.preBeatWidth = preBeatWidth;
                }
                if (duration < spring.smallestDuration) {
                    spring.smallestDuration = duration;
                }
                if (duration > spring.longestDuration) {
                    spring.longestDuration = duration;
                }
                spring.allDurations.add(duration);
            }
            if (this._minTime === -1 || this._minTime > start) {
                this._minTime = start;
            }
            return spring;
        }
        addBeatSpring(beat, preBeatSize, postBeatSize) {
            const start = beat.absoluteDisplayStart;
            if (beat.graceType !== GraceType.None) {
                // For grace beats we just remember the the sizes required for them
                // these sizes are then considered when the target beat is added.
                const groupId = beat.graceGroup.id;
                if (!this.allGraceRods.has(groupId)) {
                    this.allGraceRods.set(groupId, new Array(beat.graceGroup.beats.length));
                }
                if (!beat.graceGroup.isComplete && !this.incompleteGraceRods.has(groupId)) {
                    this.incompleteGraceRods.set(groupId, new Array(beat.graceGroup.beats.length));
                }
                const existingSpring = this.allGraceRods.get(groupId)[beat.graceIndex];
                if (existingSpring) {
                    if (existingSpring.postSpringWidth < postBeatSize) {
                        existingSpring.postSpringWidth = postBeatSize;
                    }
                    if (existingSpring.preBeatWidth < preBeatSize) {
                        existingSpring.preBeatWidth = preBeatSize;
                    }
                }
                else {
                    const graceSpring = new Spring();
                    graceSpring.timePosition = start;
                    graceSpring.postSpringWidth = postBeatSize;
                    graceSpring.preBeatWidth = preBeatSize;
                    if (!beat.graceGroup.isComplete) {
                        this.incompleteGraceRods.get(groupId)[beat.graceIndex] = graceSpring;
                    }
                    this.allGraceRods.get(groupId)[beat.graceIndex] = graceSpring;
                }
            }
            else {
                let graceBeatSize = 0;
                if (beat.graceGroup && this.allGraceRods.has(beat.graceGroup.id)) {
                    for (const graceBeat of this.allGraceRods.get(beat.graceGroup.id)) {
                        graceBeatSize += graceBeat.springWidth;
                    }
                }
                this.addSpring(start, beat.displayDuration, graceBeatSize, preBeatSize, postBeatSize);
            }
        }
        finish() {
            for (const [_, s] of this.allGraceRods) {
                // for grace beats we store the offset
                // in the 'graceBeatWidth' for later use during applying
                // beat positions
                let x = 0;
                for (const sp of s) {
                    x += sp.preBeatWidth;
                    sp.graceBeatWidth = x;
                    x += sp.postSpringWidth;
                }
            }
            this._incompleteGraceRodsWidth = 0;
            for (const s of this.incompleteGraceRods.values()) {
                for (const sp of s) {
                    this._incompleteGraceRodsWidth += sp.preBeatWidth + sp.postSpringWidth;
                }
            }
            this.calculateSpringConstants();
            this.version++;
        }
        calculateSpringConstants() {
            let totalSpringConstant = 0;
            const sortedSprings = this._timeSortedSprings;
            if (sortedSprings.length === 0) {
                this.totalSpringConstant = -1;
                this.minStretchForce = -1;
                return;
            }
            for (let i = 0; i < sortedSprings.length; i++) {
                const currentSpring = sortedSprings[i];
                let duration = 0;
                if (i === sortedSprings.length - 1) {
                    duration = currentSpring.longestDuration;
                }
                else {
                    const nextSpring = sortedSprings[i + 1];
                    duration = Math.abs(nextSpring.timePosition - currentSpring.timePosition);
                }
                currentSpring.springConstant = this.calculateSpringConstant(currentSpring, duration);
                totalSpringConstant += 1 / currentSpring.springConstant;
            }
            this.totalSpringConstant = 1 / totalSpringConstant;
            // calculate the force required to have at least the minimum size.
            this.minStretchForce = 0;
            // We take the space required between current and next spring
            // and calculate the force needed so that the current spring
            // reserves enough space
            for (let i = 0; i < sortedSprings.length; i++) {
                const currentSpring = sortedSprings[i];
                let requiredSpace = 0;
                if (i === sortedSprings.length - 1) {
                    requiredSpace = currentSpring.postSpringWidth;
                }
                else {
                    const nextSpring = sortedSprings[i + 1];
                    requiredSpace = currentSpring.postSpringWidth + nextSpring.preSpringWidth;
                }
                // for the first spring we need to ensure we take the initial
                // pre-spring width into account
                if (i === 0) {
                    requiredSpace += currentSpring.preSpringWidth;
                }
                const requiredSpaceForce = requiredSpace * currentSpring.springConstant;
                this.updateMinStretchForce(requiredSpaceForce);
            }
        }
        paint(_cx, _cy, _canvas) {
        }
        // public height: number = 30;
        // public paint(cx: number, cy: number, canvas: ICanvas) {
        //     let sortedSprings: Spring[] = this._timeSortedSprings;
        //     if (sortedSprings.length === 0) {
        //         return;
        //     }
        //     const settings = canvas.settings;
        //     const force = Math.max(settings.display.stretchForce, this.minStretchForce);
        //     const height = this.height;
        //     cy -= height;
        //     canvas.color = settings.display.resources.mainGlyphColor;
        //     const font = settings.display.resources.effectFont.withSize(settings.display.resources.effectFont.size * 0.8);
        //     canvas.font = font;
        //     canvas.fillText(force.toFixed(2), cx, cy);
        //     cy += settings.display.resources.effectFont.size * 1.5;
        //     let springX: number = sortedSprings[0].preSpringWidth;
        //     for (let i: number = 0; i < sortedSprings.length; i++) {
        //         const spring = sortedSprings[i];
        //         canvas.color = new Color(0, 0, 255, 100);
        //         canvas.fillRect(cx + springX - spring.preSpringWidth, cy, spring.preSpringWidth, height / 2);
        //         canvas.color = new Color(0, 255, 0, 100);
        //         canvas.fillRect(cx + springX, cy, spring.postSpringWidth, height / 2);
        //         canvas.color = settings.display.resources.mainGlyphColor;
        //         canvas.moveTo(cx + springX, cy);
        //         canvas.lineTo(cx + springX, cy + height / 2);
        //         canvas.stroke();
        //         springX += this.calculateWidth(force, spring.springConstant);
        //     }
        // }
        calculateSpringConstant(spring, duration) {
            if (duration <= 0) {
                duration = MidiUtils.toTicks(Duration.TwoHundredFiftySixth);
            }
            if (spring.smallestDuration === 0) {
                spring.smallestDuration = duration;
            }
            const smallestDuration = spring.smallestDuration;
            const minDuration = this._minDuration;
            const minDurationWidth = BarLayoutingInfo.MinDurationWidth;
            const phi = 1 + 0.85 * Math.log2(duration / minDuration);
            return (smallestDuration / duration) * (1 / (phi * minDurationWidth));
        }
        spaceToForce(space) {
            if (this.totalSpringConstant !== -1) {
                if (this._timeSortedSprings.length > 0) {
                    space -= this._timeSortedSprings[0].preSpringWidth;
                }
                space -= this._incompleteGraceRodsWidth;
                return Math.max(space, 0) * this.totalSpringConstant;
            }
            return -1;
        }
        calculateVoiceWidth(force) {
            let width = 0;
            if (this.totalSpringConstant !== -1) {
                width = this.calculateWidth(force, this.totalSpringConstant);
            }
            if (this._timeSortedSprings.length > 0) {
                width += this._timeSortedSprings[0].preSpringWidth;
            }
            width += this._incompleteGraceRodsWidth;
            return width;
        }
        calculateWidth(force, springConstant) {
            return force / springConstant;
        }
        buildOnTimePositions(force) {
            if (this.totalSpringConstant === -1) {
                return new Map();
            }
            if (ModelUtils.isAlmostEqualTo(this._onTimePositionsForce, force) && this._onTimePositions) {
                return this._onTimePositions;
            }
            this._onTimePositionsForce = force;
            const positions = new Map();
            this._onTimePositions = positions;
            const sortedSprings = this._timeSortedSprings;
            if (sortedSprings.length === 0) {
                return positions;
            }
            let springX = sortedSprings[0].preSpringWidth;
            for (let i = 0; i < sortedSprings.length; i++) {
                positions.set(sortedSprings[i].timePosition, springX);
                springX += this.calculateWidth(force, sortedSprings[i].springConstant);
            }
            return positions;
        }
    }
    BarLayoutingInfo.MinDuration = 30;
    BarLayoutingInfo.MinDurationWidth = 7;

    /**
     * This container represents a single column of bar renderers independent from any staves.
     * This container can be used to reorganize renderers into a new staves.
     */
    class MasterBarsRenderers {
        constructor() {
            this.width = 0;
            this.isLinkedToPrevious = false;
            this.canWrap = true;
            this.additionalMultiBarRestIndexes = null;
            this.renderers = [];
        }
        get lastMasterBarIndex() {
            if (this.additionalMultiBarRestIndexes) {
                return this.additionalMultiBarRestIndexes[this.additionalMultiBarRestIndexes.length - 1];
            }
            return this.masterBar.index;
        }
    }

    /**
     * Represents the group of rendered staves belonging to an individual track.
     * This includes staves like effects, notation representations (numbered, tabs,..) and multiple
     * staffs (grand staff).
     */
    class StaffTrackGroup {
        constructor(staffSystem, track) {
            this.staves = [];
            this.stavesRelevantForBoundsLookup = [];
            this.firstStaffInBracket = null;
            this.lastStaffInBracket = null;
            this.bracket = null;
            this.staffSystem = staffSystem;
            this.track = track;
        }
        addStaff(staff) {
            this.staves.push(staff);
            if (staff.isRelevantForBoundsLookup) {
                this.stavesRelevantForBoundsLookup.push(staff);
            }
        }
    }

    class SystemBracket {
        constructor() {
            this.firstStaffInBracket = null;
            this.lastStaffInBracket = null;
            this.drawAsBrace = false;
            this.braceScale = 1;
            this.width = 0;
            this.index = 0;
        }
        finalizeBracket() {
            // systems with just a single staff do not have a bracket
            if (this.firstStaffInBracket === this.lastStaffInBracket) {
                this.width = 0;
                return;
            }
            // SMUFL: The brace glyph should have a height of 1em, i.e. the height of a single five-line stave, and should be scaled proportionally
            const bravuraBraceHeightAtMusicFontSize = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.Brace);
            const bravuraBraceWidthAtMusicFontSize = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.Brace);
            // normal bracket width
            this.width = bravuraBraceWidthAtMusicFontSize;
            if (!this.drawAsBrace || !this.firstStaffInBracket || !this.lastStaffInBracket) {
                return;
            }
            const firstStart = this.firstStaffInBracket.contentTop;
            const lastEnd = this.lastStaffInBracket.contentBottom;
            const requiredHeight = lastEnd - firstStart;
            const requiredScaleForBracket = requiredHeight / bravuraBraceHeightAtMusicFontSize;
            this.braceScale = requiredScaleForBracket;
            this.width = bravuraBraceWidthAtMusicFontSize * this.braceScale;
        }
    }
    class SingleTrackSystemBracket extends SystemBracket {
        constructor(track) {
            super();
            this.track = track;
            this.drawAsBrace = SingleTrackSystemBracket.isTrackDrawAsBrace(track);
        }
        includesStaff(r) {
            return r.modelStaff.track === this.track;
        }
        static isTrackDrawAsBrace(track) {
            return track.staves.filter(s => s.showStandardNotation).length > 1;
        }
    }
    class SimilarInstrumentSystemBracket extends SingleTrackSystemBracket {
        includesStaff(r) {
            // allow merging on same track (for braces, percussion and items belonging together)
            if (r.modelStaff.track === this.track) {
                return true;
            }
            // braces are never cross-track
            if (this.drawAsBrace) {
                return false;
            }
            // we allow cross track merging of staffs when they have the same program
            return this.track.playbackInfo.program === r.modelStaff.track.playbackInfo.program;
        }
    }
    /**
     * A StaffSystem consists of a list of different staves and groups
     * them using an accolade.
     */
    class StaffSystem {
        constructor(layout) {
            this._allStaves = [];
            this._firstStaffInBrackets = null;
            this._lastStaffInBrackets = null;
            this._accoladeSpacingCalculated = false;
            this._brackets = [];
            this._hasSystemSeparator = false;
            this.x = 0;
            this.y = 0;
            this.index = 0;
            /**
             * The width of the whole accolade inclusive text and bar.
             */
            this.accoladeWidth = 0;
            /**
             * Indicates whether this line is full or not. If the line is full the
             * bars can be aligned to the maximum width. If the line is not full
             * the bars will not get stretched.
             */
            this.isFull = false;
            /**
             * The width that the content bars actually need
             */
            this.width = 0;
            this.computedWidth = 0;
            this.totalBarDisplayScale = 0;
            this.isLast = false;
            this.masterBarsRenderers = [];
            this.staves = [];
            this.layout = layout;
            this.topPadding = layout.renderer.settings.display.systemPaddingTop;
            this.bottomPadding = layout.renderer.settings.display.systemPaddingBottom;
        }
        get firstBarIndex() {
            return this.masterBarsRenderers[0].masterBar.index;
        }
        get lastBarIndex() {
            return this.masterBarsRenderers[this.masterBarsRenderers.length - 1].lastMasterBarIndex;
        }
        addMasterBarRenderers(tracks, renderers) {
            if (tracks.length === 0) {
                return null;
            }
            this.masterBarsRenderers.push(renderers);
            renderers.layoutingInfo.preBeatSize = 0;
            let src = 0;
            for (let i = 0, j = this.staves.length; i < j; i++) {
                const g = this.staves[i];
                for (let k = 0, l = g.staves.length; k < l; k++) {
                    const s = g.staves[k];
                    const renderer = renderers.renderers[src++];
                    s.addBarRenderer(renderer);
                }
            }
            this.calculateAccoladeSpacing(tracks);
            this.updateWidthFromLastBar();
            return renderers;
        }
        addBars(tracks, barIndex, additionalMultiBarRestIndexes) {
            const result = new MasterBarsRenderers();
            result.additionalMultiBarRestIndexes = additionalMultiBarRestIndexes;
            result.layoutingInfo = new BarLayoutingInfo();
            result.masterBar = tracks[0].score.masterBars[barIndex];
            this.masterBarsRenderers.push(result);
            // add renderers
            const barLayoutingInfo = result.layoutingInfo;
            for (const g of this.staves) {
                for (const s of g.staves) {
                    const bar = g.track.staves[s.modelStaff.index].bars[barIndex];
                    const additionalMultiBarsRestBars = additionalMultiBarRestIndexes == null
                        ? null
                        : additionalMultiBarRestIndexes.map(b => g.track.staves[s.modelStaff.index].bars[b]);
                    s.addBar(bar, barLayoutingInfo, additionalMultiBarsRestBars);
                    const renderer = s.barRenderers[s.barRenderers.length - 1];
                    result.renderers.push(renderer);
                    if (renderer.isLinkedToPrevious) {
                        result.isLinkedToPrevious = true;
                    }
                    if (!renderer.canWrap) {
                        result.canWrap = false;
                    }
                }
            }
            this.calculateAccoladeSpacing(tracks);
            barLayoutingInfo.finish();
            // ensure same widths of new renderer
            result.width = this.updateWidthFromLastBar();
            return result;
        }
        revertLastBar() {
            if (this.masterBarsRenderers.length > 1) {
                const toRemove = this.masterBarsRenderers[this.masterBarsRenderers.length - 1];
                this.masterBarsRenderers.splice(this.masterBarsRenderers.length - 1, 1);
                let width = 0;
                let barDisplayScale = 0;
                for (let i = 0, j = this._allStaves.length; i < j; i++) {
                    const s = this._allStaves[i];
                    const lastBar = s.revertLastBar();
                    const computedWidth = lastBar.computedWidth;
                    if (computedWidth > width) {
                        width = computedWidth;
                    }
                    const newBarDisplayScale = lastBar.barDisplayScale;
                    if (newBarDisplayScale > barDisplayScale) {
                        barDisplayScale = newBarDisplayScale;
                    }
                }
                this.width -= width;
                this.computedWidth -= width;
                this.totalBarDisplayScale -= barDisplayScale;
                return toRemove;
            }
            return null;
        }
        updateWidthFromLastBar() {
            let realWidth = 0;
            let barDisplayScale = 0;
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                const s = this._allStaves[i];
                const last = s.barRenderers[s.barRenderers.length - 1];
                last.applyLayoutingInfo();
                if (last.computedWidth > realWidth) {
                    realWidth = last.computedWidth;
                }
                const newBarDisplayScale = last.barDisplayScale;
                if (newBarDisplayScale > barDisplayScale) {
                    barDisplayScale = newBarDisplayScale;
                }
            }
            this.width += realWidth;
            this.computedWidth += realWidth;
            this.totalBarDisplayScale += barDisplayScale;
            return realWidth;
        }
        calculateAccoladeSpacing(tracks) {
            const settings = this.layout.renderer.settings;
            if (!this._accoladeSpacingCalculated) {
                this._accoladeSpacingCalculated = true;
                this.accoladeWidth = 0;
                const stylesheet = this.layout.renderer.score.stylesheet;
                const hasTrackName = this.layout.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.TrackNames);
                if (hasTrackName) {
                    const trackNamePolicy = this.layout.renderer.tracks.length === 1
                        ? stylesheet.singleTrackTrackNamePolicy
                        : stylesheet.multiTrackTrackNamePolicy;
                    const trackNameMode = this.index === 0 ? stylesheet.firstSystemTrackNameMode : stylesheet.otherSystemsTrackNameMode;
                    const trackNameOrientation = this.index === 0
                        ? stylesheet.firstSystemTrackNameOrientation
                        : stylesheet.otherSystemsTrackNameOrientation;
                    let shouldRender = false;
                    switch (trackNamePolicy) {
                        case TrackNamePolicy.Hidden:
                            break;
                        case TrackNamePolicy.FirstSystem:
                            shouldRender = this.index === 0;
                            break;
                        case TrackNamePolicy.AllSystems:
                            shouldRender = true;
                            break;
                    }
                    let hasAnyTrackName = false;
                    if (shouldRender) {
                        const canvas = this.layout.renderer.canvas;
                        const res = settings.display.resources.effectFont;
                        canvas.font = res;
                        for (const t of tracks) {
                            let trackNameText = '';
                            switch (trackNameMode) {
                                case TrackNameMode.FullName:
                                    trackNameText = t.name;
                                    break;
                                case TrackNameMode.ShortName:
                                    trackNameText = t.shortName;
                                    break;
                            }
                            if (trackNameText.length > 0) {
                                hasAnyTrackName = true;
                                const size = canvas.measureText(trackNameText);
                                switch (trackNameOrientation) {
                                    case TrackNameOrientation.Horizontal:
                                        this.accoladeWidth = Math.ceil(Math.max(this.accoladeWidth, size.width));
                                        break;
                                    case TrackNameOrientation.Vertical:
                                        this.accoladeWidth = Math.ceil(Math.max(this.accoladeWidth, size.height));
                                        break;
                                }
                            }
                        }
                        if (hasAnyTrackName) {
                            this.accoladeWidth += settings.display.systemLabelPaddingLeft;
                            this.accoladeWidth += settings.display.systemLabelPaddingRight;
                        }
                    }
                }
                // NOTE: we have a chicken-egg problem when it comes to scaling braces which we try to mitigate here:
                // - The brace scales with the height of the system
                // - The height of the system depends on the bars which can be fitted
                // By taking another bar into the system, the height can grow and by this the width of the brace and then it doesn't fit anymore.
                // It is not worth the complexity to align the height and width of the brace.
                // So we do a rough approximation of the space needed for the brace based on the staves we have at this point.
                // Additional Staff separations caused later are not respected.
                // users can mitigate truncation with specfiying a systemLabelPaddingLeft.
                // alternative idea for the future:
                // - we could force the brace to the width we initially calculate here so it will not grow beyond that.
                // - requires a feature to draw glyphs with a max-width or a horizontal stretch scale
                let currentY = 0;
                for (const staff of this._allStaves) {
                    staff.y = currentY;
                    staff.calculateHeightForAccolade();
                    currentY += staff.height;
                }
                let braceWidth = 0;
                for (const b of this._brackets) {
                    b.finalizeBracket();
                    braceWidth = Math.max(braceWidth, b.width);
                }
                this.accoladeWidth += braceWidth;
                this.width += this.accoladeWidth;
                this.computedWidth += this.accoladeWidth;
            }
        }
        getStaffTrackGroup(track) {
            for (let i = 0, j = this.staves.length; i < j; i++) {
                const g = this.staves[i];
                if (g.track === track) {
                    return g;
                }
            }
            return null;
        }
        addStaff(track, staff) {
            let group = this.getStaffTrackGroup(track);
            if (!group) {
                group = new StaffTrackGroup(this, track);
                this.staves.push(group);
            }
            staff.staffTrackGroup = group;
            staff.system = this;
            staff.index = this._allStaves.length;
            this._allStaves.push(staff);
            group.addStaff(staff);
            if (staff.isInsideBracket) {
                if (!this._firstStaffInBrackets) {
                    this._firstStaffInBrackets = staff;
                    staff.isFirstInSystem = true;
                }
                if (!group.firstStaffInBracket) {
                    group.firstStaffInBracket = staff;
                }
                this._lastStaffInBrackets = staff;
                group.lastStaffInBracket = staff;
                let bracket = this._brackets.find(b => b.includesStaff(staff));
                if (!bracket) {
                    switch (track.score.stylesheet.bracketExtendMode) {
                        case BracketExtendMode.NoBrackets:
                            break;
                        case BracketExtendMode.GroupStaves:
                            // when grouping staves, we create one bracket for the whole track across all staves
                            bracket = new SingleTrackSystemBracket(track);
                            bracket.index = this._brackets.length;
                            this._brackets.push(bracket);
                            break;
                        case BracketExtendMode.GroupSimilarInstruments:
                            bracket = new SimilarInstrumentSystemBracket(track);
                            bracket.index = this._brackets.length;
                            this._brackets.push(bracket);
                            break;
                    }
                }
                if (bracket) {
                    if (!bracket.firstStaffInBracket) {
                        bracket.firstStaffInBracket = staff;
                    }
                    bracket.lastStaffInBracket = staff;
                    // NOTE: one StaffTrackGroup can currently never have multiple brackets so we can safely keep the last known here
                    group.bracket = bracket;
                }
            }
        }
        get height() {
            return this._allStaves.length === 0
                ? 0
                : this._allStaves[this._allStaves.length - 1].y +
                    this._allStaves[this._allStaves.length - 1].height +
                    this.topPadding +
                    this.bottomPadding;
        }
        scaleToWidth(width) {
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                this._allStaves[i].scaleToWidth(width);
            }
            this.width = width;
        }
        paint(cx, cy, canvas) {
            // const c = canvas.color;
            // canvas.color = Color.random(255);
            // canvas.strokeRect(cx + this.x, cy + this.y, this.width, this.height);
            // canvas.color = c;
            cy += this.topPadding;
            this.paintPartial(cx + this.x, cy + this.y, canvas, 0, this.masterBarsRenderers.length);
            if (this._hasSystemSeparator) {
                const _ = ElementStyleHelper.track(canvas, TrackSubElement.SystemSeparator, this._allStaves[0].modelStaff.track);
                try {
                    canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + this.height - 10, 1, MusicFontSymbol.SystemDivider, false);
                    canvas.fillMusicFontSymbol(cx + this.x + this.width - StaffSystem.SystemSignSeparatorWidth, cy + this.y + this.height - StaffSystem.SystemSignSeparatorPadding, 1, MusicFontSymbol.SystemDivider, false);
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        paintPartial(cx, cy, canvas, startIndex, count) {
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                this._allStaves[i].paint(cx, cy, canvas, startIndex, count);
            }
            const res = this.layout.renderer.settings.display.resources;
            if (this.staves.length > 0 && startIndex === 0) {
                //
                // Draw start grouping
                //
                canvas.color = res.barSeparatorColor;
                //
                // Draw track names
                const settings = this.layout.renderer.settings;
                const hasTrackName = this.layout.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.TrackNames);
                canvas.font = res.effectFont;
                if (hasTrackName) {
                    const stylesheet = this.layout.renderer.score.stylesheet;
                    const trackNamePolicy = this.layout.renderer.tracks.length === 1
                        ? stylesheet.singleTrackTrackNamePolicy
                        : stylesheet.multiTrackTrackNamePolicy;
                    const trackNameMode = this.index === 0 ? stylesheet.firstSystemTrackNameMode : stylesheet.otherSystemsTrackNameMode;
                    const trackNameOrientation = this.index === 0
                        ? stylesheet.firstSystemTrackNameOrientation
                        : stylesheet.otherSystemsTrackNameOrientation;
                    let shouldRender = false;
                    switch (trackNamePolicy) {
                        case TrackNamePolicy.Hidden:
                            break;
                        case TrackNamePolicy.FirstSystem:
                            shouldRender = this.index === 0;
                            break;
                        case TrackNamePolicy.AllSystems:
                            shouldRender = true;
                            break;
                    }
                    if (shouldRender) {
                        const oldBaseLine = canvas.textBaseline;
                        const oldTextAlign = canvas.textAlign;
                        for (const g of this.staves) {
                            if (g.firstStaffInBracket && g.lastStaffInBracket) {
                                const firstStart = cy + g.firstStaffInBracket.contentTop;
                                const lastEnd = cy + g.lastStaffInBracket.contentBottom;
                                let trackNameText = '';
                                switch (trackNameMode) {
                                    case TrackNameMode.FullName:
                                        trackNameText = g.track.name;
                                        break;
                                    case TrackNameMode.ShortName:
                                        trackNameText = g.track.shortName;
                                        break;
                                }
                                const _trackNameStyle = ElementStyleHelper.track(canvas, TrackSubElement.TrackName, g.track);
                                try {
                                    if (trackNameText.length > 0) {
                                        const textEndX = 
                                        // start at beginning of first renderer
                                        cx +
                                            g.firstStaffInBracket.x -
                                            // left side of the bracket
                                            settings.display.accoladeBarPaddingRight -
                                            (g.bracket?.width ?? 0) -
                                            // padding between label and bracket
                                            settings.display.systemLabelPaddingRight;
                                        switch (trackNameOrientation) {
                                            case TrackNameOrientation.Horizontal:
                                                canvas.textBaseline = TextBaseline.Middle;
                                                canvas.textAlign = TextAlign.Right;
                                                canvas.fillText(trackNameText, textEndX, (firstStart + lastEnd) / 2);
                                                break;
                                            case TrackNameOrientation.Vertical:
                                                canvas.textBaseline = TextBaseline.Bottom;
                                                canvas.textAlign = TextAlign.Center;
                                                // -90° looks terrible in chrome, antialiasing seems to be disabled
                                                // adding 0.1° to re-enable antialiasing at the cost of a slight angle
                                                const chromeTextAntialiasingFix = 0.1;
                                                canvas.beginRotate(textEndX, (firstStart + lastEnd) / 2, -90 - chromeTextAntialiasingFix);
                                                canvas.fillText(trackNameText, 0, 0);
                                                canvas.endRotate();
                                                break;
                                        }
                                    }
                                }
                                finally {
                                    _trackNameStyle?.[Symbol.dispose]?.();
                                }
                            }
                        }
                        canvas.textBaseline = oldBaseLine;
                        canvas.textAlign = oldTextAlign;
                    }
                }
                if (this._allStaves.length > 0) {
                    let previousStaffInBracket = null;
                    for (const s of this._allStaves) {
                        if (s.isInsideBracket) {
                            if (previousStaffInBracket !== null) {
                                const previousBottom = previousStaffInBracket.contentBottom;
                                const thisTop = s.contentTop;
                                const accoladeX = cx + previousStaffInBracket.x;
                                const firstLineBarRenderer = previousStaffInBracket.barRenderers[0];
                                const _ = ElementStyleHelper.bar(canvas, firstLineBarRenderer.staffLineBarSubElement, firstLineBarRenderer.bar);
                                try {
                                    const h = Math.ceil(thisTop - previousBottom);
                                    canvas.fillRect(accoladeX, cy + previousBottom, 1, h);
                                }
                                finally {
                                    _?.[Symbol.dispose]?.();
                                }
                            }
                            previousStaffInBracket = s;
                        }
                    }
                }
                //
                // Draw brackets
                for (const bracket of this._brackets) {
                    if (bracket.firstStaffInBracket && bracket.lastStaffInBracket) {
                        const barStartX = cx + bracket.firstStaffInBracket.x;
                        const barSize = bracket.width;
                        const barOffset = settings.display.accoladeBarPaddingRight;
                        const firstStart = cy + bracket.firstStaffInBracket.contentTop;
                        const lastEnd = cy + bracket.lastStaffInBracket.contentBottom;
                        let accoladeStart = firstStart;
                        let accoladeEnd = lastEnd;
                        if (bracket.drawAsBrace) {
                            canvas.fillMusicFontSymbol(barStartX - barOffset - barSize, accoladeEnd, bracket.braceScale, MusicFontSymbol.Brace);
                        }
                        else if (bracket.firstStaffInBracket !== bracket.lastStaffInBracket) {
                            const barOverflow = barSize / 2;
                            accoladeStart -= barOverflow;
                            accoladeEnd += barOverflow * 2;
                            canvas.fillRect(barStartX - barOffset - barSize, accoladeStart, barSize, Math.ceil(accoladeEnd - accoladeStart));
                            const spikeX = barStartX - barOffset - barSize - 0.5;
                            canvas.fillMusicFontSymbol(spikeX, accoladeStart, 1, MusicFontSymbol.BracketTop);
                            canvas.fillMusicFontSymbol(spikeX, Math.floor(accoladeEnd), 1, MusicFontSymbol.BracketBottom);
                        }
                    }
                }
            }
        }
        finalizeSystem() {
            const settings = this.layout.renderer.settings;
            if (this.index === 0) {
                this.topPadding = settings.display.firstSystemPaddingTop;
            }
            if (this.isLast) {
                this.bottomPadding = settings.display.lastSystemPaddingBottom;
            }
            else if (this.layout.renderer.score.stylesheet.useSystemSignSeparator &&
                this.layout.renderer.tracks.length > 1) {
                this.bottomPadding += StaffSystem.SystemSignSeparatorHeight;
                this._hasSystemSeparator = true;
            }
            let currentY = 0;
            for (const staff of this._allStaves) {
                staff.x = this.accoladeWidth;
                staff.y = currentY;
                staff.finalizeStaff();
                currentY += staff.height;
            }
            for (const b of this._brackets) {
                b.finalizeBracket();
            }
        }
        buildBoundingsLookup(cx, cy) {
            if (this.layout.renderer.boundsLookup.isFinished) {
                return;
            }
            const _firstStaffInBrackets = this._firstStaffInBrackets;
            const _lastStaffInBrackets = this._lastStaffInBrackets;
            if (!_firstStaffInBrackets || !_lastStaffInBrackets) {
                return;
            }
            cy += this.topPadding;
            const lastStaff = this._allStaves[this._allStaves.length - 1];
            const visualTop = cy + this.y + _firstStaffInBrackets.y;
            const visualBottom = cy + this.y + _lastStaffInBrackets.y + _lastStaffInBrackets.height;
            const realTop = cy + this.y + this._allStaves[0].y;
            const realBottom = cy + this.y + lastStaff.y + lastStaff.height;
            const lineTop = cy +
                this.y +
                _firstStaffInBrackets.y +
                _firstStaffInBrackets.topSpacing +
                _firstStaffInBrackets.topOverflow +
                (_firstStaffInBrackets.barRenderers.length > 0 ? _firstStaffInBrackets.barRenderers[0].topPadding : 0);
            const lineBottom = cy +
                this.y +
                lastStaff.y +
                lastStaff.height -
                lastStaff.bottomSpacing -
                lastStaff.bottomOverflow -
                (lastStaff.barRenderers.length > 0 ? lastStaff.barRenderers[0].bottomPadding : 0);
            const visualHeight = visualBottom - visualTop;
            const lineHeight = lineBottom - lineTop;
            const realHeight = realBottom - realTop;
            const x = this.x + _firstStaffInBrackets.x;
            const staffSystemBounds = new StaffSystemBounds();
            staffSystemBounds.visualBounds = new Bounds();
            staffSystemBounds.visualBounds.x = cx + this.x;
            staffSystemBounds.visualBounds.y = cy + this.y;
            staffSystemBounds.visualBounds.w = this.width;
            staffSystemBounds.visualBounds.h = this.height - this.topPadding - this.bottomPadding;
            staffSystemBounds.realBounds = new Bounds();
            staffSystemBounds.realBounds.x = cx + this.x;
            staffSystemBounds.realBounds.y = cy + this.y;
            staffSystemBounds.realBounds.w = this.width;
            staffSystemBounds.realBounds.h = this.height;
            this.layout.renderer.boundsLookup.addStaffSystem(staffSystemBounds);
            const masterBarBoundsLookup = new Map();
            for (let i = 0; i < this.staves.length; i++) {
                for (const staff of this.staves[i].stavesRelevantForBoundsLookup) {
                    for (const renderer of staff.barRenderers) {
                        let masterBarBounds;
                        if (!masterBarBoundsLookup.has(renderer.bar.masterBar.index)) {
                            masterBarBounds = new MasterBarBounds();
                            masterBarBounds.index = renderer.bar.masterBar.index;
                            masterBarBounds.isFirstOfLine = renderer.isFirstOfLine;
                            masterBarBounds.realBounds = new Bounds();
                            masterBarBounds.realBounds.x = x + renderer.x;
                            masterBarBounds.realBounds.y = realTop;
                            masterBarBounds.realBounds.w = renderer.width;
                            masterBarBounds.realBounds.h = realHeight;
                            masterBarBounds.visualBounds = new Bounds();
                            masterBarBounds.visualBounds.x = x + renderer.x;
                            masterBarBounds.visualBounds.y = visualTop;
                            masterBarBounds.visualBounds.w = renderer.width;
                            masterBarBounds.visualBounds.h = visualHeight;
                            masterBarBounds.lineAlignedBounds = new Bounds();
                            masterBarBounds.lineAlignedBounds.x = x + renderer.x;
                            masterBarBounds.lineAlignedBounds.y = lineTop;
                            masterBarBounds.lineAlignedBounds.w = renderer.width;
                            masterBarBounds.lineAlignedBounds.h = lineHeight;
                            this.layout.renderer.boundsLookup.addMasterBar(masterBarBounds);
                            masterBarBoundsLookup.set(masterBarBounds.index, masterBarBounds);
                        }
                        else {
                            masterBarBounds = masterBarBoundsLookup.get(renderer.bar.masterBar.index);
                        }
                        renderer.buildBoundingsLookup(masterBarBounds, x, cy + this.y + staff.y);
                    }
                }
            }
        }
        getBarX(index) {
            if (!this._firstStaffInBrackets || this.layout.renderer.tracks.length === 0) {
                return 0;
            }
            const bar = this.layout.renderer.tracks[0].staves[0].bars[index];
            const renderer = this.layout.getRendererForBar(this._firstStaffInBrackets.staffId, bar);
            return renderer.x;
        }
    }
    StaffSystem.SystemSignSeparatorHeight = 40;
    StaffSystem.SystemSignSeparatorPadding = 10;
    StaffSystem.SystemSignSeparatorWidth = 36;

    class TuningContainerGlyph extends RowContainerGlyph {
        constructor(x, y) {
            super(x, y, TextAlign.Left);
        }
    }

    class TuningGlyph extends GlyphGroup {
        constructor(x, y, tuning, trackLabel) {
            super(x, y);
            this._tuning = tuning;
            this._trackLabel = trackLabel;
            this.glyphs = [];
        }
        doLayout() {
            if (this.glyphs.length > 0) {
                return;
            }
            this.createGlyphs(this._tuning);
            for (const g of this.glyphs) {
                g.renderer = this.renderer;
                g.doLayout();
            }
        }
        paint(cx, cy, canvas) {
            canvas.textBaseline = TextBaseline.Middle;
            const c = canvas.color;
            if (this.colorOverride) {
                canvas.color = this.colorOverride;
            }
            super.paint(cx, cy, canvas);
            canvas.color = c;
        }
        createGlyphs(tuning) {
            const res = this.renderer.resources;
            this.height = 0;
            const rowHeight = 15;
            const textPadding = 1;
            // Track name
            if (this._trackLabel.length > 0) {
                this.height += textPadding;
                const trackName = new TextGlyph(0, this.height, this._trackLabel, res.effectFont, TextAlign.Left);
                trackName.renderer = this.renderer;
                trackName.doLayout();
                this.height += trackName.height + textPadding;
                trackName.y += trackName.height / 2;
                this.addGlyph(trackName);
            }
            // Name
            const tuningName = new TextGlyph(0, this.height, tuning.name, res.effectFont, TextAlign.Left);
            tuningName.renderer = this.renderer;
            tuningName.doLayout();
            this.height += tuningName.height;
            tuningName.y += tuningName.height / 2;
            this.addGlyph(tuningName);
            const stringColumnWidth = 64;
            this.renderer.scoreRenderer.canvas.font = res.effectFont;
            this.width = Math.max(this.renderer.scoreRenderer.canvas.measureText(this._trackLabel).width, Math.max(this.renderer.scoreRenderer.canvas.measureText(tuning.name).width, 2 * stringColumnWidth));
            if (!tuning.isStandard) {
                this.height += rowHeight;
                const circleScale = TuningGlyph.CircleNumberScale;
                const circleHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.GuitarString0) * circleScale;
                // Strings
                const stringsPerColumn = Math.ceil(tuning.tunings.length / 2.0) | 0;
                let currentX = 0;
                let currentY = this.height;
                for (let i = 0, j = tuning.tunings.length; i < j; i++) {
                    const symbol = (MusicFontSymbol.GuitarString0 + (i + 1));
                    this.addGlyph(new MusicFontGlyph(currentX, currentY + circleHeight / 2.5, circleScale, symbol));
                    const str = `= ${Tuning.getTextForTuning(tuning.tunings[i], false)}`;
                    this.addGlyph(new TextGlyph(currentX + circleHeight + 1, currentY, str, res.effectFont, TextAlign.Left));
                    currentY += rowHeight;
                    if (i === stringsPerColumn - 1) {
                        currentY = this.height;
                        currentX += stringColumnWidth;
                    }
                }
                this.height += stringsPerColumn * rowHeight;
            }
            this.width += 15;
        }
    }
    TuningGlyph.CircleNumberScale = 0.7;

    class LazyPartial {
        constructor(args, renderCallback) {
            this.args = args;
            this.renderCallback = renderCallback;
        }
    }
    /**
     * Lists the different modes in which the staves and systems are arranged.
     */
    var InternalSystemsLayoutMode;
    (function (InternalSystemsLayoutMode) {
        /**
         * Use the automatic alignment system provided by alphaTab (default)
         */
        InternalSystemsLayoutMode[InternalSystemsLayoutMode["Automatic"] = 0] = "Automatic";
        /**
         * Use the relative scaling information stored in the score model.
         */
        InternalSystemsLayoutMode[InternalSystemsLayoutMode["FromModelWithScale"] = 1] = "FromModelWithScale";
        /**
         * Use the absolute size information stored in the score model.
         */
        InternalSystemsLayoutMode[InternalSystemsLayoutMode["FromModelWithWidths"] = 2] = "FromModelWithWidths";
    })(InternalSystemsLayoutMode || (InternalSystemsLayoutMode = {}));
    /**
     * This is the base class for creating new layouting engines for the score renderer.
     */
    class ScoreLayout {
        get scaledWidth() {
            return Math.round(this.width / this.renderer.settings.display.scale);
        }
        constructor(renderer) {
            this._barRendererLookup = new Map();
            this.pagePadding = null;
            this.width = 0;
            this.height = 0;
            this.multiBarRestInfo = null;
            this.headerGlyphs = new Map();
            this.footerGlyphs = new Map();
            this.chordDiagrams = null;
            this.tuningGlyph = null;
            this.systemsLayoutMode = InternalSystemsLayoutMode.Automatic;
            this._lazyPartials = new Map();
            this.firstBarIndex = 0;
            this.lastBarIndex = 0;
            this.renderer = renderer;
        }
        resize() {
            this._lazyPartials.clear();
            this.doResize();
        }
        layoutAndRender() {
            this._lazyPartials.clear();
            const score = this.renderer.score;
            this.firstBarIndex = ModelUtils.computeFirstDisplayedBarIndex(score, this.renderer.settings);
            this.lastBarIndex = ModelUtils.computeLastDisplayedBarIndex(score, this.renderer.settings, this.firstBarIndex);
            this.multiBarRestInfo = ModelUtils.buildMultiBarRestInfo(this.renderer.tracks, this.firstBarIndex, this.lastBarIndex);
            this.pagePadding = this.renderer.settings.display.padding.map(p => p / this.renderer.settings.display.scale);
            if (!this.pagePadding) {
                this.pagePadding = [0, 0, 0, 0];
            }
            if (this.pagePadding.length === 1) {
                this.pagePadding = [this.pagePadding[0], this.pagePadding[0], this.pagePadding[0], this.pagePadding[0]];
            }
            else if (this.pagePadding.length === 2) {
                this.pagePadding = [this.pagePadding[0], this.pagePadding[1], this.pagePadding[0], this.pagePadding[1]];
            }
            this.createScoreInfoGlyphs();
            this.doLayoutAndRender();
        }
        registerPartial(args, callback) {
            if (args.height === 0) {
                return;
            }
            const scale = this.renderer.settings.display.scale;
            args.x *= scale;
            args.y *= scale;
            args.width *= scale;
            args.height *= scale;
            args.totalWidth *= scale;
            args.totalHeight *= scale;
            if (!this.renderer.settings.core.enableLazyLoading) {
                // in case of no lazy loading -> first notify about layout, then directly render
                this.renderer.partialLayoutFinished.trigger(args);
                this.internalRenderLazyPartial(args, callback);
            }
            else {
                // in case of lazy loading -> first register lazy, then notify
                this._lazyPartials.set(args.id, new LazyPartial(args, callback));
                this.renderer.partialLayoutFinished.trigger(args);
            }
        }
        internalRenderLazyPartial(args, callback) {
            const canvas = this.renderer.canvas;
            canvas.beginRender(args.width, args.height);
            callback(canvas);
            args.renderResult = canvas.endRender();
            this.renderer.partialRenderFinished.trigger(args);
        }
        renderLazyPartial(resultId) {
            if (this._lazyPartials.has(resultId)) {
                const lazyPartial = this._lazyPartials.get(resultId);
                this.internalRenderLazyPartial(lazyPartial.args, lazyPartial.renderCallback);
            }
        }
        createHeaderFooterGlyph(settings, score, element, notationElement) {
            // special case 1: Words and Music combination
            // special case 2: Copyright2 without Copyright 1 (Assuming order here)
            switch (element) {
                case ScoreSubElement.WordsAndMusic:
                    if (score.words !== score.music) {
                        return undefined;
                    }
                    break;
                case ScoreSubElement.Words:
                case ScoreSubElement.Music:
                    if (score.words === score.music) {
                        return undefined;
                    }
                    break;
                case ScoreSubElement.CopyrightSecondLine:
                    if (!this.headerGlyphs.has(ScoreSubElement.Copyright)) {
                        return undefined;
                    }
                    break;
            }
            const res = settings.display.resources;
            const notation = settings.notation;
            const hasStyle = score.style && score.style.headerAndFooter.has(element);
            const style = hasStyle
                ? score.style.headerAndFooter.get(element)
                : ScoreStyle.defaultHeaderAndFooter.get(element);
            let isVisible = style.isVisible !== undefined ? style.isVisible : true;
            if (notationElement !== undefined) {
                isVisible = notation.isNotationElementVisible(notationElement);
            }
            if (!isVisible) {
                return undefined;
            }
            const text = style.buildText(score);
            if (!text) {
                return undefined;
            }
            return new TextGlyph(0, 0, text, res.getFontForElement(element), style.textAlign, undefined, ElementStyleHelper.scoreColor(res, element, score));
        }
        createScoreInfoGlyphs() {
            Logger.debug('ScoreLayout', 'Creating score info glyphs');
            const settings = this.renderer.settings;
            const score = this.renderer.score;
            this.headerGlyphs = new Map();
            this.footerGlyphs = new Map();
            const fakeBarRenderer = new BarRendererBase(this.renderer, this.renderer.tracks[0].staves[0].bars[0]);
            for (const [scoreElement, notationElement] of ScoreLayout.HeaderElements.value) {
                const glyph = this.createHeaderFooterGlyph(settings, score, scoreElement, notationElement);
                if (glyph) {
                    glyph.renderer = fakeBarRenderer;
                    glyph.doLayout();
                    this.headerGlyphs.set(scoreElement, glyph);
                }
            }
            for (const [scoreElement, notationElement] of ScoreLayout.FooterElements.value) {
                const glyph = this.createHeaderFooterGlyph(settings, score, scoreElement, notationElement);
                if (glyph) {
                    glyph.renderer = fakeBarRenderer;
                    glyph.doLayout();
                    this.footerGlyphs.set(scoreElement, glyph);
                }
            }
            const notation = settings.notation;
            const res = settings.display.resources;
            if (notation.isNotationElementVisible(exports.NotationElement.GuitarTuning)) {
                const stavesWithTuning = [];
                for (const track of this.renderer.tracks) {
                    for (const staff of track.staves) {
                        let showTuning = !staff.isPercussion && staff.isStringed && staff.tuning.length > 0 && staff.showTablature;
                        if (score.stylesheet.perTrackDisplayTuning &&
                            score.stylesheet.perTrackDisplayTuning.has(track.index) &&
                            score.stylesheet.perTrackDisplayTuning.get(track.index) === false) {
                            showTuning = false;
                        }
                        if (showTuning) {
                            stavesWithTuning.push(staff);
                            break;
                        }
                    }
                }
                // tuning info
                if (stavesWithTuning.length > 0 && score.stylesheet.globalDisplayTuning) {
                    this.tuningGlyph = new TuningContainerGlyph(0, 0);
                    this.tuningGlyph.renderer = fakeBarRenderer;
                    for (const staff of stavesWithTuning) {
                        if (staff.stringTuning.tunings.length > 0) {
                            const trackLabel = stavesWithTuning.length > 1 ? staff.track.name : '';
                            const item = new TuningGlyph(0, 0, staff.stringTuning, trackLabel);
                            item.colorOverride = ElementStyleHelper.trackColor(res, TrackSubElement.StringTuning, staff.track);
                            item.renderer = fakeBarRenderer;
                            item.doLayout();
                            this.tuningGlyph.addGlyph(item);
                        }
                    }
                }
                else {
                    this.tuningGlyph = null;
                }
            }
            // chord diagram glyphs
            if (notation.isNotationElementVisible(exports.NotationElement.ChordDiagrams)) {
                this.chordDiagrams = new ChordDiagramContainerGlyph(0, 0);
                this.chordDiagrams.renderer = fakeBarRenderer;
                const chordIds = new Set();
                for (const track of this.renderer.tracks) {
                    const shouldShowDiagramsForTrack = score.stylesheet.globalDisplayChordDiagramsOnTop &&
                        (score.stylesheet.perTrackChordDiagramsOnTop == null ||
                            !score.stylesheet.perTrackChordDiagramsOnTop.has(track.index) ||
                            score.stylesheet.perTrackChordDiagramsOnTop.get(track.index));
                    if (!shouldShowDiagramsForTrack) {
                        continue;
                    }
                    for (const staff of track.staves) {
                        const sc = staff.chords;
                        if (sc) {
                            for (const [, chord] of sc) {
                                if (!chordIds.has(chord.uniqueId)) {
                                    if (chord.showDiagram) {
                                        chordIds.add(chord.uniqueId);
                                        this.chordDiagrams.addChord(chord);
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.chordDiagrams.isEmpty) {
                    this.chordDiagrams = null;
                }
            }
            else {
                this.chordDiagrams = null;
            }
        }
        createEmptyStaffSystem() {
            const system = new StaffSystem(this);
            for (let trackIndex = 0; trackIndex < this.renderer.tracks.length; trackIndex++) {
                const track = this.renderer.tracks[trackIndex];
                for (let staffIndex = 0; staffIndex < track.staves.length; staffIndex++) {
                    const staff = track.staves[staffIndex];
                    const profile = Environment.staveProfiles.get(this.renderer.settings.display.staveProfile);
                    for (const factory of profile) {
                        if (factory.canCreate(track, staff)) {
                            system.addStaff(track, new RenderStaff(trackIndex, staff, factory));
                        }
                    }
                }
            }
            return system;
        }
        registerBarRenderer(key, renderer) {
            if (!this._barRendererLookup.has(key)) {
                this._barRendererLookup.set(key, new Map());
            }
            this._barRendererLookup.get(key).set(renderer.bar.id, renderer);
            if (renderer.additionalMultiRestBars) {
                for (const b of renderer.additionalMultiRestBars) {
                    this._barRendererLookup.get(key).set(b.id, renderer);
                }
            }
        }
        unregisterBarRenderer(key, renderer) {
            if (this._barRendererLookup.has(key)) {
                const lookup = this._barRendererLookup.get(key);
                lookup.delete(renderer.bar.id);
                if (renderer.additionalMultiRestBars) {
                    for (const b of renderer.additionalMultiRestBars) {
                        lookup.delete(b.id);
                    }
                }
            }
        }
        getRendererForBar(key, bar) {
            const barRendererId = bar.id;
            if (this._barRendererLookup.has(key) && this._barRendererLookup.get(key).has(barRendererId)) {
                return this._barRendererLookup.get(key).get(barRendererId);
            }
            return null;
        }
        layoutAndRenderBottomScoreInfo(y) {
            y = Math.round(y);
            const e = new RenderFinishedEventArgs();
            e.x = 0;
            e.y = y;
            let infoHeight = 0;
            const res = this.renderer.settings.display.resources;
            const scoreInfoGlyphs = [];
            let width = 0;
            for (const [scoreElement, _notationElement] of ScoreLayout.FooterElements.value) {
                if (this.footerGlyphs.has(scoreElement)) {
                    const glyph = this.footerGlyphs.get(scoreElement);
                    glyph.y = infoHeight;
                    this.alignScoreInfoGlyph(glyph);
                    infoHeight += glyph.font.size * 1.2;
                    scoreInfoGlyphs.push(glyph);
                    width = Math.max(width, Math.round(glyph.x + glyph.width));
                }
            }
            infoHeight = Math.round(infoHeight);
            if (scoreInfoGlyphs.length > 0) {
                e.width = width;
                e.height = infoHeight;
                e.totalWidth = this.scaledWidth;
                e.totalHeight = y + e.height;
                this.registerPartial(e, (canvas) => {
                    canvas.color = res.scoreInfoColor;
                    canvas.textAlign = TextAlign.Left;
                    canvas.textBaseline = TextBaseline.Top;
                    for (const g of scoreInfoGlyphs) {
                        g.paint(0, 0, canvas);
                    }
                });
            }
            return y + infoHeight;
        }
        alignScoreInfoGlyph(glyph) {
            const isVertical = Environment.getLayoutEngineFactory(this.renderer.settings.display.layoutMode).vertical;
            if (isVertical) {
                switch (glyph.textAlign) {
                    case TextAlign.Left:
                        glyph.x = this.pagePadding[0];
                        break;
                    case TextAlign.Center:
                        glyph.x = this.scaledWidth / 2;
                        break;
                    case TextAlign.Right:
                        glyph.x = this.scaledWidth - this.pagePadding[2];
                        break;
                }
            }
            else {
                glyph.x = this.firstBarX;
                glyph.textAlign = TextAlign.Left;
            }
        }
        layoutAndRenderAnnotation(y) {
            // attention, you are not allowed to remove change this notice within any version of this library without permission!
            const msg = 'rendered by alphaTab';
            const resources = this.renderer.settings.display.resources;
            const size = 12;
            const font = Font.withFamilyList(resources.copyrightFont.families, size, FontStyle.Plain, FontWeight.Bold);
            const fakeBarRenderer = new BarRendererBase(this.renderer, this.renderer.tracks[0].staves[0].bars[0]);
            const glyph = new TextGlyph(0, 0, msg, font, TextAlign.Center, undefined, resources.mainGlyphColor);
            glyph.renderer = fakeBarRenderer;
            glyph.doLayout();
            this.alignScoreInfoGlyph(glyph);
            const e = new RenderFinishedEventArgs();
            e.width = glyph.x + glyph.width;
            e.x = 0;
            e.height = size;
            e.y = y;
            e.totalWidth = this.scaledWidth;
            e.totalHeight = y + size;
            e.firstMasterBarIndex = -1;
            e.lastMasterBarIndex = -1;
            this.registerPartial(e, canvas => {
                canvas.color = resources.mainGlyphColor;
                canvas.font = font;
                canvas.textAlign = TextAlign.Left;
                canvas.textBaseline = TextBaseline.Top;
                glyph.paint(0, 0, canvas);
            });
            return y + size;
        }
    }
    ScoreLayout.HeaderElements = new Lazy(() => new Map([
        [ScoreSubElement.Title, exports.NotationElement.ScoreTitle],
        [ScoreSubElement.SubTitle, exports.NotationElement.ScoreSubTitle],
        [ScoreSubElement.Artist, exports.NotationElement.ScoreArtist],
        [ScoreSubElement.Album, exports.NotationElement.ScoreAlbum],
        [ScoreSubElement.Words, exports.NotationElement.ScoreWords],
        [ScoreSubElement.Music, exports.NotationElement.ScoreMusic],
        [ScoreSubElement.WordsAndMusic, exports.NotationElement.ScoreWordsAndMusic],
        [ScoreSubElement.Transcriber, undefined]
    ]));
    ScoreLayout.FooterElements = new Lazy(() => new Map([
        [ScoreSubElement.Copyright, exports.NotationElement.ScoreCopyright],
        [ScoreSubElement.CopyrightSecondLine, undefined]
    ]));

    class BeatGlyphBase extends GlyphGroup {
        constructor() {
            super(0, 0);
            this._effectGlyphs = [];
            this._normalGlyphs = [];
            this.computedWidth = 0;
        }
        doLayout() {
            // left to right layout
            let w = 0;
            if (this.glyphs) {
                for (let i = 0, j = this.glyphs.length; i < j; i++) {
                    const g = this.glyphs[i];
                    g.x = w;
                    g.renderer = this.renderer;
                    g.doLayout();
                    w += g.width;
                }
            }
            this.width = w;
            this.computedWidth = w;
        }
        noteLoop(action) {
            for (let i = this.container.beat.notes.length - 1; i >= 0; i--) {
                action(this.container.beat.notes[i]);
            }
        }
        addEffect(g) {
            super.addGlyph(g);
            this._effectGlyphs.push(g);
        }
        addNormal(g) {
            super.addGlyph(g);
            this._normalGlyphs.push(g);
        }
        get effectElement() {
            return undefined;
        }
        paint(cx, cy, canvas) {
            this.paintEffects(cx, cy, canvas);
            this.paintNormal(cx, cy, canvas);
        }
        paintNormal(cx, cy, canvas) {
            for (const g of this._normalGlyphs) {
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
        paintEffects(cx, cy, canvas) {
            const _ = this.effectElement
                ? ElementStyleHelper.beat(canvas, this.effectElement, this.container.beat)
                : undefined;
            try {
                for (const g of this._effectGlyphs) {
                    g.paint(cx + this.x, cy + this.y, canvas);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class BeatOnNoteGlyphBase extends BeatGlyphBase {
        constructor() {
            super(...arguments);
            this.centerX = 0;
        }
        updateBeamingHelper() {
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
        }
        getNoteX(note, requestedPosition) {
            return 0;
        }
        getNoteY(note, requestedPosition) {
            return 0;
        }
    }

    class NumberGlyph extends Glyph {
        constructor(x, y, num, scale = 1.0) {
            super(x, y);
            this._scale = 0;
            this._symbols = [];
            this._symbols = NumberGlyph.getSymbols(num);
            this._scale = scale;
        }
        static getSymbols(number) {
            const symbols = [];
            while (number > 0) {
                const digit = number % 10;
                symbols.unshift(NumberGlyph.getSymbol(digit));
                number = (number / 10) | 0;
            }
            return symbols;
        }
        static getSymbol(digit) {
            switch (digit) {
                case 0:
                    return MusicFontSymbol.TimeSig0;
                case 1:
                    return MusicFontSymbol.TimeSig1;
                case 2:
                    return MusicFontSymbol.TimeSig2;
                case 3:
                    return MusicFontSymbol.TimeSig3;
                case 4:
                    return MusicFontSymbol.TimeSig4;
                case 5:
                    return MusicFontSymbol.TimeSig5;
                case 6:
                    return MusicFontSymbol.TimeSig6;
                case 7:
                    return MusicFontSymbol.TimeSig7;
                case 8:
                    return MusicFontSymbol.TimeSig8;
                case 9:
                    return MusicFontSymbol.TimeSig9;
                default:
                    return MusicFontSymbol.None;
            }
        }
        doLayout() {
            let w = 0;
            for (const d of this._symbols) {
                w += MusicFontSymbolSizes.Widths.get(d);
            }
            this.width = w;
        }
        paint(cx, cy, canvas) {
            canvas.fillMusicFontSymbols(cx + this.x, cy + this.y, this._scale, this._symbols);
        }
    }
    NumberGlyph.numberHeight = 18;

    class MultiBarRestGlyph extends Glyph {
        constructor() {
            super(0, 0);
            this._numberGlyph = [];
        }
        doLayout() {
            this.width = 70;
            this.renderer.registerOverflowTop(this.renderer.getLineHeight(1));
            const i = this.renderer.additionalMultiRestBars.length + 1;
            this._numberGlyph = NumberGlyph.getSymbols(i);
        }
        paint(cx, cy, canvas) {
            canvas.fillMusicFontSymbols(cx + this.x, cy + this.y + this.renderer.height / 2, 1, [
                MusicFontSymbol.RestHBarLeft,
                MusicFontSymbol.RestHBarMiddle,
                MusicFontSymbol.RestHBarMiddle,
                MusicFontSymbol.RestHBarMiddle,
                MusicFontSymbol.RestHBarRight
            ]);
            const numberTop = this.renderer.getLineY(-1.5);
            canvas.fillMusicFontSymbols(cx + this.x + MultiBarRestGlyph.BarWidth / 2, (cy + this.y + numberTop) | 0, 1, this._numberGlyph, true);
        }
    }
    MultiBarRestGlyph.BarWidth = 60;

    class MultiBarRestBeatContainerGlyph extends BeatContainerGlyph {
        constructor(voiceContainer) {
            super(MultiBarRestBeatContainerGlyph.getOrCreatePlaceholderBeat(voiceContainer), voiceContainer);
            this.preNotes = new BeatGlyphBase();
            this.onNotes = new BeatOnNoteGlyphBase();
        }
        doLayout() {
            if (this.renderer.showMultiBarRest) {
                this.onNotes.addNormal(new MultiBarRestGlyph());
            }
            super.doLayout();
        }
        static getOrCreatePlaceholderBeat(voiceContainer) {
            if (voiceContainer.voice.beats.length > 1) {
                return voiceContainer.voice.beats[0];
            }
            const placeholder = new Beat();
            placeholder.voice = voiceContainer.voice;
            return placeholder;
        }
    }

    /**
     * Lists the different position modes for {@link BarRendererBase.getNoteY}
     */
    var NoteYPosition;
    (function (NoteYPosition) {
        /**
         * Gets the note y-position on top of the note stem or tab number.
         */
        NoteYPosition[NoteYPosition["TopWithStem"] = 0] = "TopWithStem";
        /**
         * Gets the note y-position on top of the note head or tab number.
         */
        NoteYPosition[NoteYPosition["Top"] = 1] = "Top";
        /**
         * Gets the note y-position on the center of the note head or tab number.
         */
        NoteYPosition[NoteYPosition["Center"] = 2] = "Center";
        /**
         * Gets the note y-position on the bottom of the note head or tab number.
         */
        NoteYPosition[NoteYPosition["Bottom"] = 3] = "Bottom";
        /**
         * Gets the note y-position on the bottom of the note stem or tab number.
         */
        NoteYPosition[NoteYPosition["BottomWithStem"] = 4] = "BottomWithStem";
    })(NoteYPosition || (NoteYPosition = {}));
    /**
     * Lists the different position modes for {@link BarRendererBase.getNoteX}
     */
    var NoteXPosition;
    (function (NoteXPosition) {
        /**
         * Gets the note x-position on left of the note head or tab number.
         */
        NoteXPosition[NoteXPosition["Left"] = 0] = "Left";
        /**
         * Gets the note x-position on the center of the note head or tab number.
         */
        NoteXPosition[NoteXPosition["Center"] = 1] = "Center";
        /**
         * Gets the note x-position on the right of the note head or tab number.
         */
        NoteXPosition[NoteXPosition["Right"] = 2] = "Right";
    })(NoteXPosition || (NoteXPosition = {}));
    /**
     * This is the base public class for creating blocks which can render bars.
     */
    class BarRendererBase {
        get nextRenderer() {
            if (!this.bar || !this.bar.nextBar) {
                return null;
            }
            return this.scoreRenderer.layout.getRendererForBar(this.staff.staffId, this.bar.nextBar);
        }
        get previousRenderer() {
            if (!this.bar || !this.bar.previousBar) {
                return null;
            }
            return this.scoreRenderer.layout.getRendererForBar(this.staff.staffId, this.bar.previousBar);
        }
        get lastBar() {
            if (this.additionalMultiRestBars) {
                return this.additionalMultiRestBars[this.additionalMultiRestBars.length - 1];
            }
            return this.bar;
        }
        get showMultiBarRest() {
            return false;
        }
        constructor(renderer, bar) {
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._voiceContainers = new Map();
            this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._ties = [];
            this.additionalMultiRestBars = null;
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.computedWidth = 0;
            this.height = 0;
            this.index = 0;
            this.topOverflow = 0;
            this.bottomOverflow = 0;
            /**
             * Gets or sets whether this renderer is linked to the next one
             * by some glyphs like a vibrato effect
             */
            this.isLinkedToPrevious = false;
            /**
             * Gets or sets whether this renderer can wrap to the next line
             * or it needs to stay connected to the previous one.
             * (e.g. when having double bar repeats we must not separate the 2 bars)
             */
            this.canWrap = true;
            this.wasFirstOfLine = false;
            this._appliedLayoutingInfo = 0;
            this.isFinalized = false;
            /**
             * Gets the top padding for the main content of the renderer.
             * Can be used to specify where i.E. the score lines of the notation start.
             * @returns
             */
            this.topPadding = 0;
            /**
             * Gets the bottom padding for the main content of the renderer.
             * Can be used to specify where i.E. the score lines of the notation end.
             */
            this.bottomPadding = 0;
            this.scoreRenderer = renderer;
            this.bar = bar;
            if (bar) {
                this.helpers = new BarHelpers(this);
            }
        }
        registerTies(ties) {
            this._ties.push(...ties);
        }
        get middleYPosition() {
            return 0;
        }
        registerOverflowTop(topOverflow) {
            if (topOverflow > this.topOverflow) {
                this.topOverflow = topOverflow;
                return true;
            }
            return false;
        }
        registerOverflowBottom(bottomOverflow) {
            if (bottomOverflow > this.bottomOverflow) {
                this.bottomOverflow = bottomOverflow;
                return true;
            }
            return false;
        }
        scaleToWidth(width) {
            // preBeat and postBeat glyphs do not get resized
            const containerWidth = width - this._preBeatGlyphs.width - this._postBeatGlyphs.width;
            for (const container of this._voiceContainers.values()) {
                container.scaleToWidth(containerWidth);
            }
            this._postBeatGlyphs.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width + containerWidth;
            this.width = width;
        }
        get resources() {
            return this.settings.display.resources;
        }
        get settings() {
            return this.scoreRenderer.settings;
        }
        /**
         * Gets the scale with which the bar should be displayed in case the model
         * scale should be respected.
         */
        get barDisplayScale() {
            return this.staff.system.staves.length > 1 ? this.bar.masterBar.displayScale : this.bar.displayScale;
        }
        /**
         * Gets the absolute width in which the bar should be displayed in case the model
         * scale should be respected.
         */
        get barDisplayWidth() {
            return this.staff.system.staves.length > 1 ? this.bar.masterBar.displayWidth : this.bar.displayWidth;
        }
        get isFirstOfLine() {
            return this.index === 0;
        }
        get isLast() {
            return !this.bar || this.bar.index === this.scoreRenderer.layout.lastBarIndex;
        }
        registerLayoutingInfo() {
            const info = this.layoutingInfo;
            const preSize = this._preBeatGlyphs.width;
            if (info.preBeatSize < preSize) {
                info.preBeatSize = preSize;
            }
            for (const container of this._voiceContainers.values()) {
                container.registerLayoutingInfo(info);
                container.x + container.width;
            }
            const postSize = this._postBeatGlyphs.width;
            if (info.postBeatSize < postSize) {
                info.postBeatSize = postSize;
            }
        }
        applyLayoutingInfo() {
            if (this._appliedLayoutingInfo >= this.layoutingInfo.version) {
                return false;
            }
            this._appliedLayoutingInfo = this.layoutingInfo.version;
            // if we need additional space in the preBeat group we simply
            // add a new spacer
            this._preBeatGlyphs.width = this.layoutingInfo.preBeatSize;
            // on beat glyphs we apply the glyph spacing
            let voiceEnd = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
            for (const c of this._voiceContainers.values()) {
                c.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
                c.applyLayoutingInfo(this.layoutingInfo);
                const newEnd = c.x + c.width;
                if (voiceEnd < newEnd) {
                    voiceEnd = newEnd;
                }
            }
            // on the post glyphs we add the spacing before all other glyphs
            this._postBeatGlyphs.x = Math.floor(voiceEnd);
            this._postBeatGlyphs.width = this.layoutingInfo.postBeatSize;
            this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
            this.computedWidth = this.width;
            // For cases like in the horizontal layout we need to set the fixed width early
            // to have correct partials splitting. the proper alignment to this scale will happen
            // later in the workflow.
            const fixedBarWidth = this.barDisplayWidth;
            if (fixedBarWidth > 0 &&
                this.scoreRenderer.layout.systemsLayoutMode === InternalSystemsLayoutMode.FromModelWithWidths) {
                this.width = fixedBarWidth;
                this.computedWidth = fixedBarWidth;
            }
            return true;
        }
        finalizeRenderer() {
            this.isFinalized = true;
            let didChangeOverflows = false;
            // allow spacing to be used for tie overflows
            const barTop = this.y - this.staff.topSpacing;
            const barBottom = this.y + this.height + this.staff.bottomSpacing;
            for (const tie of this._ties) {
                tie.doLayout();
                if (tie.height > 0) {
                    const bottomOverflow = tie.y + tie.height - barBottom;
                    if (bottomOverflow > 0) {
                        if (this.registerOverflowBottom(bottomOverflow)) {
                            didChangeOverflows = true;
                        }
                    }
                    const topOverflow = tie.y - barTop;
                    if (topOverflow < 0) {
                        if (this.registerOverflowTop(topOverflow * -1)) {
                            didChangeOverflows = true;
                        }
                    }
                }
            }
            return didChangeOverflows;
        }
        doLayout() {
            if (!this.bar) {
                return;
            }
            this.helpers.initialize();
            this._ties = [];
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._preBeatGlyphs.renderer = this;
            this._voiceContainers.clear();
            this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._postBeatGlyphs.renderer = this;
            for (let i = 0; i < this.bar.voices.length; i++) {
                const voice = this.bar.voices[i];
                if (this.hasVoiceContainer(voice)) {
                    const c = new VoiceContainerGlyph(0, 0, voice);
                    c.renderer = this;
                    this._voiceContainers.set(this.bar.voices[i].index, c);
                }
            }
            if (this.bar.simileMark === SimileMark.SecondOfDouble) {
                this.canWrap = false;
            }
            this.createPreBeatGlyphs();
            // multibar rest
            if (this.additionalMultiRestBars) {
                const container = new MultiBarRestBeatContainerGlyph(this.getVoiceContainer(this.bar.voices[0]));
                this.addBeatGlyph(container);
            }
            else {
                this.createBeatGlyphs();
            }
            this.createPostBeatGlyphs();
            this.updateSizes();
            // finish up all helpers
            for (const v of this.helpers.beamHelpers) {
                for (const h of v) {
                    h.finish();
                }
            }
            this.computedWidth = this.width;
        }
        hasVoiceContainer(voice) {
            if (this.additionalMultiRestBars || voice.index === 0) {
                return true;
            }
            return !voice.isEmpty;
        }
        updateSizes() {
            this.staff.registerStaffTop(this.topPadding);
            this.staff.registerStaffBottom(this.height - this.bottomPadding);
            const voiceContainers = this._voiceContainers;
            const beatGlyphsStart = this.beatGlyphsStart;
            let postBeatStart = beatGlyphsStart;
            for (const c of voiceContainers.values()) {
                c.x = beatGlyphsStart;
                c.doLayout();
                const x = c.x + c.width;
                if (postBeatStart < x) {
                    postBeatStart = x;
                }
            }
            this._postBeatGlyphs.x = Math.floor(postBeatStart);
            this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
            this.height += this.layoutingInfo.height;
        }
        addPreBeatGlyph(g) {
            g.renderer = this;
            this._preBeatGlyphs.addGlyph(g);
        }
        addBeatGlyph(g) {
            g.renderer = this;
            g.preNotes.renderer = this;
            g.onNotes.renderer = this;
            g.onNotes.beamingHelper = this.helpers.beamHelperLookup[g.beat.voice.index].get(g.beat.index);
            this.getVoiceContainer(g.beat.voice).addGlyph(g);
        }
        getVoiceContainer(voice) {
            return this._voiceContainers.has(voice.index) ? this._voiceContainers.get(voice.index) : undefined;
        }
        getBeatContainer(beat) {
            return this.getVoiceContainer(beat.voice)?.beatGlyphs?.[beat.index];
        }
        getPreNotesGlyphForBeat(beat) {
            return this.getBeatContainer(beat)?.preNotes;
        }
        getOnNotesGlyphForBeat(beat) {
            return this.getBeatContainer(beat)?.onNotes;
        }
        paint(cx, cy, canvas) {
            this.paintBackground(cx, cy, canvas);
            canvas.color = this.resources.mainGlyphColor;
            this._preBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
            for (const c of this._voiceContainers.values()) {
                c.paint(cx + this.x, cy + this.y, canvas);
            }
            canvas.color = this.resources.mainGlyphColor;
            this._postBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
        }
        paintBackground(cx, cy, canvas) {
            this.layoutingInfo.paint(cx + this.x + this._preBeatGlyphs.x + this._preBeatGlyphs.width, cy + this.y + this.height, canvas);
        }
        buildBoundingsLookup(masterBarBounds, cx, cy) {
            const barBounds = new BarBounds();
            barBounds.bar = this.bar;
            barBounds.visualBounds = new Bounds();
            barBounds.visualBounds.x = cx + this.x;
            barBounds.visualBounds.y = cy + this.y + this.topPadding;
            barBounds.visualBounds.w = this.width;
            barBounds.visualBounds.h = this.height - this.topPadding - this.bottomPadding;
            barBounds.realBounds = new Bounds();
            barBounds.realBounds.x = cx + this.x;
            barBounds.realBounds.y = cy + this.y;
            barBounds.realBounds.w = this.width;
            barBounds.realBounds.h = this.height;
            masterBarBounds.addBar(barBounds);
            for (const [index, c] of this._voiceContainers) {
                const isEmptyBar = this.bar.isEmpty && index === 0;
                if (!c.voice.isEmpty || isEmptyBar) {
                    for (let i = 0, j = c.beatGlyphs.length; i < j; i++) {
                        const bc = c.beatGlyphs[i];
                        bc.buildBoundingsLookup(barBounds, cx + this.x + c.x, cy + this.y + c.y, isEmptyBar);
                    }
                }
            }
        }
        addPostBeatGlyph(g) {
            this._postBeatGlyphs.addGlyph(g);
        }
        createPreBeatGlyphs() {
            this.wasFirstOfLine = this.isFirstOfLine;
        }
        createBeatGlyphs() {
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    this.createVoiceGlyphs(voice);
                }
            }
        }
        createVoiceGlyphs(v) {
        }
        createPostBeatGlyphs() {
        }
        get beatGlyphsStart() {
            return this._preBeatGlyphs.x + this._preBeatGlyphs.width;
        }
        get postBeatGlyphsStart() {
            return this._postBeatGlyphs.x;
        }
        getBeatX(beat, requestedPosition = BeatXPosition.PreNotes) {
            const container = this.getBeatContainer(beat);
            if (container) {
                switch (requestedPosition) {
                    case BeatXPosition.PreNotes:
                        return container.voiceContainer.x + container.x;
                    case BeatXPosition.OnNotes:
                        return container.voiceContainer.x + container.x + container.onNotes.x;
                    case BeatXPosition.MiddleNotes:
                        return container.voiceContainer.x + container.x + container.onTimeX;
                    case BeatXPosition.Stem:
                        const offset = container.onNotes.beamingHelper
                            ? container.onNotes.beamingHelper.getBeatLineX(beat)
                            : container.onNotes.x + container.onNotes.width / 2;
                        return container.voiceContainer.x + offset;
                    case BeatXPosition.PostNotes:
                        return container.voiceContainer.x + container.x + container.onNotes.x + container.onNotes.width;
                    case BeatXPosition.EndBeat:
                        return container.voiceContainer.x + container.x + container.width;
                }
            }
            return 0;
        }
        getRatioPositionX(ticks) {
            const firstOnNoteX = this.bar.isEmpty
                ? this.beatGlyphsStart
                : this.getBeatX(this.bar.voices[0].beats[0], BeatXPosition.OnNotes);
            const x = firstOnNoteX;
            const w = this.postBeatGlyphsStart - firstOnNoteX;
            return x + w * ticks;
        }
        getNoteX(note, requestedPosition) {
            const container = this.getBeatContainer(note.beat);
            if (container) {
                return (container.voiceContainer.x +
                    container.x +
                    container.onNotes.x +
                    container.onNotes.getNoteX(note, requestedPosition));
            }
            return 0;
        }
        getNoteY(note, requestedPosition) {
            const beat = this.getOnNotesGlyphForBeat(note.beat);
            if (beat) {
                return beat.getNoteY(note, requestedPosition);
            }
            return Number.NaN;
        }
        reLayout() {
            // there are some glyphs which are shown only for renderers at the line start, so we simply recreate them
            // but we only need to recreate them for the renderers that were the first of the line or are now the first of the line
            if ((this.wasFirstOfLine && !this.isFirstOfLine) || (!this.wasFirstOfLine && this.isFirstOfLine)) {
                this.recreatePreBeatGlyphs();
            }
            this.updateSizes();
            this.registerLayoutingInfo();
        }
        recreatePreBeatGlyphs() {
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._preBeatGlyphs.renderer = this;
            this.createPreBeatGlyphs();
        }
        paintSimileMark(cx, cy, canvas) {
            const _ = ElementStyleHelper.voice(canvas, VoiceSubElement.Glyphs, this.bar.voices[0], true);
            try {
                switch (this.bar.simileMark) {
                    case SimileMark.Simple:
                        canvas.beginGroup(BeatContainerGlyph.getGroupId(this.bar.voices[0].beats[0]));
                        canvas.fillMusicFontSymbol(cx + this.x + (this.width - 20) / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.Repeat1Bar, false);
                        canvas.endGroup();
                        break;
                    case SimileMark.SecondOfDouble:
                        canvas.beginGroup(BeatContainerGlyph.getGroupId(this.bar.voices[0].beats[0]));
                        canvas.beginGroup(BeatContainerGlyph.getGroupId(this.bar.previousBar.voices[0].beats[0]));
                        canvas.fillMusicFontSymbol(cx + this.x - 28 / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.Repeat2Bars, false);
                        canvas.endGroup();
                        canvas.endGroup();
                        break;
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        completeBeamingHelper(helper) {
        }
        getBeatDirection(beat) {
            return this.helpers.getBeamingHelperForBeat(beat).direction;
        }
    }
    BarRendererBase.RawLineSpacing = 8;
    BarRendererBase.StemWidth = 0.12 /*bravura stemThickness */ * BarRendererBase.RawLineSpacing;
    BarRendererBase.StaffLineThickness = 0.13 /*bravura staffLineThickness */ * BarRendererBase.RawLineSpacing;
    BarRendererBase.BeamThickness = 0.5 /*bravura beamThickness */ * BarRendererBase.RawLineSpacing;
    BarRendererBase.BeamSpacing = 0.25 /*bravura beamSpacing */ * BarRendererBase.RawLineSpacing;

    /**
     * Lists all sizing types of the effect bar glyphs
     */
    var EffectBarGlyphSizing;
    (function (EffectBarGlyphSizing) {
        /**
         * The effect glyph is placed above the pre-beat glyph which is before
         * the actual note in the area where also accidentals are renderered.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SinglePreBeat"] = 0] = "SinglePreBeat";
        /**
         * The effect glyph is placed above the on-beat glyph which is where
         * the actual note head glyphs are placed.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeat"] = 1] = "SingleOnBeat";
        /**
         * The effect glyph is placed above the on-beat glyph which is where
         * the actual note head glyphs are placed. The glyph will size to the end of
         * the applied beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeatToEnd"] = 2] = "SingleOnBeatToEnd";
        /**
         * The effect glyph is placed above the on-beat glyph and expaded to the
         * on-beat position of the next beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeat"] = 3] = "GroupedOnBeat";
        /**
         * The effect glyph is placed above the on-beat glyph and expaded to the
         * on-beat position of the next beat. The glyph will size to the end of
         * the applied beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeatToEnd"] = 4] = "GroupedOnBeatToEnd";
        /**
         * The effect glyph is placed on the whole bar covering the whole width
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["FullBar"] = 5] = "FullBar";
    })(EffectBarGlyphSizing || (EffectBarGlyphSizing = {}));

    class EffectBand extends Glyph {
        constructor(voice, info) {
            super(0, 0);
            this._uniqueEffectGlyphs = [];
            this._effectGlyphs = [];
            this.isEmpty = true;
            this.previousBand = null;
            this.isLinkedToPrevious = false;
            this.firstBeat = null;
            this.lastBeat = null;
            this.height = 0;
            this.originalHeight = 0;
            this.slot = null;
            this.voice = voice;
            this.info = info;
        }
        doLayout() {
            super.doLayout();
            for (let i = 0; i < this.renderer.bar.voices.length; i++) {
                this._effectGlyphs.push(new Map());
                this._uniqueEffectGlyphs.push([]);
            }
        }
        createGlyph(beat) {
            if (beat.voice !== this.voice) {
                return;
            }
            // NOTE: the track order will never change. even if the staff behind the renderer changes, the trackIndex will not.
            // so it's okay to access the staff here while creating the glyphs.
            if (this.info.shouldCreateGlyph(this.renderer.settings, beat) &&
                (!this.info.hideOnMultiTrack || this.renderer.staff.trackIndex === 0)) {
                this.isEmpty = false;
                if (!this.firstBeat || beat.isBefore(this.firstBeat)) {
                    this.firstBeat = beat;
                }
                if (!this.lastBeat || beat.isAfter(this.lastBeat)) {
                    this.lastBeat = beat;
                    // for "toEnd" sizing occupy until next follow-up-beat
                    switch (this.info.sizingMode) {
                        case EffectBarGlyphSizing.SingleOnBeatToEnd:
                        case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                            if (this.lastBeat.nextBeat) {
                                this.lastBeat = this.lastBeat.nextBeat;
                            }
                            break;
                    }
                }
                const glyph = this.createOrResizeGlyph(this.info.sizingMode, beat);
                if (glyph.height > this.height) {
                    this.height = glyph.height;
                    this.originalHeight = glyph.height;
                }
            }
        }
        resetHeight() {
            this.height = this.originalHeight;
        }
        createOrResizeGlyph(sizing, b) {
            let g;
            switch (sizing) {
                case EffectBarGlyphSizing.FullBar:
                    g = this.info.createNewGlyph(this.renderer, b);
                    g.renderer = this.renderer;
                    g.beat = b;
                    g.doLayout();
                    this._effectGlyphs[b.voice.index].set(b.index, g);
                    this._uniqueEffectGlyphs[b.voice.index].push(g);
                    return g;
                case EffectBarGlyphSizing.SinglePreBeat:
                case EffectBarGlyphSizing.SingleOnBeat:
                case EffectBarGlyphSizing.SingleOnBeatToEnd:
                    g = this.info.createNewGlyph(this.renderer, b);
                    g.renderer = this.renderer;
                    g.beat = b;
                    g.doLayout();
                    this._effectGlyphs[b.voice.index].set(b.index, g);
                    this._uniqueEffectGlyphs[b.voice.index].push(g);
                    return g;
                case EffectBarGlyphSizing.GroupedOnBeat:
                case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                    const singleSizing = sizing === EffectBarGlyphSizing.GroupedOnBeat
                        ? EffectBarGlyphSizing.SingleOnBeat
                        : EffectBarGlyphSizing.SingleOnBeatToEnd;
                    if (b.index > 0 || this.renderer.index > 0) {
                        // check if the previous beat also had this effect
                        const prevBeat = b.previousBeat;
                        if (this.info.shouldCreateGlyph(this.renderer.settings, prevBeat)) {
                            // first load the effect bar renderer and glyph
                            let prevEffect = null;
                            if (b.index > 0 && this._effectGlyphs[b.voice.index].has(prevBeat.index)) {
                                // load effect from previous beat in the same renderer
                                prevEffect = this._effectGlyphs[b.voice.index].get(prevBeat.index);
                            }
                            else if (this.renderer.index > 0) {
                                // load the effect from the previous renderer if possible.
                                const previousRenderer = this.renderer
                                    .previousRenderer;
                                const previousBand = previousRenderer.getBand(prevBeat.voice, this.info.effectId);
                                // it can happen that we have an empty voice and then we don't have an effect band
                                if (previousBand) {
                                    const voiceGlyphs = previousBand._effectGlyphs[prevBeat.voice.index];
                                    if (voiceGlyphs.has(prevBeat.index)) {
                                        prevEffect = voiceGlyphs.get(prevBeat.index);
                                    }
                                }
                            }
                            // if the effect cannot be expanded, create a new glyph
                            // in case of expansion also create a new glyph, but also link the glyphs together
                            // so for rendering it might be expanded.
                            const newGlyph = this.createOrResizeGlyph(singleSizing, b);
                            if (prevEffect && this.info.canExpand(prevBeat, b)) {
                                // link glyphs
                                prevEffect.nextGlyph = newGlyph;
                                newGlyph.previousGlyph = prevEffect;
                                // mark renderers as linked for consideration when layouting the renderers (line breaking, partial breaking)
                                this.isLinkedToPrevious = true;
                            }
                            return newGlyph;
                        }
                        // in case the previous beat did not have the same effect, we simply create a new glyph
                        return this.createOrResizeGlyph(singleSizing, b);
                    }
                    // in case of the very first beat, we simply create the glyph.
                    return this.createOrResizeGlyph(singleSizing, b);
                default:
                    return this.createOrResizeGlyph(EffectBarGlyphSizing.SingleOnBeat, b);
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            // const c = canvas.color;
            // canvas.color = Color.random();
            // canvas.fillRect(cx + this.x, cy + this.y, this.renderer.width, this.slot!.shared.height);
            // canvas.color = c;
            for (let i = 0, j = this._uniqueEffectGlyphs.length; i < j; i++) {
                const v = this._uniqueEffectGlyphs[i];
                for (let k = 0, l = v.length; k < l; k++) {
                    const g = v[k];
                    const _ = ElementStyleHelper.beat(canvas, BeatSubElement.Effects, g.beat, false);
                    try {
                        g.paint(cx + this.x, cy + this.y, canvas);
                    }
                    finally {
                        _?.[Symbol.dispose]?.();
                    }
                }
            }
        }
        alignGlyphs() {
            for (let v = 0; v < this._effectGlyphs.length; v++) {
                for (const beatIndex of this._effectGlyphs[v].keys()) {
                    this.alignGlyph(this.info.sizingMode, this.renderer.bar.voices[v].beats[beatIndex]);
                }
            }
        }
        alignGlyph(sizing, beat) {
            const g = this._effectGlyphs[beat.voice.index].get(beat.index);
            const container = this.renderer.getBeatContainer(beat);
            // container is aligned with the "onTimeX" position of the beat in effect renders
            switch (sizing) {
                case EffectBarGlyphSizing.SinglePreBeat:
                    // shift to the start using the biggest pre-beat size of the respective beat
                    const offsetToBegin = this.renderer.layoutingInfo.getPreBeatSize(beat);
                    g.x = this.renderer.beatGlyphsStart + container.x - offsetToBegin;
                    break;
                case EffectBarGlyphSizing.SingleOnBeat:
                case EffectBarGlyphSizing.GroupedOnBeat:
                    g.x = this.renderer.beatGlyphsStart + container.x;
                    break;
                case EffectBarGlyphSizing.SingleOnBeatToEnd:
                case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                    g.x = this.renderer.beatGlyphsStart + container.x;
                    if (container.beat.isLastOfVoice) {
                        g.width = this.renderer.width - g.x;
                    }
                    else {
                        // shift to the start using the biggest post-beat size of the respective beat
                        const offsetToEnd = this.renderer.layoutingInfo.getPostBeatSize(beat);
                        g.width = offsetToEnd;
                    }
                    break;
                case EffectBarGlyphSizing.FullBar:
                    g.width = this.renderer.width;
                    break;
            }
        }
    }

    class EffectBandSlotShared {
        constructor() {
            this.uniqueEffectId = null;
            this.y = 0;
            this.height = 0;
            this.firstBeat = null;
            this.lastBeat = null;
        }
    }
    class EffectBandSlot {
        constructor() {
            this.bands = [];
            this.shared = new EffectBandSlotShared();
        }
        update(effectBand) {
            // lock band to particular effect if needed
            if (!effectBand.info.canShareBand) {
                this.shared.uniqueEffectId = effectBand.info.effectId;
            }
            effectBand.slot = this;
            this.bands.push(effectBand);
            if (effectBand.height > this.shared.height) {
                this.shared.height = effectBand.height;
            }
            if (!this.shared.firstBeat || effectBand.firstBeat.isBefore(this.shared.firstBeat)) {
                this.shared.firstBeat = effectBand.firstBeat;
            }
            if (!this.shared.lastBeat || effectBand.lastBeat.isAfter(this.shared.lastBeat)) {
                this.shared.lastBeat = effectBand.lastBeat;
            }
        }
        canBeUsed(band) {
            return (((!this.shared.uniqueEffectId && band.info.canShareBand) ||
                band.info.effectId === this.shared.uniqueEffectId) &&
                (!this.shared.firstBeat ||
                    this.shared.lastBeat.isBefore(band.firstBeat) ||
                    this.shared.lastBeat.isBefore(this.shared.firstBeat)));
        }
    }

    class EffectBandSizingInfo {
        constructor() {
            this.slots = [];
            this._effectSlot = new Map();
        }
        getOrCreateSlot(band) {
            // first check preferrable slot depending on type
            if (this._effectSlot.has(band.info.effectId)) {
                const slot = this._effectSlot.get(band.info.effectId);
                if (slot.canBeUsed(band)) {
                    return slot;
                }
            }
            // find any slot that can be used
            for (const slot of this.slots) {
                if (slot.canBeUsed(band)) {
                    return slot;
                }
            }
            // create a new slot if required
            const newSlot = new EffectBandSlot();
            this.slots.push(newSlot);
            return newSlot;
        }
        register(effectBand) {
            const freeSlot = this.getOrCreateSlot(effectBand);
            freeSlot.update(effectBand);
            this._effectSlot.set(effectBand.info.effectId, freeSlot);
        }
    }

    /**
     * This renderer is responsible for displaying effects above or below the other staves
     * like the vibrato.
     */
    class EffectBarRenderer extends BarRendererBase {
        constructor(renderer, bar, infos) {
            super(renderer, bar);
            this._bands = [];
            this._bandLookup = new Map();
            this.sizingInfo = null;
            this._infos = infos;
        }
        updateSizes() {
            this.topOverflow = 0;
            this.bottomOverflow = 0;
            this.topPadding = 0;
            this.bottomPadding = 0;
            this.updateHeight();
            super.updateSizes();
        }
        finalizeRenderer() {
            let didChange = super.finalizeRenderer();
            if (this.updateHeight()) {
                didChange = true;
            }
            return didChange;
        }
        updateHeight() {
            if (!this.sizingInfo) {
                return false;
            }
            let y = 0;
            for (const slot of this.sizingInfo.slots) {
                slot.shared.y = y;
                for (const band of slot.bands) {
                    band.y = y;
                    band.height = slot.shared.height;
                }
                y += slot.shared.height;
            }
            if (y !== this.height) {
                this.height = y;
                return true;
            }
            return false;
        }
        applyLayoutingInfo() {
            const result = !super.applyLayoutingInfo();
            // we create empty slots for the same group
            if (this.index > 0) {
                const previousRenderer = this.previousRenderer;
                this.sizingInfo = previousRenderer.sizingInfo;
            }
            else {
                this.sizingInfo = new EffectBandSizingInfo();
            }
            for (const effectBand of this._bands) {
                effectBand.resetHeight();
                effectBand.alignGlyphs();
                if (!effectBand.isEmpty) {
                    // find a slot that ended before the start of the band
                    this.sizingInfo.register(effectBand);
                }
            }
            this.updateHeight();
            return result;
        }
        scaleToWidth(width) {
            super.scaleToWidth(width);
            for (const effectBand of this._bands) {
                effectBand.alignGlyphs();
            }
        }
        createBeatGlyphs() {
            this._bands = [];
            this._bandLookup = new Map();
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    for (const info of this._infos) {
                        const band = new EffectBand(voice, info);
                        band.renderer = this;
                        band.doLayout();
                        this._bands.push(band);
                        this._bandLookup.set(`${voice.index}.${info.effectId}`, band);
                    }
                }
            }
            super.createBeatGlyphs();
            for (const effectBand of this._bands) {
                if (effectBand.isLinkedToPrevious) {
                    this.isLinkedToPrevious = true;
                }
            }
        }
        createVoiceGlyphs(v) {
            for (const b of v.beats) {
                // we create empty glyphs as alignment references and to get the
                // effect bar sized
                const container = new BeatContainerGlyph(b, this.getVoiceContainer(v));
                container.preNotes = new BeatGlyphBase();
                container.onNotes = new BeatOnNoteGlyphBase();
                this.addBeatGlyph(container);
                for (const effectBand of this._bands) {
                    effectBand.createGlyph(b);
                }
            }
        }
        paint(cx, cy, canvas) {
            this.paintBackground(cx, cy, canvas);
            // canvas.color = new Color(255, 0, 0, 100);
            // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.height);
            for (const effectBand of this._bands) {
                canvas.color =
                    effectBand.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
                if (!effectBand.isEmpty) {
                    effectBand.paint(cx + this.x, cy + this.y, canvas);
                }
            }
        }
        getBand(voice, effectId) {
            const id = `${voice.index}.${effectId}`;
            if (this._bandLookup.has(id)) {
                return this._bandLookup.get(id);
            }
            return null;
        }
    }

    class EffectBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return this._staffId;
        }
        getStaffPaddingTop(staff) {
            return staff.system.layout.renderer.settings.display.effectStaffPaddingTop;
        }
        getStaffPaddingBottom(staff) {
            return staff.system.layout.renderer.settings.display.effectStaffPaddingBottom;
        }
        constructor(staffId, infos, shouldShow = null) {
            super();
            this.infos = infos;
            this._staffId = staffId;
            this.isInsideBracket = false;
            this.isRelevantForBoundsLookup = false;
            this.shouldShow = shouldShow;
        }
        canCreate(track, staff) {
            const shouldShow = this.shouldShow;
            return super.canCreate(track, staff) && (!shouldShow || shouldShow(track, staff));
        }
        create(renderer, bar) {
            return new EffectBarRenderer(renderer, bar, this.infos.filter(i => renderer.settings.notation.isNotationElementVisible(i.notationElement)));
        }
    }

    class AlternateEndingsGlyph extends EffectGlyph {
        constructor(x, y, alternateEndings, openLine, closeLine) {
            super(x, y);
            this._endingsString = '';
            this._endings = ModelUtils.getAlternateEndingsList(alternateEndings);
            this._openLine = openLine;
            this._closeLine = closeLine;
        }
        doLayout() {
            super.doLayout();
            this.height = this.renderer.resources.wordsFont.size + (AlternateEndingsGlyph.Padding + 2);
            let endingsStrings = '';
            for (let i = 0, j = this._endings.length; i < j; i++) {
                endingsStrings += this._endings[i] + 1;
                endingsStrings += '. ';
            }
            this._endingsString = endingsStrings;
        }
        paint(cx, cy, canvas) {
            const width = this._closeLine ? this.width - 4 : this.width;
            cx = (cx | 0) + 0.5;
            cy = (cy | 0) + 0.5;
            if (this._openLine) {
                canvas.moveTo(cx + this.x, cy + this.y + this.height);
                canvas.lineTo(cx + this.x, cy + this.y);
            }
            else {
                canvas.moveTo(cx + this.x, cy + this.y);
            }
            canvas.lineTo(cx + this.x + width, cy + this.y);
            if (this._closeLine) {
                canvas.lineTo(cx + this.x + width, cy + this.y + this.height);
            }
            canvas.stroke();
            if (this._openLine) {
                const baseline = canvas.textBaseline;
                canvas.textBaseline = TextBaseline.Top;
                const res = this.renderer.resources;
                canvas.font = res.wordsFont;
                canvas.fillText(this._endingsString, cx + this.x + AlternateEndingsGlyph.Padding, cy + this.y);
                canvas.textBaseline = baseline;
            }
        }
    }
    AlternateEndingsGlyph.Padding = 3;

    /**
     * A classes inheriting from this base can provide the
     * data needed by a EffectBarRenderer to create effect glyphs dynamically.
     */
    class EffectBarRendererInfo {
        /**
         * Gets the unique effect name for this effect. (Used for grouping)
         */
        get effectId() {
            return this.notationElement.toString();
        }
    }

    class AlternateEndingsEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectAlternateEndings;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.FullBar;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.voice.index === 0 && beat.index === 0 && beat.voice.bar.masterBar.alternateEndings !== 0;
        }
        createNewGlyph(renderer, beat) {
            const masterBar = beat.voice.bar.masterBar;
            const openLine = masterBar.previousMasterBar === null ||
                masterBar.alternateEndings !== masterBar.previousMasterBar.alternateEndings;
            let closeLine = masterBar.isRepeatEnd ||
                masterBar.nextMasterBar === null ||
                masterBar.alternateEndings !== masterBar.nextMasterBar.alternateEndings;
            if (!masterBar.repeatGroup.closings.some(c => c.index >= masterBar.index)) {
                closeLine = false;
            }
            return new AlternateEndingsGlyph(0, 0, masterBar.alternateEndings, openLine, closeLine);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class CapoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectCapo;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.index === 0 && beat.voice.bar.index === 0 && beat.voice.bar.staff.capo !== 0;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, `Capo. fret ${beat.voice.bar.staff.capo}`, renderer.resources.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class ChordsEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectChordNames;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.hasChord;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, beat.chord.name, renderer.resources.effectFont, TextAlign.Center);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class GroupedEffectGlyph extends EffectGlyph {
        constructor(endPosition) {
            super();
            this.forceGroupedRendering = false;
            this.endOnBarLine = false;
            this.endPosition = endPosition;
        }
        get isLinkedWithPrevious() {
            return !!this.previousGlyph && this.previousGlyph.renderer.staff.system === this.renderer.staff.system;
        }
        get isLinkedWithNext() {
            return (!!this.nextGlyph &&
                this.nextGlyph.renderer.isFinalized &&
                this.nextGlyph.renderer.staff.system === this.renderer.staff.system);
        }
        paint(cx, cy, canvas) {
            // if we are linked with the previous, the first glyph of the group will also render this one.
            if (this.isLinkedWithPrevious) {
                return;
            }
            // we are not linked with any glyph therefore no expansion is required, we render a simple glyph.
            if (!this.isLinkedWithNext && !this.forceGroupedRendering) {
                this.paintNonGrouped(cx, cy, canvas);
                return;
            }
            // find last linked glyph that can be
            let lastLinkedGlyph;
            if (!this.isLinkedWithNext && this.forceGroupedRendering) {
                lastLinkedGlyph = this;
            }
            else {
                lastLinkedGlyph = this.nextGlyph;
                while (lastLinkedGlyph.isLinkedWithNext) {
                    lastLinkedGlyph = lastLinkedGlyph.nextGlyph;
                }
            }
            // use start position of next beat when possible
            const endBeatRenderer = lastLinkedGlyph.renderer;
            const endBeat = lastLinkedGlyph.beat;
            const position = this.endPosition;
            // calculate end X-position
            const cxRenderer = cx - this.renderer.x;
            const endX = this.calculateEndX(endBeatRenderer, endBeat, cxRenderer, position);
            this.paintGrouped(cx, cy, endX, canvas);
        }
        calculateEndX(endBeatRenderer, endBeat, cx, endPosition) {
            if (!endBeat) {
                return cx + endBeatRenderer.x + this.x + this.width;
            }
            return cx + endBeatRenderer.x + endBeatRenderer.getBeatX(endBeat, endPosition);
        }
        paintNonGrouped(cx, cy, canvas) {
            const cxRenderer = cx - this.renderer.x;
            const endX = this.calculateEndX(this.renderer, this.beat, cxRenderer, this.endPosition);
            this.paintGrouped(cx, cy, endX, canvas);
        }
    }

    class CrescendoGlyph extends GroupedEffectGlyph {
        constructor(x, y, crescendo) {
            super(BeatXPosition.EndBeat);
            this._crescendo = CrescendoType.None;
            this._crescendo = crescendo;
            this.x = x;
            this.y = y;
        }
        doLayout() {
            super.doLayout();
            this.height = 17;
        }
        paintGrouped(cx, cy, endX, canvas) {
            const startX = cx + this.x;
            const height = this.height;
            const padding = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.NoteheadBlack) / 2;
            canvas.beginPath();
            if (this._crescendo === CrescendoType.Crescendo) {
                endX -= padding;
                canvas.moveTo(endX, cy + this.y);
                canvas.lineTo(startX, cy + this.y + height / 2);
                canvas.lineTo(endX, cy + this.y + height);
            }
            else {
                endX -= padding;
                canvas.moveTo(startX, cy + this.y);
                canvas.lineTo(endX, cy + this.y + height / 2);
                canvas.lineTo(startX, cy + this.y + height);
            }
            canvas.stroke();
        }
    }

    class CrescendoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectCrescendo;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.crescendo !== CrescendoType.None;
        }
        createNewGlyph(renderer, beat) {
            return new CrescendoGlyph(0, 0, beat.crescendo);
        }
        canExpand(from, to) {
            return from.crescendo === to.crescendo;
        }
    }

    class DynamicsGlyph extends MusicFontGlyph {
        constructor(x, y, dynamics) {
            super(x, y, 0.6, DynamicsGlyph.getSymbol(dynamics));
            this.center = true;
        }
        doLayout() {
            super.doLayout();
            this.y += this.height / 2;
        }
        static getSymbol(dynamics) {
            switch (dynamics) {
                case DynamicValue.PPP:
                    return MusicFontSymbol.DynamicPPP;
                case DynamicValue.PP:
                    return MusicFontSymbol.DynamicPP;
                case DynamicValue.P:
                    return MusicFontSymbol.DynamicPiano;
                case DynamicValue.MP:
                    return MusicFontSymbol.DynamicMP;
                case DynamicValue.MF:
                    return MusicFontSymbol.DynamicMF;
                case DynamicValue.F:
                    return MusicFontSymbol.DynamicForte;
                case DynamicValue.FF:
                    return MusicFontSymbol.DynamicFF;
                case DynamicValue.FFF:
                    return MusicFontSymbol.DynamicFFF;
                case DynamicValue.PPPP:
                    return MusicFontSymbol.DynamicPPPP;
                case DynamicValue.PPPPP:
                    return MusicFontSymbol.DynamicPPPPP;
                case DynamicValue.PPPPPP:
                    return MusicFontSymbol.DynamicPPPPP;
                case DynamicValue.FFFF:
                    return MusicFontSymbol.DynamicFFFF;
                case DynamicValue.FFFFF:
                    return MusicFontSymbol.DynamicFFFFF;
                case DynamicValue.FFFFFF:
                    return MusicFontSymbol.DynamicFFFFFF;
                case DynamicValue.SF:
                    return MusicFontSymbol.DynamicSforzando1;
                case DynamicValue.SFP:
                    return MusicFontSymbol.DynamicSforzandoPiano;
                case DynamicValue.SFPP:
                    return MusicFontSymbol.DynamicSforzandoPianissimo;
                case DynamicValue.FP:
                    return MusicFontSymbol.DynamicFortePiano;
                case DynamicValue.RF:
                    return MusicFontSymbol.DynamicRinforzando1;
                case DynamicValue.RFZ:
                    return MusicFontSymbol.DynamicRinforzando2;
                case DynamicValue.SFZ:
                    return MusicFontSymbol.DynamicSforzato;
                case DynamicValue.SFFZ:
                    return MusicFontSymbol.DynamicSforzatoFF;
                case DynamicValue.FZ:
                    return MusicFontSymbol.DynamicForzando;
                case DynamicValue.N:
                    return MusicFontSymbol.DynamicNiente;
                case DynamicValue.PF:
                    return MusicFontSymbol.DynamicPF;
                case DynamicValue.SFZP:
                    return MusicFontSymbol.DynamicSforzatoPiano;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class DynamicsEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectDynamics;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return this.internalShouldCreateGlyph(beat);
        }
        internalShouldCreateGlyph(beat) {
            if (beat.voice.bar.staff.track.score.stylesheet.hideDynamics ||
                beat.isEmpty ||
                beat.voice.isEmpty ||
                beat.isRest) {
                return false;
            }
            const previousBeat = this.getPreviousDynamicsBeat(beat);
            let show = (beat.voice.index === 0 && !previousBeat) || beat.dynamics !== previousBeat?.dynamics;
            // ensure we do not show duplicate dynamics
            if (show && beat.voice.index > 0) {
                for (const voice of beat.voice.bar.voices) {
                    if (voice.index < beat.voice.index) {
                        const beatAtSamePos = voice.getBeatAtPlaybackStart(beat.playbackStart);
                        if (beatAtSamePos &&
                            beat.dynamics === beatAtSamePos.dynamics &&
                            this.internalShouldCreateGlyph(beatAtSamePos)) {
                            show = false;
                        }
                    }
                }
            }
            return show;
        }
        getPreviousDynamicsBeat(beat) {
            let previousBeat = beat.previousBeat;
            while (previousBeat != null) {
                if (!previousBeat.isRest) {
                    return previousBeat;
                }
                previousBeat = previousBeat.previousBeat;
            }
            return null;
        }
        createNewGlyph(renderer, beat) {
            return new DynamicsGlyph(0, 0, beat.dynamics);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FadeGlyph extends MusicFontGlyph {
        constructor(type) {
            super(0, 0, 1, FadeGlyph.getSymbol(type));
            this.center = true;
        }
        static getSymbol(type) {
            switch (type) {
                case FadeType.FadeIn:
                    return MusicFontSymbol.GuitarFadeIn;
                case FadeType.FadeOut:
                    return MusicFontSymbol.GuitarFadeOut;
                case FadeType.VolumeSwell:
                    return MusicFontSymbol.GuitarVolumeSwell;
            }
            return MusicFontSymbol.None;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height, canvas);
        }
    }

    class FadeEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectFadeIn;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.fade !== FadeType.None;
        }
        createNewGlyph(renderer, beat) {
            return new FadeGlyph(beat.fade);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FermataGlyph extends MusicFontGlyph {
        constructor(x, y, fermata) {
            super(x, y, 1, FermataGlyph.getSymbol(fermata));
        }
        static getSymbol(accentuation) {
            switch (accentuation) {
                case FermataType.Short:
                    return MusicFontSymbol.FermataShortAbove;
                case FermataType.Medium:
                    return MusicFontSymbol.FermataAbove;
                case FermataType.Long:
                    return MusicFontSymbol.FermataLongAbove;
                default:
                    return MusicFontSymbol.None;
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx - this.width / 2, cy + this.height, canvas);
        }
    }

    class FermataEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectFermata;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.voice.index === 0 && !!beat.fermata;
        }
        createNewGlyph(renderer, beat) {
            return new FermataGlyph(0, 0, beat.fermata.type);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FingeringEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectFingering;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            if (beat.voice.index !== 0 ||
                beat.isRest ||
                (settings.notation.fingeringMode !== exports.FingeringMode.SingleNoteEffectBand &&
                    settings.notation.fingeringMode !== exports.FingeringMode.SingleNoteEffectBandForcePiano)) {
                return false;
            }
            if (beat.notes.length !== 1) {
                return false;
            }
            return beat.notes[0].isFingering;
        }
        createNewGlyph(renderer, beat) {
            let finger = Fingers.Unknown;
            let isLeft = false;
            const note = beat.notes[0];
            if (note.leftHandFinger !== Fingers.Unknown) {
                finger = note.leftHandFinger;
                isLeft = true;
            }
            else if (note.rightHandFinger !== Fingers.Unknown) {
                finger = note.rightHandFinger;
            }
            const s = ModelUtils.fingerToString(renderer.settings, beat, finger, isLeft) ?? '';
            return new TextGlyph(0, 0, s, renderer.resources.fingeringFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class NoteEffectInfoBase extends EffectBarRendererInfo {
        constructor() {
            super(...arguments);
            this.lastCreateInfo = null;
        }
        shouldCreateGlyph(settings, beat) {
            this.lastCreateInfo = [];
            for (let i = 0, j = beat.notes.length; i < j; i++) {
                const n = beat.notes[i];
                if (this.shouldCreateGlyphForNote(n)) {
                    this.lastCreateInfo.push(n);
                }
            }
            return this.lastCreateInfo.length > 0;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        canExpand(from, to) {
            return true;
        }
    }

    class LineRangedGlyph extends GroupedEffectGlyph {
        constructor(label, dashed = true) {
            super(BeatXPosition.OnNotes);
            this._label = label;
            this._dashed = dashed;
        }
        doLayout() {
            if (this.renderer.settings.notation.extendLineEffectsToBeatEnd) {
                this.endPosition = BeatXPosition.EndBeat;
                this.forceGroupedRendering = true;
            }
            super.doLayout();
            this.height = this.renderer.resources.effectFont.size;
        }
        paintNonGrouped(cx, cy, canvas) {
            const res = this.renderer.resources;
            canvas.font = res.effectFont;
            const x = canvas.textAlign;
            canvas.textAlign = TextAlign.Center;
            canvas.fillText(this._label, cx + this.x, cy + this.y);
            canvas.textAlign = x;
        }
        paintGrouped(cx, cy, endX, canvas) {
            this.paintNonGrouped(cx, cy, canvas);
            const lineSpacing = 3;
            const textWidth = canvas.measureText(this._label).width;
            const startX = cx + this.x + textWidth / 2 + lineSpacing;
            const lineY = cy + this.y + 4;
            const lineSize = 8;
            if (this._dashed) {
                if (endX > startX) {
                    let lineX = startX;
                    while (lineX < endX) {
                        canvas.beginPath();
                        canvas.moveTo(lineX, lineY | 0);
                        canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                        lineX += lineSize + lineSpacing;
                        canvas.stroke();
                    }
                    canvas.beginPath();
                    canvas.moveTo(endX, (lineY - 5) | 0);
                    canvas.lineTo(endX, (lineY + 5) | 0);
                    canvas.stroke();
                }
            }
            else {
                canvas.beginPath();
                canvas.moveTo(startX, lineY | 0);
                canvas.lineTo(endX, lineY | 0);
                canvas.lineTo(endX, (lineY + 5) | 0);
                canvas.stroke();
            }
        }
    }
    LineRangedGlyph.LineSpacing = 3;
    LineRangedGlyph.LineTopPadding = 4;
    LineRangedGlyph.LineTopOffset = 5;
    LineRangedGlyph.LineSize = 8;

    class HarmonicsEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return this._effectId;
        }
        get notationElement() {
            return exports.NotationElement.EffectHarmonics;
        }
        constructor(harmonicType) {
            super();
            this._beat = null;
            this._harmonicType = harmonicType;
            switch (harmonicType) {
                case HarmonicType.None:
                    this._effectId = 'harmonics-none';
                    break;
                case HarmonicType.Natural:
                    this._effectId = 'harmonics-natural';
                    break;
                case HarmonicType.Artificial:
                    this._effectId = 'harmonics-artificial';
                    break;
                case HarmonicType.Pinch:
                    this._effectId = 'harmonics-pinch';
                    break;
                case HarmonicType.Tap:
                    this._effectId = 'harmonics-tap';
                    break;
                case HarmonicType.Semi:
                    this._effectId = 'harmonics-semi';
                    break;
                case HarmonicType.Feedback:
                    this._effectId = 'harmonics-feedback';
                    break;
                default:
                    this._effectId = '';
                    break;
            }
        }
        shouldCreateGlyphForNote(note) {
            if (!note.isHarmonic || note.harmonicType !== this._harmonicType) {
                return false;
            }
            if (note.beat !== this._beat) {
                this._beat = note.beat;
            }
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph(HarmonicsEffectInfo.harmonicToString(this._harmonicType));
        }
        static harmonicToString(type) {
            switch (type) {
                case HarmonicType.Natural:
                    return 'N.H.';
                case HarmonicType.Artificial:
                    return 'A.H.';
                case HarmonicType.Pinch:
                    return 'P.H.';
                case HarmonicType.Tap:
                    return 'T.H.';
                case HarmonicType.Semi:
                    return 'S.H.';
                case HarmonicType.Feedback:
                    return 'Fdbk.';
            }
            return '';
        }
    }

    class LetRingEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectLetRing;
        }
        get canShareBand() {
            return false;
        }
        get hideOnMultiTrack() {
            return false;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.isLetRing;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('LetRing');
        }
        canExpand(from, to) {
            return true;
        }
    }

    class LyricsGlyph extends EffectGlyph {
        constructor(x, y, lines, font, textAlign = TextAlign.Center) {
            super(x, y);
            this._lines = lines;
            this.font = font;
            this.textAlign = textAlign;
        }
        doLayout() {
            super.doLayout();
            this.height = this.font.size * this._lines.length;
        }
        paint(cx, cy, canvas) {
            canvas.font = this.font;
            const old = canvas.textAlign;
            canvas.textAlign = this.textAlign;
            for (let i = 0; i < this._lines.length; i++) {
                if (this._lines[i]) {
                    canvas.fillText(this._lines[i], cx + this.x, cy + this.y + i * this.font.size);
                }
            }
            canvas.textAlign = old;
        }
    }

    class LyricsEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectLyrics;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return !!beat.lyrics;
        }
        createNewGlyph(renderer, beat) {
            return new LyricsGlyph(0, 0, beat.lyrics, renderer.resources.effectFont, TextAlign.Center);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class MarkerEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectMarker;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.voice.bar.staff.index === 0 &&
                beat.voice.index === 0 &&
                beat.index === 0 &&
                beat.voice.bar.masterBar.isSectionStart);
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, !beat.voice.bar.masterBar.section.marker
                ? beat.voice.bar.masterBar.section.text
                : `[${beat.voice.bar.masterBar.section.marker}] ${beat.voice.bar.masterBar.section.text}`, renderer.resources.markerFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class OttavaGlyph extends GroupedEffectGlyph {
        constructor(ottava, aboveStaff) {
            super(BeatXPosition.PostNotes);
            this._ottava = ottava;
            this._aboveStaff = aboveStaff;
        }
        doLayout() {
            super.doLayout();
            this.height = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.QuindicesimaAlta);
        }
        paintNonGrouped(cx, cy, canvas) {
            this.paintOttava(cx, cy, canvas);
        }
        paintOttava(cx, cy, canvas) {
            let size = 0;
            switch (this._ottava) {
                case Ottavia._15ma:
                    size = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.QuindicesimaAlta) * 0.8;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.QuindicesimaAlta, false);
                    break;
                case Ottavia._8va:
                    size = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.OttavaAlta) * 0.8;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.OttavaAlta, false);
                    break;
                case Ottavia._8vb:
                    size = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.OttavaBassaVb) * 0.8;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.OttavaBassaVb, false);
                    break;
                case Ottavia._15mb:
                    size =
                        (MusicFontSymbolSizes.Widths.get(MusicFontSymbol.Quindicesima) +
                            MusicFontSymbolSizes.Widths.get(MusicFontSymbol.OctaveBaselineM) +
                            MusicFontSymbolSizes.Widths.get(MusicFontSymbol.OctaveBaselineB)) *
                            0.8;
                    // NOTE: SMUFL does not have a glyph for 15mb so we build it
                    canvas.fillMusicFontSymbols(cx + this.x - size / 2, cy + this.y + this.height, 0.8, [MusicFontSymbol.Quindicesima, MusicFontSymbol.OctaveBaselineM, MusicFontSymbol.OctaveBaselineB], false);
                    break;
            }
            return size / 2;
        }
        paintGrouped(cx, cy, endX, canvas) {
            const size = this.paintOttava(cx, cy, canvas);
            const lineSpacing = 3;
            const startX = cx + this.x + size + lineSpacing;
            let lineY = cy + this.y;
            lineY += this._aboveStaff ? 2 : this.height - 2;
            const lineSize = 8;
            if (endX > startX) {
                let lineX = startX;
                while (lineX < endX) {
                    canvas.beginPath();
                    canvas.moveTo(lineX, lineY | 0);
                    canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                    lineX += lineSize + lineSpacing;
                    canvas.stroke();
                }
                canvas.beginPath();
                if (this._aboveStaff) {
                    canvas.moveTo(endX, lineY);
                    canvas.lineTo(endX, cy + this.y + this.height);
                }
                else {
                    canvas.moveTo(endX, lineY);
                    canvas.lineTo(endX, cy + this.y);
                }
                canvas.stroke();
            }
        }
    }

    class OttaviaEffectInfo extends EffectBarRendererInfo {
        get effectId() {
            return `ottavia-${this._aboveStaff ? 'above' : 'below'}`;
        }
        get notationElement() {
            return exports.NotationElement.EffectOttavia;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        constructor(aboveStaff) {
            super();
            this._aboveStaff = aboveStaff;
        }
        shouldCreateGlyph(settings, beat) {
            switch (beat.ottava) {
                case Ottavia._15ma:
                    return this._aboveStaff;
                case Ottavia._8va:
                    return this._aboveStaff;
                case Ottavia._8vb:
                    return !this._aboveStaff;
                case Ottavia._15mb:
                    return !this._aboveStaff;
            }
            return false;
        }
        createNewGlyph(renderer, beat) {
            return new OttavaGlyph(beat.ottava, this._aboveStaff);
        }
        canExpand(from, to) {
            return from.ottava === to.ottava;
        }
    }

    class PalmMuteEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectPalmMute;
        }
        shouldCreateGlyphForNote(note) {
            return note.isPalmMute;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('P.M.');
        }
    }

    class PickSlideEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectPickSlide;
        }
        shouldCreateGlyphForNote(note) {
            return note.slideOutType === SlideOutType.PickSlideDown || note.slideOutType === SlideOutType.PickSlideUp;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('P.S.');
        }
    }

    class PickStrokeGlyph extends MusicFontGlyph {
        constructor(x, y, pickStroke) {
            super(x, y, NoteHeadGlyph.GraceScale, PickStrokeGlyph.getSymbol(pickStroke));
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height, canvas);
        }
        static getSymbol(pickStroke) {
            switch (pickStroke) {
                case PickStroke.Up:
                    return MusicFontSymbol.StringsUpBow;
                case PickStroke.Down:
                    return MusicFontSymbol.StringsDownBow;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class PickStrokeEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectPickStroke;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.pickStroke !== PickStroke.None;
        }
        createNewGlyph(renderer, beat) {
            return new PickStrokeGlyph(0, 0, beat.pickStroke);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class BeatVibratoGlyph extends GroupedEffectGlyph {
        constructor(type) {
            super(BeatXPosition.EndBeat);
            this._stepSize = 0;
            this._type = type;
        }
        doLayout() {
            super.doLayout();
            switch (this._type) {
                case VibratoType.Slight:
                    this._stepSize = 12;
                    break;
                case VibratoType.Wide:
                    this._stepSize = 23;
                    break;
            }
            this.height = 18;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let startX = cx + this.x;
            const width = endX - startX;
            const loops = Math.max(1, width / this._stepSize);
            canvas.beginPath();
            canvas.moveTo(startX, cy + this.y);
            for (let i = 0; i < loops; i++) {
                canvas.lineTo(startX + this._stepSize / 2, cy + this.y + this.height);
                canvas.lineTo(startX + this._stepSize, cy + this.y);
                startX += this._stepSize;
            }
            canvas.stroke();
        }
    }

    class SlightBeatVibratoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectSlightBeatVibrato;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.vibrato === VibratoType.Slight;
        }
        createNewGlyph(renderer, beat) {
            return new BeatVibratoGlyph(VibratoType.Slight);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class NoteVibratoGlyph extends GroupedEffectGlyph {
        constructor(x, y, type, scale = 1.2, partialWaves = false) {
            super(BeatXPosition.EndBeat);
            this._scale = 0;
            this._symbol = MusicFontSymbol.None;
            this._symbolSize = 0;
            this._type = type;
            this._scale = scale;
            this.x = x;
            this.y = y;
            this._partialWaves = partialWaves;
        }
        doLayout() {
            super.doLayout();
            switch (this._type) {
                case VibratoType.Slight:
                    this._symbol = MusicFontSymbol.WiggleTrill;
                    break;
                case VibratoType.Wide:
                    this._symbol = MusicFontSymbol.WiggleVibratoMediumFast;
                    break;
            }
            this._symbolSize = MusicFontSymbolSizes.Widths.get(this._symbol) * this._scale;
            this.height = MusicFontSymbolSizes.Heights.get(this._symbol) * this._scale;
        }
        paintGrouped(cx, cy, endX, canvas) {
            const startX = cx + this.x;
            const width = endX - startX;
            const step = this._symbolSize;
            let loops = width / step;
            if (!this._partialWaves) {
                loops = Math.floor(loops);
            }
            if (loops < 1) {
                loops = 1;
            }
            let loopX = 0;
            for (let i = 0; i < loops; i++) {
                canvas.fillMusicFontSymbol(cx + this.x + loopX, cy + this.y + this.height * 2, this._scale, this._symbol, false);
                loopX += step;
            }
        }
    }

    class SlightNoteVibratoEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectSlightNoteVibrato;
        }
        shouldCreateGlyphForNote(note) {
            let hasVibrato = note.vibrato === VibratoType.Slight ||
                (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Slight);
            if (this._hideOnTiedBend && hasVibrato && note.isTieDestination && note.tieOrigin.hasBend) {
                hasVibrato = false;
            }
            return hasVibrato;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        createNewGlyph(renderer, beat) {
            return new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
        }
        constructor(hideOnTiedBend) {
            super();
            this._hideOnTiedBend = hideOnTiedBend;
        }
    }

    class TapEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectTap;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.slap || beat.pop || beat.tap;
        }
        createNewGlyph(renderer, beat) {
            const res = renderer.resources;
            if (beat.slap) {
                return new TextGlyph(0, 0, 'S', res.effectFont, TextAlign.Left);
            }
            if (beat.pop) {
                return new TextGlyph(0, 0, 'P', res.effectFont, TextAlign.Left);
            }
            return new TextGlyph(0, 0, 'T', res.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    /**
     * This glyph renders tempo annotations for tempo automations
     * where the drawing position is determined more dynamically while rendering.
     */
    class BarTempoGlyph extends EffectGlyph {
        constructor(tempoAutomations) {
            super(0, 0);
            this.tempoAutomations = tempoAutomations;
        }
        doLayout() {
            super.doLayout();
            this.height = 25;
        }
        paint(cx, cy, canvas) {
            for (const automation of this.tempoAutomations) {
                let x = cx + this.renderer.getRatioPositionX(automation.ratioPosition);
                const res = this.renderer.resources;
                canvas.font = res.markerFont;
                canvas.textBaseline = TextBaseline.Top;
                if (automation.text) {
                    const size = canvas.measureText(automation.text);
                    canvas.fillText(automation.text, x, cy + this.y + canvas.font.size / 2);
                    x += size.width + canvas.font.size * 0.7;
                }
                canvas.fillMusicFontSymbol(x, cy + this.y + this.height * 0.8, 0.5, MusicFontSymbol.NoteQuarterUp, true);
                canvas.fillText(`= ${automation.value.toString()}`, x + MusicFontSymbolSizes.Widths.get(MusicFontSymbol.NoteQuarterUp) * 0.5 + 3, cy + this.y + canvas.font.size / 2);
            }
        }
    }

    class TempoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectTempo;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.voice.bar.staff.index === 0 &&
                beat.voice.index === 0 &&
                beat.index === 0 &&
                beat.voice.bar.masterBar.tempoAutomations.length > 0);
        }
        createNewGlyph(renderer, beat) {
            return new BarTempoGlyph(beat.voice.bar.masterBar.tempoAutomations);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TextEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectText;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return !!beat.text;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, beat.text, renderer.resources.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TrillGlyph extends GroupedEffectGlyph {
        constructor(x, y) {
            super(BeatXPosition.EndBeat);
            this.x = x;
            this.y = y;
        }
        doLayout() {
            super.doLayout();
            this.height = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.OrnamentTrill) / 2;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let startX = cx + this.x;
            canvas.fillMusicFontSymbol(startX, cy + this.y + this.height, 1, MusicFontSymbol.OrnamentTrill, true);
            startX += MusicFontSymbolSizes.Widths.get(MusicFontSymbol.OrnamentTrill) / 2;
            const waveScale = 1.2;
            const step = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.WiggleTrill) * waveScale;
            const loops = Math.floor((endX - startX) / step);
            const loopY = cy + this.y + this.height * 1.37;
            let loopX = startX;
            for (let i = 0; i < loops; i++) {
                canvas.fillMusicFontSymbol(loopX, loopY, waveScale, MusicFontSymbol.WiggleTrill, false);
                loopX += step;
            }
        }
    }

    class TrillEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectTrill;
        }
        shouldCreateGlyphForNote(note) {
            return note.isTrill;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        createNewGlyph(renderer, beat) {
            return new TrillGlyph(0, 0);
        }
    }

    var TripletFeelGlyphBarType;
    (function (TripletFeelGlyphBarType) {
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["Full"] = 0] = "Full";
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialLeft"] = 1] = "PartialLeft";
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialRight"] = 2] = "PartialRight";
    })(TripletFeelGlyphBarType || (TripletFeelGlyphBarType = {}));
    class TripletFeelGlyph extends EffectGlyph {
        constructor(tripletFeel) {
            super(0, 0);
            this._tripletFeel = tripletFeel;
        }
        doLayout() {
            super.doLayout();
            this.height = 25;
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            const noteY = cy + this.height * NoteHeadGlyph.GraceScale;
            const tupletY = noteY + 8;
            canvas.font = this.renderer.resources.effectFont;
            canvas.fillText('(', cx, cy + this.height * 0.3);
            const leftNoteX = cx + 10;
            const rightNoteX = cx + 40;
            let leftNoteSymbols = [];
            let rightAugmentationSymbols = [];
            let rightNoteSymbols = [];
            let rightTupletSymbols = [];
            switch (this._tripletFeel) {
                case TripletFeel.NoTripletFeel:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    break;
                case TripletFeel.Triplet8th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.Space,
                        MusicFontSymbol.NoteEighthUp
                    ];
                    rightTupletSymbols = [
                        MusicFontSymbol.TextTupletBracketStartLongStem,
                        MusicFontSymbol.TextTuplet3LongStem,
                        MusicFontSymbol.TextTupletBracketEndLongStem
                    ];
                    break;
                case TripletFeel.Triplet16th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac16thLongStem
                    ];
                    rightTupletSymbols = [
                        MusicFontSymbol.TextTupletBracketStartLongStem,
                        MusicFontSymbol.TextTuplet3LongStem,
                        MusicFontSymbol.TextTupletBracketEndLongStem
                    ];
                    break;
                case TripletFeel.Dotted8th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    rightAugmentationSymbols = [MusicFontSymbol.TextAugmentationDot];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac16thLongStem
                    ];
                    break;
                case TripletFeel.Dotted16th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont16thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac16thLongStem
                    ];
                    rightAugmentationSymbols = [MusicFontSymbol.TextAugmentationDot];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont16thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac32ndLongStem
                    ];
                    canvas.fillCircle(rightNoteX + 9, noteY, 1);
                    break;
                case TripletFeel.Scottish8th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont8thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem
                    ];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont16thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac8thLongStem,
                        MusicFontSymbol.TextAugmentationDot
                    ];
                    break;
                case TripletFeel.Scottish16th:
                    leftNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont16thBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac16thLongStem
                    ];
                    rightNoteSymbols = [
                        MusicFontSymbol.TextBlackNoteLongStem,
                        MusicFontSymbol.TextCont32ndBeamLongStem,
                        MusicFontSymbol.TextBlackNoteFrac16thLongStem,
                        MusicFontSymbol.TextAugmentationDot
                    ];
                    break;
            }
            canvas.fillMusicFontSymbols(leftNoteX, noteY, TripletFeelGlyph.NoteScale, leftNoteSymbols, false);
            canvas.fillText('=', cx + 32, cy + 5);
            canvas.fillMusicFontSymbols(rightNoteX, noteY, TripletFeelGlyph.NoteScale, rightNoteSymbols, false);
            if (rightAugmentationSymbols.length > 0) {
                canvas.fillMusicFontSymbols(rightNoteX + 7, noteY, TripletFeelGlyph.NoteScale, rightAugmentationSymbols, false);
            }
            if (rightTupletSymbols.length > 0) {
                canvas.fillMusicFontSymbols(rightNoteX, tupletY, TripletFeelGlyph.TupletScale, rightTupletSymbols, false);
            }
            canvas.fillText(')', cx + 65, cy + this.height * 0.3);
        }
    }
    TripletFeelGlyph.NoteScale = 0.5;
    TripletFeelGlyph.TupletScale = 0.7;

    class TripletFeelEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectTripletFeel;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.index === 0 &&
                ((beat.voice.bar.masterBar.index === 0 &&
                    beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel) ||
                    (beat.voice.bar.masterBar.index > 0 &&
                        beat.voice.bar.masterBar.tripletFeel !== beat.voice.bar.masterBar.previousMasterBar.tripletFeel)));
        }
        createNewGlyph(renderer, beat) {
            return new TripletFeelGlyph(beat.voice.bar.masterBar.tripletFeel);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WhammyBarEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectWhammyBar;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.hasWhammyBar;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('w/bar');
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WideBeatVibratoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectWideBeatVibrato;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.vibrato === VibratoType.Wide;
        }
        createNewGlyph(renderer, beat) {
            return new BeatVibratoGlyph(VibratoType.Wide);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WideNoteVibratoEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectWideNoteVibrato;
        }
        shouldCreateGlyphForNote(note) {
            return (note.vibrato === VibratoType.Wide || (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Wide));
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        createNewGlyph(renderer, beat) {
            return new NoteVibratoGlyph(0, 0, VibratoType.Wide, 1.2);
        }
    }

    class HorizontalScreenLayoutPartialInfo {
        constructor() {
            this.x = 0;
            this.width = 0;
            this.masterBars = [];
        }
    }
    /**
     * This layout arranges the bars all horizontally
     */
    class HorizontalScreenLayout extends ScoreLayout {
        constructor() {
            super(...arguments);
            this._system = null;
        }
        get name() {
            return 'HorizontalScreen';
        }
        get supportsResize() {
            return false;
        }
        get firstBarX() {
            let x = this.pagePadding[0];
            if (this._system) {
                x += this._system.accoladeWidth;
            }
            return x;
        }
        doResize() {
        }
        doLayoutAndRender() {
            switch (this.renderer.settings.display.systemsLayoutMode) {
                case exports.SystemsLayoutMode.Automatic:
                    this.systemsLayoutMode = InternalSystemsLayoutMode.Automatic;
                    break;
                case exports.SystemsLayoutMode.UseModelLayout:
                    this.systemsLayoutMode = InternalSystemsLayoutMode.FromModelWithWidths;
                    break;
            }
            const score = this.renderer.score;
            let startIndex = this.renderer.settings.display.startBar;
            startIndex--; // map to array index
            startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
            let currentBarIndex = startIndex;
            let endBarIndex = this.renderer.settings.display.barCount;
            if (endBarIndex <= 0) {
                endBarIndex = score.masterBars.length;
            }
            endBarIndex = startIndex + endBarIndex - 1; // map count to array index
            endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
            this._system = this.createEmptyStaffSystem();
            this._system.isLast = true;
            this._system.x = this.pagePadding[0];
            this._system.y = this.pagePadding[1];
            const countPerPartial = this.renderer.settings.display.barCountPerPartial;
            const partials = [];
            let currentPartial = new HorizontalScreenLayoutPartialInfo();
            let renderX = 0;
            while (currentBarIndex <= endBarIndex) {
                const multiBarRestInfo = this.multiBarRestInfo;
                const additionalMultiBarsRestBarIndices = multiBarRestInfo !== null && multiBarRestInfo.has(currentBarIndex)
                    ? multiBarRestInfo.get(currentBarIndex)
                    : null;
                const result = this._system.addBars(this.renderer.tracks, currentBarIndex, additionalMultiBarsRestBarIndices);
                // if we detect that the new renderer is linked to the previous
                // renderer, we need to put it into the previous partial
                if (currentPartial.masterBars.length === 0 && result.isLinkedToPrevious && partials.length > 0) {
                    const previousPartial = partials[partials.length - 1];
                    previousPartial.masterBars.push(score.masterBars[currentBarIndex]);
                    previousPartial.width += result.width;
                    renderX += result.width;
                    currentPartial.x += renderX;
                }
                else {
                    currentPartial.masterBars.push(score.masterBars[currentBarIndex]);
                    currentPartial.width += result.width;
                    // no targetPartial here because previous partials already handled this code
                    if (currentPartial.masterBars.length >= countPerPartial) {
                        if (partials.length === 0) {
                            // respect accolade and on first partial
                            currentPartial.width += this._system.accoladeWidth + this.pagePadding[0];
                        }
                        renderX += currentPartial.width;
                        partials.push(currentPartial);
                        Logger.debug(this.name, `Finished partial from bar ${currentPartial.masterBars[0].index} to ${currentPartial.masterBars[currentPartial.masterBars.length - 1].index}`, null);
                        currentPartial = new HorizontalScreenLayoutPartialInfo();
                        currentPartial.x = renderX;
                    }
                }
                currentBarIndex++;
            }
            // don't miss the last partial if not empty
            if (currentPartial.masterBars.length > 0) {
                if (partials.length === 0) {
                    currentPartial.width += this._system.accoladeWidth + this.pagePadding[0];
                }
                partials.push(currentPartial);
                Logger.debug(this.name, `Finished partial from bar ${currentPartial.masterBars[0].index} to ${currentPartial.masterBars[currentPartial.masterBars.length - 1].index}`, null);
            }
            this.finalizeStaffSystem();
            const scale = this.renderer.settings.display.scale;
            this.height = Math.floor(this._system.y + this._system.height) * scale;
            this.width = (this._system.x + this._system.width + this.pagePadding[2]) * scale;
            currentBarIndex = 0;
            let x = 0;
            for (let i = 0; i < partials.length; i++) {
                const partial = partials[i];
                const e = new RenderFinishedEventArgs();
                e.x = x;
                e.y = 0;
                e.totalWidth = this.width / scale;
                e.totalHeight = this.height / scale;
                e.width = partial.width;
                e.height = this.height / scale;
                e.firstMasterBarIndex = partial.masterBars[0].index;
                e.lastMasterBarIndex = partial.masterBars[partial.masterBars.length - 1].index;
                x += partial.width;
                // pull to local scope for lambda
                const partialBarIndex = currentBarIndex;
                const partialIndex = i;
                this._system.buildBoundingsLookup(0, 0);
                this.registerPartial(e, canvas => {
                    let renderX = this._system.getBarX(partial.masterBars[0].index) + this._system.accoladeWidth;
                    if (partialIndex === 0) {
                        renderX -= this._system.x + this._system.accoladeWidth;
                    }
                    canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
                    canvas.textAlign = TextAlign.Left;
                    Logger.debug(this.name, `Rendering partial from bar ${partial.masterBars[0].index} to ${partial.masterBars[partial.masterBars.length - 1].index}`, null);
                    this._system.paintPartial(-renderX, this._system.y, canvas, partialBarIndex, partial.masterBars.length);
                });
                currentBarIndex += partial.masterBars.length;
            }
            this.height = this.layoutAndRenderBottomScoreInfo(this.height);
            this.height = this.layoutAndRenderAnnotation(this.height);
            this.height += this.pagePadding[3];
        }
        finalizeStaffSystem() {
            this._system.scaleToWidth(this._system.width);
            this._system.finalizeSystem();
        }
    }

    /**
     * This layout arranges the bars into a fixed width and dynamic height region.
     */
    class PageViewLayout extends ScoreLayout {
        constructor() {
            super(...arguments);
            this._systems = [];
            this._allMasterBarRenderers = [];
            this._barsFromPreviousSystem = [];
        }
        get name() {
            return 'PageView';
        }
        doLayoutAndRender() {
            switch (this.renderer.settings.display.systemsLayoutMode) {
                case exports.SystemsLayoutMode.Automatic:
                    this.systemsLayoutMode = InternalSystemsLayoutMode.Automatic;
                    break;
                case exports.SystemsLayoutMode.UseModelLayout:
                    this.systemsLayoutMode = InternalSystemsLayoutMode.FromModelWithScale;
                    break;
            }
            let y = this.pagePadding[1];
            this.width = this.renderer.width;
            this._allMasterBarRenderers = [];
            //
            // 1. Score Info
            y = this.layoutAndRenderScoreInfo(y, -1);
            //
            // 2. Tunings
            y = this.layoutAndRenderTunings(y, -1);
            //
            // 3. Chord Diagrms
            y = this.layoutAndRenderChordDiagrams(y, -1);
            //
            // 4. One result per StaffSystem
            y = this.layoutAndRenderScore(y);
            y = this.layoutAndRenderBottomScoreInfo(y);
            y = this.layoutAndRenderAnnotation(y);
            this.height = (y + this.pagePadding[3]) * this.renderer.settings.display.scale;
        }
        get supportsResize() {
            return true;
        }
        get firstBarX() {
            let x = this.pagePadding[0];
            if (this._systems.length > 0) {
                x += this._systems[0].accoladeWidth;
            }
            return x;
        }
        doResize() {
            let y = this.pagePadding[1];
            this.width = this.renderer.width;
            const oldHeight = this.height;
            //
            // 1. Score Info
            y = this.layoutAndRenderScoreInfo(y, oldHeight);
            //
            // 2. Tunings
            y = this.layoutAndRenderTunings(y, oldHeight);
            //
            // 3. Chord Digrams
            y = this.layoutAndRenderChordDiagrams(y, oldHeight);
            //
            // 4. One result per StaffSystem
            y = this.resizeAndRenderScore(y, oldHeight);
            y = this.layoutAndRenderBottomScoreInfo(y);
            y = this.layoutAndRenderAnnotation(y);
            this.height = (y + this.pagePadding[3]) * this.renderer.settings.display.scale;
        }
        layoutAndRenderTunings(y, totalHeight = -1) {
            if (!this.tuningGlyph) {
                return y;
            }
            const res = this.renderer.settings.display.resources;
            this.tuningGlyph.x = this.pagePadding[0];
            this.tuningGlyph.width = this.scaledWidth;
            this.tuningGlyph.doLayout();
            const tuningHeight = Math.round(this.tuningGlyph.height);
            const e = new RenderFinishedEventArgs();
            e.x = 0;
            e.y = y;
            e.width = this.scaledWidth;
            e.height = tuningHeight;
            e.totalWidth = this.scaledWidth;
            e.totalHeight = totalHeight < 0 ? y + e.height : totalHeight;
            this.registerPartial(e, (canvas) => {
                canvas.color = res.scoreInfoColor;
                canvas.textAlign = TextAlign.Center;
                this.tuningGlyph.paint(0, 0, canvas);
            });
            return y + tuningHeight;
        }
        layoutAndRenderChordDiagrams(y, totalHeight = -1) {
            if (!this.chordDiagrams) {
                return y;
            }
            const res = this.renderer.settings.display.resources;
            this.chordDiagrams.width = this.scaledWidth;
            this.chordDiagrams.doLayout();
            const diagramHeight = Math.round(this.chordDiagrams.height);
            const e = new RenderFinishedEventArgs();
            e.x = 0;
            e.y = y;
            e.width = this.scaledWidth;
            e.height = diagramHeight;
            e.totalWidth = this.scaledWidth;
            e.totalHeight = totalHeight < 0 ? y + diagramHeight : totalHeight;
            this.registerPartial(e, (canvas) => {
                canvas.color = res.scoreInfoColor;
                canvas.textAlign = TextAlign.Center;
                this.chordDiagrams.paint(0, 0, canvas);
            });
            return y + diagramHeight;
        }
        layoutAndRenderScoreInfo(y, totalHeight = -1) {
            Logger.debug(this.name, 'Layouting score info');
            const e = new RenderFinishedEventArgs();
            e.x = 0;
            e.y = y;
            let infoHeight = 0;
            const res = this.renderer.settings.display.resources;
            const scoreInfoGlyphs = [];
            for (const [scoreElement, _notationElement] of ScoreLayout.HeaderElements.value) {
                if (this.headerGlyphs.has(scoreElement)) {
                    const glyph = this.headerGlyphs.get(scoreElement);
                    glyph.y = infoHeight;
                    this.alignScoreInfoGlyph(glyph);
                    let lineHeight = glyph.font.size;
                    // words and music on same line if not aligned on same side
                    if (scoreElement === ScoreSubElement.Words) {
                        if (this.headerGlyphs.has(ScoreSubElement.Music)) {
                            const musicGlyph = this.headerGlyphs.get(ScoreSubElement.Music);
                            if (musicGlyph.textAlign !== glyph.textAlign) {
                                lineHeight = 0;
                            }
                        }
                    }
                    infoHeight += lineHeight;
                    scoreInfoGlyphs.push(glyph);
                }
            }
            if (scoreInfoGlyphs.length > 0) {
                infoHeight = Math.floor(infoHeight + 17);
                e.width = this.scaledWidth;
                e.height = infoHeight;
                e.totalWidth = this.scaledWidth;
                e.totalHeight = totalHeight < 0 ? y + e.height : totalHeight;
                this.registerPartial(e, (canvas) => {
                    canvas.color = res.scoreInfoColor;
                    canvas.textAlign = TextAlign.Center;
                    for (const g of scoreInfoGlyphs) {
                        g.paint(0, 0, canvas);
                    }
                });
            }
            return y + infoHeight;
        }
        resizeAndRenderScore(y, oldHeight) {
            // if we have a fixed number of bars per row, we only need to refit them.
            const barsPerRowActive = this.renderer.settings.display.barsPerRow > 0 ||
                this.systemsLayoutMode === InternalSystemsLayoutMode.FromModelWithScale;
            if (barsPerRowActive) {
                for (let i = 0; i < this._systems.length; i++) {
                    const system = this._systems[i];
                    this.fitSystem(system);
                    y += this.paintSystem(system, oldHeight);
                }
            }
            else {
                this._systems = [];
                let currentIndex = 0;
                const maxWidth = this.maxWidth;
                let system = this.createEmptyStaffSystem();
                system.index = this._systems.length;
                system.x = this.pagePadding[0];
                system.y = y;
                while (currentIndex < this._allMasterBarRenderers.length) {
                    // if the current renderer still has space in the current system add it
                    // also force adding in case the system is empty
                    let renderers = this._allMasterBarRenderers[currentIndex];
                    if (system.width + renderers.width <= maxWidth || system.masterBarsRenderers.length === 0) {
                        system.addMasterBarRenderers(this.renderer.tracks, renderers);
                        // move to next system
                        currentIndex++;
                    }
                    else {
                        // if we cannot wrap on the current bar, we remove the last bar
                        // (this might even remove multiple ones until we reach a bar that can wrap);
                        while (renderers && !renderers.canWrap && system.masterBarsRenderers.length > 1) {
                            renderers = system.revertLastBar();
                            currentIndex--;
                        }
                        // in case we do not have space, we create a new system
                        system.isFull = true;
                        system.isLast = this.lastBarIndex === system.lastBarIndex;
                        this._systems.push(system);
                        this.fitSystem(system);
                        y += this.paintSystem(system, oldHeight);
                        // note: we do not increase currentIndex here to have it added to the next system
                        system = this.createEmptyStaffSystem();
                        system.index = this._systems.length;
                        system.x = this.pagePadding[0];
                        system.y = y;
                    }
                }
                system.isLast = this.lastBarIndex === system.lastBarIndex;
                // don't forget to finish the last system
                this.fitSystem(system);
                y += this.paintSystem(system, oldHeight);
            }
            return y;
        }
        layoutAndRenderScore(y) {
            const startIndex = this.firstBarIndex;
            let currentBarIndex = startIndex;
            const endBarIndex = this.lastBarIndex;
            this._systems = [];
            while (currentBarIndex <= endBarIndex) {
                // create system and align set proper coordinates
                const system = this.createStaffSystem(currentBarIndex, endBarIndex);
                this._systems.push(system);
                system.x = this.pagePadding[0];
                system.y = y;
                currentBarIndex = system.lastBarIndex + 1;
                // finalize system (sizing etc).
                this.fitSystem(system);
                Logger.debug(this.name, `Rendering partial from bar ${system.firstBarIndex} to ${system.lastBarIndex}`, null);
                y += this.paintSystem(system, y);
            }
            return y;
        }
        paintSystem(system, totalHeight) {
            // paint into canvas
            const height = Math.floor(system.height);
            const args = new RenderFinishedEventArgs();
            args.x = 0;
            args.y = system.y;
            args.totalWidth = this.scaledWidth;
            args.totalHeight = totalHeight;
            args.width = this.scaledWidth;
            args.height = height;
            args.firstMasterBarIndex = system.firstBarIndex;
            args.lastMasterBarIndex = system.lastBarIndex;
            system.buildBoundingsLookup(0, 0);
            this.registerPartial(args, canvas => {
                this.renderer.canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
                this.renderer.canvas.textAlign = TextAlign.Left;
                // NOTE: we use this negation trick to make the system paint itself to 0/0 coordinates
                // since we use partial drawing
                system.paint(0, -(args.y / this.renderer.settings.display.scale), canvas);
            });
            // calculate coordinates for next system
            return height;
        }
        /**
         * Realignes the bars in this line according to the available space
         */
        fitSystem(system) {
            if (system.isFull || system.width > this.maxWidth || this.renderer.settings.display.justifyLastSystem) {
                system.scaleToWidth(this.maxWidth);
            }
            else {
                system.scaleToWidth(system.width);
            }
            system.finalizeSystem();
        }
        getBarsPerSystem(rowIndex) {
            let barsPerRow = this.renderer.settings.display.barsPerRow;
            if (this.systemsLayoutMode === InternalSystemsLayoutMode.FromModelWithScale) {
                let defaultSystemsLayout;
                let systemsLayout;
                if (this.renderer.tracks.length > 1) {
                    // multi track applies
                    defaultSystemsLayout = this.renderer.score.defaultSystemsLayout;
                    systemsLayout = this.renderer.score.systemsLayout;
                }
                else {
                    defaultSystemsLayout = this.renderer.tracks[0].defaultSystemsLayout;
                    systemsLayout = this.renderer.tracks[0].systemsLayout;
                }
                barsPerRow = rowIndex < systemsLayout.length ? systemsLayout[rowIndex] : defaultSystemsLayout;
            }
            return barsPerRow;
        }
        createStaffSystem(currentBarIndex, endIndex) {
            const system = this.createEmptyStaffSystem();
            system.index = this._systems.length;
            const barsPerRow = this.getBarsPerSystem(system.index);
            const maxWidth = this.maxWidth;
            const end = endIndex + 1;
            let barIndex = currentBarIndex;
            while (barIndex < end) {
                if (this._barsFromPreviousSystem.length > 0) {
                    for (const renderer of this._barsFromPreviousSystem) {
                        system.addMasterBarRenderers(this.renderer.tracks, renderer);
                        barIndex = renderer.lastMasterBarIndex;
                    }
                }
                else {
                    const multiBarRestInfo = this.multiBarRestInfo;
                    const additionalMultiBarsRestBarIndices = multiBarRestInfo !== null && multiBarRestInfo.has(barIndex)
                        ? multiBarRestInfo.get(barIndex)
                        : null;
                    const renderers = system.addBars(this.renderer.tracks, barIndex, additionalMultiBarsRestBarIndices);
                    this._allMasterBarRenderers.push(renderers);
                    barIndex = renderers.lastMasterBarIndex;
                }
                this._barsFromPreviousSystem = [];
                let systemIsFull = false;
                // can bar placed in this line?
                if (barsPerRow === -1 && system.width >= maxWidth && system.masterBarsRenderers.length !== 0) {
                    systemIsFull = true;
                }
                else if (system.masterBarsRenderers.length === barsPerRow + 1) {
                    systemIsFull = true;
                }
                if (systemIsFull) {
                    let reverted = system.revertLastBar();
                    if (reverted) {
                        this._barsFromPreviousSystem.push(reverted);
                        while (reverted && !reverted.canWrap && system.masterBarsRenderers.length > 1) {
                            reverted = system.revertLastBar();
                            if (reverted) {
                                this._barsFromPreviousSystem.push(reverted);
                            }
                        }
                    }
                    system.isFull = true;
                    system.isLast = false;
                    this._barsFromPreviousSystem.reverse();
                    return system;
                }
                // do we need a line break after this bar
                let anyTrackNeedsLineBreak = false;
                let allTracksNeedLineBreak = true;
                for (const track of this.renderer.tracks) {
                    if (track.lineBreaks && track.lineBreaks.has(barIndex + 1)) {
                        anyTrackNeedsLineBreak = true;
                    }
                    else {
                        allTracksNeedLineBreak = false;
                    }
                }
                if (anyTrackNeedsLineBreak && allTracksNeedLineBreak) {
                    system.isFull = true;
                    system.isLast = false;
                    return system;
                }
                system.x = 0;
                barIndex++;
            }
            system.isLast = endIndex === system.lastBarIndex;
            return system;
        }
        get maxWidth() {
            return this.scaledWidth - this.pagePadding[0] - this.pagePadding[2];
        }
    }

    class AccidentalGlyph extends MusicFontGlyph {
        constructor(x, y, accidentalType, scale) {
            super(x, y, scale, AccidentalGlyph.getMusicSymbol(accidentalType));
        }
        static getMusicSymbol(accidentalType) {
            switch (accidentalType) {
                case AccidentalType.Natural:
                    return MusicFontSymbol.AccidentalNatural;
                case AccidentalType.Sharp:
                    return MusicFontSymbol.AccidentalSharp;
                case AccidentalType.Flat:
                    return MusicFontSymbol.AccidentalFlat;
                case AccidentalType.NaturalQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneNaturalArrowUp;
                case AccidentalType.SharpQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneSharpArrowUp;
                case AccidentalType.FlatQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneFlatArrowUp;
                case AccidentalType.DoubleSharp:
                    return MusicFontSymbol.AccidentalDoubleSharp;
                case AccidentalType.DoubleFlat:
                    return MusicFontSymbol.AccidentalDoubleFlat;
            }
            return MusicFontSymbol.None;
        }
    }

    class ClefGlyph extends MusicFontGlyph {
        constructor(x, y, clef, clefOttava) {
            super(x, y, 1, ClefGlyph.getSymbol(clef));
            this._clef = clef;
            this._clefOttava = clefOttava;
        }
        static getSymbol(clef) {
            switch (clef) {
                case Clef.Neutral:
                    return MusicFontSymbol.UnpitchedPercussionClef1;
                case Clef.C3:
                    return MusicFontSymbol.CClef;
                case Clef.C4:
                    return MusicFontSymbol.CClef;
                case Clef.F4:
                    return MusicFontSymbol.FClef;
                case Clef.G2:
                    return MusicFontSymbol.GClef;
                default:
                    return MusicFontSymbol.None;
            }
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, BarSubElement.StandardNotationClef, this.renderer.bar);
            try {
                super.paint(cx, cy, canvas);
                let numberGlyph;
                let top = false;
                switch (this._clefOttava) {
                    case Ottavia._15ma:
                        numberGlyph = new MusicFontGlyph(-4, 0, 0.5, MusicFontSymbol.Quindicesima);
                        top = true;
                        break;
                    case Ottavia._8va:
                        numberGlyph = new MusicFontGlyph(-2, 0, 0.5, MusicFontSymbol.Ottava);
                        top = true;
                        break;
                    case Ottavia._8vb:
                        numberGlyph = new MusicFontGlyph(-6, 0, 0.5, MusicFontSymbol.Ottava);
                        break;
                    case Ottavia._15mb:
                        numberGlyph = new MusicFontGlyph(-8, 0, 0.5, MusicFontSymbol.Quindicesima);
                        break;
                    default:
                        return;
                }
                let offsetY = 0;
                let offsetX = 0;
                switch (this._clef) {
                    case Clef.Neutral:
                        offsetY = top ? -12 : 15;
                        offsetX = 0;
                        break;
                    case Clef.C3:
                        offsetY = top ? -19 : 27;
                        offsetX = 0;
                        break;
                    case Clef.C4:
                        offsetY = top ? -19 : 27;
                        offsetX = 0;
                        break;
                    case Clef.F4:
                        offsetY = top ? -9 : 27;
                        offsetX = -4;
                        break;
                    case Clef.G2:
                        offsetY = top ? -37 : 30;
                        offsetX = 0;
                        break;
                    default:
                        return;
                }
                numberGlyph.renderer = this.renderer;
                numberGlyph.doLayout();
                const x = this.width / 2;
                numberGlyph.paint(cx + this.x + x + offsetX, cy + this.y + offsetY, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class AccentuationGlyph extends EffectGlyph {
        constructor(x, y, note) {
            super(x, y);
            this._note = note;
        }
        static getSymbol(accentuation, above) {
            switch (accentuation) {
                case AccentuationType.None:
                    return MusicFontSymbol.None;
                case AccentuationType.Normal:
                    return above ? MusicFontSymbol.ArticAccentAbove : MusicFontSymbol.ArticAccentBelow;
                case AccentuationType.Heavy:
                    return above ? MusicFontSymbol.ArticMarcatoAbove : MusicFontSymbol.ArticMarcatoBelow;
                case AccentuationType.Tenuto:
                    return above ? MusicFontSymbol.ArticTenutoAbove : MusicFontSymbol.ArticTenutoBelow;
                default:
                    return MusicFontSymbol.None;
            }
        }
        doLayout() {
            this.width = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.ArticAccentAbove);
            this.height = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.ArticAccentAbove);
        }
        paint(cx, cy, canvas) {
            const dir = this.renderer.getBeatDirection(this._note.beat);
            const symbol = AccentuationGlyph.getSymbol(this._note.accentuated, dir === BeamDirection.Down);
            const padding = 2;
            const y = dir === BeamDirection.Up ? cy + this.y : cy + this.y + this.height - padding;
            canvas.fillMusicFontSymbol(cx + this.x - 2, y, 1, symbol, false);
        }
    }

    class CircleGlyph extends Glyph {
        constructor(x, y, size) {
            super(x, y);
            this._size = 0;
            this._size = size;
        }
        doLayout() {
            this.width = this._size + 3;
        }
        paint(cx, cy, canvas) {
            const c = canvas.color;
            if (this.colorOverride) {
                canvas.color = this.colorOverride;
            }
            canvas.fillCircle(cx + this.x, cy + this.y, this._size);
            canvas.color = c;
        }
    }

    class DeadNoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteheadXOrnate);
        }
    }

    class DiamondNoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, duration, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, DiamondNoteHeadGlyph.getSymbol(duration));
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.DoubleWhole:
                case Duration.Whole:
                case Duration.Half:
                    return MusicFontSymbol.NoteheadDiamondWhiteWide;
                default:
                    return MusicFontSymbol.NoteheadDiamondBlackWide;
            }
        }
    }

    class TieGlyph extends Glyph {
        constructor(startBeat, endBeat, forEnd) {
            super(0, 0);
            this.yOffset = 0;
            this.startNoteRenderer = null;
            this.endNoteRenderer = null;
            this.tieDirection = BeamDirection.Up;
            this._startX = 0;
            this._startY = 0;
            this._endX = 0;
            this._endY = 0;
            this._tieHeight = 0;
            this._shouldDraw = false;
            this.startBeat = startBeat;
            this.endBeat = endBeat;
            this.forEnd = forEnd;
        }
        doLayout() {
            this.width = 0;
            // TODO fix nullability of start/end beat,
            if (!this.endBeat) {
                this._shouldDraw = false;
                return;
            }
            const startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this.startBeat.voice.bar);
            this.startNoteRenderer = startNoteRenderer;
            const endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this.endBeat.voice.bar);
            this.endNoteRenderer = endNoteRenderer;
            this._startX = 0;
            this._endX = 0;
            this._startY = 0;
            this._endY = 0;
            this.height = 0;
            this._shouldDraw = false;
            // if we are on the tie start, we check if we
            // either can draw till the end note, or we just can draw till the bar end
            this.tieDirection = !startNoteRenderer
                ? this.getBeamDirection(this.endBeat, endNoteRenderer)
                : this.getBeamDirection(this.startBeat, startNoteRenderer);
            if (!this.forEnd && startNoteRenderer) {
                // line break or bar break
                if (startNoteRenderer !== endNoteRenderer) {
                    this._startX = startNoteRenderer.x + this.getStartX();
                    this._startY = startNoteRenderer.y + this.getStartY() + this.yOffset;
                    // line break: to bar end
                    if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                        this._endX = startNoteRenderer.x + startNoteRenderer.width;
                        this._endY = this._startY;
                    }
                    else {
                        this._endX = endNoteRenderer.x + this.getEndX();
                        this._endY = endNoteRenderer.y + this.getEndY() + this.yOffset;
                    }
                }
                else {
                    this._startX = startNoteRenderer.x + this.getStartX();
                    this._endX = endNoteRenderer.x + this.getEndX();
                    this._startY = startNoteRenderer.y + this.getStartY() + this.yOffset;
                    this._endY = endNoteRenderer.y + this.getEndY() + this.yOffset;
                }
                this._shouldDraw = true;
            }
            else if (!startNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                this._startX = endNoteRenderer.x;
                this._endX = endNoteRenderer.x + this.getEndX();
                this._startY = endNoteRenderer.y + this.getEndY() + this.yOffset;
                this._endY = this._startY;
                this._shouldDraw = true;
            }
            if (this._shouldDraw) {
                this.y = Math.min(this._startY, this._endY);
                if (this.shouldDrawBendSlur()) {
                    this._tieHeight = 0; // TODO: Bend slur height to be considered?
                }
                else {
                    this._tieHeight = this.getTieHeight(this._startX, this._startY, this._endX, this._endY);
                    const tieBoundingBox = TieGlyph.calculateActualTieHeight(1, this._startX, this._startY, this._endX, this._endY, this.tieDirection === BeamDirection.Down, this._tieHeight, 4);
                    this.height = tieBoundingBox.h;
                    if (this.tieDirection === BeamDirection.Up) {
                        // the tie might go above `this.y` due to its shape
                        // here we calculate how much this is so we can consider the
                        // respective overflow
                        const overlap = this.y - tieBoundingBox.y;
                        if (overlap > 0) {
                            this.y -= overlap;
                        }
                    }
                }
            }
        }
        paint(cx, cy, canvas) {
            if (this._shouldDraw) {
                if (this.shouldDrawBendSlur()) {
                    TieGlyph.drawBendSlur(canvas, cx + this._startX, cy + this._startY, cx + this._endX, cy + this._endY, this.tieDirection === BeamDirection.Down, 1);
                }
                else {
                    TieGlyph.paintTie(canvas, 1, cx + this._startX, cy + this._startY, cx + this._endX, cy + this._endY, this.tieDirection === BeamDirection.Down, this._tieHeight, 4);
                }
            }
        }
        shouldDrawBendSlur() {
            return false;
        }
        getTieHeight(startX, startY, endX, endY) {
            return 22;
        }
        getBeamDirection(beat, noteRenderer) {
            return BeamDirection.Down;
        }
        getStartY() {
            return 0;
        }
        getEndY() {
            return 0;
        }
        getStartX() {
            return 0;
        }
        getEndX() {
            return 0;
        }
        static calculateActualTieHeight(scale, x1, y1, x2, y2, down, offset, size) {
            const cp = TieGlyph.computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size);
            x1 = cp[0];
            y1 = cp[1];
            const cpx = cp[2];
            const cpy = cp[3];
            x2 = cp[6];
            y2 = cp[7];
            const tx = (x1 - cpx) / (x1 - 2 * cpx + x2);
            const ex = TieGlyph.calculateExtrema(x1, y1, cpx, cpy, x2, y2, tx);
            const xMin = ex.length > 0 ? Math.min(x1, x2, ex[0]) : Math.min(x1, x2);
            const xMax = ex.length > 0 ? Math.max(x1, x2, ex[0]) : Math.max(x1, x2);
            const ty = (y1 - cpy) / (y1 - 2 * cpy + y2);
            const ey = TieGlyph.calculateExtrema(x1, y1, cpx, cpy, x2, y2, ty);
            const yMin = ey.length > 0 ? Math.min(y1, y2, ey[1]) : Math.min(y1, y2);
            const yMax = ey.length > 0 ? Math.max(y1, y2, ey[1]) : Math.max(y1, y2);
            const b = new Bounds();
            b.x = xMin;
            b.y = yMin;
            b.w = xMax - xMin;
            b.h = yMax - yMin;
            return b;
        }
        static calculateExtrema(x1, y1, cpx, cpy, x2, y2, t) {
            if (t <= 0 || 1 <= t) {
                return [];
            }
            const c1x = x1 + (cpx - x1) * t;
            const c1y = y1 + (cpy - y1) * t;
            const c2x = cpx + (x2 - cpx) * t;
            const c2y = cpy + (y2 - cpy) * t;
            return [c1x + (c2x - c1x) * t, c1y + (c2y - c1y) * t];
        }
        static computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size) {
            if (x1 === x2 && y1 === y2) {
                return [];
            }
            // ensure endX > startX
            if (x2 < x1) {
                let t = x1;
                x1 = x2;
                x2 = t;
                t = y1;
                y1 = y2;
                y2 = t;
            }
            //
            // calculate control points
            //
            offset *= scale;
            size *= scale;
            // normal vector
            let normalVectorX = y2 - y1;
            let normalVectorY = x2 - x1;
            const length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
            if (down) {
                normalVectorX *= -1;
            }
            else {
                normalVectorY *= -1;
            }
            // make to unit vector
            normalVectorX /= length;
            normalVectorY /= length;
            // center of connection
            const centerX = (x2 + x1) / 2;
            const centerY = (y2 + y1) / 2;
            // control points
            const cp1X = centerX + offset * normalVectorX;
            const cp1Y = centerY + offset * normalVectorY;
            const cp2X = centerX + (offset - size) * normalVectorX;
            const cp2Y = centerY + (offset - size) * normalVectorY;
            return [x1, y1, cp1X, cp1Y, cp2X, cp2Y, x2, y2];
        }
        static paintTie(canvas, scale, x1, y1, x2, y2, down = false, offset = 22, size = 4) {
            const cps = TieGlyph.computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size);
            canvas.beginPath();
            canvas.moveTo(cps[0], cps[1]);
            canvas.quadraticCurveTo(cps[2], cps[3], cps[6], cps[7]);
            canvas.quadraticCurveTo(cps[4], cps[5], cps[0], cps[1]);
            canvas.closePath();
            canvas.fill();
        }
        static drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText) {
            let normalVectorX = y2 - y1;
            let normalVectorY = x2 - x1;
            const length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
            if (down) {
                normalVectorX *= -1;
            }
            else {
                normalVectorY *= -1;
            }
            // make to unit vector
            normalVectorX /= length;
            normalVectorY /= length;
            // center of connection
            // TODO: should be 1/3
            const centerX = (x2 + x1) / 2;
            const centerY = (y2 + y1) / 2;
            let offset = TieGlyph.BendSlurHeight * scale;
            if (x2 - x1 < 20) {
                offset /= 2;
            }
            const cp1X = centerX + offset * normalVectorX;
            const cp1Y = centerY + offset * normalVectorY;
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.lineTo(cp1X, cp1Y);
            canvas.lineTo(x2, y2);
            canvas.stroke();
            if (slurText) {
                const w = canvas.measureText(slurText).width;
                const textOffset = down ? 0 : -canvas.font.size;
                canvas.fillText(slurText, cp1X - w / 2, cp1Y + textOffset);
            }
        }
    }
    TieGlyph.BendSlurHeight = 11;

    class GhostParenthesisGlyph extends Glyph {
        constructor(isOpen) {
            super(0, 0);
            this._isOpen = isOpen;
        }
        doLayout() {
            super.doLayout();
            this.width = GhostParenthesisGlyph.Size;
        }
        paint(cx, cy, canvas) {
            const c = canvas.color;
            if (this.colorOverride) {
                canvas.color = this.colorOverride;
            }
            if (this._isOpen) {
                TieGlyph.paintTie(canvas, 1, cx + this.x + this.width, cy + this.y + this.height, cx + this.x + this.width, cy + this.y, false, 6, 3);
            }
            else {
                TieGlyph.paintTie(canvas, 1, cx + this.x, cy + this.y, cx + this.x, cy + this.y + this.height, false, 6, 3);
            }
            canvas.color = c;
        }
    }
    GhostParenthesisGlyph.Size = 6;

    class GhostNoteInfo {
        constructor(line, isGhost, color) {
            this.line = 0;
            this.line = line;
            this.isGhost = isGhost;
            this.color = color;
        }
    }
    class GhostNoteContainerGlyph extends Glyph {
        constructor(isOpen) {
            super(0, 0);
            this._infos = [];
            this._glyphs = [];
            this.isEmpty = true;
            this._isOpen = isOpen;
        }
        addParenthesis(n) {
            const sr = this.renderer;
            const line = sr.getNoteLine(n);
            const hasParenthesis = n.isGhost ||
                (this.isTiedBend(n) &&
                    sr.settings.notation.isNotationElementVisible(exports.NotationElement.ParenthesisOnTiedBends));
            const color = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.Effects, n);
            this.add(new GhostNoteInfo(line, hasParenthesis, color));
        }
        addParenthesisOnLine(line, hasParenthesis) {
            const info = new GhostNoteInfo(line, hasParenthesis, undefined);
            this.add(info);
        }
        add(info) {
            this._infos.push(info);
            if (info.isGhost) {
                this.isEmpty = false;
            }
        }
        isTiedBend(note) {
            if (note.isTieDestination) {
                if (note.tieOrigin.hasBend) {
                    return true;
                }
                return this.isTiedBend(note.tieOrigin);
            }
            return false;
        }
        doLayout() {
            const sr = this.renderer;
            this._infos.sort((a, b) => {
                return a.line - b.line;
            });
            let previousGlyph = null;
            const sizePerLine = sr.getScoreHeight(1);
            for (let i = 0, j = this._infos.length; i < j; i++) {
                let g;
                if (!this._infos[i].isGhost) {
                    previousGlyph = null;
                }
                else if (!previousGlyph) {
                    g = new GhostParenthesisGlyph(this._isOpen);
                    g.colorOverride = this._infos[i].color;
                    g.renderer = this.renderer;
                    g.y = sr.getScoreY(this._infos[i].line) - sizePerLine;
                    g.height = sizePerLine * 2;
                    g.doLayout();
                    this._glyphs.push(g);
                    previousGlyph = g;
                }
                else {
                    const y = sr.getScoreY(this._infos[i].line) + sizePerLine;
                    previousGlyph.height = y - previousGlyph.y;
                }
            }
            this.width = this._glyphs.length > 0 ? this._glyphs[0].width : 0;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            for (const g of this._glyphs) {
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class ScoreNoteGlyphInfo {
        constructor(glyph, line) {
            this.steps = 0;
            this.glyph = glyph;
            this.steps = line;
        }
    }

    class ScoreNoteChordGlyphBase extends Glyph {
        constructor() {
            super(0, 0);
            this._infos = [];
            this._noteHeadPadding = 0;
            this.minNote = null;
            this.maxNote = null;
            this.spacingChanged = new EventEmitter();
            this.upLineX = 0;
            this.downLineX = 0;
            this.displacedX = 0;
            this.noteStartX = 0;
        }
        add(noteGlyph, noteLine) {
            const info = new ScoreNoteGlyphInfo(noteGlyph, noteLine);
            this._infos.push(info);
            if (!this.minNote || this.minNote.steps > info.steps) {
                this.minNote = info;
            }
            if (!this.maxNote || this.maxNote.steps < info.steps) {
                this.maxNote = info;
            }
        }
        doLayout() {
            this._infos.sort((a, b) => {
                return b.steps - a.steps;
            });
            let displacedX = 0;
            let lastDisplaced = false;
            let lastStep = 0;
            let anyDisplaced = false;
            const direction = this.direction;
            let w = 0;
            for (let i = 0, j = this._infos.length; i < j; i++) {
                const g = this._infos[i].glyph;
                g.renderer = this.renderer;
                g.doLayout();
                let displace = false;
                if (i === 0) {
                    displacedX = g.width;
                }
                else {
                    // check if note needs to be repositioned
                    if (Math.abs(lastStep - this._infos[i].steps) <= 1) {
                        // reposition if needed
                        if (!lastDisplaced) {
                            displace = true;
                            g.x = displacedX;
                            anyDisplaced = true;
                            lastDisplaced = true; // let next iteration know we are displace now
                        }
                        else {
                            lastDisplaced = false; // let next iteration know that we weren't displaced now
                        }
                    }
                    else {
                        lastDisplaced = false;
                    }
                }
                // for beat direction down we invert the displacement.
                // this means: displaced is on the left side of the stem and not displaced is right
                if (direction === BeamDirection.Down) {
                    g.x = displace ? 0 : displacedX;
                }
                else {
                    g.x = displace ? displacedX : 0;
                }
                g.x += this.noteStartX;
                lastStep = this._infos[i].steps;
                w = Math.max(w, g.x + g.width);
                // after size calculation, re-align glyph to stem if needed
                if (g instanceof NoteHeadGlyph && g.centerOnStem) {
                    g.x = displacedX;
                }
            }
            if (anyDisplaced) {
                this._noteHeadPadding = 0;
                this.upLineX = displacedX;
                this.downLineX = displacedX;
            }
            else {
                this._noteHeadPadding = direction === BeamDirection.Down ? -displacedX : 0;
                w += this._noteHeadPadding;
                this.upLineX = w;
                this.downLineX = 0;
            }
            this.displacedX = displacedX;
            this.width = w;
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            // TODO: this method seems to be quite heavy according to the profiler, why?
            // TODO: Take care of beateffects in overflow
            this.paintLedgerLines(cx, cy, canvas);
            const infos = this._infos;
            const x = cx + this._noteHeadPadding;
            for (const g of infos) {
                g.glyph.renderer = this.renderer;
                g.glyph.paint(x, cy, canvas);
            }
        }
        paintLedgerLines(cx, cy, canvas) {
            if (!this.minNote) {
                return;
            }
            const scoreRenderer = this.renderer;
            const _ = ElementStyleHelper.bar(canvas, BarSubElement.StandardNotationStaffLine, scoreRenderer.bar, true);
            try {
                const linePadding = 3;
                const lineWidth = this.width - this.noteStartX + linePadding * 2;
                const lineSpacing = scoreRenderer.getLineHeight(1);
                const firstTopLedgerY = scoreRenderer.getLineY(-1);
                const firstBottomLedgerY = scoreRenderer.getLineY(scoreRenderer.drawnLineCount);
                const minNoteLineY = scoreRenderer.getLineY(this.minNote.steps / 2);
                const maxNoteLineY = scoreRenderer.getLineY(this.maxNote.steps / 2);
                let y = firstTopLedgerY;
                while (y >= minNoteLineY) {
                    canvas.fillRect(cx - linePadding + this.noteStartX, (cy + y) | 0, lineWidth, BarRendererBase.StaffLineThickness);
                    y -= lineSpacing;
                }
                y = firstBottomLedgerY;
                while (y <= maxNoteLineY) {
                    canvas.fillRect(cx - linePadding + this.noteStartX, (cy + y) | 0, lineWidth, BarRendererBase.StaffLineThickness);
                    y += lineSpacing;
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class TremoloPickingGlyph extends MusicFontGlyph {
        constructor(x, y, duration) {
            super(x, y, 1, TremoloPickingGlyph.getSymbol(duration));
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.ThirtySecond:
                    return MusicFontSymbol.Tremolo3;
                case Duration.Sixteenth:
                    return MusicFontSymbol.Tremolo2;
                case Duration.Eighth:
                    return MusicFontSymbol.Tremolo1;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class DeadSlappedBeatGlyph extends Glyph {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            this.width = 26;
        }
        paint(cx, cy, canvas) {
            const renderer = this.renderer;
            const crossHeight = renderer.getLineHeight(renderer.heightLineCount - 1);
            const staffTop = renderer.getLineY(0);
            const staffHeight = renderer.getLineHeight(renderer.drawnLineCount - 1);
            // center X on staff
            const centerY = staffTop + staffHeight / 2 - crossHeight / 2;
            const lw = canvas.lineWidth;
            canvas.lineWidth = 2;
            canvas.moveTo(cx + this.x, cy + centerY);
            canvas.lineTo(cx + this.x + this.width, cy + centerY + crossHeight);
            canvas.moveTo(cx + this.x, cy + centerY + crossHeight);
            canvas.lineTo(cx + this.x + this.width, cy + centerY);
            canvas.stroke();
            canvas.lineWidth = lw;
        }
    }

    class ScoreNoteChordGlyph extends ScoreNoteChordGlyphBase {
        constructor() {
            super(...arguments);
            this._noteGlyphLookup = new Map();
            this._notes = [];
            this._deadSlapped = null;
            this._tremoloPicking = null;
            this.aboveBeatEffects = new Map();
            this.belowBeatEffects = new Map();
        }
        get direction() {
            return this.beamingHelper.direction;
        }
        getNoteX(note, requestedPosition) {
            if (this._noteGlyphLookup.has(note.id)) {
                const n = this._noteGlyphLookup.get(note.id);
                let pos = this.x + n.x + this._noteHeadPadding;
                switch (requestedPosition) {
                    case NoteXPosition.Left:
                        break;
                    case NoteXPosition.Center:
                        pos += n.width / 2;
                        break;
                    case NoteXPosition.Right:
                        pos += n.width;
                        break;
                }
                return pos;
            }
            return 0;
        }
        getNoteY(note, requestedPosition) {
            if (this._noteGlyphLookup.has(note.id)) {
                const n = this._noteGlyphLookup.get(note.id);
                let pos = this.y + n.y;
                switch (requestedPosition) {
                    case NoteYPosition.TopWithStem:
                        pos -= this.renderer.getStemSize(this.beamingHelper);
                        break;
                    case NoteYPosition.Top:
                        pos -= n.height / 2;
                        break;
                    case NoteYPosition.Center:
                        break;
                    case NoteYPosition.Bottom:
                        pos += n.height / 2;
                        break;
                    case NoteYPosition.BottomWithStem:
                        pos += this.renderer.getStemSize(this.beamingHelper);
                        break;
                }
                return pos;
            }
            return 0;
        }
        addNoteGlyph(noteGlyph, note, noteLine) {
            super.add(noteGlyph, noteLine);
            this._noteGlyphLookup.set(note.id, noteGlyph);
            this._notes.push(note);
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.upLineX, cx + this.x + this.downLineX);
            }
        }
        doLayout() {
            super.doLayout();
            const scoreRenderer = this.renderer;
            if (this.beat.deadSlapped) {
                this._deadSlapped = new DeadSlappedBeatGlyph();
                this._deadSlapped.renderer = this.renderer;
                this._deadSlapped.doLayout();
                this.width = this._deadSlapped.width;
            }
            const direction = this.direction;
            let aboveBeatEffectsY = 0;
            let belowBeatEffectsY = 0;
            let belowEffectSpacing = 1;
            let aboveEffectSpacing = -belowEffectSpacing;
            let belowEffectSpacingShiftBefore = false;
            let aboveEffectSpacingShiftBefore = false;
            if (this.beat.deadSlapped) {
                belowBeatEffectsY = scoreRenderer.getScoreY(0);
                aboveBeatEffectsY = scoreRenderer.getScoreY(scoreRenderer.heightLineCount);
            }
            else {
                if (this.direction === BeamDirection.Up) {
                    belowEffectSpacingShiftBefore = false;
                    aboveEffectSpacingShiftBefore = true;
                    belowBeatEffectsY = scoreRenderer.getScoreY(this.maxNote.steps + 2);
                    aboveBeatEffectsY =
                        scoreRenderer.getScoreY(this.minNote.steps) - scoreRenderer.getStemSize(this.beamingHelper, true);
                }
                else {
                    belowEffectSpacingShiftBefore = true;
                    aboveEffectSpacingShiftBefore = false;
                    belowBeatEffectsY = scoreRenderer.getScoreY(this.minNote.steps - 1);
                    belowEffectSpacing *= -1;
                    aboveEffectSpacing *= -1;
                    aboveBeatEffectsY =
                        scoreRenderer.getScoreY(this.maxNote.steps) + scoreRenderer.getStemSize(this.beamingHelper, true);
                }
            }
            let minEffectY = null;
            let maxEffectY = null;
            for (const effect of this.aboveBeatEffects.values()) {
                effect.renderer = this.renderer;
                effect.doLayout();
                if (aboveEffectSpacingShiftBefore) {
                    aboveBeatEffectsY += aboveEffectSpacing * effect.height;
                }
                effect.y = aboveBeatEffectsY;
                if (minEffectY === null || minEffectY > aboveBeatEffectsY) {
                    minEffectY = aboveBeatEffectsY;
                }
                if (maxEffectY === null || maxEffectY < aboveBeatEffectsY) {
                    maxEffectY = aboveBeatEffectsY;
                }
                if (!aboveEffectSpacingShiftBefore) {
                    aboveBeatEffectsY += aboveEffectSpacing * effect.height;
                }
            }
            for (const effect of this.belowBeatEffects.values()) {
                effect.renderer = this.renderer;
                effect.doLayout();
                if (belowEffectSpacingShiftBefore) {
                    belowBeatEffectsY += belowEffectSpacing * effect.height;
                }
                effect.y = belowBeatEffectsY;
                if (minEffectY === null || minEffectY > belowBeatEffectsY) {
                    minEffectY = belowBeatEffectsY;
                }
                if (maxEffectY === null || maxEffectY < belowBeatEffectsY) {
                    maxEffectY = belowBeatEffectsY;
                }
                if (!belowEffectSpacingShiftBefore) {
                    belowBeatEffectsY += belowEffectSpacing * effect.height;
                }
            }
            if (minEffectY !== null) {
                scoreRenderer.registerBeatEffectOverflows(minEffectY, maxEffectY ?? 0);
            }
            if (this.beat.isTremolo && !this.beat.deadSlapped) {
                let offset = 0;
                const baseNote = direction === BeamDirection.Up ? this.minNote : this.maxNote;
                let tremoloX = direction === BeamDirection.Up ? this.upLineX : this.downLineX;
                const speed = this.beat.tremoloSpeed;
                switch (speed) {
                    case Duration.ThirtySecond:
                        offset = direction === BeamDirection.Up ? -15 : 15;
                        break;
                    case Duration.Sixteenth:
                        offset = direction === BeamDirection.Up ? -12 : 15;
                        break;
                    case Duration.Eighth:
                        offset = direction === BeamDirection.Up ? -10 : 10;
                        break;
                    default:
                        offset = direction === BeamDirection.Up ? -10 : 15;
                        break;
                }
                if (this.beat.duration < Duration.Half) {
                    tremoloX = this.width / 2;
                }
                this._tremoloPicking = new TremoloPickingGlyph(tremoloX, baseNote.glyph.y + offset, speed);
                this._tremoloPicking.renderer = this.renderer;
                this._tremoloPicking.doLayout();
            }
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            for (const note of this._notes) {
                if (this._noteGlyphLookup.has(note.id)) {
                    const glyph = this._noteGlyphLookup.get(note.id);
                    const noteBounds = new NoteBounds();
                    noteBounds.note = note;
                    noteBounds.noteHeadBounds = new Bounds();
                    noteBounds.noteHeadBounds.x = cx + this.x + this._noteHeadPadding + glyph.x;
                    noteBounds.noteHeadBounds.y = cy + this.y + glyph.y - glyph.height / 2;
                    noteBounds.noteHeadBounds.w = glyph.width;
                    noteBounds.noteHeadBounds.h = glyph.height;
                    beatBounds.addNote(noteBounds);
                }
            }
        }
        paint(cx, cy, canvas) {
            this.paintEffects(cx, cy, canvas);
            super.paint(cx, cy, canvas);
        }
        paintEffects(cx, cy, canvas) {
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.StandardNotationEffects, this.beat);
            try {
                for (const g of this.aboveBeatEffects.values()) {
                    g.paint(cx + this.x + 2, cy + this.y, canvas);
                }
                for (const g of this.belowBeatEffects.values()) {
                    g.paint(cx + this.x + 2, cy + this.y, canvas);
                }
                if (this._tremoloPicking) {
                    this._tremoloPicking.paint(cx, cy, canvas);
                }
                if (this._deadSlapped) {
                    this._deadSlapped.paint(cx, cy, canvas);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class ScoreRestGlyph extends MusicFontGlyph {
        constructor(x, y, duration) {
            super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                    return MusicFontSymbol.RestLonga;
                case Duration.DoubleWhole:
                    return MusicFontSymbol.RestDoubleWhole;
                case Duration.Whole:
                    return MusicFontSymbol.RestWhole;
                case Duration.Half:
                    return MusicFontSymbol.RestHalf;
                case Duration.Quarter:
                    return MusicFontSymbol.RestQuarter;
                case Duration.Eighth:
                    return MusicFontSymbol.RestEighth;
                case Duration.Sixteenth:
                    return MusicFontSymbol.RestSixteenth;
                case Duration.ThirtySecond:
                    return MusicFontSymbol.RestThirtySecond;
                case Duration.SixtyFourth:
                    return MusicFontSymbol.RestSixtyFourth;
                case Duration.OneHundredTwentyEighth:
                    return MusicFontSymbol.RestOneHundredTwentyEighth;
                case Duration.TwoHundredFiftySixth:
                    return MusicFontSymbol.RestTwoHundredFiftySixth;
                default:
                    return MusicFontSymbol.None;
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
            }
        }
        paint(cx, cy, canvas) {
            this.internalPaint(cx, cy, canvas, BeatSubElement.StandardNotationRests);
        }
        internalPaint(cx, cy, canvas, element) {
            const _ = ElementStyleHelper.beat(canvas, element, this.beat);
            try {
                super.paint(cx, cy, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class AccidentalColumnInfo {
        constructor() {
            this.x = 0;
            this.y = -3e3;
            this.width = 0;
        }
    }
    class AccidentalGroupGlyph extends GlyphGroup {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            if (!this.glyphs || this.glyphs.length === 0) {
                this.width = 0;
                return;
            }
            //
            // Determine Columns for accidentals
            //
            this.glyphs.sort((a, b) => {
                if (a.y < b.y) {
                    return -1;
                }
                if (a.y > b.y) {
                    return 1;
                }
                return 0;
            });
            // defines the reserved y position of the columns
            const columns = [];
            columns.push(new AccidentalColumnInfo());
            const accidentalHeight = 21;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                const g = this.glyphs[i];
                g.renderer = this.renderer;
                g.doLayout();
                // find column where glyph fits into
                // as long the glyph does not fit into the current column
                let gColumn = 0;
                while (columns[gColumn].y > g.y) {
                    // move to next column
                    gColumn++;
                    // and create the new column if needed
                    if (gColumn === columns.length) {
                        columns.push(new AccidentalColumnInfo());
                    }
                }
                // temporary save column as X
                g.x = gColumn;
                columns[gColumn].y = g.y + accidentalHeight;
                if (columns[gColumn].width < g.width) {
                    columns[gColumn].width = g.width;
                }
            }
            //
            // Place accidentals in columns
            //
            this.width = 0;
            for (const column of columns) {
                this.width += column.width;
                column.x = this.width;
            }
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                const g = this.glyphs[i];
                const column = columns[g.x];
                g.x = this.width - column.x;
            }
        }
    }

    class BendNoteHeadGroupGlyph extends ScoreNoteChordGlyphBase {
        get direction() {
            return BeamDirection.Up;
        }
        constructor(beat, showParenthesis = false) {
            super();
            this._showParenthesis = false;
            this._noteValueLookup = new Map();
            this._accidentals = new AccidentalGroupGlyph();
            this._preNoteParenthesis = null;
            this._postNoteParenthesis = null;
            this.isEmpty = true;
            this.noteHeadOffset = 0;
            this._beat = beat;
            this._showParenthesis = showParenthesis;
            if (showParenthesis) {
                this._preNoteParenthesis = new GhostNoteContainerGlyph(true);
                this._postNoteParenthesis = new GhostNoteContainerGlyph(false);
            }
        }
        containsNoteValue(noteValue) {
            return this._noteValueLookup.has(noteValue);
        }
        getNoteValueY(noteValue) {
            if (this._noteValueLookup.has(noteValue)) {
                return this.y + this._noteValueLookup.get(noteValue).y;
            }
            return 0;
        }
        addGlyph(noteValue, quarterBend, color) {
            const sr = this.renderer;
            const noteHeadGlyph = new NoteHeadGlyph(0, 0, Duration.Quarter, true);
            const accidental = sr.accidentalHelper.applyAccidentalForValue(this._beat, noteValue, quarterBend, true);
            const line = sr.accidentalHelper.getNoteLineForValue(noteValue, false);
            noteHeadGlyph.y = sr.getScoreY(line);
            if (this._showParenthesis) {
                this._preNoteParenthesis.renderer = this.renderer;
                this._postNoteParenthesis.renderer = this.renderer;
                this._preNoteParenthesis.addParenthesisOnLine(line, true);
                this._postNoteParenthesis.addParenthesisOnLine(line, true);
            }
            if (accidental !== AccidentalType.None) {
                const g = new AccidentalGlyph(0, noteHeadGlyph.y, accidental, NoteHeadGlyph.GraceScale);
                g.renderer = this.renderer;
                this._accidentals.renderer = this.renderer;
                this._accidentals.addGlyph(g);
            }
            this._noteValueLookup.set(noteValue, noteHeadGlyph);
            this.add(noteHeadGlyph, line);
            this.isEmpty = false;
        }
        doLayout() {
            let x = 0;
            if (this._showParenthesis) {
                this._preNoteParenthesis.x = x;
                this._preNoteParenthesis.renderer = this.renderer;
                this._preNoteParenthesis.doLayout();
                x += this._preNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding;
            }
            if (!this._accidentals.isEmpty) {
                x += this._accidentals.width + BendNoteHeadGroupGlyph.ElementPadding;
                this._accidentals.x = x;
                this._accidentals.renderer = this.renderer;
                this._accidentals.doLayout();
                x += this._accidentals.width + BendNoteHeadGroupGlyph.ElementPadding;
            }
            this.noteStartX = x;
            super.doLayout();
            this.noteHeadOffset = this.noteStartX + (this.width - this.noteStartX) / 2;
            if (this._showParenthesis) {
                this._postNoteParenthesis.x = this.width + BendNoteHeadGroupGlyph.ElementPadding;
                this._postNoteParenthesis.renderer = this.renderer;
                this._postNoteParenthesis.doLayout();
                this.width += this._postNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding;
            }
        }
        paint(cx, cy, canvas) {
            // canvas.Color = Color.Random();
            // canvas.FillRect(cx + X, cy + Y, Width, 10);
            // canvas.Color = Renderer.Resources.MainGlyphColor;
            if (!this._accidentals.isEmpty) {
                this._accidentals.paint(cx + this.x, cy + this.y, canvas);
            }
            if (this._showParenthesis) {
                this._preNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
                this._postNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
            }
            super.paint(cx, cy, canvas);
        }
    }
    BendNoteHeadGroupGlyph.ElementPadding = 2;

    class ScoreHelperNotesBaseGlyph extends Glyph {
        constructor() {
            super(...arguments);
            this.BendNoteHeads = [];
        }
        drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText) {
            TieGlyph.drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText);
        }
        doLayout() {
            super.doLayout();
            this.width = 0;
            for (const noteHeads of this.BendNoteHeads) {
                noteHeads.doLayout();
                this.width += noteHeads.width + 10;
            }
        }
        getTieDirection(beat, noteRenderer) {
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
    }
    ScoreHelperNotesBaseGlyph.EndPadding = ((10 / 2) | 0) + 3;

    class TabBendRenderPoint extends BendPoint {
        constructor(offset = 0, value = 0) {
            super(offset, value);
            this.lineValue = 0;
            this.lineValue = value;
        }
    }

    class TabBendGlyph extends Glyph {
        constructor() {
            super(0, 0);
            this._notes = [];
            this._renderPoints = new Map();
            this._preBendMinValue = -1;
            this._bendMiddleMinValue = -1;
            this._bendEndMinValue = -1;
            this._bendEndContinuedMinValue = -1;
            this._releaseMinValue = -1;
            this._releaseContinuedMinValue = -1;
            this._maxBendValue = -1;
        }
        addBends(note) {
            this._notes.push(note);
            const renderPoints = this.createRenderingPoints(note);
            this._renderPoints.set(note.id, renderPoints);
            if (this._maxBendValue === -1 || this._maxBendValue < note.maxBendPoint.value) {
                this._maxBendValue = note.maxBendPoint.value;
            }
            // compute arrow end values for common bend types
            let value = 0;
            switch (note.bendType) {
                case BendType.Bend:
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                            this._bendEndContinuedMinValue = value;
                        }
                    }
                    else {
                        if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                            this._bendEndMinValue = value;
                        }
                    }
                    break;
                case BendType.Release:
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
                case BendType.BendRelease:
                    value = renderPoints[1].value;
                    if (this._bendMiddleMinValue === -1 || value < this._bendMiddleMinValue) {
                        this._bendMiddleMinValue = value;
                    }
                    value = renderPoints[2].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
                case BendType.Prebend:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    break;
                case BendType.PrebendBend:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                            this._bendEndContinuedMinValue = value;
                        }
                    }
                    else {
                        if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                            this._bendEndMinValue = value;
                        }
                    }
                    break;
                case BendType.PrebendRelease:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
            }
        }
        doLayout() {
            super.doLayout();
            const bendHeight = this._maxBendValue * TabBendGlyph.BendValueHeight;
            this.renderer.registerOverflowTop(bendHeight);
            let value = 0;
            for (const note of this._notes) {
                const renderPoints = this._renderPoints.get(note.id);
                switch (note.bendType) {
                    case BendType.Bend:
                        renderPoints[1].lineValue = note.isTieOrigin
                            ? this._bendEndContinuedMinValue
                            : this._bendEndMinValue;
                        break;
                    case BendType.Release:
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[1].lineValue = value;
                        }
                        break;
                    case BendType.BendRelease:
                        renderPoints[1].lineValue = this._bendMiddleMinValue;
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[2].lineValue = value;
                        }
                        break;
                    case BendType.Prebend:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        break;
                    case BendType.PrebendBend:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        renderPoints[1].lineValue = note.isTieOrigin
                            ? this._bendEndContinuedMinValue
                            : this._bendEndMinValue;
                        break;
                    case BendType.PrebendRelease:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[1].lineValue = value;
                        }
                        break;
                }
            }
            this.width = 0;
            this._notes.sort((a, b) => {
                if (a.isStringed) {
                    return a.string - b.string;
                }
                return a.realValue - b.realValue;
            });
        }
        createRenderingPoints(note) {
            const renderingPoints = [];
            // Guitar Pro Rendering Note:
            // Last point of bend is always at end of the note even
            // though it might not be 100% correct from timing perspective.
            switch (note.bendType) {
                case BendType.Custom:
                    for (const bendPoint of note.bendPoints) {
                        renderingPoints.push(new TabBendRenderPoint(bendPoint.offset, bendPoint.value));
                    }
                    break;
                case BendType.BendRelease:
                    renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                    renderingPoints.push(new TabBendRenderPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                    renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[3].value));
                    break;
                case BendType.Bend:
                case BendType.Hold:
                case BendType.Prebend:
                case BendType.PrebendBend:
                case BendType.PrebendRelease:
                case BendType.Release:
                    renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                    renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                    break;
            }
            return renderingPoints;
        }
        paint(cx, cy, canvas) {
            const color = canvas.color;
            if (this._notes.length > 1) {
                canvas.color = this.renderer.resources.secondaryGlyphColor;
            }
            for (const note of this._notes) {
                const renderPoints = this._renderPoints.get(note.id);
                const startNoteRenderer = this.renderer;
                let endNote = note;
                let isMultiBeatBend = false;
                let endNoteRenderer = null;
                let endNoteHasBend = false;
                const slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
                let endBeat = null;
                while (endNote.isTieOrigin) {
                    const nextNote = endNote.tieDestination;
                    endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, nextNote.beat.voice.bar);
                    if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                        break;
                    }
                    endNote = nextNote;
                    isMultiBeatBend = true;
                    if (endNote.hasBend ||
                        !this.renderer.settings.notation.extendBendArrowsOnTiedNotes ||
                        endNote.vibrato !== VibratoType.None) {
                        endNoteHasBend = true;
                        break;
                    }
                }
                endBeat = endNote.beat;
                endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, endBeat.voice.bar);
                if (endBeat.isLastOfVoice &&
                    !endNote.hasBend &&
                    this.renderer.settings.notation.extendBendArrowsOnTiedNotes) {
                    endBeat = null;
                }
                let startX = 0;
                let endX = 0;
                const topY = cy + startNoteRenderer.y;
                // float bottomY = cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note);
                startX = cx + startNoteRenderer.x;
                if (renderPoints[0].value > 0 || note.isContinuedBend) {
                    startX += startNoteRenderer.getBeatX(note.beat, BeatXPosition.MiddleNotes);
                }
                else {
                    startX += startNoteRenderer.getNoteX(note, NoteXPosition.Right);
                }
                // canvas.Color = Color.Random();
                // canvas.FillRect(
                //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.MiddleNotes),
                //    cy + startNoteRenderer.Y, 10, 10);
                // canvas.FillRect(
                //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.EndBeat),
                //    cy + startNoteRenderer.Y + 10, 10, 10);
                if (!endBeat || (endBeat.isLastOfVoice && !endNoteHasBend)) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.postBeatGlyphsStart;
                }
                else if (endNoteHasBend || !endBeat.nextBeat) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, BeatXPosition.MiddleNotes);
                }
                else if (note.bendType === BendType.Hold) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.OnNotes);
                }
                else {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.PreNotes);
                }
                if (!isMultiBeatBend) {
                    endX -= TabBendGlyph.ArrowSize;
                }
                // we need some pixels for the arrow. otherwise we might draw into the next
                // note
                const width = endX - startX;
                // calculate offsets per step
                const dX = width / BendPoint.MaxPosition;
                canvas.beginPath();
                for (let i = 0, j = renderPoints.length - 1; i < j; i++) {
                    const firstPt = renderPoints[i];
                    let secondPt = renderPoints[i + 1];
                    // draw pre-bend if previous
                    if (i === 0 && firstPt.value !== 0 && !note.isTieDestination) {
                        this.paintBend(note, new TabBendRenderPoint(0, 0), firstPt, startX, topY, dX, slurText, canvas);
                    }
                    if (note.bendType !== BendType.Prebend) {
                        if (i === 0) {
                            startX += 2;
                        }
                        this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                    }
                    else if (note.isTieOrigin && note.tieDestination.hasBend) {
                        secondPt = new TabBendRenderPoint(BendPoint.MaxPosition, firstPt.value);
                        secondPt.lineValue = firstPt.lineValue;
                        this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                    }
                }
                if (endNote.vibrato !== VibratoType.None) {
                    const vibratoStartX = endX - cx + TabBendGlyph.ArrowSize - endNoteRenderer.x;
                    const vibratoStartY = topY - cy - TabBendGlyph.BendValueHeight * renderPoints[renderPoints.length - 1].lineValue;
                    const vibrato = new NoteVibratoGlyph(vibratoStartX, vibratoStartY, endNote.vibrato, 1.2);
                    vibrato.beat = endNote.beat;
                    vibrato.renderer = endNoteRenderer;
                    vibrato.doLayout();
                    vibrato.paint(cx + endNoteRenderer.x, cy, canvas);
                }
                canvas.color = color;
            }
        }
        paintBend(note, firstPt, secondPt, cx, cy, dX, slurText, canvas) {
            const r = this.renderer;
            const res = this.renderer.resources;
            const overflowOffset = r.lineOffset / 2;
            const x1 = cx + dX * firstPt.offset;
            const bendValueHeight = TabBendGlyph.BendValueHeight;
            let y1 = cy - bendValueHeight * firstPt.lineValue;
            if (firstPt.value === 0) {
                if (secondPt.offset === firstPt.offset) {
                    y1 += r.getNoteY(note.beat.maxStringNote, NoteYPosition.Top);
                }
                else {
                    y1 += r.getNoteY(note, NoteYPosition.Center);
                }
            }
            else {
                y1 += overflowOffset;
            }
            const x2 = cx + dX * secondPt.offset;
            let y2 = cy - bendValueHeight * secondPt.lineValue;
            if (secondPt.lineValue === 0) {
                y2 += r.getNoteY(note, NoteYPosition.Center);
            }
            else {
                y2 += overflowOffset;
            }
            // what type of arrow? (up/down)
            let arrowOffset = 0;
            const arrowSize = TabBendGlyph.ArrowSize;
            if (secondPt.value > firstPt.value) {
                if (y2 + arrowSize > y1) {
                    y2 = y1 - arrowSize;
                }
                canvas.beginPath();
                canvas.moveTo(x2, y2);
                canvas.lineTo(x2 - arrowSize * 0.5, y2 + arrowSize);
                canvas.lineTo(x2 + arrowSize * 0.5, y2 + arrowSize);
                canvas.closePath();
                canvas.fill();
                arrowOffset = arrowSize;
            }
            else if (secondPt.value !== firstPt.value) {
                if (y2 < y1) {
                    y2 = y1 + arrowSize;
                }
                canvas.beginPath();
                canvas.moveTo(x2, y2);
                canvas.lineTo(x2 - arrowSize * 0.5, y2 - arrowSize);
                canvas.lineTo(x2 + arrowSize * 0.5, y2 - arrowSize);
                canvas.closePath();
                canvas.fill();
                arrowOffset = -arrowSize;
            }
            canvas.beginPath();
            if (firstPt.value === secondPt.value) {
                // draw horizontal dashed line
                // to really have the line ending at the right position
                // we draw from right to left. it's okay if the space is at the beginning
                if (firstPt.lineValue > 0) {
                    let dashX = x2;
                    const dashSize = TabBendGlyph.DashSize;
                    const end = x1 + dashSize;
                    const dashes = (dashX - x1) / (dashSize * 2);
                    if (dashes < 1) {
                        canvas.moveTo(dashX, y1);
                        canvas.lineTo(x1, y1);
                    }
                    else {
                        while (dashX > end) {
                            canvas.moveTo(dashX, y1);
                            canvas.lineTo(dashX - dashSize, y1);
                            dashX -= dashSize * 2;
                        }
                    }
                    canvas.stroke();
                }
            }
            else {
                if (x2 > x1) {
                    // draw bezier line from first to second point
                    canvas.moveTo(x1, y1);
                    canvas.bezierCurveTo((x1 + x2) / 2, y1, x2, y1, x2, y2 + arrowOffset);
                    canvas.stroke();
                }
                else {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                    canvas.stroke();
                }
            }
            if (slurText && firstPt.offset < secondPt.offset) {
                canvas.font = res.graceFont;
                const size = canvas.measureText(slurText).width;
                let y = 0;
                let x = 0;
                if (y1 > y2) {
                    const h = Math.abs(y1 - y2);
                    y = h > canvas.font.size * 1.3 ? y1 - h / 2 : y1;
                    x = (x1 + x2 - size) / 2;
                }
                else {
                    y = y1;
                    x = x2 - size;
                }
                canvas.fillText(slurText, x, y);
            }
            if (secondPt.value !== 0 && firstPt.value !== secondPt.value) {
                let dV = secondPt.value;
                const up = secondPt.value > firstPt.value;
                dV = Math.abs(dV);
                // calculate label
                let s = '';
                // Full Steps
                if (dV === 4) {
                    s = 'full';
                    dV -= 4;
                }
                else if (dV >= 4 || dV <= -4) {
                    const steps = (dV / 4) | 0;
                    s += steps;
                    // Quaters
                    dV -= steps * 4;
                }
                if (dV > 0) {
                    s += TabBendGlyph.getFractionSign(dV);
                }
                if (s !== '') {
                    y2 = cy - bendValueHeight * secondPt.value;
                    let startY = y2;
                    if (!up) {
                        startY = y1 + (Math.abs(y2 - y1) * 1) / 3;
                    }
                    // draw label
                    canvas.font = res.tablatureFont;
                    const size = canvas.measureText(s).width;
                    const y = startY - res.tablatureFont.size * 0.5 - 2;
                    const x = x2 - size / 2;
                    canvas.fillText(s, x, y);
                }
            }
        }
        static getFractionSign(steps) {
            switch (steps) {
                case 1:
                    return '¼';
                case 2:
                    return '½';
                case 3:
                    return '¾';
                default:
                    return `${steps}/ 4`;
            }
        }
    }
    TabBendGlyph.ArrowSize = 6;
    TabBendGlyph.DashSize = 3;
    TabBendGlyph.BendValueHeight = 6;

    class TabWhammyBarGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._isSimpleDip = false;
            this._beat = beat;
            this._renderPoints = this.createRenderingPoints(beat);
        }
        createRenderingPoints(beat) {
            // advanced rendering
            if (beat.whammyBarType === WhammyType.Custom) {
                return beat.whammyBarPoints;
            }
            const renderingPoints = [];
            // Guitar Pro Rendering Note:
            // Last point of bend is always at end of the beat even
            // though it might not be 100% correct from timing perspective.
            switch (beat.whammyBarType) {
                case WhammyType.Dive:
                case WhammyType.Hold:
                case WhammyType.PrediveDive:
                case WhammyType.Predive:
                    renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                    renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[1].value));
                    break;
                case WhammyType.Dip:
                    renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                    renderingPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, beat.whammyBarPoints[1].value));
                    renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[beat.whammyBarPoints.length - 1].value));
                    break;
            }
            return renderingPoints;
        }
        doLayout() {
            super.doLayout();
            this._isSimpleDip =
                this.renderer.settings.notation.notationMode === exports.NotationMode.SongBook &&
                    this._beat.whammyBarType === WhammyType.Dip;
            //
            // Get the min and max values for all combined whammys
            let minValue = null;
            let maxValue = null;
            let beat = this._beat;
            while (beat && beat.hasWhammyBar) {
                if (!minValue || minValue.value > beat.minWhammyPoint.value) {
                    minValue = beat.minWhammyPoint;
                }
                if (!maxValue || maxValue.value < beat.maxWhammyPoint.value) {
                    maxValue = beat.maxWhammyPoint;
                }
                beat = beat.nextBeat;
            }
            let topOffset = maxValue.value > 0 ? Math.abs(this.getOffset(maxValue.value)) : 0;
            if (topOffset > 0 ||
                this._beat.whammyBarPoints[0].value !== 0 ||
                this.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.ZerosOnDiveWhammys)) {
                topOffset += this.renderer.resources.tablatureFont.size * 2;
            }
            const bottomOffset = minValue.value < 0 ? Math.abs(this.getOffset(minValue.value)) : 0;
            this.renderer.registerOverflowTop(topOffset + bottomOffset);
            const currentOffset = this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, -1);
            if (topOffset > currentOffset) {
                this.renderer.staff.setSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, topOffset);
            }
        }
        getOffset(value) {
            if (value === 0) {
                return 0;
            }
            let offset = TabWhammyBarGlyph.PerHalfSize + Math.log2(Math.abs(value) / 2) * TabWhammyBarGlyph.PerHalfSize;
            if (value < 0) {
                offset = -offset;
            }
            return offset;
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.StandardNotationEffects, this._beat);
            try {
                const startNoteRenderer = this.renderer;
                let endBeat = this._beat.nextBeat;
                let endNoteRenderer = null;
                let endXPositionType = BeatXPosition.PreNotes;
                if (endBeat) {
                    endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, endBeat.voice.bar);
                    if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                        endBeat = null;
                        endNoteRenderer = null;
                    }
                    else if (endNoteRenderer !== startNoteRenderer && !endBeat.hasWhammyBar) {
                        endBeat = null;
                        endNoteRenderer = null;
                    }
                    else {
                        endXPositionType =
                            endBeat.hasWhammyBar &&
                                (startNoteRenderer.settings.notation.notationMode !== exports.NotationMode.SongBook ||
                                    endBeat.whammyBarType !== WhammyType.Dip)
                                ? BeatXPosition.MiddleNotes
                                : BeatXPosition.PreNotes;
                    }
                }
                let startX = 0;
                let endX = 0;
                if (this._isSimpleDip) {
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) - 2;
                    endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) + 2;
                }
                else {
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
                    endX = !endNoteRenderer
                        ? cx + startNoteRenderer.x + startNoteRenderer.width - 2
                        : cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, endXPositionType);
                }
                const old = canvas.textAlign;
                canvas.textAlign = TextAlign.Center;
                if (this._renderPoints.length >= 2) {
                    const dx = (endX - startX) / BendPoint.MaxPosition;
                    canvas.beginPath();
                    const zeroY = cy + this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, 0);
                    let slurText = this._beat.whammyStyle === BendStyle.Gradual ? 'grad.' : '';
                    for (let i = 0, j = this._renderPoints.length - 1; i < j; i++) {
                        const firstPt = this._renderPoints[i];
                        const secondPt = this._renderPoints[i + 1];
                        const nextPt = i < j - 2 ? this._renderPoints[i + 2] : null;
                        let isFirst = i === 0;
                        // draw pre-bend if previous
                        if (i === 0 && firstPt.value !== 0 && !this._beat.isContinuedWhammy) {
                            this.paintWhammy(false, new BendPoint(0, 0), firstPt, secondPt, startX, zeroY, dx, canvas);
                            isFirst = false;
                        }
                        this.paintWhammy(isFirst, firstPt, secondPt, nextPt, startX, zeroY, dx, canvas, slurText);
                        slurText = '';
                    }
                    canvas.stroke();
                }
                canvas.textAlign = old;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        paintWhammy(isFirst, firstPt, secondPt, nextPt, cx, cy, dx, canvas, slurText) {
            const x1 = cx + dx * firstPt.offset;
            const x2 = cx + dx * secondPt.offset;
            const y1 = cy - this.getOffset(firstPt.value);
            const y2 = cy - this.getOffset(secondPt.value);
            if (firstPt.offset === secondPt.offset) {
                const dashSize = TabWhammyBarGlyph.DashSize;
                const dashes = Math.abs(y2 - y1) / (dashSize * 2);
                if (dashes < 1) {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                }
                else {
                    const dashEndY = Math.max(y1, y2);
                    let dashStartY = Math.min(y1, y2);
                    while (dashEndY > dashStartY) {
                        canvas.moveTo(x1, dashStartY);
                        canvas.lineTo(x1, dashStartY + dashSize);
                        dashStartY += dashSize * 2;
                    }
                }
                canvas.stroke();
            }
            else if (firstPt.value === secondPt.value) {
                const dashSize = TabWhammyBarGlyph.DashSize;
                const dashes = Math.abs(x2 - x1) / (dashSize * 2);
                if (dashes < 1) {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                }
                else {
                    let dashEndX = Math.max(x1, x2);
                    const dashStartX = Math.min(x1, x2);
                    while (dashEndX > dashStartX) {
                        canvas.moveTo(dashEndX, y1);
                        canvas.lineTo(dashEndX - dashSize, y1);
                        dashEndX -= dashSize * 2;
                    }
                }
                canvas.stroke();
            }
            else {
                canvas.moveTo(x1, y1);
                canvas.lineTo(x2, y2);
            }
            const res = this.renderer.resources;
            if (isFirst && !this._beat.isContinuedWhammy && !this._isSimpleDip) {
                let y = y1;
                y -= res.tablatureFont.size + 2;
                if (this.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.ZerosOnDiveWhammys)) {
                    canvas.fillText('0', x1, y);
                }
                if (slurText) {
                    y -= res.tablatureFont.size + 2;
                    canvas.fillText(slurText, x1, y);
                }
            }
            let dV = Math.abs(secondPt.value);
            if ((dV !== 0 ||
                (this.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.ZerosOnDiveWhammys) &&
                    !this._isSimpleDip)) &&
                firstPt.value !== secondPt.value) {
                let s = '';
                if (secondPt.value < 0) {
                    s += '-';
                }
                if (dV >= 4) {
                    const steps = (dV / 4) | 0;
                    s += steps;
                    // Quaters
                    dV -= steps * 4;
                }
                else if (dV === 0) {
                    s += '0';
                }
                if (dV > 0) {
                    s += TabBendGlyph.getFractionSign(dV);
                }
                let y = 0;
                if (this._isSimpleDip) {
                    y = Math.min(y1, y2) - res.tablatureFont.size - 2;
                }
                else {
                    y = firstPt.offset === secondPt.offset ? Math.min(y1, y2) : y2;
                    y -= res.tablatureFont.size + 2;
                    if (nextPt && nextPt.value > secondPt.value) {
                        y -= 2;
                    }
                }
                const x = x2;
                canvas.fillText(s, x, y);
            }
        }
    }
    TabWhammyBarGlyph.TopOffsetSharedDataKey = 'tab.whammy.topoffset';
    TabWhammyBarGlyph.PerHalfSize = 6;
    TabWhammyBarGlyph.DashSize = 3;

    class ScoreWhammyBarGlyph extends ScoreHelperNotesBaseGlyph {
        constructor(beat) {
            super(0, 0);
            this._beat = beat;
        }
        doLayout() {
            const whammyMode = this.renderer.settings.notation.notationMode;
            switch (this._beat.whammyBarType) {
                case WhammyType.None:
                case WhammyType.Custom:
                case WhammyType.Hold:
                    return;
                case WhammyType.Dive:
                case WhammyType.PrediveDive:
                    {
                        const endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                        endGlyphs.renderer = this.renderer;
                        const lastWhammyPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                        for (const note of this._beat.notes) {
                            if (!note.isTieOrigin) {
                                endGlyphs.addGlyph(this.getBendNoteValue(note, lastWhammyPoint), lastWhammyPoint.value % 2 !== 0, undefined);
                            }
                        }
                        endGlyphs.doLayout();
                        this.BendNoteHeads.push(endGlyphs);
                    }
                    break;
                case WhammyType.Dip:
                    {
                        if (whammyMode === exports.NotationMode.SongBook) {
                            const res = this.renderer.resources;
                            this.renderer.simpleWhammyOverflow =
                                res.tablatureFont.size * 1.5 +
                                    ScoreWhammyBarGlyph.SimpleDipHeight +
                                    ScoreWhammyBarGlyph.SimpleDipPadding;
                        }
                        else {
                            const middleGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                            middleGlyphs.renderer = this.renderer;
                            if (this.renderer.settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                                const middleBendPoint = this._beat.whammyBarPoints[1];
                                for (const note of this._beat.notes) {
                                    middleGlyphs.addGlyph(this.getBendNoteValue(note, this._beat.whammyBarPoints[1]), middleBendPoint.value % 2 !== 0, undefined);
                                }
                            }
                            middleGlyphs.doLayout();
                            this.BendNoteHeads.push(middleGlyphs);
                            const endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                            endGlyphs.renderer = this.renderer;
                            if (this.renderer.settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                                const lastBendPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                                for (const note of this._beat.notes) {
                                    endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0, undefined);
                                }
                            }
                            endGlyphs.doLayout();
                            this.BendNoteHeads.push(endGlyphs);
                        }
                    }
                    break;
                case WhammyType.Predive:
                    break;
            }
            super.doLayout();
        }
        paint(cx, cy, canvas) {
            const beat = this._beat;
            switch (beat.whammyBarType) {
                case WhammyType.None:
                case WhammyType.Custom:
                    return;
            }
            const whammyMode = this.renderer.settings.notation.notationMode;
            const startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, beat.voice.bar);
            const _beatStyle = ElementStyleHelper.beat(canvas, BeatSubElement.StandardNotationEffects, beat);
            try {
                const startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(beat, BeatXPosition.MiddleNotes);
                const beatDirection = this.getTieDirection(beat, startNoteRenderer);
                let direction = this._beat.notes.length === 1 ? beatDirection : BeamDirection.Up;
                const textalign = canvas.textAlign;
                const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
                for (let i = 0; i < beat.notes.length; i++) {
                    const note = beat.notes[i];
                    const _noteStyle = ElementStyleHelper.note(canvas, NoteSubElement.StandardNotationEffects, note);
                    try {
                        let startY = cy + startNoteRenderer.y;
                        if (i > 0 && i >= ((this._beat.notes.length / 2) | 0)) {
                            direction = BeamDirection.Down;
                        }
                        if (direction === BeamDirection.Down) {
                            startY += startNoteRenderer.getNoteY(note, NoteYPosition.Bottom);
                        }
                        else {
                            startY += startNoteRenderer.getNoteY(note, NoteYPosition.Top);
                        }
                        let endX = cx + startNoteRenderer.x;
                        if (beat.isLastOfVoice) {
                            endX += startNoteRenderer.width;
                        }
                        else {
                            endX += startNoteRenderer.getBeatX(beat, BeatXPosition.EndBeat);
                        }
                        endX -= 8;
                        const slurText = beat.whammyStyle === BendStyle.Gradual && i === 0 ? 'grad.' : '';
                        let endNoteRenderer = null;
                        if (note.isTieOrigin) {
                            endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, note.tieDestination.beat.voice.bar);
                            if (endNoteRenderer && endNoteRenderer.staff === startNoteRenderer.staff) {
                                endX =
                                    cx +
                                        endNoteRenderer.x +
                                        endNoteRenderer.getBeatX(note.tieDestination.beat, BeatXPosition.MiddleNotes);
                            }
                            else {
                                endNoteRenderer = null;
                            }
                        }
                        let heightOffset = noteHeadHeight * NoteHeadGlyph.GraceScale * 0.5;
                        if (direction === BeamDirection.Up) {
                            heightOffset = -heightOffset;
                        }
                        const endValue = beat.whammyBarPoints.length > 0
                            ? this.getBendNoteValue(note, beat.whammyBarPoints[beat.whammyBarPoints.length - 1])
                            : 0;
                        let endY = 0;
                        let bendTie = false;
                        if (this.BendNoteHeads.length > 0 && this.BendNoteHeads[0].containsNoteValue(endValue)) {
                            endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                            bendTie = true;
                        }
                        else if (endNoteRenderer &&
                            ((note.isTieOrigin && note.tieDestination.beat.hasWhammyBar) || note.beat.isContinuedWhammy)) {
                            endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, NoteYPosition.Top);
                            bendTie = true;
                            if (direction === BeamDirection.Down) {
                                endY += noteHeadHeight;
                            }
                        }
                        else if (note.isTieOrigin) {
                            if (!endNoteRenderer) {
                                endY = startY;
                            }
                            else {
                                endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, NoteYPosition.Top);
                            }
                            if (direction === BeamDirection.Down) {
                                endY += noteHeadHeight;
                            }
                        }
                        switch (beat.whammyBarType) {
                            case WhammyType.Hold:
                                if (note.isTieOrigin) {
                                    TieGlyph.paintTie(canvas, 1, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                                }
                                break;
                            case WhammyType.Dive:
                                if (i === 0) {
                                    this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                                    const previousY = this.BendNoteHeads[0].y;
                                    this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                                    this.BendNoteHeads[0].paint(0, 0, canvas);
                                    if (this.BendNoteHeads[0].containsNoteValue(endValue)) {
                                        endY -= previousY;
                                        endY += this.BendNoteHeads[0].y;
                                    }
                                }
                                if (bendTie) {
                                    this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, 1, slurText);
                                }
                                else if (note.isTieOrigin) {
                                    TieGlyph.paintTie(canvas, 1, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                                }
                                break;
                            case WhammyType.Dip:
                                if (whammyMode === exports.NotationMode.SongBook) {
                                    if (i === 0) {
                                        const simpleStartX = cx +
                                            startNoteRenderer.x +
                                            startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) -
                                            2;
                                        const simpleEndX = cx +
                                            startNoteRenderer.x +
                                            startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) +
                                            2;
                                        const middleX = (simpleStartX + simpleEndX) / 2;
                                        const text = (((this._beat.whammyBarPoints[1].value - this._beat.whammyBarPoints[0].value) / 4) |
                                            0).toString();
                                        canvas.font = this.renderer.resources.tablatureFont;
                                        canvas.fillText(text, middleX, cy + this.y);
                                        const simpleStartY = cy + this.y + canvas.font.size + 2;
                                        const simpleEndY = simpleStartY + ScoreWhammyBarGlyph.SimpleDipHeight;
                                        if (this._beat.whammyBarPoints[1].value > this._beat.whammyBarPoints[0].value) {
                                            canvas.moveTo(simpleStartX, simpleEndY);
                                            canvas.lineTo(middleX, simpleStartY);
                                            canvas.lineTo(simpleEndX, simpleEndY);
                                        }
                                        else {
                                            canvas.moveTo(simpleStartX, simpleStartY);
                                            canvas.lineTo(middleX, simpleEndY);
                                            canvas.lineTo(simpleEndX, simpleStartY);
                                        }
                                        canvas.stroke();
                                    }
                                    if (note.isTieOrigin) {
                                        TieGlyph.paintTie(canvas, 1, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                                    }
                                }
                                else {
                                    const middleX = (startX + endX) / 2;
                                    this.BendNoteHeads[0].x = middleX - this.BendNoteHeads[0].noteHeadOffset;
                                    this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                                    this.BendNoteHeads[0].paint(0, 0, canvas);
                                    const middleValue = this.getBendNoteValue(note, beat.whammyBarPoints[1]);
                                    const middleY = this.BendNoteHeads[0].getNoteValueY(middleValue) + heightOffset;
                                    this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, 1, slurText);
                                    this.BendNoteHeads[1].x = endX - this.BendNoteHeads[1].noteHeadOffset;
                                    this.BendNoteHeads[1].y = cy + startNoteRenderer.y;
                                    this.BendNoteHeads[1].paint(0, 0, canvas);
                                    endY = this.BendNoteHeads[1].getNoteValueY(endValue) + heightOffset;
                                    this.drawBendSlur(canvas, middleX, middleY, endX, endY, direction === BeamDirection.Down, 1, slurText);
                                }
                                break;
                            case WhammyType.PrediveDive:
                            case WhammyType.Predive:
                                let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                                preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                                    .prebendNoteHeadOffset;
                                const preY = cy +
                                    startNoteRenderer.y +
                                    startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false)) +
                                    heightOffset;
                                this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, 1, slurText);
                                if (this.BendNoteHeads.length > 0) {
                                    this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                                    this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                                    this.BendNoteHeads[0].paint(0, 0, canvas);
                                    this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, 1, slurText);
                                }
                                break;
                        }
                    }
                    finally {
                        _noteStyle?.[Symbol.dispose]?.();
                    }
                }
                canvas.textAlign = textalign;
            }
            finally {
                _beatStyle?.[Symbol.dispose]?.();
            }
        }
        getBendNoteValue(note, bendPoint) {
            // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
            return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
        }
    }
    ScoreWhammyBarGlyph.SimpleDipHeight = TabWhammyBarGlyph.PerHalfSize * 2;
    ScoreWhammyBarGlyph.SimpleDipPadding = 2;

    /**
     * This simple glyph allows to put an empty region in to a BarRenderer.
     */
    class SpacingGlyph extends Glyph {
        constructor(x, y, width) {
            super(x, y);
            this.width = width;
        }
    }

    class PercussionNoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, articulation, duration, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, articulation.getSymbol(duration));
            this._isGrace = isGrace;
            this._articulation = articulation;
        }
        paint(cx, cy, canvas) {
            const c = canvas.color;
            if (this.colorOverride) {
                canvas.color = this.colorOverride;
            }
            const offset = this._isGrace ? 1 : 0;
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale, this.symbol, false);
            if (this._articulation.techniqueSymbol !== MusicFontSymbol.None &&
                this._articulation.techniqueSymbolPlacement === TextBaseline.Middle) {
                canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale, this._articulation.techniqueSymbol, false);
            }
            canvas.color = c;
        }
        doLayout() {
            super.doLayout();
            if (this.width === 0) {
                this.height = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.NoteheadBlack);
            }
            if (this.height === 0) {
                this.height = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            }
        }
    }

    class ArticStaccatoAboveGlyph extends MusicFontGlyph {
        constructor(x, y) {
            super(x, y, NoteHeadGlyph.GraceScale, MusicFontSymbol.ArticStaccatoAbove);
        }
        paint(cx, cy, canvas) {
            super.paint(cx + 3, cy + 5, canvas);
        }
    }

    class PictEdgeOfCymbalGlyph extends MusicFontGlyph {
        constructor(x, y) {
            super(x, y, 0.5, MusicFontSymbol.PictEdgeOfCymbal);
        }
        paint(cx, cy, canvas) {
            super.paint(cx - 3, cy + this.height, canvas);
        }
    }

    class GuitarGolpeGlyph extends MusicFontGlyph {
        constructor(x, y, center = false) {
            super(x, y, NoteHeadGlyph.GraceScale, MusicFontSymbol.GuitarGolpe);
            this.center = center;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height, canvas);
        }
    }

    class StringNumberContainerGlyph extends EffectGlyph {
        constructor() {
            super(...arguments);
            this._strings = new Set();
        }
        addString(string) {
            this._strings.add(string);
        }
        doLayout() {
            const circleHeight = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.GuitarString0) * TuningGlyph.CircleNumberScale;
            this.height = (circleHeight + 3) * this._strings.size;
            this.width = circleHeight;
        }
        paint(cx, cy, canvas) {
            const tuningLength = this.renderer.bar.staff.tuning.length;
            let y = 0;
            const circleHeight = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.GuitarString0) * TuningGlyph.CircleNumberScale;
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            for (const s of this._strings) {
                const stringValue = tuningLength - s;
                const symbol = (MusicFontSymbol.GuitarString1 + stringValue);
                canvas.fillMusicFontSymbol(cx + this.x + noteHeadHeight / 2, cy + this.y + circleHeight + y, TuningGlyph.CircleNumberScale, symbol, true);
                y += circleHeight + 3;
            }
        }
    }

    class SlashNoteHeadGlyph extends EffectGlyph {
        constructor(x, y, duration, isGrace, beat) {
            super(x, y);
            this.beatEffects = new Map();
            this.noteHeadElement = NoteSubElement.SlashNoteHead;
            this.effectElement = BeatSubElement.SlashEffects;
            this._isGrace = isGrace;
            this._symbol = SlashNoteHeadGlyph.getSymbol(duration);
            this.beat = beat;
        }
        paint(cx, cy, canvas) {
            const _ = this.beat.notes.length === 0
                ? undefined
                : ElementStyleHelper.note(canvas, this.noteHeadElement, this.beat.notes[0]);
            try {
                const offset = this._isGrace ? 1 : 0;
                const glyphScale = this._isGrace ? NoteHeadGlyph.GraceScale : 1;
                canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, glyphScale, this._symbol, false);
                this.paintEffects(cx, cy, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        paintEffects(cx, cy, canvas) {
            const _ = ElementStyleHelper.beat(canvas, this.effectElement, this.beat);
            try {
                for (const g of this.beatEffects.values()) {
                    g.paint(cx + this.x, cy + this.y, canvas);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        doLayout() {
            const scale = this._isGrace ? NoteHeadGlyph.GraceScale : 1;
            this.width = MusicFontSymbolSizes.Widths.get(this._symbol) * scale;
            this.height = MusicFontSymbolSizes.Heights.get(this._symbol) * scale;
            const effectSpacing = 7;
            let effectY = MusicFontSymbolSizes.Heights.get(this._symbol);
            for (const g of this.beatEffects.values()) {
                g.y += effectY;
                g.x += this.width / 2;
                g.renderer = this.renderer;
                effectY += effectSpacing;
                g.doLayout();
            }
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.DoubleWhole:
                case Duration.Whole:
                    return MusicFontSymbol.NoteheadSlashWhiteWhole;
                case Duration.Half:
                    return MusicFontSymbol.NoteheadSlashWhiteHalf;
                default:
                    return MusicFontSymbol.NoteheadSlashVerticalEnds;
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('slash', this.beat, cx + this.x + this.width, cx + this.x);
            }
        }
    }

    class ScoreBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this._collisionOffset = -1e3;
            this._skipPaint = false;
            this.slash = null;
            this.noteHeads = null;
            this.restGlyph = null;
        }
        get effectElement() {
            return BeatSubElement.StandardNotationEffects;
        }
        getNoteX(note, requestedPosition) {
            return this.noteHeads ? this.noteHeads.getNoteX(note, requestedPosition) : 0;
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            if (this.noteHeads) {
                this.noteHeads.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
            }
        }
        getNoteY(note, requestedPosition) {
            return this.noteHeads ? this.noteHeads.getNoteY(note, requestedPosition) : 0;
        }
        updateBeamingHelper() {
            if (this.noteHeads) {
                this.noteHeads.updateBeamingHelper(this.container.x + this.x);
            }
            else if (this.restGlyph) {
                this.restGlyph.updateBeamingHelper(this.container.x + this.x);
                if (this.renderer.bar.isMultiVoice && this._collisionOffset === -1e3) {
                    this._collisionOffset = this.renderer.helpers.collisionHelper.applyRestCollisionOffset(this.container.beat, this.restGlyph.y, this.renderer.getScoreHeight(1));
                    this.y += this._collisionOffset;
                    const existingRests = this.renderer.helpers.collisionHelper.restDurationsByDisplayTime;
                    if (existingRests.has(this.container.beat.playbackStart) &&
                        existingRests.get(this.container.beat.playbackStart).has(this.container.beat.playbackDuration) &&
                        existingRests.get(this.container.beat.playbackStart).get(this.container.beat.playbackDuration) !==
                            this.container.beat.id) {
                        this._skipPaint = true;
                    }
                }
            }
            else if (this.slash) {
                this.slash.updateBeamingHelper(this.container.x + this.x);
            }
        }
        paint(cx, cy, canvas) {
            if (!this._skipPaint) {
                super.paint(cx, cy, canvas);
            }
        }
        doLayout() {
            // create glyphs
            const sr = this.renderer;
            if (!this.container.beat.isEmpty) {
                if (!this.container.beat.isRest) {
                    if (this.container.beat.slashed) {
                        const isGrace = this.container.beat.graceType !== GraceType.None;
                        const line = (sr.heightLineCount - 1) / 2;
                        const slashY = sr.getLineY(line);
                        const slashNoteHead = new SlashNoteHeadGlyph(0, slashY, this.container.beat.duration, isGrace, this.container.beat);
                        slashNoteHead.noteHeadElement = NoteSubElement.StandardNotationNoteHead;
                        slashNoteHead.effectElement = BeatSubElement.StandardNotationEffects;
                        this.slash = slashNoteHead;
                        slashNoteHead.beat = this.container.beat;
                        slashNoteHead.beamingHelper = this.beamingHelper;
                        this.addNormal(slashNoteHead);
                    }
                    else {
                        //
                        // Note heads
                        //
                        const noteHeads = new ScoreNoteChordGlyph();
                        this.noteHeads = noteHeads;
                        noteHeads.beat = this.container.beat;
                        noteHeads.beamingHelper = this.beamingHelper;
                        const ghost = new GhostNoteContainerGlyph(false);
                        ghost.renderer = this.renderer;
                        for (const note of this.container.beat.notes) {
                            if (note.isVisible) {
                                this.createNoteGlyph(note);
                                ghost.addParenthesis(note);
                            }
                        }
                        this.addNormal(noteHeads);
                        if (!ghost.isEmpty) {
                            this.addNormal(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                            this.addEffect(ghost);
                        }
                    }
                    //
                    // Whammy Bar
                    if (this.container.beat.hasWhammyBar) {
                        const whammy = new ScoreWhammyBarGlyph(this.container.beat);
                        whammy.renderer = this.renderer;
                        whammy.doLayout();
                        this.container.ties.push(whammy);
                    }
                    //
                    // Note dots
                    //
                    if (this.container.beat.dots > 0) {
                        this.addNormal(new SpacingGlyph(0, 0, 5));
                        for (let i = 0; i < this.container.beat.dots; i++) {
                            const group = new GlyphGroup(0, 0);
                            group.renderer = this.renderer;
                            for (const note of this.container.beat.notes) {
                                const g = this.createBeatDot(sr.getNoteLine(note), group);
                                g.colorOverride = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.StandardNotationEffects, note);
                            }
                            this.addEffect(group);
                        }
                    }
                }
                else {
                    let line = Math.ceil((this.renderer.bar.staff.standardNotationLineCount - 1) / 2) * 2;
                    // this positioning is quite strange, for most staff line counts
                    // the whole/rest are aligned as half below the whole rest.
                    // but for staff line count 1 and 3 they are aligned centered on the same line.
                    if (this.container.beat.duration === Duration.Whole &&
                        this.renderer.bar.staff.standardNotationLineCount !== 1 &&
                        this.renderer.bar.staff.standardNotationLineCount !== 3) {
                        line -= 2;
                    }
                    const restGlyph = new ScoreRestGlyph(0, sr.getScoreY(line), this.container.beat.duration);
                    this.restGlyph = restGlyph;
                    restGlyph.beat = this.container.beat;
                    restGlyph.beamingHelper = this.beamingHelper;
                    this.addNormal(restGlyph);
                    if (this.renderer.bar.isMultiVoice) {
                        if (this.container.beat.voice.index === 0) {
                            const restSizes = BeamingHelper.computeLineHeightsForRest(this.container.beat.duration);
                            const restTop = restGlyph.y - sr.getScoreHeight(restSizes[0]);
                            const restBottom = restGlyph.y + sr.getScoreHeight(restSizes[1]);
                            this.renderer.helpers.collisionHelper.reserveBeatSlot(this.container.beat, restTop, restBottom);
                        }
                        else {
                            this.renderer.helpers.collisionHelper.registerRest(this.container.beat);
                        }
                    }
                    if (this.beamingHelper) {
                        this.beamingHelper.applyRest(this.container.beat, line);
                    }
                    //
                    // Note dots
                    //
                    if (this.container.beat.dots > 0) {
                        this.addNormal(new SpacingGlyph(0, 0, 5));
                        for (let i = 0; i < this.container.beat.dots; i++) {
                            const group = new GlyphGroup(0, 0);
                            group.renderer = this.renderer;
                            this.createBeatDot(line, group);
                            this.addEffect(group);
                        }
                    }
                }
            }
            super.doLayout();
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.restGlyph) {
                this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
            }
            else if (this.noteHeads) {
                this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
            }
            else if (this.slash) {
                this.centerX = this.slash.x + this.slash.width / 2;
            }
        }
        createBeatDot(line, group) {
            const sr = this.renderer;
            const g = new CircleGlyph(0, sr.getScoreY(line), 1.5);
            group.addGlyph(g);
            return g;
        }
        createNoteHeadGlyph(n) {
            const isGrace = this.container.beat.graceType !== GraceType.None;
            const style = n.style;
            if (style?.noteHead !== undefined) {
                const noteHead = new NoteHeadGlyph(0, 0, n.beat.duration, isGrace);
                // NOTE: sizes are not yet perfect
                // will be done in https://github.com/CoderLine/alphaTab/issues/1949
                noteHead.symbol = style.noteHead;
                if (style.noteHeadCenterOnStem) {
                    noteHead.centerOnStem = true;
                }
                return noteHead;
            }
            // TODO: here we should unify it to one common glyph which knows all sizes.
            if (n.beat.voice.bar.staff.isPercussion) {
                const articulation = PercussionMapper.getArticulation(n);
                if (articulation) {
                    return new PercussionNoteHeadGlyph(0, 0, articulation, n.beat.duration, isGrace);
                }
                Logger.warning('Rendering', `No articulation found for percussion instrument ${n.percussionArticulation}`);
            }
            if (n.isDead) {
                return new DeadNoteHeadGlyph(0, 0, isGrace);
            }
            if (n.beat.graceType === GraceType.BendGrace) {
                return new NoteHeadGlyph(0, 0, Duration.Quarter, true);
            }
            if (n.harmonicType === HarmonicType.Natural) {
                return new DiamondNoteHeadGlyph(0, 0, n.beat.duration, isGrace);
            }
            return new NoteHeadGlyph(0, 0, n.beat.duration, isGrace);
        }
        createNoteGlyph(n) {
            if (n.beat.graceType === GraceType.BendGrace && !n.hasBend) {
                return;
            }
            const sr = this.renderer;
            const noteHeadGlyph = this.createNoteHeadGlyph(n);
            noteHeadGlyph.colorOverride = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.StandardNotationNoteHead, n);
            // calculate y position
            let line = sr.getNoteLine(n);
            noteHeadGlyph.y = sr.getScoreY(line);
            this.noteHeads.addNoteGlyph(noteHeadGlyph, n, line);
            if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
                // create harmonic note head.
                const harmonicFret = n.displayValue + n.harmonicPitch;
                const harmonicsGlyph = new DiamondNoteHeadGlyph(0, 0, n.beat.duration, this.container.beat.graceType !== GraceType.None);
                harmonicsGlyph.colorOverride = noteHeadGlyph.colorOverride;
                line = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
                harmonicsGlyph.y = sr.getScoreY(line);
                this.noteHeads.addNoteGlyph(harmonicsGlyph, n, line);
            }
            const belowBeatEffects = this.noteHeads.belowBeatEffects;
            const aboveBeatEffects = this.noteHeads.aboveBeatEffects;
            if (n.isStaccato && !belowBeatEffects.has('Staccato')) {
                belowBeatEffects.set('Staccato', new ArticStaccatoAboveGlyph(0, 0));
            }
            if (n.accentuated === AccentuationType.Normal && !belowBeatEffects.has('Accent')) {
                belowBeatEffects.set('Accent', new AccentuationGlyph(0, 0, n));
            }
            if (n.accentuated === AccentuationType.Heavy && !belowBeatEffects.has('HAccent')) {
                belowBeatEffects.set('HAccent', new AccentuationGlyph(0, 0, n));
            }
            if (n.accentuated === AccentuationType.Tenuto && !belowBeatEffects.has('Tenuto')) {
                belowBeatEffects.set('Tenuto', new AccentuationGlyph(0, 0, n));
            }
            if (n.showStringNumber && n.isStringed) {
                let container;
                if (!aboveBeatEffects.has('StringNumber')) {
                    container = new StringNumberContainerGlyph(0, 0);
                    aboveBeatEffects.set('StringNumber', container);
                }
                else {
                    container = aboveBeatEffects.get('StringNumber');
                }
                container.addString(n.string);
            }
            if (n.isPercussion) {
                const articulation = PercussionMapper.getArticulation(n);
                if (articulation && articulation.techniqueSymbolPlacement !== TextBaseline.Middle) {
                    const effectContainer = articulation.techniqueSymbolPlacement === TextBaseline.Top
                        ? this.noteHeads.aboveBeatEffects
                        : this.noteHeads.belowBeatEffects;
                    switch (articulation.techniqueSymbol) {
                        case MusicFontSymbol.PictEdgeOfCymbal:
                            effectContainer.set('PictEdgeOfCymbal', new PictEdgeOfCymbalGlyph(0, 0));
                            break;
                        case MusicFontSymbol.ArticStaccatoAbove:
                            effectContainer.set('ArticStaccatoAbove', new ArticStaccatoAboveGlyph(0, 0));
                            break;
                        case MusicFontSymbol.StringsUpBow:
                            effectContainer.set('StringsUpBow', new PickStrokeGlyph(0, 0, PickStroke.Up));
                            break;
                        case MusicFontSymbol.StringsDownBow:
                            effectContainer.set('StringsDownBow', new PickStrokeGlyph(0, 0, PickStroke.Down));
                            break;
                        case MusicFontSymbol.GuitarGolpe:
                            effectContainer.set('GuitarGolpe', new GuitarGolpeGlyph(0, 0));
                            break;
                    }
                }
            }
        }
    }

    class ScoreBrushGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._beat = beat;
        }
        doLayout() {
            this.width =
                this._beat.brushType === BrushType.ArpeggioUp || this._beat.brushType === BrushType.ArpeggioDown ? 10 : 0;
        }
        paint(cx, cy, canvas) {
            if (this._beat.brushType === BrushType.ArpeggioUp || this._beat.brushType === BrushType.ArpeggioDown) {
                const scoreBarRenderer = this.renderer;
                const lineSize = scoreBarRenderer.lineOffset;
                const startY = cy + this.y + (scoreBarRenderer.getNoteY(this._beat.maxNote, NoteYPosition.Bottom) - lineSize);
                const endY = cy + this.y + scoreBarRenderer.getNoteY(this._beat.minNote, NoteYPosition.Top) + lineSize;
                const arrowX = cx + this.x + this.width / 2;
                const arrowSize = 8;
                const glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                const waveOffset = -glyph.height / 2;
                if (this._beat.brushType === BrushType.ArpeggioUp) {
                    const lineStartY = startY + arrowSize;
                    const lineEndY = endY - arrowSize;
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    canvas.beginRotate(cx + this.x + 5, lineEndY, -90);
                    glyph.paint(0, waveOffset, canvas);
                    canvas.endRotate();
                    canvas.beginPath();
                    canvas.moveTo(arrowX, endY);
                    canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
                else if (this._beat.brushType === BrushType.ArpeggioDown) {
                    const lineStartY = startY + arrowSize;
                    const lineEndY = endY;
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    canvas.beginRotate(cx + this.x + 5, lineStartY, 90);
                    glyph.paint(0, waveOffset, canvas);
                    canvas.endRotate();
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
            }
        }
    }

    class FingeringInfo {
        constructor(line, text) {
            this.line = 0;
            this.line = line;
            this.text = text;
        }
    }
    class FingeringGroupGlyph extends GlyphGroup {
        constructor() {
            super(0, 0);
            this._infos = new Map();
        }
        get isEmpty() {
            return this._infos.size === 0;
        }
        addFingers(note) {
            const settings = this.renderer.settings;
            if (settings.notation.fingeringMode !== exports.FingeringMode.ScoreDefault &&
                settings.notation.fingeringMode !== exports.FingeringMode.ScoreForcePiano) {
                return;
            }
            const textLeft = ModelUtils.fingerToString(this.renderer.settings, note.beat, note.leftHandFinger, true);
            if (textLeft) {
                this.addFinger(note, textLeft);
            }
            const textRight = ModelUtils.fingerToString(this.renderer.settings, note.beat, note.rightHandFinger, false);
            if (textRight) {
                this.addFinger(note, textRight);
            }
        }
        addFinger(note, text) {
            const sr = this.renderer;
            const line = sr.getNoteLine(note);
            if (!this._infos.has(line)) {
                const info = new FingeringInfo(line, text);
                info.color = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.StandardNotationEffects, note);
                this._infos.set(line, info);
            }
            else {
                const info = this._infos.get(line);
                info.text += text;
            }
        }
        doLayout() {
            const sr = this.renderer;
            for (const [_, info] of this._infos) {
                const g = new TextGlyph(0, 0, info.text, sr.resources.inlineFingeringFont, TextAlign.Left, TextBaseline.Middle);
                g.colorOverride = info.color;
                g.renderer = sr;
                g.y = sr.getScoreY(info.line);
                g.doLayout();
                this.addGlyph(g);
                this.width = Math.max(this.width, g.width);
            }
        }
    }

    class ScoreBeatPreNotesGlyph extends BeatGlyphBase {
        constructor() {
            super(...arguments);
            this._prebends = null;
            this.accidentals = null;
        }
        get prebendNoteHeadOffset() {
            return this._prebends ? this._prebends.x + this._prebends.noteHeadOffset : 0;
        }
        get effectElement() {
            return BeatSubElement.StandardNotationEffects;
        }
        doLayout() {
            if (!this.container.beat.isRest) {
                const accidentals = new AccidentalGroupGlyph();
                accidentals.renderer = this.renderer;
                const fingering = new FingeringGroupGlyph();
                fingering.renderer = this.renderer;
                const ghost = new GhostNoteContainerGlyph(true);
                ghost.renderer = this.renderer;
                const preBends = new BendNoteHeadGroupGlyph(this.container.beat, true);
                this._prebends = preBends;
                preBends.renderer = this.renderer;
                for (const note of this.container.beat.notes) {
                    const color = ElementStyleHelper.noteColor(this.renderer.resources, NoteSubElement.StandardNotationEffects, note);
                    if (note.isVisible) {
                        if (note.hasBend) {
                            switch (note.bendType) {
                                case BendType.PrebendBend:
                                case BendType.Prebend:
                                case BendType.PrebendRelease:
                                    preBends.addGlyph(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false, color);
                                    break;
                            }
                        }
                        else if (note.beat.hasWhammyBar) {
                            switch (note.beat.whammyBarType) {
                                case WhammyType.PrediveDive:
                                case WhammyType.Predive:
                                    this._prebends.addGlyph(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false, color);
                                    break;
                            }
                        }
                        this.createAccidentalGlyph(note, accidentals);
                        ghost.addParenthesis(note);
                        fingering.addFingers(note);
                    }
                }
                if (!preBends.isEmpty) {
                    this.addEffect(preBends);
                    this.addNormal(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                }
                if (this.container.beat.brushType !== BrushType.None) {
                    this.addEffect(new ScoreBrushGlyph(this.container.beat));
                    this.addNormal(new SpacingGlyph(0, 0, 4));
                }
                if (!fingering.isEmpty) {
                    if (!this.isEmpty) {
                        this.addNormal(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                    }
                    this.addEffect(fingering);
                    this.addNormal(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                }
                if (!ghost.isEmpty) {
                    this.addEffect(ghost);
                    this.addNormal(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                }
                if (!accidentals.isEmpty) {
                    this.accidentals = accidentals;
                    if (!this.isEmpty) {
                        this.addNormal(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                    }
                    this.addNormal(accidentals);
                    this.addNormal(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1)));
                }
            }
            super.doLayout();
        }
        createAccidentalGlyph(n, accidentals) {
            const sr = this.renderer;
            let accidental = sr.accidentalHelper.applyAccidental(n);
            let noteLine = sr.getNoteLine(n);
            const isGrace = this.container.beat.graceType !== GraceType.None;
            const color = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.StandardNotationAccidentals, n);
            const graceScale = isGrace ? NoteHeadGlyph.GraceScale : 1;
            if (accidental !== AccidentalType.None) {
                const g = new AccidentalGlyph(0, sr.getScoreY(noteLine), accidental, graceScale);
                g.colorOverride = color;
                g.renderer = this.renderer;
                accidentals.addGlyph(g);
            }
            if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
                const harmonicFret = n.displayValue + n.harmonicPitch;
                accidental = sr.accidentalHelper.applyAccidentalForValue(n.beat, harmonicFret, isGrace, false);
                noteLine = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
                const g = new AccidentalGlyph(0, sr.getScoreY(noteLine), accidental, graceScale);
                g.colorOverride = color;
                g.renderer = this.renderer;
                accidentals.addGlyph(g);
            }
        }
    }

    class TimeSignatureGlyph extends GlyphGroup {
        constructor(x, y, numerator, denominator, isCommon, isFreeTime) {
            super(x, y);
            this._numerator = 0;
            this._denominator = 0;
            this.barSubElement = BarSubElement.StandardNotationTimeSignature;
            this._numerator = numerator;
            this._denominator = denominator;
            this._isCommon = isCommon;
            this._isFreeTime = isFreeTime;
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, this.barSubElement, this.renderer.bar);
            try {
                super.paint(cx, cy, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        doLayout() {
            let x = 0;
            const numberHeight = NumberGlyph.numberHeight;
            if (this._isFreeTime) {
                const g = new GhostParenthesisGlyph(true);
                g.renderer = this.renderer;
                g.y = -numberHeight;
                g.height = numberHeight * 2;
                g.doLayout();
                this.addGlyph(g);
                x += g.width + 10 * 1;
            }
            if (this._isCommon && this._numerator === 2 && this._denominator === 2) {
                const common = new MusicFontGlyph(x, 0, this.commonScale, MusicFontSymbol.TimeSigCutCommon);
                this.addGlyph(common);
                super.doLayout();
            }
            else if (this._isCommon && this._numerator === 4 && this._denominator === 4) {
                const common = new MusicFontGlyph(x, 0, this.commonScale, MusicFontSymbol.TimeSigCommon);
                this.addGlyph(common);
                super.doLayout();
            }
            else {
                const numerator = new NumberGlyph(x, -numberHeight / 2, this._numerator, this.numberScale);
                const denominator = new NumberGlyph(x, numberHeight / 2, this._denominator, this.numberScale);
                this.addGlyph(numerator);
                this.addGlyph(denominator);
                super.doLayout();
                const glyphSpace = this.width - x;
                numerator.x = x + (glyphSpace - numerator.width) / 2;
                denominator.x = x + (glyphSpace - denominator.width) / 2;
            }
            if (this._isFreeTime) {
                const g = new GhostParenthesisGlyph(false);
                g.renderer = this.renderer;
                g.x = this.width + 13;
                g.y = -numberHeight;
                g.height = numberHeight * 2;
                g.doLayout();
                this.addGlyph(g);
                this.width = g.x + g.width;
            }
        }
    }

    class ScoreTimeSignatureGlyph extends TimeSignatureGlyph {
        get commonScale() {
            return 1;
        }
        get numberScale() {
            return 1;
        }
    }

    class ScoreBendGlyph extends ScoreHelperNotesBaseGlyph {
        constructor(beat) {
            super(0, 0);
            this._notes = [];
            this._endNoteGlyph = null;
            this._middleNoteGlyph = null;
            this._beat = beat;
        }
        addBends(note) {
            this._notes.push(note);
            if (note.isTieOrigin) {
                return;
            }
            const color = ElementStyleHelper.noteColor(this.renderer.resources, NoteSubElement.StandardNotationEffects, note);
            switch (note.bendType) {
                case BendType.Bend:
                case BendType.PrebendRelease:
                case BendType.PrebendBend:
                    {
                        let endGlyphs = this._endNoteGlyph;
                        if (!endGlyphs) {
                            endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                            endGlyphs.renderer = this.renderer;
                            this._endNoteGlyph = endGlyphs;
                            this.BendNoteHeads.push(endGlyphs);
                        }
                        const lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                        endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0, color);
                    }
                    break;
                case BendType.Release:
                    {
                        if (!note.isTieOrigin) {
                            let endGlyphs = this._endNoteGlyph;
                            if (!endGlyphs) {
                                endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                                endGlyphs.renderer = this.renderer;
                                this._endNoteGlyph = endGlyphs;
                                this.BendNoteHeads.push(endGlyphs);
                            }
                            const lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                            endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0, color);
                        }
                    }
                    break;
                case BendType.BendRelease:
                    {
                        let middleGlyphs = this._middleNoteGlyph;
                        if (!middleGlyphs) {
                            middleGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                            this._middleNoteGlyph = middleGlyphs;
                            middleGlyphs.renderer = this.renderer;
                            this.BendNoteHeads.push(middleGlyphs);
                        }
                        const middleBendPoint = note.bendPoints[1];
                        middleGlyphs.addGlyph(this.getBendNoteValue(note, note.bendPoints[1]), middleBendPoint.value % 2 !== 0, color);
                        let endGlyphs = this._endNoteGlyph;
                        if (!endGlyphs) {
                            endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                            endGlyphs.renderer = this.renderer;
                            this._endNoteGlyph = endGlyphs;
                            this.BendNoteHeads.push(endGlyphs);
                        }
                        const lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                        endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0, color);
                    }
                    break;
            }
        }
        paint(cx, cy, canvas) {
            // Draw note heads
            const startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this._beat.voice.bar);
            const startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
            let endBeatX = cx + startNoteRenderer.x;
            if (this._beat.isLastOfVoice) {
                endBeatX += startNoteRenderer.postBeatGlyphsStart;
            }
            else {
                endBeatX += startNoteRenderer.getBeatX(this._beat.nextBeat, BeatXPosition.PreNotes);
            }
            endBeatX -= 8;
            const middleX = (startX + endBeatX) / 2;
            if (this._middleNoteGlyph) {
                this._middleNoteGlyph.x = middleX - this._middleNoteGlyph.noteHeadOffset;
                this._middleNoteGlyph.y = cy + startNoteRenderer.y;
                this._middleNoteGlyph.paint(0, 0, canvas);
            }
            if (this._endNoteGlyph) {
                this._endNoteGlyph.x = endBeatX - this._endNoteGlyph.noteHeadOffset;
                this._endNoteGlyph.y = cy + startNoteRenderer.y;
                this._endNoteGlyph.paint(0, 0, canvas);
            }
            this._notes.sort((a, b) => {
                return b.displayValue - a.displayValue;
            });
            const directionBeat = this._beat.graceType === GraceType.BendGrace ? this._beat.nextBeat : this._beat;
            let direction = this._notes.length === 1 ? this.getTieDirection(directionBeat, startNoteRenderer) : BeamDirection.Up;
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            // draw slurs
            for (let i = 0; i < this._notes.length; i++) {
                const note = this._notes[i];
                const _ = ElementStyleHelper.note(canvas, NoteSubElement.StandardNotationEffects, note);
                try {
                    if (i > 0 && i >= ((this._notes.length / 2) | 0)) {
                        direction = BeamDirection.Down;
                    }
                    let startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note, NoteYPosition.Top);
                    let heightOffset = noteHeadHeight * NoteHeadGlyph.GraceScale * 0.5;
                    if (direction === BeamDirection.Down) {
                        startY += noteHeadHeight;
                    }
                    const slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
                    if (note.isTieOrigin) {
                        const endNote = note.tieDestination;
                        const endNoteRenderer = !endNote
                            ? null
                            : this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, endNote.beat.voice.bar);
                        // if we have a line break we draw only a line until the end
                        if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                            const endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                            const noteValueToDraw = note.tieDestination.realValue;
                            startNoteRenderer.accidentalHelper.applyAccidentalForValue(note.beat, noteValueToDraw, false, true);
                            const endY = cy +
                                startNoteRenderer.y +
                                startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(noteValueToDraw, false));
                            if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                                TieGlyph.paintTie(canvas, 1, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                            }
                            else {
                                this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, 1, slurText);
                            }
                        }
                        else {
                            const endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endNote.beat, BeatXPosition.MiddleNotes);
                            let endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(endNote, NoteYPosition.Top);
                            if (direction === BeamDirection.Down) {
                                endY += noteHeadHeight;
                            }
                            if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                                TieGlyph.paintTie(canvas, 1, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                            }
                            else {
                                this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, 1, slurText);
                            }
                        }
                        switch (note.bendType) {
                            case BendType.Prebend:
                            case BendType.PrebendBend:
                            case BendType.PrebendRelease:
                                let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                                preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                                    .prebendNoteHeadOffset;
                                const preY = cy +
                                    startNoteRenderer.y +
                                    startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false)) +
                                    heightOffset;
                                this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, 1);
                                break;
                        }
                    }
                    else {
                        if (direction === BeamDirection.Up) {
                            heightOffset = -heightOffset;
                        }
                        let endValue = 0;
                        let endY = 0;
                        switch (note.bendType) {
                            case BendType.Bend:
                                endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                endY = this._endNoteGlyph.getNoteValueY(endValue) + heightOffset;
                                this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, 1, slurText);
                                break;
                            case BendType.BendRelease:
                                const middleValue = this.getBendNoteValue(note, note.bendPoints[1]);
                                const middleY = this._middleNoteGlyph.getNoteValueY(middleValue) + heightOffset;
                                this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, 1, slurText);
                                endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                endY = this._endNoteGlyph.getNoteValueY(endValue) + heightOffset;
                                this.drawBendSlur(canvas, middleX, middleY, endBeatX, endY, direction === BeamDirection.Down, 1, slurText);
                                break;
                            case BendType.Release:
                                if (this.BendNoteHeads.length > 0) {
                                    endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                    endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                                    this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, 1, slurText);
                                }
                                break;
                            case BendType.Prebend:
                            case BendType.PrebendBend:
                            case BendType.PrebendRelease:
                                let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                                preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                                    .prebendNoteHeadOffset;
                                const preY = cy +
                                    startNoteRenderer.y +
                                    startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false)) +
                                    heightOffset;
                                this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, 1);
                                if (this.BendNoteHeads.length > 0) {
                                    endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                    endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                                    this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, 1, slurText);
                                }
                                break;
                        }
                    }
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        getBendNoteValue(note, bendPoint) {
            // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
            return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
        }
    }

    class ScoreLegatoGlyph extends TieGlyph {
        constructor(startBeat, endBeat, forEnd = false) {
            super(startBeat, endBeat, forEnd);
        }
        doLayout() {
            super.doLayout();
        }
        getBeamDirection(beat, noteRenderer) {
            if (beat.isRest) {
                return BeamDirection.Up;
            }
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
        getStartY() {
            if (this.startBeat.isRest) {
                // below all lines
                return this.startNoteRenderer.getScoreY(9);
            }
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    // below lowest note
                    return this.startNoteRenderer.getNoteY(this.startBeat.maxNote, NoteYPosition.Top);
                default:
                    return this.startNoteRenderer.getNoteY(this.startBeat.minNote, NoteYPosition.Bottom);
            }
        }
        getEndY() {
            const endNoteScoreRenderer = this.endNoteRenderer;
            if (this.endBeat.isRest) {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        return endNoteScoreRenderer.getScoreY(9);
                    default:
                        return endNoteScoreRenderer.getScoreY(0);
                }
            }
            const startBeamDirection = this.startNoteRenderer.getBeatDirection(this.startBeat);
            const endBeamDirection = endNoteScoreRenderer.getBeatDirection(this.endBeat);
            if (startBeamDirection !== endBeamDirection && this.startBeat.graceType === GraceType.None) {
                if (endBeamDirection === this.tieDirection) {
                    switch (this.tieDirection) {
                        case BeamDirection.Up:
                            // stem upper end
                            return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.TopWithStem);
                        default:
                            // stem lower end
                            return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.BottomWithStem);
                    }
                }
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        // stem upper end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.BottomWithStem);
                    default:
                        // stem lower end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.TopWithStem);
                }
            }
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    // below lowest note
                    return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.Top);
                default:
                    // above highest note
                    return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.Bottom);
            }
        }
        getStartX() {
            return this.startNoteRenderer.getBeatX(this.startBeat, BeatXPosition.MiddleNotes);
        }
        getEndX() {
            const endBeamDirection = this.endNoteRenderer.getBeatDirection(this.endBeat);
            return this.endNoteRenderer.getBeatX(this.endBeat, this.endBeat.duration > Duration.Whole && endBeamDirection === this.tieDirection
                ? BeatXPosition.Stem
                : BeatXPosition.MiddleNotes);
        }
    }

    class ScoreSlideLineGlyph extends Glyph {
        constructor(inType, outType, startNote, parent) {
            super(0, 0);
            this._outType = outType;
            this._inType = inType;
            this._startNote = startNote;
            this._parent = parent;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            this.paintSlideIn(cx, cy, canvas);
            this.drawSlideOut(cx, cy, canvas);
        }
        paintSlideIn(cx, cy, canvas) {
            const startNoteRenderer = this.renderer;
            const sizeX = 12;
            let endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left) - 2;
            const endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
            let startX = endX - sizeX;
            let startY = cy + startNoteRenderer.y;
            switch (this._inType) {
                case SlideInType.IntoFromBelow:
                    startY += startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                    break;
                case SlideInType.IntoFromAbove:
                    startY += startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                    break;
                default:
                    return;
            }
            const accidentalsWidth = this.getAccidentalsWidth(startNoteRenderer, this._startNote.beat);
            startX -= accidentalsWidth;
            endX -= accidentalsWidth;
            this.paintSlideLine(canvas, false, startX, endX, startY, endY);
        }
        getAccidentalsWidth(renderer, beat) {
            const preNotes = renderer.getPreNotesGlyphForBeat(beat);
            if (preNotes && preNotes.accidentals) {
                return preNotes.accidentals.width;
            }
            return 0;
        }
        drawSlideOut(cx, cy, canvas) {
            const startNoteRenderer = this.renderer;
            const sizeX = 12;
            const offsetX = 2;
            const offsetY = 2;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            let waves = false;
            switch (this._outType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    if (this._startNote.slideTarget) {
                        const endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this._startNote.slideTarget.beat.voice.bar);
                        if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                            endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                            endY = startY;
                        }
                        else {
                            endX =
                                cx +
                                    endNoteRenderer.x +
                                    endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.PreNotes) -
                                    offsetX;
                            endY =
                                cy +
                                    endNoteRenderer.y +
                                    endNoteRenderer.getNoteY(this._startNote.slideTarget, NoteYPosition.Center);
                        }
                        if (this._startNote.slideTarget.realValue > this._startNote.realValue) {
                            startY += offsetY;
                            endY -= offsetY;
                        }
                        else {
                            startY -= offsetY;
                            endY += offsetY;
                        }
                    }
                    else {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    break;
                case SlideOutType.OutUp:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                    break;
                case SlideOutType.OutDown:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                    break;
                case SlideOutType.PickSlideUp:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                case SlideOutType.PickSlideDown:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
        }
        paintSlideLine(canvas, waves, startX, endX, startY, endY) {
            if (waves) {
                const glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                startY -= glyph.height / 2;
                endY -= glyph.height / 2;
                const b = endX - startX;
                const a = endY - startY;
                const c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
                glyph.width = b;
                const angle = Math.asin(a / c) * (180 / Math.PI);
                canvas.beginRotate(startX, startY, angle);
                glyph.paint(0, 0, canvas);
                canvas.endRotate();
            }
            else {
                canvas.beginPath();
                canvas.moveTo(startX, startY);
                canvas.lineTo(endX, endY);
                canvas.stroke();
            }
        }
    }

    class ScoreSlurGlyph extends ScoreLegatoGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(startNote.beat, endNote.beat, forEnd);
            this._startNote = startNote;
            this._endNote = endNote;
        }
        getTieHeight(startX, startY, endX, endY) {
            return Math.log2(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
        }
        getStartY() {
            if (this.isStartCentered()) {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        // below lowest note
                        return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                    default:
                        return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                }
            }
            return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
        }
        getEndY() {
            if (this.isEndCentered()) {
                if (this.isEndOnStem()) {
                    switch (this.tieDirection) {
                        case BeamDirection.Up:
                            return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.TopWithStem);
                        default:
                            return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.BottomWithStem);
                    }
                }
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Top);
                    default:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Bottom);
                }
            }
            return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Center);
        }
        isStartCentered() {
            return ((this._startNote === this._startNote.beat.maxNote && this.tieDirection === BeamDirection.Up) ||
                (this._startNote === this._startNote.beat.minNote && this.tieDirection === BeamDirection.Down));
        }
        isEndCentered() {
            return (this._startNote.beat.graceType === GraceType.None &&
                ((this._endNote === this._endNote.beat.maxNote && this.tieDirection === BeamDirection.Up) ||
                    (this._endNote === this._endNote.beat.minNote && this.tieDirection === BeamDirection.Down)));
        }
        isEndOnStem() {
            const endNoteScoreRenderer = this.endNoteRenderer;
            const startBeamDirection = this.startNoteRenderer.getBeatDirection(this.startBeat);
            const endBeamDirection = endNoteScoreRenderer.getBeatDirection(this.endBeat);
            return startBeamDirection !== endBeamDirection && this.startBeat.graceType === GraceType.None;
        }
        getStartX() {
            return this.isStartCentered()
                ? this.startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.MiddleNotes)
                : this.startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
        }
        getEndX() {
            if (this.isEndCentered()) {
                if (this.isEndOnStem()) {
                    return this.endNoteRenderer.getBeatX(this._endNote.beat, BeatXPosition.Stem);
                }
                return this.endNoteRenderer.getNoteX(this._endNote, NoteXPosition.Center);
            }
            return this.endNoteRenderer.getBeatX(this._endNote.beat, BeatXPosition.PreNotes);
        }
    }

    class ScoreTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(!startNote ? null : startNote.beat, !endNote ? null : endNote.beat, forEnd);
            this.startNote = startNote;
            this.endNote = endNote;
        }
        shouldDrawBendSlur() {
            return (this.renderer.settings.notation.extendBendArrowsOnTiedNotes &&
                !!this.startNote.bendOrigin &&
                this.startNote.isTieOrigin);
        }
        doLayout() {
            super.doLayout();
        }
        getBeamDirection(beat, noteRenderer) {
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
        getStartY() {
            if (this.startBeat.isRest) {
                // below all lines
                return this.startNoteRenderer.getScoreY(9);
            }
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    // below lowest note
                    return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Top);
                default:
                    return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Bottom);
            }
        }
        getEndY() {
            const endNoteScoreRenderer = this.endNoteRenderer;
            if (this.endBeat.isRest) {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        return endNoteScoreRenderer.getScoreY(9);
                    default:
                        return endNoteScoreRenderer.getScoreY(0);
                }
            }
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    return endNoteScoreRenderer.getNoteY(this.endNote, NoteYPosition.Top);
                default:
                    return endNoteScoreRenderer.getNoteY(this.endNote, NoteYPosition.Bottom);
            }
        }
        getStartX() {
            return this.startNoteRenderer.getBeatX(this.startNote.beat, BeatXPosition.PostNotes);
        }
        getEndX() {
            return this.endNoteRenderer.getBeatX(this.endNote.beat, BeatXPosition.PreNotes);
        }
    }

    class ScoreBeatContainerGlyph extends BeatContainerGlyph {
        constructor() {
            super(...arguments);
            this._bend = null;
            this._effectSlur = null;
            this._effectEndSlur = null;
        }
        doLayout() {
            this._effectSlur = null;
            this._effectEndSlur = null;
            super.doLayout();
            if (this._bend) {
                this._bend.renderer = this.renderer;
                this._bend.doLayout();
                this.updateWidth();
            }
        }
        createTies(n) {
            // create a tie if any effect requires it
            if (!n.isVisible) {
                return;
            }
            // NOTE: we create 2 tie glyphs if we have a line break inbetween
            // the two notes
            if (n.isTieOrigin &&
                !n.hasBend &&
                !n.beat.hasWhammyBar &&
                n.beat.graceType !== GraceType.BendGrace &&
                n.tieDestination &&
                n.tieDestination.isVisible) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                const tie = new ScoreTieGlyph(n, n.tieDestination, false);
                this.addTie(tie);
            }
            if (n.isTieDestination && !n.tieOrigin.hasBend && !n.beat.hasWhammyBar) {
                const tie = new ScoreTieGlyph(n.tieOrigin, n, true);
                this.addTie(tie);
            }
            // TODO: depending on the type we have other positioning
            // we should place glyphs in the preNotesGlyph or postNotesGlyph if needed
            if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
                const l = new ScoreSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
                this.addTie(l);
            }
            if (n.isSlurOrigin && n.slurDestination && n.slurDestination.isVisible) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                const tie = new ScoreSlurGlyph(n, n.slurDestination, false);
                this.addTie(tie);
            }
            if (n.isSlurDestination) {
                const tie = new ScoreSlurGlyph(n.slurOrigin, n, true);
                this.addTie(tie);
            }
            // start effect slur on first beat
            if (!this._effectSlur && n.isEffectSlurOrigin && n.effectSlurDestination) {
                const effectSlur = new ScoreSlurGlyph(n, n.effectSlurDestination, false);
                this._effectSlur = effectSlur;
                this.addTie(effectSlur);
            }
            // end effect slur on last beat
            if (!this._effectEndSlur && n.beat.isEffectSlurDestination && n.beat.effectSlurOrigin) {
                const direction = this.onNotes.beamingHelper.direction;
                const startNote = direction === BeamDirection.Up ? n.beat.effectSlurOrigin.minNote : n.beat.effectSlurOrigin.maxNote;
                const endNote = direction === BeamDirection.Up ? n.beat.minNote : n.beat.maxNote;
                const effectEndSlur = new ScoreSlurGlyph(startNote, endNote, true);
                this._effectEndSlur = effectEndSlur;
                this.addTie(effectEndSlur);
            }
            if (n.hasBend) {
                if (!this._bend) {
                    const bend = new ScoreBendGlyph(n.beat);
                    this._bend = bend;
                    bend.renderer = this.renderer;
                    this.addTie(bend);
                }
                // tslint:disable-next-line: no-unnecessary-type-assertion
                this._bend.addBends(n);
            }
            if (this.beat.isLegatoOrigin) {
                // only create slur for very first origin of "group"
                if (!this.beat.previousBeat || !this.beat.previousBeat.isLegatoOrigin) {
                    // tie with end beat
                    let destination = this.beat.nextBeat;
                    while (destination.nextBeat && destination.nextBeat.isLegatoDestination) {
                        destination = destination.nextBeat;
                    }
                    this.addTie(new ScoreLegatoGlyph(this.beat, destination, false));
                }
            }
            else if (this.beat.isLegatoDestination) {
                // only create slur for last destination of "group"
                if (!this.beat.isLegatoOrigin) {
                    let origin = this.beat.previousBeat;
                    while (origin.previousBeat && origin.previousBeat.isLegatoOrigin) {
                        origin = origin.previousBeat;
                    }
                    this.addTie(new ScoreLegatoGlyph(origin, this.beat, true));
                }
            }
        }
    }

    class BarLineGlyphBase extends Glyph {
        doLayout() {
            this.width = 1;
        }
        paint(cx, cy, canvas) {
            const left = cx + this.x;
            const top = cy + this.y + this.renderer.topPadding;
            const bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
            const h = bottom - top;
            this.paintInternal(left, top, h, canvas);
        }
    }
    class BarLineLightGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            canvas.fillRect(left, top, 1, h);
        }
    }
    class BarLineDottedGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            const circleRadius = 1;
            const x = left;
            const lineHeight = this.renderer.getLineHeight(1);
            let circleY = top + lineHeight * 0.5 + circleRadius;
            const bottom = top + h;
            while (circleY < bottom) {
                canvas.fillCircle(x, circleY, circleRadius);
                circleY += lineHeight;
            }
        }
    }
    class BarLineDashedGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            const dashSize = BarLineDashedGlyph.DashSize;
            const x = left + 0.5;
            const dashes = Math.ceil(h / 2 / dashSize);
            const bottom = top + h;
            canvas.beginPath();
            if (dashes < 1) {
                canvas.moveTo(x, top);
                canvas.lineTo(x, bottom);
            }
            else {
                let dashY = top;
                // spread the dashes so they complete directly on the end-Y
                const freeSpace = h - dashes * dashSize;
                const freeSpacePerDash = freeSpace / (dashes - 1);
                while (dashY < bottom) {
                    canvas.moveTo(x, dashY);
                    canvas.lineTo(x, dashY + dashSize);
                    dashY += dashSize + freeSpacePerDash;
                }
            }
            canvas.stroke();
        }
    }
    BarLineDashedGlyph.DashSize = 4;
    class BarLineHeavyGlyph extends BarLineGlyphBase {
        doLayout() {
            this.width = 4;
        }
        paintInternal(left, top, h, canvas) {
            canvas.fillRect(left, top, this.width, h);
        }
    }
    class BarLineRepeatDotsGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            const bottom = top + h;
            const circleSize = 1.5;
            const middle = (top + bottom) / 2;
            const dotOffset = 3;
            canvas.fillCircle(left, middle - circleSize * dotOffset, circleSize);
            canvas.fillCircle(left, middle + circleSize * dotOffset, circleSize);
        }
    }
    class BarLineShortGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            const renderer = this.renderer;
            const lines = renderer.drawnLineCount;
            const gaps = lines - 1;
            if (gaps <= 2) {
                return;
            }
            const lineHeight = renderer.getLineHeight(1);
            const height = lineHeight * 2;
            const centerY = (gaps / 2) * lineHeight;
            const lineY = centerY - height / 2;
            canvas.fillRect(left, top + lineY, 1, height);
        }
    }
    class BarLineTickGlyph extends BarLineGlyphBase {
        paintInternal(left, top, h, canvas) {
            const renderer = this.renderer;
            const lineHeight = renderer.getLineHeight(1);
            const lineY = -(lineHeight / 2) + 1;
            canvas.fillRect(left, top + lineY, 1, lineHeight);
        }
    }
    class BarLineGlyph extends LeftToRightLayoutingGlyphGroup {
        constructor(isRight) {
            super();
            this._isRight = isRight;
        }
        doLayout() {
            const bar = this.renderer.bar;
            const masterBar = bar.masterBar;
            const actualLineType = this._isRight
                ? bar.getActualBarLineRight()
                : bar.getActualBarLineLeft(this.renderer.index === 0);
            // ensure we don't draw the same line type twice (we prefer drawing it as part of the "right" line)
            let previousLineType = BarLineStyle.Automatic;
            if (!this._isRight) {
                const previousRenderer = this.renderer.previousRenderer;
                if (previousRenderer && previousRenderer.staff === this.renderer.staff) {
                    previousLineType = previousRenderer.bar.getActualBarLineRight();
                    if (actualLineType === previousLineType) {
                        return;
                    }
                }
            }
            const barLineSpace = 3;
            if (this._isRight) {
                if (masterBar.isRepeatEnd) {
                    this.addGlyph(new BarLineRepeatDotsGlyph(0, 0));
                    this.width += barLineSpace;
                }
            }
            switch (actualLineType) {
                case BarLineStyle.Dashed:
                    this.addGlyph(new BarLineDashedGlyph(0, 0));
                    break;
                case BarLineStyle.Dotted:
                    this.addGlyph(new BarLineDottedGlyph(0, 0));
                    break;
                case BarLineStyle.Heavy:
                    // use previous heavy bar (no double heavy)
                    if (previousLineType !== BarLineStyle.LightHeavy && previousLineType !== BarLineStyle.HeavyHeavy) {
                        this.addGlyph(new BarLineHeavyGlyph(0, 0));
                    }
                    break;
                case BarLineStyle.HeavyHeavy:
                    // use previous heavy bar (no double heavy)
                    if (previousLineType !== BarLineStyle.LightHeavy && previousLineType !== BarLineStyle.Heavy) {
                        this.addGlyph(new BarLineHeavyGlyph(0, 0));
                    }
                    this.width += barLineSpace;
                    this.addGlyph(new BarLineHeavyGlyph(0, 0));
                    break;
                case BarLineStyle.HeavyLight:
                    // use previous heavy bar (no double heavy)
                    if (previousLineType !== BarLineStyle.LightHeavy &&
                        previousLineType !== BarLineStyle.Heavy &&
                        previousLineType !== BarLineStyle.HeavyHeavy) {
                        this.addGlyph(new BarLineHeavyGlyph(0, 0));
                    }
                    this.width += barLineSpace;
                    this.addGlyph(new BarLineLightGlyph(0, 0));
                    break;
                case BarLineStyle.LightHeavy:
                    // use previous light bar
                    if (previousLineType !== BarLineStyle.HeavyLight &&
                        previousLineType !== BarLineStyle.Regular &&
                        previousLineType !== BarLineStyle.LightLight) {
                        this.addGlyph(new BarLineLightGlyph(0, 0));
                    }
                    this.width += barLineSpace;
                    this.addGlyph(new BarLineHeavyGlyph(0, 0));
                    break;
                case BarLineStyle.LightLight:
                    // use previous light bar
                    if (previousLineType !== BarLineStyle.HeavyLight && previousLineType !== BarLineStyle.Regular) {
                        this.addGlyph(new BarLineLightGlyph(0, 0));
                    }
                    this.width += barLineSpace;
                    this.addGlyph(new BarLineLightGlyph(0, 0));
                    break;
                case BarLineStyle.None:
                    break;
                case BarLineStyle.Regular:
                    // use previous light bar
                    if (previousLineType !== BarLineStyle.HeavyLight && previousLineType !== BarLineStyle.LightLight) {
                        this.addGlyph(new BarLineLightGlyph(0, 0));
                    }
                    break;
                case BarLineStyle.Short:
                    this.addGlyph(new BarLineShortGlyph(0, 0));
                    break;
                case BarLineStyle.Tick:
                    this.addGlyph(new BarLineTickGlyph(0, 0));
                    break;
            }
            if (!this._isRight) {
                if (masterBar.isRepeatStart) {
                    this.width += barLineSpace;
                    this.addGlyph(new BarLineRepeatDotsGlyph(0, 0));
                }
            }
        }
        paint(cx, cy, canvas) {
            const renderer = this.renderer;
            const _ = ElementStyleHelper.bar(canvas, renderer.barLineBarSubElement, this.renderer.bar, true);
            try {
                super.paint(cx, cy, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class RepeatCountGlyph extends Glyph {
        constructor(x, y, count) {
            super(x, y);
            this._count = 0;
            this._count = 0;
            this._count = count;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, this.renderer.repeatsBarSubElement, this.renderer.bar);
            try {
                const res = this.renderer.resources;
                const oldAlign = canvas.textAlign;
                canvas.font = res.barNumberFont;
                canvas.textAlign = TextAlign.Right;
                const s = `x${this._count}`;
                const w = canvas.measureText(s).width / 1.5;
                canvas.fillText(s, cx + this.x - w, cy + this.y);
                canvas.textAlign = oldAlign;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class BarNumberGlyph extends Glyph {
        constructor(x, y, num) {
            super(x, y);
            this._number = 0;
            this._number = num;
        }
        doLayout() {
            this.renderer.scoreRenderer.canvas.font = this.renderer.resources.barNumberFont;
            this.width = this.renderer.scoreRenderer.canvas.measureText(this._number.toString()).width + 5;
        }
        paint(cx, cy, canvas) {
            if (!this.renderer.staff.isFirstInSystem) {
                return;
            }
            const _ = ElementStyleHelper.bar(canvas, this.renderer.barNumberBarSubElement, this.renderer.bar, true);
            try {
                const res = this.renderer.resources;
                const baseline = canvas.textBaseline;
                canvas.textBaseline = TextBaseline.Top;
                canvas.font = res.barNumberFont;
                canvas.fillText(this._number.toString(), cx + this.x, cy + this.y);
                canvas.textBaseline = baseline;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    /**
     * This is a base class for any bar renderer which renders music notation on a staff
     * with lines like Standard Notation, Guitar Tablatures and Slash Notation.
     *
     * This base class takes care of the typical bits like drawing lines,
     * allowing note positioning and creating glyphs like repeats, bar numbers etc..
     */
    class LineBarRenderer extends BarRendererBase {
        constructor() {
            super(...arguments);
            this.firstLineY = 0;
            this._startSpacing = false;
            this.tupletSize = 0;
        }
        get lineOffset() {
            return this.lineSpacing + 1;
        }
        get tupletOffset() {
            return 10;
        }
        get topGlyphOverflow() {
            const res = this.resources;
            return res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2;
        }
        get bottomGlyphOverflow() {
            const res = this.resources;
            return res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2;
        }
        initLineBasedSizes() {
            this.topPadding = this.topGlyphOverflow;
            this.bottomPadding = this.bottomGlyphOverflow;
            this.height = this.lineOffset * (this.heightLineCount - 1) + this.topPadding + this.bottomPadding;
        }
        updateSizes() {
            this.initLineBasedSizes();
            this.adjustSizes();
            this.updateFirstLineY();
            super.updateSizes();
        }
        adjustSizes() {
        }
        updateFirstLineY() {
            const fullLineHeight = this.lineOffset * (this.heightLineCount - 1);
            const actualLineHeight = (this.drawnLineCount - 1) * this.lineOffset;
            this.firstLineY = this.topPadding + (fullLineHeight - actualLineHeight) / 2;
        }
        doLayout() {
            this.initLineBasedSizes();
            this.updateFirstLineY();
            this.tupletSize = 15 + this.resources.effectFont.size * 0.3;
            super.doLayout();
        }
        getLineY(line) {
            return this.firstLineY + this.getLineHeight(line);
        }
        getLineHeight(line) {
            return this.lineOffset * line;
        }
        // private static readonly Random Random = new Random();
        paintBackground(cx, cy, canvas) {
            super.paintBackground(cx, cy, canvas);
            // canvas.color = Color.random(100);
            // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.height);
            //
            // draw string lines
            //
            this.paintStaffLines(cx, cy, canvas);
            this.paintSimileMark(cx, cy, canvas);
        }
        paintStaffLines(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, this.staffLineBarSubElement, this.bar, true);
            try {
                // collect tab note position for spaces
                const spaces = [];
                for (let i = 0, j = this.drawnLineCount; i < j; i++) {
                    spaces.push([]);
                }
                // on multibar rest glyphs we don't have spaces as they are empty
                if (!this.additionalMultiRestBars) {
                    this.collectSpaces(spaces);
                }
                // if we have multiple voices we need to sort by X-position, otherwise have a wild mix in the list
                // but painting relies on ascending X-position
                for (const line of spaces) {
                    line.sort((a, b) => {
                        return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;
                    });
                }
                // during system fitting it can happen that we have fraction widths
                // but to have lines until the full end-pixel we round up.
                // this way we avoid holes
                const lineWidth = Math.ceil(this.width);
                for (let i = 0; i < this.drawnLineCount; i++) {
                    const lineY = this.getLineY(i);
                    let lineX = 0;
                    for (const line of spaces[i]) {
                        canvas.fillRect(cx + this.x + lineX, (cy + this.y + lineY) | 0, line[0] - lineX, BarRendererBase.StaffLineThickness);
                        lineX = line[0] + line[1];
                    }
                    canvas.fillRect(cx + this.x + lineX, (cy + this.y + lineY) | 0, lineWidth - lineX, BarRendererBase.StaffLineThickness);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        collectSpaces(spaces) {
        }
        createStartSpacing() {
            if (this._startSpacing) {
                return;
            }
            const padding = this.index === 0 ? this.settings.display.firstStaffPaddingLeft : this.settings.display.staffPaddingLeft;
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, padding));
            this._startSpacing = true;
        }
        paintTuplets(cx, cy, canvas, beatElement, bracketsAsArcs = false) {
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    const container = this.getVoiceContainer(voice);
                    for (const tupletGroup of container.tupletGroups) {
                        this.paintTupletHelper(cx + this.beatGlyphsStart, cy, canvas, tupletGroup, beatElement, bracketsAsArcs);
                    }
                }
            }
        }
        getTupletBeamDirection(helper) {
            return this.getBeamDirection(helper);
        }
        paintTupletHelper(cx, cy, canvas, h, beatElement, bracketsAsArcs) {
            const res = this.resources;
            const oldAlign = canvas.textAlign;
            const oldBaseLine = canvas.textBaseline;
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            canvas.textAlign = TextAlign.Center;
            canvas.textBaseline = TextBaseline.Middle;
            let s;
            const num = h.beats[0].tupletNumerator;
            const den = h.beats[0].tupletDenominator;
            // list as in Guitar Pro 7. for certain tuplets only the numerator is shown
            if (num === 2 && den === 3) {
                s = '2';
            }
            else if (num === 3 && den === 2) {
                s = '3';
            }
            else if (num === 4 && den === 6) {
                s = '4';
            }
            else if (num === 5 && den === 4) {
                s = '5';
            }
            else if (num === 6 && den === 4) {
                s = '6';
            }
            else if (num === 7 && den === 4) {
                s = '7';
            }
            else if (num === 9 && den === 8) {
                s = '9';
            }
            else if (num === 10 && den === 8) {
                s = '10';
            }
            else if (num === 11 && den === 8) {
                s = '11';
            }
            else if (num === 12 && den === 8) {
                s = '12';
            }
            else if (num === 13 && den === 8) {
                s = '13';
            }
            else {
                s = `${num}:${den}`;
            }
            // check if we need to paint simple footer
            let offset = this.tupletOffset;
            let size = 5;
            const _ = ElementStyleHelper.beat(canvas, beatElement, h.beats[0]);
            try {
                if (h.beats.length === 1 || !h.isFull) {
                    for (const beat of h.beats) {
                        const beamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(beat.index);
                        if (!beamingHelper) {
                            continue;
                        }
                        const direction = this.getTupletBeamDirection(beamingHelper);
                        const tupletX = beamingHelper.getBeatLineX(beat);
                        let tupletY = this.calculateBeamYWithDirection(beamingHelper, tupletX, direction);
                        if (direction === BeamDirection.Down) {
                            tupletY += offset + size;
                        }
                        else {
                            tupletY -= offset + size;
                        }
                        canvas.font = res.effectFont;
                        canvas.fillText(s, cx + this.x + tupletX, cy + this.y + tupletY);
                    }
                }
                else {
                    const firstBeat = h.beats[0];
                    const lastBeat = h.beats[h.beats.length - 1];
                    let firstNonRestBeat = null;
                    let lastNonRestBeat = null;
                    for (let i = 0; i < h.beats.length; i++) {
                        if (!h.beats[i].isRest) {
                            firstNonRestBeat = h.beats[i];
                            break;
                        }
                    }
                    for (let i = h.beats.length - 1; i >= 0; i--) {
                        if (!h.beats[i].isRest) {
                            lastNonRestBeat = h.beats[i];
                            break;
                        }
                    }
                    let isRestOnly = false;
                    if (!firstNonRestBeat) {
                        firstNonRestBeat = firstBeat;
                        isRestOnly = true;
                    }
                    if (!lastNonRestBeat) {
                        lastNonRestBeat = lastBeat;
                    }
                    //
                    // Calculate the overall area of the tuplet bracket
                    const firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstBeat.index);
                    const lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastBeat.index);
                    const startX = firstBeamingHelper.getBeatLineX(firstBeat);
                    const endX = lastBeamingHelper.getBeatLineX(lastBeat);
                    //
                    // calculate the y positions for our bracket
                    const firstNonRestBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstNonRestBeat.index);
                    const lastNonRestBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastNonRestBeat.index);
                    const direction = this.getTupletBeamDirection(firstBeamingHelper);
                    let startY = this.calculateBeamYWithDirection(firstNonRestBeamingHelper, startX, direction);
                    let endY = this.calculateBeamYWithDirection(lastNonRestBeamingHelper, endX, direction);
                    if (isRestOnly) {
                        startY = Math.max(startY, endY);
                        endY = startY;
                    }
                    //
                    // Calculate how many space the text will need
                    canvas.font = res.effectFont;
                    const sw = canvas.measureText(s).width;
                    const sp = 3;
                    //
                    // Calculate the offsets where to break the bracket
                    const middleX = (startX + endX) / 2;
                    const offset1X = middleX - sw / 2 - sp;
                    const offset2X = middleX + sw / 2 + sp;
                    const k = (endY - startY) / (endX - startX);
                    const d = startY - k * startX;
                    const offset1Y = k * offset1X + d;
                    const middleY = k * middleX + d;
                    const offset2Y = k * offset2X + d;
                    if (direction === BeamDirection.Down) {
                        offset *= -1;
                        size *= -1;
                    }
                    //
                    // draw the bracket
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + startX, (cy + this.y + startY - offset) | 0);
                    if (bracketsAsArcs) {
                        canvas.quadraticCurveTo(cx + this.x + (offset1X + startX) / 2, (cy + this.y + offset1Y - offset - size) | 0, cx + this.x + offset1X, (cy + this.y + offset1Y - offset - size) | 0);
                    }
                    else {
                        canvas.lineTo(cx + this.x + startX, (cy + this.y + startY - offset - size) | 0);
                        canvas.lineTo(cx + this.x + offset1X, (cy + this.y + offset1Y - offset - size) | 0);
                    }
                    canvas.stroke();
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + offset2X, (cy + this.y + offset2Y - offset - size) | 0);
                    if (bracketsAsArcs) {
                        canvas.quadraticCurveTo(cx + this.x + (endX + offset2X) / 2, (cy + this.y + offset2Y - offset - size) | 0, cx + this.x + endX, (cy + this.y + endY - offset) | 0);
                    }
                    else {
                        canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset - size) | 0);
                        canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset) | 0);
                    }
                    canvas.stroke();
                    //
                    // Draw the string
                    canvas.fillText(s, cx + this.x + middleX, cy + this.y + middleY - offset - size);
                }
                canvas.textAlign = oldAlign;
                canvas.textBaseline = oldBaseLine;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        paintBeams(cx, cy, canvas, flagsElement, beamsElement) {
            for (const v of this.helpers.beamHelpers) {
                for (const h of v) {
                    this.paintBeamHelper(cx + this.beatGlyphsStart, cy, canvas, h, flagsElement, beamsElement);
                }
            }
        }
        drawBeamHelperAsFlags(h) {
            return h.beats.length === 1;
        }
        paintBeamHelper(cx, cy, canvas, h, flagsElement, beamsElement) {
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            // TODO: draw stem at least at the center of the score staff.
            // check if we need to paint simple footer
            if (!h.isRestBeamHelper) {
                if (this.drawBeamHelperAsFlags(h)) {
                    this.paintFlag(cx, cy, canvas, h, flagsElement);
                }
                else {
                    this.paintBar(cx, cy, canvas, h, beamsElement);
                }
            }
        }
        shouldPaintFlag(beat, h) {
            // no flags for bend grace beats
            if (beat.graceType === GraceType.BendGrace) {
                return false;
            }
            if (beat.deadSlapped) {
                return false;
            }
            // we don't have an X-position: cannot paint a flag
            if (!h.hasBeatLineX(beat)) {
                return false;
            }
            // no flags for any grace notes on songbook mode
            if (beat.graceType !== GraceType.None && this.settings.notation.notationMode === exports.NotationMode.SongBook) {
                return false;
            }
            // only flags for durations with stems
            if (beat.duration === Duration.Whole ||
                beat.duration === Duration.DoubleWhole ||
                beat.duration === Duration.QuadrupleWhole) {
                return false;
            }
            return true;
        }
        paintFlag(cx, cy, canvas, h, flagsElement) {
            for (const beat of h.beats) {
                if (!this.shouldPaintFlag(beat, h)) {
                    continue;
                }
                const isGrace = beat.graceType !== GraceType.None;
                const scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
                //
                // draw line
                //
                const stemSize = this.getFlagStemSize(h.shortestDuration);
                const beatLineX = h.getBeatLineX(beat);
                const direction = this.getBeamDirection(h);
                let topY = this.getFlagTopY(beat, direction);
                let bottomY = this.getFlagBottomY(beat, direction);
                let beamY = 0;
                if (direction === BeamDirection.Down) {
                    bottomY += stemSize * scaleMod;
                    beamY = bottomY;
                }
                else {
                    topY -= stemSize * scaleMod;
                    beamY = topY;
                }
                if (!h.hasLine(true, beat)) {
                    continue;
                }
                this.paintBeamingStem(beat, cy + this.y, cx + this.x + beatLineX, cy + this.y + topY, cy + this.y + bottomY, canvas);
                const _ = ElementStyleHelper.beat(canvas, flagsElement, beat);
                try {
                    if (beat.graceType === GraceType.BeforeBeat) {
                        const graceSizeY = 15;
                        const graceSizeX = 12;
                        canvas.beginPath();
                        if (direction === BeamDirection.Down) {
                            canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + bottomY - graceSizeY);
                            canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + bottomY);
                        }
                        else {
                            canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + topY + graceSizeY);
                            canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + topY);
                        }
                        canvas.stroke();
                    }
                    //
                    // Draw flag
                    //
                    if (h.hasFlag(true, beat)) {
                        const glyph = new FlagGlyph(beatLineX - 1 / 2, beamY, beat.duration, direction, isGrace);
                        glyph.renderer = this;
                        glyph.doLayout();
                        glyph.paint(cx + this.x, cy + this.y, canvas);
                    }
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        getFlagStemSize(duration, forceMinStem = false) {
            let size = 0;
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.Half:
                case Duration.Quarter:
                case Duration.Eighth:
                case Duration.Sixteenth:
                case Duration.ThirtySecond:
                case Duration.SixtyFourth:
                case Duration.OneHundredTwentyEighth:
                case Duration.TwoHundredFiftySixth:
                    size = 3;
                    break;
                default:
                    size = forceMinStem ? 3 : 0;
                    break;
            }
            return this.getLineHeight(size);
        }
        recreatePreBeatGlyphs() {
            this._startSpacing = false;
            super.recreatePreBeatGlyphs();
        }
        calculateBeamY(h, x) {
            return this.calculateBeamYWithDirection(h, x, this.getBeamDirection(h));
        }
        createPreBeatGlyphs() {
            super.createPreBeatGlyphs();
            this.addPreBeatGlyph(new BarLineGlyph(false));
            this.createLinePreBeatGlyphs();
            this.addPreBeatGlyph(new BarNumberGlyph(0, this.getLineHeight(-0.25), this.bar.index + 1));
        }
        createPostBeatGlyphs() {
            super.createPostBeatGlyphs();
            const lastBar = this.lastBar;
            this.addPostBeatGlyph(new BarLineGlyph(true));
            if (lastBar.masterBar.isRepeatEnd && lastBar.masterBar.repeatCount > 2) {
                this.addPostBeatGlyph(new RepeatCountGlyph(0, this.getLineHeight(-0.25), this.bar.masterBar.repeatCount));
            }
        }
        paintBar(cx, cy, canvas, h, beamsElement) {
            for (let i = 0, j = h.beats.length; i < j; i++) {
                const beat = h.beats[i];
                if (!h.hasBeatLineX(beat) || beat.deadSlapped) {
                    continue;
                }
                const isGrace = beat.graceType !== GraceType.None;
                const scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
                //
                // draw line
                //
                const beatLineX = h.getBeatLineX(beat);
                const direction = this.getBeamDirection(h);
                const y1 = cy + this.y + this.getBarLineStart(beat, direction);
                const y2 = cy + this.y + this.calculateBeamY(h, beatLineX);
                // canvas.lineWidth = BarRendererBase.StemWidth;
                // canvas.beginPath();
                // canvas.moveTo(cx + this.x + beatLineX, y1);
                // canvas.lineTo(cx + this.x + beatLineX, y2);
                // canvas.stroke();
                // canvas.lineWidth = 1;
                this.paintBeamingStem(beat, cy + this.y, cx + this.x + beatLineX, y1, y2, canvas);
                const _ = ElementStyleHelper.beat(canvas, beamsElement, beat);
                try {
                    let fingeringY = y2;
                    if (direction === BeamDirection.Down) {
                        fingeringY += canvas.font.size * 2;
                    }
                    else if (i !== 0) {
                        fingeringY -= canvas.font.size * 1.5;
                    }
                    const brokenBarOffset = 6 * scaleMod;
                    let barSpacing = (BarRendererBase.BeamSpacing + BarRendererBase.BeamThickness) * scaleMod;
                    let barSize = BarRendererBase.BeamThickness * scaleMod;
                    const barCount = ModelUtils.getIndex(beat.duration) - 2;
                    const barStart = cy + this.y;
                    if (direction === BeamDirection.Down) {
                        barSpacing = -barSpacing;
                        barSize = -barSize;
                    }
                    for (let barIndex = 0; barIndex < barCount; barIndex++) {
                        let barStartX = 0;
                        let barEndX = 0;
                        let barStartY = 0;
                        let barEndY = 0;
                        const barY = barStart + barIndex * barSpacing;
                        //
                        // Bar to Next?
                        //
                        if (i < h.beats.length - 1) {
                            const isFullBarJoin = BeamingHelper.isFullBarJoin(beat, h.beats[i + 1], barIndex);
                            // force two broken bars on secondary (last) beam?
                            if (barIndex === barCount - 1 &&
                                isFullBarJoin &&
                                beat.beamingMode === BeatBeamingMode.ForceSplitOnSecondaryToNext) {
                                // start part
                                barStartX = beatLineX;
                                barEndX = barStartX + brokenBarOffset;
                                barStartY = barY + this.calculateBeamY(h, barStartX);
                                barEndY = barY + this.calculateBeamY(h, barEndX);
                                LineBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                                // end part
                                barEndX = h.getBeatLineX(h.beats[i + 1]);
                                barStartX = barEndX - brokenBarOffset;
                                barStartY = barY + this.calculateBeamY(h, barStartX);
                                barEndY = barY + this.calculateBeamY(h, barEndX);
                                LineBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                            }
                            else {
                                if (isFullBarJoin) {
                                    // full bar?
                                    barStartX = beatLineX;
                                    barEndX = h.getBeatLineX(h.beats[i + 1]);
                                }
                                else if (i === 0 || !BeamingHelper.isFullBarJoin(h.beats[i - 1], beat, barIndex)) {
                                    barStartX = beatLineX;
                                    barEndX = barStartX + brokenBarOffset;
                                }
                                else {
                                    continue;
                                }
                                barStartY = barY + this.calculateBeamY(h, barStartX);
                                barEndY = barY + this.calculateBeamY(h, barEndX);
                                LineBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                            }
                        }
                        else if (i > 0 && !BeamingHelper.isFullBarJoin(beat, h.beats[i - 1], barIndex)) {
                            barStartX = beatLineX - brokenBarOffset;
                            barEndX = beatLineX;
                            barStartY = barY + this.calculateBeamY(h, barStartX);
                            barEndY = barY + this.calculateBeamY(h, barEndX);
                            LineBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                        }
                    }
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        static paintSingleBar(canvas, x1, y1, x2, y2, size) {
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.lineTo(x2, y2);
            canvas.lineTo(x2, y2 + size);
            canvas.lineTo(x1, y1 + size);
            canvas.closePath();
            canvas.fill();
        }
    }

    class KeySignatureGlyph extends LeftToRightLayoutingGlyphGroup {
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, BarSubElement.StandardNotationKeySignature, this.renderer.bar);
            try {
                super.paint(cx, cy, canvas);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    /**
     * This BarRenderer renders a bar using standard music notation.
     */
    class ScoreBarRenderer extends LineBarRenderer {
        constructor(renderer, bar) {
            super(renderer, bar);
            this.simpleWhammyOverflow = 0;
            this.beatEffectsMinY = null;
            this.beatEffectsMaxY = null;
            this.accidentalHelper = new AccidentalHelper(this);
        }
        get repeatsBarSubElement() {
            return BarSubElement.StandardNotationRepeats;
        }
        get barNumberBarSubElement() {
            return BarSubElement.StandardNotationBarNumber;
        }
        get barLineBarSubElement() {
            return BarSubElement.StandardNotationBarLines;
        }
        get staffLineBarSubElement() {
            return BarSubElement.StandardNotationStaffLine;
        }
        get showMultiBarRest() {
            return true;
        }
        get lineSpacing() {
            return BarRendererBase.RawLineSpacing;
        }
        get heightLineCount() {
            return 5;
        }
        get drawnLineCount() {
            return this.bar.staff.standardNotationLineCount;
        }
        registerBeatEffectOverflows(beatEffectsMinY, beatEffectsMaxY) {
            const currentBeatEffectsMinY = this.beatEffectsMinY;
            if (currentBeatEffectsMinY == null || beatEffectsMinY < currentBeatEffectsMinY) {
                this.beatEffectsMinY = beatEffectsMinY;
            }
            const currentBeatEffectsMaxY = this.beatEffectsMaxY;
            if (currentBeatEffectsMaxY == null || beatEffectsMaxY > currentBeatEffectsMaxY) {
                this.beatEffectsMaxY = beatEffectsMaxY;
            }
        }
        /**
         * Gets the relative y position of the given steps relative to first line.
         * @param steps the amount of steps while 2 steps are one line
         * @returns
         */
        getScoreY(steps) {
            return super.getLineY(steps / 2);
        }
        /**
         * Gets the height of an element that spans the given amount of steps.
         * @param steps the amount of steps while 2 steps are one line
         * @param correction
         * @returns
         */
        getScoreHeight(steps) {
            return super.getLineHeight(steps / 2);
        }
        doLayout() {
            super.doLayout();
            if (!this.bar.isEmpty && this.accidentalHelper.maxLineBeat) {
                const top = this.getScoreY(-2);
                const bottom = this.getScoreY(10);
                const whammyOffset = this.simpleWhammyOverflow;
                const beatEffectsMinY = this.beatEffectsMinY;
                if (beatEffectsMinY !== null) {
                    const beatEffectTopOverflow = top - beatEffectsMinY;
                    if (beatEffectTopOverflow > 0) {
                        this.registerOverflowTop(beatEffectTopOverflow);
                    }
                }
                const beatEffectsMaxY = this.beatEffectsMaxY;
                if (beatEffectsMaxY !== null) {
                    const beatEffectBottomOverflow = beatEffectsMaxY - bottom;
                    if (beatEffectBottomOverflow > 0) {
                        this.registerOverflowBottom(beatEffectBottomOverflow);
                    }
                }
                this.registerOverflowTop(whammyOffset);
                let maxNoteY = this.getScoreY(this.accidentalHelper.maxLine);
                const maxNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.maxLineBeat);
                if (maxNoteHelper.direction === BeamDirection.Up) {
                    maxNoteY -= this.getStemSize(maxNoteHelper);
                    if (maxNoteHelper.hasTuplet) {
                        maxNoteY -= this.tupletSize;
                    }
                }
                if (maxNoteY < top) {
                    this.registerOverflowTop(Math.abs(maxNoteY) + whammyOffset);
                }
                let minNoteY = this.getScoreY(this.accidentalHelper.minLine);
                const minNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.minLineBeat);
                if (minNoteHelper.direction === BeamDirection.Down) {
                    minNoteY += this.getStemSize(minNoteHelper);
                    if (minNoteHelper.hasTuplet) {
                        minNoteY += this.tupletSize;
                    }
                }
                if (minNoteY > bottom) {
                    this.registerOverflowBottom(Math.abs(minNoteY) - bottom);
                }
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            this.paintBeams(cx, cy, canvas, BeatSubElement.StandardNotationFlags, BeatSubElement.StandardNotationBeams);
            this.paintTuplets(cx, cy, canvas, BeatSubElement.StandardNotationTuplet);
        }
        getSlashFlagY(duration, direction) {
            let line = (this.heightLineCount - 1) / 2;
            let offset = 0;
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.DoubleWhole:
                case Duration.Whole:
                    offset += 2;
                    break;
                default:
                    offset += 1;
                    break;
            }
            if (direction === BeamDirection.Down) {
                line += offset;
            }
            else {
                line -= offset;
            }
            const slashY = this.getLineY(line);
            return slashY;
        }
        getFlagTopY(beat, direction) {
            if (beat.slashed) {
                return this.getSlashFlagY(beat.duration, direction);
            }
            return this.getScoreY(this.accidentalHelper.getMinLine(beat));
        }
        getFlagBottomY(beat, direction) {
            if (beat.slashed) {
                return this.getSlashFlagY(beat.duration, direction);
            }
            return this.getScoreY(this.accidentalHelper.getMaxLine(beat));
        }
        getBeamDirection(helper) {
            return helper.direction;
        }
        getStemSize(helper, forceMinStem = false) {
            let size = helper.beats.length === 1
                ? this.getFlagStemSize(helper.shortestDuration, forceMinStem)
                : this.getBarStemSize(helper.shortestDuration);
            if (helper.isGrace) {
                size = size * NoteHeadGlyph.GraceScale;
            }
            return size;
        }
        getBarStemSize(duration) {
            let size = 0;
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.Half:
                case Duration.Quarter:
                case Duration.Eighth:
                case Duration.Sixteenth:
                    size = 6;
                    break;
                case Duration.ThirtySecond:
                    size = 8;
                    break;
                case Duration.SixtyFourth:
                    size = 9;
                    break;
                case Duration.OneHundredTwentyEighth:
                    size = 9;
                    break;
                case Duration.TwoHundredFiftySixth:
                    size = 10;
                    break;
                default:
                    size = 0;
                    break;
            }
            return this.getScoreHeight(size);
        }
        get middleYPosition() {
            return this.getScoreY(this.bar.staff.standardNotationLineCount - 1);
        }
        getNoteY(note, requestedPosition) {
            if (note.beat.slashed) {
                const line = (this.heightLineCount - 1) / 2;
                return this.getLineY(line);
            }
            let y = super.getNoteY(note, requestedPosition);
            if (Number.isNaN(y)) {
                // NOTE: some might request the note position before the glyphs have been created
                // e.g. the beaming helper, for these we just need a rough
                // estimate on the position
                const line = AccidentalHelper.computeLineWithoutAccidentals(this.bar, note);
                y = this.getScoreY(line);
            }
            return y;
        }
        applyLayoutingInfo() {
            const result = super.applyLayoutingInfo();
            if (result && this.bar.isMultiVoice) {
                // consider rest overflows
                const top = this.getScoreY(-2);
                const bottom = this.getScoreY(10);
                const minMax = this.helpers.collisionHelper.getBeatMinMaxY();
                if (minMax[0] < top) {
                    this.registerOverflowTop(Math.abs(minMax[0]));
                }
                if (minMax[1] > bottom) {
                    this.registerOverflowBottom(Math.abs(minMax[1]) - bottom);
                }
            }
            return result;
        }
        calculateBeamYWithDirection(h, x, direction) {
            const stemSize = this.getStemSize(h);
            if (!h.drawingInfos.has(direction)) {
                const drawingInfo = new BeamingHelperDrawInfo();
                h.drawingInfos.set(direction, drawingInfo);
                // the beaming logic works like this:
                // 1. we take the first and last note, add the stem, and put a diagnal line between them.
                // 2. the height of the diagonal line must not exceed a max height,
                //    - if this is the case, the line on the more distant note just gets longer
                // 3. any middle elements (notes or rests) shift this diagonal line up/down to avoid overlaps
                const firstBeat = h.beats[0];
                const lastBeat = h.beats[h.beats.length - 1];
                const isRest = h.isRestBeamHelper;
                // 1. put direct diagonal line.
                drawingInfo.startBeat = firstBeat;
                drawingInfo.startX = h.getBeatLineX(firstBeat);
                if (isRest) {
                    drawingInfo.startY =
                        direction === BeamDirection.Up ? this.getScoreY(h.minRestLine) : this.getScoreY(h.maxRestLine);
                }
                else {
                    drawingInfo.startY =
                        direction === BeamDirection.Up
                            ? this.getFlagTopY(firstBeat, direction) - stemSize
                            : this.getFlagBottomY(firstBeat, direction) + stemSize;
                }
                drawingInfo.endBeat = lastBeat;
                drawingInfo.endX = h.getBeatLineX(lastBeat);
                if (isRest) {
                    drawingInfo.endY =
                        direction === BeamDirection.Up ? this.getScoreY(h.minRestLine) : this.getScoreY(h.maxRestLine);
                }
                else {
                    drawingInfo.endY =
                        direction === BeamDirection.Up
                            ? this.getFlagTopY(lastBeat, direction) - stemSize
                            : this.getFlagBottomY(lastBeat, direction) + stemSize;
                }
                // 2. ensure max height
                // we use the min/max notes to place the beam along their real position
                // we only want a maximum of 10 offset for their gradient
                const maxDistance = 10;
                if (direction === BeamDirection.Down &&
                    drawingInfo.startY > drawingInfo.endY &&
                    drawingInfo.startY - drawingInfo.endY > maxDistance) {
                    drawingInfo.endY = drawingInfo.startY - maxDistance;
                }
                if (direction === BeamDirection.Down &&
                    drawingInfo.endY > drawingInfo.startY &&
                    drawingInfo.endY - drawingInfo.startY > maxDistance) {
                    drawingInfo.startY = drawingInfo.endY - maxDistance;
                }
                if (direction === BeamDirection.Up &&
                    drawingInfo.startY < drawingInfo.endY &&
                    drawingInfo.endY - drawingInfo.startY > maxDistance) {
                    drawingInfo.endY = drawingInfo.startY + maxDistance;
                }
                if (direction === BeamDirection.Up &&
                    drawingInfo.endY < drawingInfo.startY &&
                    drawingInfo.startY - drawingInfo.endY > maxDistance) {
                    drawingInfo.startY = drawingInfo.endY + maxDistance;
                }
                // 3. let middle elements shift up/down
                if (h.beats.length > 1) {
                    // check if highest note shifts bar up or down
                    if (direction === BeamDirection.Up) {
                        const yNeededForHighestNote = this.getScoreY(this.accidentalHelper.getMinLine(h.beatOfHighestNote)) - stemSize;
                        const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfHighestNote));
                        const diff = yGivenByCurrentValues - yNeededForHighestNote;
                        if (diff > 0) {
                            drawingInfo.startY -= diff;
                            drawingInfo.endY -= diff;
                        }
                    }
                    else {
                        const yNeededForLowestNote = this.getScoreY(this.accidentalHelper.getMaxLine(h.beatOfLowestNote)) + stemSize;
                        const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfLowestNote));
                        const diff = yNeededForLowestNote - yGivenByCurrentValues;
                        if (diff > 0) {
                            drawingInfo.startY += diff;
                            drawingInfo.endY += diff;
                        }
                    }
                    // check if rest shifts bar up or down
                    if (h.minRestLine !== null || h.maxRestLine !== null) {
                        const barCount = ModelUtils.getIndex(h.shortestDuration) - 2;
                        const scaleMod = h.isGrace ? NoteHeadGlyph.GraceScale : 1;
                        let barSpacing = barCount * (BarRendererBase.BeamSpacing + BarRendererBase.BeamThickness) * scaleMod;
                        barSpacing += BarRendererBase.BeamSpacing;
                        if (direction === BeamDirection.Up && h.minRestLine !== null) {
                            const yNeededForRest = this.getScoreY(h.minRestLine) - barSpacing;
                            const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfMinRestLine));
                            const diff = yGivenByCurrentValues - yNeededForRest;
                            if (diff > 0) {
                                drawingInfo.startY -= diff;
                                drawingInfo.endY -= diff;
                            }
                        }
                        else if (direction === BeamDirection.Down && h.maxRestLine !== null) {
                            const yNeededForRest = this.getScoreY(h.maxRestLine) + barSpacing;
                            const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfMaxRestLine));
                            const diff = yNeededForRest - yGivenByCurrentValues;
                            if (diff > 0) {
                                drawingInfo.startY += diff;
                                drawingInfo.endY += diff;
                            }
                        }
                    }
                    // check if slash shifts bar up or down
                    if (h.slashBeats.length > 0) {
                        for (const b of h.slashBeats) {
                            const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(b));
                            let yNeededForSlash = this.getSlashFlagY(b.duration, direction);
                            if (direction === BeamDirection.Up) {
                                yNeededForSlash -= stemSize;
                            }
                            else if (direction === BeamDirection.Down) {
                                yNeededForSlash += stemSize;
                            }
                            const diff = yNeededForSlash - yGivenByCurrentValues;
                            if (diff > 0) {
                                drawingInfo.startY += diff;
                                drawingInfo.endY += diff;
                            }
                        }
                    }
                }
            }
            return h.drawingInfos.get(direction).calcY(x);
        }
        getBarLineStart(beat, direction) {
            if (beat.slashed) {
                return this.getSlashFlagY(beat.duration, direction);
            }
            return direction === BeamDirection.Up
                ? this.getScoreY(this.accidentalHelper.getMaxLine(beat))
                : this.getScoreY(this.accidentalHelper.getMinLine(beat));
        }
        createLinePreBeatGlyphs() {
            // Clef
            let hasClef = false;
            if (this.isFirstOfLine ||
                this.bar.clef !== this.bar.previousBar.clef ||
                this.bar.clefOttava !== this.bar.previousBar.clefOttava) {
                let offset = 0;
                switch (this.bar.clef) {
                    case Clef.Neutral:
                        offset = this.bar.staff.standardNotationLineCount - 1;
                        break;
                    case Clef.F4:
                        offset = 2;
                        break;
                    case Clef.C3:
                        offset = 4;
                        break;
                    case Clef.C4:
                        offset = 2;
                        break;
                    case Clef.G2:
                        offset = 6;
                        break;
                }
                this.createStartSpacing();
                this.addPreBeatGlyph(new ClefGlyph(0, this.getScoreY(offset) + 0.5 * BarRendererBase.StaffLineThickness, this.bar.clef, this.bar.clefOttava));
                hasClef = true;
            }
            // Key signature
            if (hasClef ||
                (this.index === 0 && this.bar.keySignature !== KeySignature.C) ||
                (this.bar.previousBar && this.bar.keySignature !== this.bar.previousBar.keySignature)) {
                this.createStartSpacing();
                this.createKeySignatureGlyphs();
            }
            // Time Signature
            if (!this.bar.previousBar ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureNumerator !== this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureDenominator !==
                        this.bar.previousBar.masterBar.timeSignatureDenominator) ||
                (this.bar.previousBar &&
                    this.bar.masterBar.isFreeTime &&
                    this.bar.masterBar.isFreeTime !== this.bar.previousBar.masterBar.isFreeTime)) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
        }
        createKeySignatureGlyphs() {
            let offsetClef = 0;
            const currentKey = this.bar.keySignature;
            const previousKey = !this.bar.previousBar ? 0 : this.bar.previousBar.keySignature;
            switch (this.bar.clef) {
                case Clef.Neutral:
                    offsetClef = 0;
                    break;
                case Clef.G2:
                    offsetClef = 1;
                    break;
                case Clef.F4:
                    offsetClef = 3;
                    break;
                case Clef.C3:
                    offsetClef = 2;
                    break;
                case Clef.C4:
                    offsetClef = 0;
                    break;
            }
            const glyph = new KeySignatureGlyph();
            glyph.renderer = this;
            const newLines = new Map();
            const newGlyphs = [];
            // how many symbols do we need to get from a C-keysignature
            // to the new one
            // var offsetSymbols = (currentKey <= 7) ? currentKey : currentKey - 7;
            // a sharp keysignature
            if (ModelUtils.keySignatureIsSharp(currentKey)) {
                for (let i = 0; i < Math.abs(currentKey); i++) {
                    const step = ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
                    newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step), AccidentalType.Sharp, 1));
                    newLines.set(step, true);
                }
            }
            else {
                for (let i = 0; i < Math.abs(currentKey); i++) {
                    const step = ScoreBarRenderer.FlatKsSteps[i] + offsetClef;
                    newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step), AccidentalType.Flat, 1));
                    newLines.set(step, true);
                }
            }
            // naturalize previous key if naturalizing
            if (this.bar.keySignature === KeySignature.C) {
                const naturalizeSymbols = Math.abs(previousKey);
                const previousKeyPositions = ModelUtils.keySignatureIsSharp(previousKey)
                    ? ScoreBarRenderer.SharpKsSteps
                    : ScoreBarRenderer.FlatKsSteps;
                for (let i = 0; i < naturalizeSymbols; i++) {
                    const step = previousKeyPositions[i] + offsetClef;
                    if (!newLines.has(step)) {
                        glyph.addGlyph(new AccidentalGlyph(0, this.getScoreY(previousKeyPositions[i] + offsetClef), AccidentalType.Natural, 1));
                    }
                }
            }
            for (const newGlyph of newGlyphs) {
                glyph.addGlyph(newGlyph);
            }
            this.addPreBeatGlyph(glyph);
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5));
            const lines = this.bar.staff.standardNotationLineCount - 1;
            this.addPreBeatGlyph(new ScoreTimeSignatureGlyph(0, this.getScoreY(lines), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon, this.bar.masterBar.isFreeTime));
        }
        createVoiceGlyphs(v) {
            for (const b of v.beats) {
                const container = new ScoreBeatContainerGlyph(b, this.getVoiceContainer(v));
                container.preNotes = new ScoreBeatPreNotesGlyph();
                container.onNotes = new ScoreBeatGlyph();
                this.addBeatGlyph(container);
            }
        }
        getNoteLine(n) {
            return this.accidentalHelper.getNoteLine(n);
        }
        completeBeamingHelper(helper) {
            // for multi-voice bars we need to register the positions
            // for multi-voice rest displacement to avoid collisions
            if (this.bar.isMultiVoice && helper.highestNoteInHelper && helper.lowestNoteInHelper) {
                let highestNotePosition = this.getNoteY(helper.highestNoteInHelper, NoteYPosition.Center);
                let lowestNotePosition = this.getNoteY(helper.lowestNoteInHelper, NoteYPosition.Center);
                let offset = this.getStemSize(helper);
                if (helper.hasTuplet) {
                    offset += this.resources.effectFont.size * 2;
                }
                if (helper.direction === BeamDirection.Up) {
                    highestNotePosition -= offset;
                }
                else {
                    lowestNotePosition += offset;
                }
                for (const beat of helper.beats) {
                    this.helpers.collisionHelper.reserveBeatSlot(beat, highestNotePosition, lowestNotePosition);
                }
            }
        }
        paintBeamingStem(beat, cy, x, topY, bottomY, canvas) {
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.StandardNotationStem, beat);
            try {
                canvas.lineWidth = BarRendererBase.StemWidth;
                canvas.beginPath();
                canvas.moveTo(x, topY);
                canvas.lineTo(x, bottomY);
                canvas.stroke();
                canvas.lineWidth = 1;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }
    ScoreBarRenderer.StaffId = 'score';
    ScoreBarRenderer.SharpKsSteps = [-1, 2, -2, 1, 4, 0, 3];
    ScoreBarRenderer.FlatKsSteps = [3, 0, 4, 1, 5, 2, 6];

    /**
     * This Factory produces ScoreBarRenderer instances
     */
    class ScoreBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return ScoreBarRenderer.StaffId;
        }
        getStaffPaddingTop(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingTop;
        }
        getStaffPaddingBottom(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingBottom;
        }
        create(renderer, bar) {
            return new ScoreBarRenderer(renderer, bar);
        }
        canCreate(track, staff) {
            return super.canCreate(track, staff) && staff.showStandardNotation;
        }
    }

    class TabSlideLineGlyph extends Glyph {
        constructor(inType, outType, startNote, parent) {
            super(0, 0);
            this._inType = inType;
            this._outType = outType;
            this._startNote = startNote;
            this._parent = parent;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            this.paintSlideIn(cx, cy, canvas);
            this.paintSlideOut(cx, cy, canvas);
        }
        paintSlideIn(cx, cy, canvas) {
            const startNoteRenderer = this.renderer;
            const sizeX = 12;
            const sizeY = 3;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            const offsetX = 2;
            switch (this._inType) {
                case SlideInType.IntoFromBelow:
                    endX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left) -
                            offsetX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    startX = endX - sizeX;
                    startY =
                        cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) +
                            sizeY;
                    break;
                case SlideInType.IntoFromAbove:
                    endX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left) -
                            offsetX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    startX = endX - sizeX;
                    startY =
                        cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) -
                            sizeY;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, false, startX, endX, startY, endY);
        }
        paintSlideOut(cx, cy, canvas) {
            const startNoteRenderer = this.renderer;
            const sizeX = 12;
            const sizeY = 3;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            let waves = false;
            const offsetX = 2;
            switch (this._outType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    if (this._startNote.slideTarget) {
                        const endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this._startNote.slideTarget.beat.voice.bar);
                        if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                            endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                            endY = startY;
                        }
                        else {
                            endX =
                                cx +
                                    endNoteRenderer.x +
                                    endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.OnNotes) -
                                    offsetX;
                            endY =
                                cy +
                                    endNoteRenderer.y +
                                    endNoteRenderer.getNoteY(this._startNote.slideTarget, NoteYPosition.Center);
                        }
                        if (this._startNote.slideTarget.fret > this._startNote.fret) {
                            startY += sizeY;
                            endY -= sizeY;
                        }
                        else {
                            startY -= sizeY;
                            endY += sizeY;
                        }
                    }
                    else {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    break;
                case SlideOutType.OutUp:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = startX + sizeX;
                    endY =
                        cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) -
                            sizeY;
                    break;
                case SlideOutType.OutDown:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = startX + sizeX;
                    endY =
                        cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) +
                            sizeY;
                    break;
                case SlideOutType.PickSlideDown:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    endY = startY + sizeY * 3;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                case SlideOutType.PickSlideUp:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) +
                            offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    endY = startY - sizeY * 3;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
        }
        paintSlideLine(canvas, waves, startX, endX, startY, endY) {
            if (waves) {
                const glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                startY -= glyph.height / 2;
                endY -= glyph.height / 2;
                const b = endX - startX;
                const a = endY - startY;
                const c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
                glyph.width = b;
                const angle = Math.asin(a / c) * (180 / Math.PI);
                canvas.beginRotate(startX, startY, angle);
                glyph.paint(0, 0, canvas);
                canvas.endRotate();
            }
            else {
                canvas.beginPath();
                canvas.moveTo(startX, startY);
                canvas.lineTo(endX, endY);
                canvas.stroke();
            }
        }
    }

    class TabTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(startNote.beat, endNote.beat, forEnd);
            this.startNote = startNote;
            this.endNote = endNote;
        }
        getTieHeight(startX, startY, endX, endY) {
            if (this.startNote === this.endNote) {
                return 15;
            }
            return super.getTieHeight(startX, startY, endX, endY);
        }
        getBeamDirection(beat, noteRenderer) {
            if (this.startNote === this.endNote) {
                return BeamDirection.Up;
            }
            return TabTieGlyph.getBeamDirectionForNote(this.startNote);
        }
        static getBeamDirectionForNote(note) {
            return note.string > 3 ? BeamDirection.Up : BeamDirection.Down;
        }
        getStartY() {
            if (this.startNote === this.endNote) {
                return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Center);
            }
            if (this.tieDirection === BeamDirection.Up) {
                return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Top);
            }
            return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Bottom);
        }
        getEndY() {
            return this.getStartY();
        }
        getStartX() {
            if (this.startNote === this.endNote) {
                return this.getEndX() - 20;
            }
            return this.startNoteRenderer.getNoteX(this.startNote, NoteXPosition.Center);
        }
        getEndX() {
            if (this.startNote === this.endNote) {
                return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Left);
            }
            return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Center);
        }
    }

    class TabSlurGlyph extends TabTieGlyph {
        constructor(startNote, endNote, forSlide, forEnd = false) {
            super(startNote, endNote, forEnd);
            this._direction = TabTieGlyph.getBeamDirectionForNote(startNote);
            this._forSlide = forSlide;
        }
        getTieHeight(startX, startY, endX, endY) {
            return Math.log(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
        }
        tryExpand(startNote, endNote, forSlide, forEnd) {
            // same type required
            if (this._forSlide !== forSlide) {
                return false;
            }
            if (this.forEnd !== forEnd) {
                return false;
            }
            // same start and endbeat
            if (this.startNote.beat.id !== startNote.beat.id) {
                return false;
            }
            if (this.endNote.beat.id !== endNote.beat.id) {
                return false;
            }
            // same draw direction
            if (this._direction !== TabTieGlyph.getBeamDirectionForNote(startNote)) {
                return false;
            }
            // if we can expand, expand in correct direction
            switch (this._direction) {
                case BeamDirection.Up:
                    if (startNote.realValue > this.startNote.realValue) {
                        this.startNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue > this.endNote.realValue) {
                        this.endNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
                case BeamDirection.Down:
                    if (startNote.realValue < this.startNote.realValue) {
                        this.startNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue < this.endNote.realValue) {
                        this.endNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
            }
            return true;
        }
        paint(cx, cy, canvas) {
            const startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this.startBeat.voice.bar);
            const direction = this.getBeamDirection(this.startBeat, startNoteRenderer);
            const slurId = `tab.slur.${this.startNote.beat.id}.${this.endNote.beat.id}.${direction}`;
            const renderer = this.renderer;
            const isSlurRendered = renderer.staff.getSharedLayoutData(slurId, false);
            if (!isSlurRendered) {
                renderer.staff.setSharedLayoutData(slurId, true);
                super.paint(cx, cy, canvas);
            }
        }
    }

    class TabBeatContainerGlyph extends BeatContainerGlyph {
        constructor() {
            super(...arguments);
            this._bend = null;
            this._effectSlurs = [];
        }
        drawBeamHelperAsFlags(helper) {
            return helper.hasFlag(this.renderer.drawBeamHelperAsFlags(helper), this.beat);
        }
        doLayout() {
            this._effectSlurs = [];
            super.doLayout();
            if (this._bend) {
                this._bend.renderer = this.renderer;
                this._bend.doLayout();
                this.updateWidth();
            }
        }
        createTies(n) {
            if (!n.isVisible) {
                return;
            }
            const renderer = this.renderer;
            if (n.isTieOrigin && renderer.showTiedNotes && n.tieDestination.isVisible) {
                const tie = new TabTieGlyph(n, n.tieDestination, false);
                this.addTie(tie);
            }
            if (n.isTieDestination && renderer.showTiedNotes) {
                const tie = new TabTieGlyph(n.tieOrigin, n, true);
                this.addTie(tie);
            }
            if (n.isLeftHandTapped && !n.isHammerPullDestination) {
                const tapSlur = new TabTieGlyph(n, n, false);
                this.addTie(tapSlur);
            }
            // start effect slur on first beat
            if (n.isEffectSlurOrigin && n.effectSlurDestination) {
                let expanded = false;
                for (const slur of this._effectSlurs) {
                    if (slur.tryExpand(n, n.effectSlurDestination, false, false)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    const effectSlur = new TabSlurGlyph(n, n.effectSlurDestination, false, false);
                    this._effectSlurs.push(effectSlur);
                    this.addTie(effectSlur);
                }
            }
            // end effect slur on last beat
            if (n.isEffectSlurDestination && n.effectSlurOrigin) {
                let expanded = false;
                for (const slur of this._effectSlurs) {
                    if (slur.tryExpand(n.effectSlurOrigin, n, false, true)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    const effectSlur = new TabSlurGlyph(n.effectSlurOrigin, n, false, true);
                    this._effectSlurs.push(effectSlur);
                    this.addTie(effectSlur);
                }
            }
            if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
                const l = new TabSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
                this.addTie(l);
            }
            if (n.hasBend) {
                if (!this._bend) {
                    const bend = new TabBendGlyph();
                    this._bend = bend;
                    bend.renderer = this.renderer;
                    this.addTie(bend);
                }
                this._bend.addBends(n);
            }
        }
    }

    class NoteNumberGlyph extends Glyph {
        constructor(x, y, note) {
            super(x, y);
            this._noteString = null;
            this._trillNoteString = null;
            this._trillNoteStringWidth = 0;
            this.isEmpty = false;
            this.noteStringWidth = 0;
            this._note = note;
        }
        doLayout() {
            const n = this._note;
            let fret = n.fret - n.beat.voice.bar.staff.transpositionPitch;
            if (n.harmonicType === HarmonicType.Natural && n.harmonicValue !== 0) {
                fret = n.harmonicValue - n.beat.voice.bar.staff.transpositionPitch;
            }
            if (!n.isTieDestination) {
                this._noteString = n.isDead ? 'x' : fret.toString();
                if (n.isGhost) {
                    this._noteString = `(${this._noteString})`;
                }
                else if (n.harmonicType === HarmonicType.Natural) {
                    // only first decimal char
                    const i = this._noteString.indexOf(String.fromCharCode(46));
                    if (i >= 0) {
                        this._noteString = this._noteString.substr(0, i + 2);
                    }
                    this._noteString = `<${this._noteString}>`;
                }
            }
            else if ((n.beat.index === 0 && this.renderer.settings.notation.notationMode === exports.NotationMode.GuitarPro) ||
                ((n.bendType === BendType.Bend || n.bendType === BendType.BendRelease) &&
                    this.renderer.settings.notation.isNotationElementVisible(exports.NotationElement.TabNotesOnTiedBends))) {
                this._noteString = `(${(n.tieOrigin.fret - n.beat.voice.bar.staff.transpositionPitch).toString()})`;
            }
            else {
                this._noteString = '';
            }
            if (n.isTrill) {
                this._trillNoteString = `(${(n.trillFret - n.beat.voice.bar.staff.transpositionPitch).toString()})`;
            }
            else if (!ModelUtils.isAlmostEqualTo(n.harmonicValue, 0)) {
                switch (n.harmonicType) {
                    case HarmonicType.Artificial:
                    case HarmonicType.Pinch:
                    case HarmonicType.Tap:
                    case HarmonicType.Semi:
                    case HarmonicType.Feedback:
                        let s = (fret + n.harmonicValue).toString();
                        // only first decimal char
                        const i = s.indexOf(String.fromCharCode(46));
                        if (i >= 0) {
                            s = s.substr(0, i + 2);
                        }
                        this._trillNoteString = `<${s}>`;
                        break;
                    default:
                        this._trillNoteString = '';
                        break;
                }
            }
            else {
                this._trillNoteString = '';
            }
            this.isEmpty = !this._noteString;
            if (!this.isEmpty) {
                this.renderer.scoreRenderer.canvas.font = this.renderer.resources.tablatureFont;
                this.noteStringWidth = this.renderer.scoreRenderer.canvas.measureText(this._noteString).width;
                this.width = this.noteStringWidth;
                this.height = this.renderer.scoreRenderer.canvas.font.size;
                const hasTrill = !!this._trillNoteString;
                if (hasTrill) {
                    this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
                    this._trillNoteStringWidth =
                        3 + this.renderer.scoreRenderer.canvas.measureText(this._trillNoteString).width;
                    this.width += this._trillNoteStringWidth;
                }
            }
        }
        paint(cx, cy, canvas) {
            if (this.isEmpty) {
                return;
            }
            const textWidth = this.noteStringWidth + this._trillNoteStringWidth;
            const x = cx + this.x + (this.width - textWidth) / 2;
            this.paintTrill(x, cy, canvas);
            const _ = ElementStyleHelper.note(canvas, NoteSubElement.GuitarTabFretNumber, this._note);
            try {
                canvas.fillText(this._noteString, x, cy + this.y);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        paintTrill(x, cy, canvas) {
            const _ = ElementStyleHelper.note(canvas, NoteSubElement.GuitarTabFretNumber, this._note);
            try {
                const prevFont = this.renderer.scoreRenderer.canvas.font;
                this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
                canvas.fillText(this._trillNoteString, x + this.noteStringWidth + 3, cy + this.y);
                this.renderer.scoreRenderer.canvas.font = prevFont;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            const noteBounds = new NoteBounds();
            noteBounds.note = this._note;
            noteBounds.noteHeadBounds = new Bounds();
            noteBounds.noteHeadBounds.x = cx + this.x;
            noteBounds.noteHeadBounds.y = cy + this.y - this.height / 2;
            noteBounds.noteHeadBounds.w = this.width;
            noteBounds.noteHeadBounds.h = this.height;
            beatBounds.addNote(noteBounds);
        }
    }

    class TabNoteChordGlyph extends Glyph {
        constructor(x, y, isGrace) {
            super(x, y);
            this._notes = [];
            this._deadSlapped = null;
            this.minStringNote = null;
            this.beatEffects = new Map();
            this.notesPerString = new Map();
            this.noteStringWidth = 0;
            this._isGrace = isGrace;
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            for (const note of this._notes) {
                note.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
            }
        }
        getNoteX(note, requestedPosition) {
            if (this.notesPerString.has(note.string)) {
                const n = this.notesPerString.get(note.string);
                let pos = this.x + n.x;
                switch (requestedPosition) {
                    case NoteXPosition.Left:
                        break;
                    case NoteXPosition.Center:
                        pos += n.noteStringWidth / 2;
                        break;
                    case NoteXPosition.Right:
                        pos += n.width;
                        break;
                }
                return pos;
            }
            return 0;
        }
        getNoteY(note, requestedPosition) {
            if (this.notesPerString.has(note.string)) {
                const n = this.notesPerString.get(note.string);
                let pos = this.y + n.y;
                switch (requestedPosition) {
                    case NoteYPosition.Top:
                    case NoteYPosition.TopWithStem:
                        pos -= n.height / 2 + 2;
                        break;
                    case NoteYPosition.Center:
                        break;
                    case NoteYPosition.Bottom:
                    case NoteYPosition.BottomWithStem:
                        pos += n.height / 2;
                        break;
                }
                return pos;
            }
            return 0;
        }
        doLayout() {
            let w = 0;
            if (this.beat.deadSlapped) {
                this._deadSlapped = new DeadSlappedBeatGlyph();
                this._deadSlapped.renderer = this.renderer;
                this._deadSlapped.doLayout();
                w = this._deadSlapped.width;
                this.noteStringWidth = w;
            }
            else {
                let noteStringWidth = 0;
                for (let i = 0, j = this._notes.length; i < j; i++) {
                    const g = this._notes[i];
                    g.renderer = this.renderer;
                    g.doLayout();
                    if (g.width > w) {
                        w = g.width;
                    }
                    if (g.noteStringWidth > noteStringWidth) {
                        noteStringWidth = g.noteStringWidth;
                    }
                }
                this.noteStringWidth = noteStringWidth;
                const tabHeight = this.renderer.resources.tablatureFont.size;
                let effectY = this.getNoteY(this.minStringNote, NoteYPosition.Center) + tabHeight / 2;
                // TODO: take care of actual glyph height
                const effectSpacing = 7;
                for (const g of this.beatEffects.values()) {
                    g.y += effectY;
                    g.x += this.width / 2;
                    g.renderer = this.renderer;
                    effectY += effectSpacing;
                    g.doLayout();
                }
            }
            this.width = w;
        }
        addNoteGlyph(noteGlyph, note) {
            this._notes.push(noteGlyph);
            this.notesPerString.set(note.string, noteGlyph);
            if (!this.minStringNote || note.string < this.minStringNote.string) {
                this.minStringNote = note;
            }
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            if (this.beat.deadSlapped) {
                this._deadSlapped?.paint(cx, cy, canvas);
            }
            else {
                const res = this.renderer.resources;
                const oldBaseLine = canvas.textBaseline;
                canvas.textBaseline = TextBaseline.Middle;
                canvas.font = this._isGrace ? res.graceFont : res.tablatureFont;
                const notes = this._notes;
                const w = this.width;
                for (const g of notes) {
                    g.renderer = this.renderer;
                    g.width = w;
                    g.paint(cx, cy, canvas);
                }
                canvas.textBaseline = oldBaseLine;
                const _ = ElementStyleHelper.beat(canvas, BeatSubElement.GuitarTabEffects, this.beat);
                try {
                    for (const g of this.beatEffects.values()) {
                        g.paint(cx, cy, canvas);
                    }
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
                this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
            }
        }
    }

    class TabRestGlyph extends MusicFontGlyph {
        constructor(x, y, isVisibleRest, duration) {
            super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
            this._isVisibleRest = isVisibleRest;
        }
        doLayout() {
            super.doLayout();
            if (!this._isVisibleRest) {
                this.width = 10;
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
                this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
            }
        }
        paint(cx, cy, canvas) {
            if (this._isVisibleRest) {
                const _ = ElementStyleHelper.beat(canvas, BeatSubElement.GuitarTabRests, this.beat);
                try {
                    super.paint(cx, cy, canvas);
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
    }

    class TabBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this.slash = null;
            this.noteNumbers = null;
            this.restGlyph = null;
        }
        get effectElement() {
            return BeatSubElement.GuitarTabEffects;
        }
        getNoteX(note, requestedPosition) {
            return this.noteNumbers ? this.noteNumbers.getNoteX(note, requestedPosition) : 0;
        }
        getNoteY(note, requestedPosition) {
            return this.noteNumbers ? this.noteNumbers.getNoteY(note, requestedPosition) : 0;
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            if (this.noteNumbers) {
                this.noteNumbers.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
            }
        }
        doLayout() {
            const tabRenderer = this.renderer;
            if (!this.container.beat.isRest) {
                //
                // Note numbers
                const isGrace = this.renderer.settings.notation.smallGraceTabNotes && this.container.beat.graceType !== GraceType.None;
                let beatEffects;
                if (this.container.beat.slashed && !this.container.beat.notes.some(x => x.isTieDestination)) {
                    const line = Math.floor((this.renderer.bar.staff.tuning.length - 1) / 2);
                    const slashY = tabRenderer.getLineY(line);
                    const slashNoteHead = new SlashNoteHeadGlyph(0, slashY, this.container.beat.duration, isGrace, this.container.beat);
                    slashNoteHead.noteHeadElement = NoteSubElement.GuitarTabFretNumber;
                    slashNoteHead.effectElement = BeatSubElement.GuitarTabEffects;
                    this.slash = slashNoteHead;
                    slashNoteHead.beat = this.container.beat;
                    slashNoteHead.beamingHelper = this.beamingHelper;
                    this.addNormal(slashNoteHead);
                    beatEffects = slashNoteHead.beatEffects;
                }
                else {
                    const tabNoteNumbers = new TabNoteChordGlyph(0, 0, isGrace);
                    this.noteNumbers = tabNoteNumbers;
                    tabNoteNumbers.beat = this.container.beat;
                    tabNoteNumbers.beamingHelper = this.beamingHelper;
                    for (const note of this.container.beat.notes) {
                        if (note.isVisible) {
                            this.createNoteGlyph(note);
                        }
                    }
                    this.addNormal(tabNoteNumbers);
                    beatEffects = tabNoteNumbers.beatEffects;
                }
                //
                // Whammy Bar
                if (this.container.beat.hasWhammyBar) {
                    const whammy = new TabWhammyBarGlyph(this.container.beat);
                    whammy.renderer = this.renderer;
                    whammy.doLayout();
                    this.container.ties.push(whammy);
                }
                //
                // Tremolo Picking
                if (this.container.beat.isTremolo && !beatEffects.has('tremolo')) {
                    let offset = 0;
                    const speed = this.container.beat.tremoloSpeed;
                    let tremoloX = 5;
                    switch (speed) {
                        case Duration.ThirtySecond:
                            offset = 10;
                            break;
                        case Duration.Sixteenth:
                            offset = 5;
                            break;
                        case Duration.Eighth:
                            offset = 0;
                            break;
                    }
                    if (this.container.beat.duration < Duration.Half) {
                        tremoloX = 0;
                    }
                    beatEffects.set('tremolo', new TremoloPickingGlyph(tremoloX, offset, speed));
                }
                //
                // Note dots
                //
                if (this.container.beat.dots > 0 && tabRenderer.rhythmMode !== exports.TabRhythmMode.Hidden) {
                    this.addNormal(new SpacingGlyph(0, 0, 5));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        this.addEffect(new CircleGlyph(0, tabRenderer.lineOffset * tabRenderer.bar.staff.tuning.length +
                            tabRenderer.settings.notation.rhythmHeight, 1.5));
                    }
                }
            }
            else {
                const line = Math.floor((this.renderer.bar.staff.tuning.length - 1) / 2);
                const y = tabRenderer.getTabY(line);
                const restGlyph = new TabRestGlyph(0, y, tabRenderer.showRests, this.container.beat.duration);
                this.restGlyph = restGlyph;
                restGlyph.beat = this.container.beat;
                restGlyph.beamingHelper = this.beamingHelper;
                this.addNormal(restGlyph);
                //
                // Note dots
                //
                if (this.container.beat.dots > 0 && tabRenderer.showRests) {
                    this.addNormal(new SpacingGlyph(0, 0, 5));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        this.addEffect(new CircleGlyph(0, y, 1.5));
                    }
                }
            }
            // left to right layout
            if (this.isEmpty) {
                return;
            }
            let w = 0;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                const g = this.glyphs[i];
                g.x = w;
                g.renderer = this.renderer;
                g.doLayout();
                w += g.width;
            }
            this.width = w;
            this.computedWidth = w;
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.restGlyph) {
                this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
            }
            else if (this.noteNumbers) {
                this.centerX = this.noteNumbers.x + this.noteNumbers.noteStringWidth / 2;
            }
            else if (this.slash) {
                this.centerX = this.slash.x + this.slash.width / 2;
            }
        }
        updateBeamingHelper() {
            if (this.noteNumbers) {
                this.noteNumbers.updateBeamingHelper(this.container.x + this.x);
            }
            else if (this.restGlyph) {
                this.restGlyph.updateBeamingHelper(this.container.x + this.x);
            }
            else if (this.slash) {
                this.slash.updateBeamingHelper(this.container.x + this.x);
            }
        }
        createNoteGlyph(n) {
            const tr = this.renderer;
            const noteNumberGlyph = new NoteNumberGlyph(0, 0, n);
            const l = n.beat.voice.bar.staff.tuning.length - n.string;
            noteNumberGlyph.y = tr.getTabY(l);
            noteNumberGlyph.renderer = this.renderer;
            noteNumberGlyph.doLayout();
            this.noteNumbers.addNoteGlyph(noteNumberGlyph, n);
            const topY = noteNumberGlyph.y - noteNumberGlyph.height / 2;
            const bottomY = topY + noteNumberGlyph.height;
            this.renderer.helpers.collisionHelper.reserveBeatSlot(this.container.beat, topY, bottomY);
        }
    }

    class TabBrushGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._beat = beat;
        }
        doLayout() {
            this.width = 10;
        }
        paint(cx, cy, canvas) {
            const tabBarRenderer = this.renderer;
            const startY = cy + this.x + tabBarRenderer.getNoteY(this._beat.maxStringNote, NoteYPosition.Top);
            const endY = cy + this.y + tabBarRenderer.getNoteY(this._beat.minStringNote, NoteYPosition.Bottom);
            const arrowX = (cx + this.x + this.width / 2) | 0;
            const arrowSize = 8;
            if (this._beat.brushType !== BrushType.None) {
                if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.BrushDown) {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX, endY);
                    canvas.stroke();
                }
                else if (this._beat.brushType === BrushType.ArpeggioUp) {
                    const glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    const lineStartY = startY;
                    const lineEndY = endY - arrowSize;
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    canvas.beginRotate(cx + this.x + 4, lineEndY, -90);
                    glyph.paint(0, -glyph.height / 2, canvas);
                    canvas.endRotate();
                }
                else if (this._beat.brushType === BrushType.ArpeggioDown) {
                    const glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    const lineStartY = startY + arrowSize;
                    const lineEndY = endY;
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    canvas.beginRotate(cx + this.x + 4, lineStartY, 90);
                    glyph.paint(0, -glyph.height / 2, canvas);
                    canvas.endRotate();
                }
                if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.ArpeggioUp) {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, endY);
                    canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
                else {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
            }
        }
    }

    class TabBeatPreNotesGlyph extends BeatGlyphBase {
        doLayout() {
            if (this.container.beat.brushType !== BrushType.None && !this.container.beat.isRest) {
                this.addEffect(new TabBrushGlyph(this.container.beat));
                this.addNormal(new SpacingGlyph(0, 0, 4));
            }
            super.doLayout();
        }
        get effectElement() {
            return BeatSubElement.GuitarTabEffects;
        }
    }

    class TabClefGlyph extends Glyph {
        doLayout() {
            this.width = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.SixStringTabClef);
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, BarSubElement.GuitarTabsClef, this.renderer.bar);
            try {
                const strings = this.renderer.bar.staff.tuning.length;
                const symbol = strings <= 4 ? MusicFontSymbol.FourStringTabClef : MusicFontSymbol.SixStringTabClef;
                const scale = strings <= 4 ? strings / 4.5 : strings / 6.5;
                canvas.fillMusicFontSymbol(cx + this.x + 5, cy + this.y, scale, symbol, false);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    class TabTimeSignatureGlyph extends TimeSignatureGlyph {
        doLayout() {
            this.barSubElement = BarSubElement.GuitarTabsTimeSignature;
            super.doLayout();
        }
        get commonScale() {
            return 1;
        }
        get numberScale() {
            const renderer = this.renderer;
            if (renderer.bar.staff.tuning.length <= 4) {
                return NoteHeadGlyph.GraceScale;
            }
            return 1;
        }
    }

    /**
     * This BarRenderer renders a bar using guitar tablature notation
     */
    class TabBarRenderer extends LineBarRenderer {
        get showMultiBarRest() {
            return this._showMultiBarRest;
        }
        get repeatsBarSubElement() {
            return BarSubElement.GuitarTabsRepeats;
        }
        get barNumberBarSubElement() {
            return BarSubElement.GuitarTabsBarNumber;
        }
        get barLineBarSubElement() {
            return BarSubElement.GuitarTabsBarLines;
        }
        get staffLineBarSubElement() {
            return BarSubElement.GuitarTabsStaffLine;
        }
        constructor(renderer, bar) {
            super(renderer, bar);
            this._hasTuplets = false;
            this.showTimeSignature = false;
            this.showRests = false;
            this.showTiedNotes = false;
            this._showMultiBarRest = false;
            if (!bar.staff.showStandardNotation) {
                this.showTimeSignature = true;
                this.showRests = true;
                this.showTiedNotes = true;
                this._showMultiBarRest = true;
            }
        }
        get lineSpacing() {
            return TabBarRenderer.TabLineSpacing;
        }
        get heightLineCount() {
            return this.bar.staff.tuning.length;
        }
        get drawnLineCount() {
            return this.bar.staff.tuning.length;
        }
        get rhythmMode() {
            let mode = this.settings.notation.rhythmMode;
            if (mode === exports.TabRhythmMode.Automatic) {
                mode = this.bar.staff.showStandardNotation ? exports.TabRhythmMode.Hidden : exports.TabRhythmMode.ShowWithBars;
            }
            return mode;
        }
        /**
         * Gets the relative y position of the given steps relative to first line.
         * @param line the line of the particular string where 0 is the most top line
         * @param correction
         * @returns
         */
        getTabY(line) {
            return super.getLineY(line);
        }
        getTabHeight(line) {
            return super.getLineHeight(line);
        }
        collectSpaces(spaces) {
            const padding = 1;
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    const vc = this.getVoiceContainer(voice);
                    for (const bg of vc.beatGlyphs) {
                        const notes = bg.onNotes;
                        const noteNumbers = notes.noteNumbers;
                        if (noteNumbers) {
                            for (const [str, noteNumber] of noteNumbers.notesPerString) {
                                if (!noteNumber.isEmpty) {
                                    spaces[this.bar.staff.tuning.length - str].push(new Float32Array([
                                        vc.x + bg.x + notes.x + noteNumbers.x,
                                        noteNumbers.width + padding
                                    ]));
                                }
                            }
                        }
                    }
                }
            }
        }
        adjustSizes() {
            if (this.rhythmMode !== exports.TabRhythmMode.Hidden) {
                this.height += this.settings.notation.rhythmHeight;
                this.bottomPadding += this.settings.notation.rhythmHeight;
            }
        }
        doLayout() {
            super.doLayout();
            if (this.rhythmMode !== exports.TabRhythmMode.Hidden) {
                this._hasTuplets = false;
                for (const voice of this.bar.voices) {
                    if (this.hasVoiceContainer(voice)) {
                        const c = this.getVoiceContainer(voice);
                        if (c.tupletGroups.length > 0) {
                            this._hasTuplets = true;
                            break;
                        }
                    }
                }
                if (this._hasTuplets) {
                    this.registerOverflowBottom(this.tupletSize);
                }
            }
        }
        createLinePreBeatGlyphs() {
            // Clef
            if (this.isFirstOfLine) {
                const center = (this.bar.staff.tuning.length - 1) / 2;
                this.addPreBeatGlyph(new TabClefGlyph(5, this.getTabY(center)));
            }
            // Time Signature
            if (this.showTimeSignature &&
                (!this.bar.previousBar ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureNumerator !==
                            this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureDenominator !==
                            this.bar.previousBar.masterBar.timeSignatureDenominator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.isFreeTime &&
                        this.bar.masterBar.isFreeTime !== this.bar.previousBar.masterBar.isFreeTime))) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5));
            const lines = (this.bar.staff.tuning.length + 1) / 2 - 1;
            this.addPreBeatGlyph(new TabTimeSignatureGlyph(0, this.getTabY(lines), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon, this.bar.masterBar.isFreeTime));
        }
        createVoiceGlyphs(v) {
            // multibar rest
            if (this.additionalMultiRestBars) {
                const container = new MultiBarRestBeatContainerGlyph(this.getVoiceContainer(v));
                this.addBeatGlyph(container);
            }
            else {
                for (const b of v.beats) {
                    const container = new TabBeatContainerGlyph(b, this.getVoiceContainer(v));
                    container.preNotes = new TabBeatPreNotesGlyph();
                    container.onNotes = new TabBeatGlyph();
                    this.addBeatGlyph(container);
                }
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            if (this.rhythmMode !== exports.TabRhythmMode.Hidden) {
                this.paintBeams(cx, cy, canvas, BeatSubElement.GuitarTabFlags, BeatSubElement.GuitarTabBeams);
                this.paintTuplets(cx, cy, canvas, BeatSubElement.GuitarTabTuplet);
            }
        }
        drawBeamHelperAsFlags(h) {
            return super.drawBeamHelperAsFlags(h) || this.rhythmMode === exports.TabRhythmMode.ShowWithBeams;
        }
        getFlagTopY(beat, _direction) {
            const startGlyph = this.getOnNotesGlyphForBeat(beat);
            if (!startGlyph.noteNumbers || beat.duration === Duration.Half) {
                return this.height - this.settings.notation.rhythmHeight - this.tupletSize;
            }
            return startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, NoteYPosition.Bottom);
        }
        getFlagBottomY(_beat, _direction) {
            return this.getFlagAndBarPos();
        }
        getFlagStemSize(duration, forceMinStem = false) {
            return 0; // fixed size via getFlagBottomY
        }
        getBarLineStart(beat, direction) {
            const startGlyph = this.getOnNotesGlyphForBeat(beat);
            if (!startGlyph.noteNumbers || beat.duration === Duration.Half) {
                return this.height - this.settings.notation.rhythmHeight - this.tupletSize;
            }
            return (startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, NoteYPosition.Bottom) +
                this.lineOffset / 2);
        }
        getBeamDirection(_helper) {
            return BeamDirection.Down;
        }
        getFlagAndBarPos() {
            return this.height - (this._hasTuplets ? this.tupletSize / 2 : 0);
        }
        calculateBeamYWithDirection(_h, _x, _direction) {
            // currently only used for duplets
            return this.getFlagAndBarPos();
        }
        shouldPaintFlag(beat, h) {
            if (!super.shouldPaintFlag(beat, h)) {
                return false;
            }
            if (beat.graceType !== GraceType.None) {
                return false;
            }
            return this.drawBeamHelperAsFlags(h);
        }
        paintBeamingStem(beat, cy, x, topY, bottomY, canvas) {
            if (bottomY < topY) {
                const t = bottomY;
                bottomY = topY;
                topY = t;
            }
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.GuitarTabStem, beat);
            try {
                canvas.lineWidth = BarRendererBase.StemWidth;
                canvas.beginPath();
                let holes = [];
                if (this.helpers.collisionHelper.reservedLayoutAreasByDisplayTime.has(beat.displayStart)) {
                    holes = this.helpers.collisionHelper.reservedLayoutAreasByDisplayTime.get(beat.displayStart).slots.slice();
                    holes.sort((a, b) => a.topY - b.topY);
                }
                let y = bottomY;
                while (y > topY) {
                    canvas.moveTo(x, y);
                    let lineY = topY;
                    // draw until next hole (if hole reaches into line)
                    if (holes.length > 0 && holes[holes.length - 1].bottomY > lineY) {
                        const bottomHole = holes.pop();
                        lineY = cy + bottomHole.bottomY;
                        canvas.lineTo(x, lineY);
                        y = cy + bottomHole.topY;
                    }
                    else {
                        canvas.lineTo(x, lineY);
                        break;
                    }
                }
                canvas.stroke();
                canvas.lineWidth = 1;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }
    TabBarRenderer.StaffId = 'tab';
    TabBarRenderer.TabLineSpacing = 10;

    /**
     * This Factory produces TabBarRenderer instances
     */
    class TabBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return TabBarRenderer.StaffId;
        }
        getStaffPaddingTop(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingTop;
        }
        getStaffPaddingBottom(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingBottom;
        }
        constructor() {
            super();
            this.showTimeSignature = null;
            this.showRests = null;
            this.showTiedNotes = null;
            this.hideOnPercussionTrack = true;
        }
        canCreate(track, staff) {
            return staff.showTablature && staff.tuning.length > 0 && super.canCreate(track, staff);
        }
        create(renderer, bar) {
            const tabBarRenderer = new TabBarRenderer(renderer, bar);
            if (this.showRests !== null) {
                tabBarRenderer.showRests = this.showRests;
            }
            if (this.showTimeSignature !== null) {
                tabBarRenderer.showTimeSignature = this.showTimeSignature;
            }
            if (this.showTiedNotes !== null) {
                tabBarRenderer.showTiedNotes = this.showTiedNotes;
            }
            return tabBarRenderer;
        }
    }

    class LeftHandTapGlyph extends EffectGlyph {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            super.doLayout();
            const font = this.renderer.resources.effectFont;
            this.height = font.size + LeftHandTapGlyph.Padding;
        }
        paint(cx, cy, canvas) {
            const res = this.renderer.resources;
            canvas.font = res.effectFont;
            const old = canvas.textAlign;
            canvas.textAlign = TextAlign.Center;
            canvas.fillText('T', cx + this.x, cy + this.y + canvas.font.size / 2);
            canvas.textAlign = old;
            canvas.strokeCircle(cx + this.x, cy + this.y + canvas.font.size / 2 + (LeftHandTapGlyph.Padding - 1), canvas.font.size / 1.6);
        }
    }
    LeftHandTapGlyph.Padding = 4;

    class LeftHandTapEffectInfo extends NoteEffectInfoBase {
        get notationElement() {
            return exports.NotationElement.EffectTap;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyphForNote(note) {
            return note.isLeftHandTapped;
        }
        createNewGlyph(renderer, beat) {
            return new LeftHandTapGlyph();
        }
    }

    class DrawObject {
        constructor() {
            this.noteRange = 1;
            this.x = 0;
            this.y = 0;
        }
    }
    var FrameType;
    (function (FrameType) {
        FrameType[FrameType["None"] = 0] = "None";
        FrameType[FrameType["Rectangle"] = 1] = "Rectangle";
        FrameType[FrameType["Ellipse"] = 2] = "Ellipse";
        FrameType[FrameType["Circle"] = 3] = "Circle";
    })(FrameType || (FrameType = {}));
    class TextDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.align = TextAlign.Left;
            this.frame = FrameType.None;
            this.text = '';
            this.fontFace = '';
            this.weight = 0;
            this.height = 0;
        }
    }
    class GuitarDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.chord = new Chord();
        }
    }
    class SlurDrawObject extends DrawObject {
    }
    class WavyLineDrawObject extends DrawObject {
    }
    class TupletBracketDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.number = 0;
        }
    }
    class WedgeDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.decrescendo = false;
        }
    }
    class VoltaDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.allNumbers = false;
            this.firstNumber = 0;
            this.lastNumber = 0;
        }
    }
    class OctaveClefDrawObject extends DrawObject {
        constructor() {
            super(...arguments);
            this.octave = 1;
        }
    }
    class TrillDrawObject extends DrawObject {
    }
    class StaffLayout {
        constructor() {
            this.defaultClef = Clef.G2;
            this.description = '';
            this.percussion = false;
            this.instrument = 0;
            this.volume = 0;
            this.transpose = 0;
            this.index = 0;
        }
    }
    class Bracket {
        constructor() {
            this.from = 0;
            this.to = 0;
            this.curly = false;
        }
    }
    class CapellaVoiceState {
        constructor() {
            this.currentBarIndex = -1;
            this.currentBarComplete = true;
            this.currentBarDuration = 0;
            this.currentPosition = 0;
            this.voiceStemDir = null;
            this.repeatCount = 0;
            this.repeatEnd = null;
        }
    }
    class CapellaParser {
        constructor() {
            this._trackChannel = 0;
            this._beamingMode = BeatBeamingMode.Auto;
            this._isFirstSystem = true;
            this._staffLookup = new Map();
            this._brackets = [];
            this._staffLayoutLookup = new Map();
            this._staffLayouts = [];
            this._timeSignature = new MasterBar();
            this._voiceStates = new Map();
        }
        parseXml(xml, settings) {
            this._galleryObjects = new Map();
            this._tieStarts = [];
            this._tieStartIds = new Map();
            this._voiceCounts = new Map();
            this._slurs = new Map();
            this._crescendo = new Map();
            this._isFirstSystem = true;
            const dom = new XmlDocument();
            try {
                dom.parse(xml);
            }
            catch (e) {
                throw new UnsupportedFormatError('Could not parse XML', e);
            }
            this.parseDom(dom);
            this.consolidate();
            this.score.finish(settings);
        }
        consolidate() {
            ModelUtils.consolidate(this.score);
            CapellaParser.applyEffectRange(this._slurs, (_, beat) => {
                beat.isLegatoOrigin = true;
            });
            CapellaParser.applyEffectRange(this._crescendo, (cre, beat) => {
                beat.crescendo = cre.decrescendo ? CrescendoType.Decrescendo : CrescendoType.Crescendo;
            });
        }
        static applyEffectRange(effects, applyEffect) {
            for (const [startBeat, effect] of effects) {
                const noteRange = effect.noteRange;
                let endBeat = startBeat;
                for (let i = 0; i < noteRange; i++) {
                    applyEffect(effect, endBeat);
                    // advance to next
                    if (endBeat.index + 1 < endBeat.voice.beats.length) {
                        endBeat = endBeat.voice.beats[endBeat.index + 1];
                    }
                    else if (endBeat.voice.bar.index + 1 < endBeat.voice.bar.staff.bars.length) {
                        const nextBar = endBeat.voice.bar.staff.bars[endBeat.voice.bar.index + 1];
                        endBeat = nextBar.voices[endBeat.voice.index].beats[0];
                    }
                    else {
                        break;
                    }
                }
            }
        }
        parseDom(dom) {
            const root = dom.firstElement;
            if (!root) {
                throw new UnsupportedFormatError('No valid XML');
            }
            if (root.localName === 'score') {
                this.score = new Score();
                this.score.tempo = 120;
                // parse all children
                for (const n of root.childElements()) {
                    switch (n.localName) {
                        case 'info':
                            this.parseInfo(n);
                            break;
                        case 'layout':
                            this.parseLayout(n);
                            break;
                        case 'gallery':
                            this.parseGallery(n);
                            break;
                        case 'pageObjects':
                            this.parsePageObjects(n);
                            break;
                        // barCount ignored
                        case 'systems':
                            this.parseSystems(n);
                            break;
                    }
                }
            }
            else {
                throw new UnsupportedFormatError('Root node of XML was not "score"');
            }
        }
        parseLayout(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'staves':
                        this.parseLayoutStaves(c);
                        break;
                    case 'brackets':
                        this.parseBrackets(c);
                        break;
                }
            }
            // after the layout is parsed we can build up the
            // track > staff structure for later use
            // curly brackets define which staves go together into a track
            const curlyBrackets = this._brackets.filter(b => !!b.curly);
            curlyBrackets.sort((a, b) => a.from - b.from);
            let currentBracketIndex = 0;
            let currentTrack = null;
            for (let i = 0; i < this._staffLayouts.length; i++) {
                const staffLayout = this._staffLayouts[i];
                // advance to next bracket according to the staff index
                while (currentBracketIndex < curlyBrackets.length && i > curlyBrackets[currentBracketIndex].to) {
                    currentBracketIndex++;
                }
                if (currentTrack &&
                    currentBracketIndex < curlyBrackets.length &&
                    i > curlyBrackets[currentBracketIndex].from &&
                    i <= curlyBrackets[currentBracketIndex].to) {
                    // if we still fit into the current bracket, we just add another staff to the
                    // track
                    currentTrack.ensureStaveCount(currentTrack.staves.length + 1);
                }
                else {
                    currentTrack = new Track();
                    currentTrack.ensureStaveCount(1);
                    currentTrack.name = staffLayout.description;
                    currentTrack.playbackInfo.volume = Math.floor((staffLayout.volume / 128) * 16);
                    currentTrack.playbackInfo.program = staffLayout.instrument;
                    if (staffLayout.percussion) {
                        currentTrack.playbackInfo.primaryChannel = 9;
                        currentTrack.playbackInfo.secondaryChannel = 9;
                    }
                    else {
                        currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
                        currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
                    }
                    this.score.addTrack(currentTrack);
                }
                const staff = currentTrack.staves[currentTrack.staves.length - 1];
                staff.isPercussion = staffLayout.percussion;
                staff.transpositionPitch = staffLayout.transpose;
                staff.displayTranspositionPitch = 0;
                staff.showTablature = false; // capella does not have tabs
                this._staffLookup.set(staffLayout.index, staff);
            }
        }
        parseBrackets(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'bracket':
                        this.parseBracket(c);
                        break;
                }
            }
        }
        parseBracket(element) {
            const bracket = new Bracket();
            bracket.from = Number.parseInt(element.getAttribute('from'));
            bracket.to = Number.parseInt(element.getAttribute('to'));
            if (element.attributes.has('curly')) {
                bracket.curly = element.attributes.get('curly') === 'true';
            }
            this._brackets.push(bracket);
        }
        parseLayoutStaves(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'staffLayout':
                        this.parseStaffLayout(c);
                        break;
                }
            }
        }
        parseStaffLayout(element) {
            const layout = new StaffLayout();
            layout.description = element.getAttribute('description');
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'notation':
                        if (c.attributes.has('defaultClef')) {
                            layout.defaultClef = this.parseClef(c.attributes.get('defaultClef'));
                        }
                        break;
                    case 'sound':
                        if (c.attributes.has('percussion')) {
                            layout.percussion = c.attributes.get('percussion') === 'true';
                        }
                        if (c.attributes.has('instr')) {
                            layout.instrument = Number.parseInt(c.attributes.get('instr'));
                        }
                        if (c.attributes.has('volume')) {
                            layout.volume = Number.parseInt(c.attributes.get('volume'));
                        }
                        if (c.attributes.has('transpose')) {
                            layout.transpose = Number.parseInt(c.attributes.get('transpose'));
                        }
                        break;
                }
            }
            this._staffLayoutLookup.set(layout.description, layout);
            layout.index = this._staffLayouts.length;
            this._staffLayouts.push(layout);
        }
        parseClef(v) {
            switch (v) {
                case 'treble':
                    return Clef.G2;
                case 'bass':
                    return Clef.F4;
                case 'alto':
                    return Clef.C4;
                case 'tenor':
                    return Clef.C4;
            }
            return Clef.G2;
        }
        parseClefOttava(v) {
            if (v.endsWith('-')) {
                return Ottavia._8vb;
            }
            if (v.endsWith('+')) {
                return Ottavia._8va;
            }
            return Ottavia.Regular;
        }
        parseSystems(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'system':
                        this.parseSystem(c);
                        break;
                }
            }
        }
        parseSystem(element) {
            if (element.attributes.has('tempo')) {
                if (this.score.masterBars.length === 0) {
                    this.score.tempo = Number.parseInt(element.attributes.get('tempo'));
                }
            }
            if (element.getAttribute('beamGrouping') === '0') {
                this._beamingMode = BeatBeamingMode.ForceSplitToNext;
            }
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'staves':
                        this.parseStaves(element, c);
                        break;
                }
            }
            this._isFirstSystem = false;
        }
        parseStaves(systemElement, element) {
            const firstBarIndex = this.score.masterBars.length;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'staff':
                        this.parseStaff(systemElement, firstBarIndex, c);
                        break;
                }
            }
        }
        parseStaff(systemElement, firstBarIndex, element) {
            const staffId = element.getAttribute('layout');
            this._currentStaffLayout = this._staffLayoutLookup.get(staffId);
            this._timeSignature.timeSignatureNumerator = 4;
            this._timeSignature.timeSignatureDenominator = 4;
            this._timeSignature.timeSignatureCommon = false;
            this.parseTime(element.getAttribute('defaultTime'));
            const staff = this._staffLookup.get(this._currentStaffLayout.index);
            // there might be systems where this staff is not contained
            // so we create bars until the current staff to ensure the right
            // alignment
            while (staff.bars.length < firstBarIndex) {
                this.addNewBar(staff);
            }
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'voices':
                        this.parseVoices(staffId, staff, systemElement, firstBarIndex, c);
                        break;
                }
            }
        }
        parseTime(value) {
            switch (value) {
                case 'allaBreve':
                case 'C':
                    this._timeSignature.timeSignatureNumerator = 2;
                    this._timeSignature.timeSignatureDenominator = 2;
                    this._timeSignature.timeSignatureCommon = true;
                    break;
                case 'longAllaBreve':
                    this._timeSignature.timeSignatureNumerator = 4;
                    this._timeSignature.timeSignatureDenominator = 4;
                    this._timeSignature.timeSignatureCommon = true;
                    break;
                default:
                    if (value.indexOf('/') > 0) {
                        const parts = value.split('/');
                        this._timeSignature.timeSignatureNumerator = Number.parseInt(parts[0]);
                        this._timeSignature.timeSignatureDenominator = Number.parseInt(parts[1]);
                        this._timeSignature.timeSignatureCommon = false;
                    }
                    break;
            }
        }
        parseVoices(staffId, staff, systemElement, firstBarIndex, element) {
            let voiceIndex = 0;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'voice':
                        this.parseVoice(staffId, staff, systemElement, voiceIndex, firstBarIndex, c);
                        voiceIndex++;
                        break;
                }
            }
        }
        getOrCreateBar(staff, barIndex) {
            if (barIndex < staff.bars.length) {
                return staff.bars[barIndex];
            }
            return this.addNewBar(staff);
        }
        addNewBar(staff) {
            // voice tags always start a new bar
            const currentBar = new Bar();
            if (staff.bars.length > 0) {
                currentBar.clef = staff.bars[staff.bars.length - 1].clef;
                currentBar.clefOttava = staff.bars[staff.bars.length - 1].clefOttava;
                currentBar.keySignature = staff.bars[staff.bars.length - 1].keySignature;
                currentBar.keySignatureType = staff.bars[staff.bars.length - 1].keySignatureType;
            }
            else {
                currentBar.clef = this._currentStaffLayout.defaultClef;
            }
            staff.addBar(currentBar);
            // create masterbar if needed
            if (staff.bars.length > this.score.masterBars.length) {
                const master = new MasterBar();
                this.score.addMasterBar(master);
                if (master.index > 0) {
                    master.tripletFeel = master.previousMasterBar.tripletFeel;
                }
                master.timeSignatureDenominator = this._timeSignature.timeSignatureDenominator;
                master.timeSignatureNumerator = this._timeSignature.timeSignatureNumerator;
                master.timeSignatureCommon = this._timeSignature.timeSignatureCommon;
            }
            return currentBar;
        }
        newBar(staff, voiceIndex) {
            this._currentVoiceState.currentBarIndex++;
            this._currentBar = this.getOrCreateBar(staff, this._currentVoiceState.currentBarIndex);
            this._currentVoiceState.currentBarDuration = this._currentBar.masterBar.calculateDuration(false);
            this._currentVoiceState.currentBarComplete = false;
            this._currentVoiceState.currentPosition = 0;
            this.ensureVoice(staff, voiceIndex);
        }
        parseVoice(staffId, staff, systemElement, voiceIndex, firstBarIndex, element) {
            const voiceStateKey = `${staffId}_${voiceIndex}`;
            if (this._currentVoiceState && !this._currentVoiceState.currentBarComplete) {
                this._currentBar.masterBar.isAnacrusis = true;
            }
            if (!this._voiceStates.has(voiceStateKey)) {
                this._currentVoiceState = new CapellaVoiceState();
                this._currentVoiceState.currentBarIndex = firstBarIndex - 1;
                this._voiceStates.set(voiceStateKey, this._currentVoiceState);
                this.newBar(staff, voiceIndex);
            }
            else {
                this._currentVoiceState = this._voiceStates.get(voiceStateKey);
                this._currentBar = this.getOrCreateBar(staff, this._currentVoiceState.currentBarIndex);
                this.ensureVoice(staff, voiceIndex);
            }
            // voice tags always start a new bar
            if (element.attributes.has('stemDir')) {
                switch (element.attributes.get('stemDir')) {
                    case 'up':
                        this._currentVoiceState.voiceStemDir = BeamDirection.Up;
                        break;
                    case 'down':
                        this._currentVoiceState.voiceStemDir = BeamDirection.Down;
                        break;
                    default:
                        this._currentVoiceState.voiceStemDir = null;
                        break;
                }
            }
            else {
                this._currentVoiceState.voiceStemDir = null;
            }
            const noteObjects = element.findChildElement('noteObjects');
            if (systemElement.attributes.has('tempo')) {
                const automation = new Automation();
                automation.isLinear = true;
                automation.type = AutomationType.Tempo;
                automation.value = Number.parseInt(systemElement.attributes.get('tempo'));
                automation.ratioPosition =
                    this._currentVoiceState.currentPosition / this._currentVoiceState.currentBarDuration;
                this._currentBar.masterBar.tempoAutomations.push(automation);
            }
            if (noteObjects) {
                for (const c of noteObjects.childElements()) {
                    if (this._currentVoiceState.currentBarComplete && c.localName !== 'barline') {
                        this.newBar(staff, voiceIndex);
                    }
                    switch (c.localName) {
                        case 'clefSign':
                            this._currentBar.clef = this.parseClef(c.getAttribute('clef'));
                            this._currentBar.clefOttava = this.parseClefOttava(c.getAttribute('clef'));
                            break;
                        case 'keySign':
                            this._currentBar.keySignature = Number.parseInt(c.getAttribute('fifths'));
                            break;
                        case 'timeSign':
                            this.parseTime(c.getAttribute('time'));
                            this._currentBar.masterBar.timeSignatureDenominator =
                                this._timeSignature.timeSignatureDenominator;
                            this._currentBar.masterBar.timeSignatureNumerator = this._timeSignature.timeSignatureNumerator;
                            this._currentBar.masterBar.timeSignatureCommon = this._timeSignature.timeSignatureCommon;
                            // NOTE: capella resets the current bar position to 0 whenever a timeSign is placed
                            this._currentVoiceState.currentPosition = 0;
                            this._currentVoiceState.currentBarDuration =
                                this._currentBar.masterBar.calculateDuration(false);
                            break;
                        case 'barline':
                            switch (c.getAttribute('type')) {
                                case 'double':
                                    this._currentBar.barLineRight = BarLineStyle.LightLight;
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                case 'end':
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    break;
                                case 'repEnd':
                                    this._currentVoiceState.repeatEnd = this._currentBar.masterBar;
                                    if (this._currentBar.masterBar.repeatCount < this._currentVoiceState.repeatCount) {
                                        this._currentBar.masterBar.repeatCount = this._currentVoiceState.repeatCount;
                                    }
                                    this.parseBarDrawObject(c);
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                case 'repBegin':
                                    this.newBar(staff, voiceIndex); // repeat-start requires instant new bar
                                    this._currentBar.masterBar.isRepeatStart = true;
                                    this._currentVoiceState.repeatEnd = null;
                                    this._currentVoiceState.repeatCount = 0;
                                    break;
                                case 'repEndBegin':
                                    this._currentVoiceState.repeatEnd = this._currentBar.masterBar;
                                    if (this._currentBar.masterBar.repeatCount < this._currentVoiceState.repeatCount) {
                                        this._currentBar.masterBar.repeatCount = this._currentVoiceState.repeatCount;
                                    }
                                    this.parseBarDrawObject(c);
                                    this.newBar(staff, voiceIndex); // end-begin requires instant new bar
                                    this._currentBar.masterBar.isRepeatStart = true;
                                    break;
                                case 'dashed':
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                // case 'single':
                                default:
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                            }
                            break;
                        case 'chord':
                            const chordBeat = new Beat();
                            this.initFromPreviousBeat(chordBeat, this._currentVoice);
                            chordBeat.beamingMode = this._beamingMode;
                            if (this._currentVoiceState.voiceStemDir) {
                                chordBeat.preferredBeamDirection = this._currentVoiceState.voiceStemDir;
                            }
                            this.parseDuration(this._currentBar, chordBeat, c.findChildElement('duration'));
                            chordBeat.updateDurations();
                            this._currentVoiceState.currentPosition += chordBeat.playbackDuration;
                            this._currentVoice.addBeat(chordBeat);
                            this.parseChord(chordBeat, c);
                            if (this._currentVoiceState.currentPosition >= this._currentVoiceState.currentBarDuration) {
                                this._currentVoiceState.currentBarComplete = true;
                            }
                            break;
                        case 'rest':
                            const restBeat = this.parseRestDurations(this._currentBar, c.findChildElement('duration'));
                            if (restBeat) {
                                this.initFromPreviousBeat(restBeat, this._currentVoice);
                                restBeat.updateDurations();
                                this._currentVoiceState.currentPosition += restBeat.playbackDuration;
                                this._currentVoice.addBeat(restBeat);
                                if (this._currentVoiceState.currentPosition >= this._currentVoiceState.currentBarDuration) {
                                    this._currentVoiceState.currentBarComplete = true;
                                }
                            }
                            break;
                    }
                }
            }
        }
        initFromPreviousBeat(chordBeat, currentVoice) {
            const previousBeat = this.getLastBeat(currentVoice);
            if (previousBeat) {
                chordBeat.dynamics = previousBeat.dynamics;
            }
        }
        getLastBeat(voice) {
            if (voice.beats.length > 0) {
                return voice.beats[voice.beats.length - 1];
            }
            if (voice.bar.index > 0) {
                const previousBar = voice.bar.staff.bars[voice.bar.index - 1];
                if (voice.index < previousBar.voices.length) {
                    const previousVoice = previousBar.voices[voice.index];
                    return this.getLastBeat(previousVoice);
                }
            }
            return null;
        }
        ensureVoice(staff, voiceIndex) {
            while (this._currentBar.voices.length < voiceIndex + 1) {
                this._currentBar.addVoice(new Voice$1());
            }
            if (!this._voiceCounts.has(staff.track.index) ||
                this._voiceCounts.get(staff.track.index) < this._currentBar.voices.length) {
                this._voiceCounts.set(staff.track.index, this._currentBar.voices.length);
            }
            this._currentVoice = this._currentBar.voices[voiceIndex];
        }
        parseChord(beat, element) {
            const articulation = new Note();
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'stem':
                        switch (c.getAttribute('dir')) {
                            case 'up':
                                beat.preferredBeamDirection = BeamDirection.Up;
                                break;
                            case 'down':
                                beat.preferredBeamDirection = BeamDirection.Down;
                                break;
                        }
                        break;
                    case 'articulation':
                        switch (c.getAttribute('type')) {
                            case 'staccato':
                                articulation.isStaccato = true;
                                break;
                            case 'normalAccent':
                                articulation.accentuated = AccentuationType.Normal;
                                break;
                            case 'strongAccent':
                                articulation.accentuated = AccentuationType.Heavy;
                                break;
                        }
                        break;
                    case 'lyric':
                        this.parseLyric(beat, c);
                        break;
                    case 'drawObjects':
                        this.parseBeatDrawObject(beat, c);
                        break;
                    case 'heads':
                        this.parseHeads(beat, articulation, c);
                        break;
                    case 'beam':
                        switch (c.getAttribute('group')) {
                            case 'force':
                                beat.beamingMode = BeatBeamingMode.ForceMergeWithNext;
                                break;
                            case 'divide':
                                beat.beamingMode = BeatBeamingMode.ForceSplitToNext;
                                break;
                        }
                        break;
                }
            }
        }
        parseHeads(beat, articulation, element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'head':
                        this.parseHead(beat, articulation, c);
                        break;
                }
            }
        }
        parseHead(beat, articulation, element) {
            const note = new Note();
            const pitch = ModelUtils.parseTuning(element.getAttribute('pitch'));
            note.octave = pitch.octave - 1;
            note.tone = pitch.tone.noteValue;
            note.isStaccato = articulation.isStaccato;
            note.accentuated = articulation.accentuated;
            beat.addNote(note);
            // TODO: based on the shape attribute apply effects or
            // right percussion value
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'alter':
                        if (c.attributes.has('step')) {
                            note.tone += Number.parseInt(c.attributes.get('step'));
                        }
                        break;
                    case 'tie':
                        if (c.attributes.has('begin')) {
                            if (!this._tieStartIds.has(note.id)) {
                                this._tieStartIds.set(note.id, true);
                                this._tieStarts.push(note);
                            }
                        }
                        else if (c.attributes.has('end') && this._tieStarts.length > 0 && !note.isTieDestination) {
                            note.isTieDestination = true;
                            note.tieOrigin = this._tieStarts[0];
                            this._tieStarts.splice(0, 1);
                            this._tieStartIds.delete(note.id);
                        }
                        break;
                }
            }
        }
        parseBeatDrawObject(beat, element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof TextDrawObject) {
                                if (obj.fontFace.startsWith('capella')) {
                                    if (obj.text === 'u') {
                                        beat.fermata = new Fermata();
                                        beat.fermata.type = FermataType.Medium;
                                    }
                                    else if (obj.text === 'f') {
                                        beat.dynamics = DynamicValue.F;
                                    }
                                    else if (obj.text === 'j') {
                                        beat.dynamics = DynamicValue.MF;
                                    }
                                }
                                else if (this._isFirstSystem &&
                                    this.score.title === '' &&
                                    obj.align === TextAlign.Center &&
                                    obj.height > 16 &&
                                    obj.weight > 400) {
                                    // bold large centered text is very likely the title
                                    this.score.title = obj.text;
                                }
                                else if (this._isFirstSystem &&
                                    this.score.artist === '' &&
                                    obj.align === TextAlign.Center &&
                                    obj.y < 0) {
                                    this.score.artist = obj.text;
                                }
                                else if (this._isFirstSystem &&
                                    this.score.music === '' &&
                                    obj.align === TextAlign.Right &&
                                    obj.y < 0) {
                                    this.score.music = obj.text;
                                }
                                else if (!obj.text.startsWith('by capella')) {
                                    beat.text = obj.text;
                                }
                            }
                            else if (obj instanceof GuitarDrawObject) ;
                            else if (obj instanceof WavyLineDrawObject) {
                                beat.vibrato = VibratoType.Slight;
                            }
                            else if (obj instanceof WedgeDrawObject) {
                                beat.crescendo = obj.decrescendo ? CrescendoType.Decrescendo : CrescendoType.Crescendo;
                                obj.noteRange++;
                                this._crescendo.set(beat, obj);
                            }
                            else if (obj instanceof SlurDrawObject) {
                                // NOTE: casting needed for C#
                                const slur = obj;
                                this._slurs.set(beat, slur);
                            }
                            else if (obj instanceof VoltaDrawObject) {
                                this.applyVolta(obj);
                            }
                        }
                        break;
                }
            }
        }
        parseBarDrawObject(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof VoltaDrawObject) {
                                this.applyVolta(obj);
                            }
                        }
                        break;
                }
            }
        }
        applyVolta(obj) {
            if (obj.lastNumber > 0) {
                this._currentVoiceState.repeatCount = obj.lastNumber;
                if (this._currentVoiceState.repeatEnd &&
                    this._currentVoiceState.repeatEnd.repeatCount < this._currentVoiceState.repeatCount) {
                    this._currentVoiceState.repeatEnd.repeatCount = this._currentVoiceState.repeatCount;
                }
            }
            else if (obj.firstNumber > 0) {
                this._currentVoiceState.repeatCount = obj.firstNumber;
                if (this._currentVoiceState.repeatEnd &&
                    this._currentVoiceState.repeatEnd.repeatCount < this._currentVoiceState.repeatCount) {
                    this._currentVoiceState.repeatEnd.repeatCount = this._currentVoiceState.repeatCount;
                }
            }
            if (obj.lastNumber > 0 && obj.firstNumber > 0) {
                let alternateEndings = 0;
                for (let i = obj.firstNumber; i <= obj.lastNumber; i++) {
                    alternateEndings = alternateEndings | (0x01 << (i - 1));
                }
                this._currentBar.masterBar.alternateEndings = alternateEndings;
            }
            else if (obj.lastNumber > 0) {
                this._currentBar.masterBar.alternateEndings = 0x01 << (obj.lastNumber - 1);
            }
            else if (obj.firstNumber > 0) {
                this._currentBar.masterBar.alternateEndings = 0x01 << (obj.firstNumber - 1);
            }
        }
        parseLyric(beat, element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'verse':
                        if (!beat.lyrics) {
                            beat.lyrics = [];
                        }
                        let text = c.innerText;
                        if (c.getAttribute('hyphen') === 'true') {
                            text += '-';
                        }
                        beat.lyrics.push(text);
                        break;
                }
            }
        }
        parseRestDurations(bar, element) {
            const durationBase = element.getAttribute('base');
            if (durationBase.indexOf('/') !== -1) {
                const restBeat = new Beat();
                restBeat.beamingMode = this._beamingMode;
                this.parseDuration(bar, restBeat, element);
                return restBeat;
            }
            // for
            const fullBars = Number.parseInt(durationBase);
            if (fullBars === 1) {
                const restBeat = new Beat();
                restBeat.beamingMode = this._beamingMode;
                restBeat.duration = Duration.Whole;
                return restBeat;
            }
            // TODO: multibar rests
            Logger.warning('Importer', 'Multi-Bar rests are not supported');
            return null;
        }
        parseDurationValue(s) {
            switch (s) {
                case '2/1':
                    return Duration.DoubleWhole;
                case '1/1':
                    return Duration.Whole;
                case '1/2':
                    return Duration.Half;
                case '1/4':
                    return Duration.Quarter;
                case '1/8':
                    return Duration.Eighth;
                case '1/16':
                    return Duration.Sixteenth;
                case '1/32':
                    return Duration.ThirtySecond;
                case '1/64':
                    return Duration.SixtyFourth;
                case '1/128':
                    return Duration.OneHundredTwentyEighth;
                default:
                    Logger.warning('Importer', 'Unsupported duration');
                    return Duration.Quarter;
            }
        }
        parseDuration(bar, beat, element) {
            const durationBase = element.getAttribute('base');
            beat.duration = this.parseDurationValue(durationBase);
            if (element.attributes.has('dots')) {
                beat.dots = Number.parseInt(element.attributes.get('dots'));
            }
            const tuplet = element.findChildElement('tuplet');
            if (tuplet) {
                beat.tupletNumerator = Number.parseInt(tuplet.getAttribute('count'));
                const tripartiteMultiplicator = tuplet.getAttribute('tripartite') === 'true' ? 3 : 1;
                const prolongDiff = tuplet.getAttribute('prolong') === 'true' ? 0 : 1;
                let power = 0;
                while (tripartiteMultiplicator * Math.pow(2, power + prolongDiff) < beat.tupletNumerator) {
                    power++;
                }
                beat.tupletDenominator = tripartiteMultiplicator * Math.pow(2, power);
            }
        }
        parsePageObjects(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof TextDrawObject) {
                                switch (obj.align) {
                                    case TextAlign.Center:
                                        if (!this.score.title) {
                                            this.score.title = c.innerText;
                                        }
                                        else if (!this.score.subTitle) {
                                            this.score.subTitle = c.innerText;
                                        }
                                        break;
                                    case TextAlign.Right:
                                        if (!this.score.artist) {
                                            this.score.artist = c.innerText;
                                        }
                                        break;
                                }
                            }
                        }
                        break;
                }
            }
        }
        parseGallery(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            this._galleryObjects.set(c.getAttribute('name'), obj);
                        }
                        break;
                }
            }
        }
        parseDrawObj(element) {
            let obj = null;
            let noteRange = 1;
            for (const c of element.childElements()) {
                switch (c.localName) {
                    case 'text':
                        obj = this.parseText(c);
                        break;
                    case 'guitar':
                        obj = this.parseGuitar(c);
                        break;
                    case 'slur':
                        obj = this.parseSlur(c);
                        break;
                    case 'wavyLine':
                        obj = this.parseWavyLine(c);
                        break;
                    case 'bracket':
                        obj = this.parseTupletBracket(c);
                        break;
                    case 'wedge':
                        obj = this.parseWedge(c);
                        break;
                    case 'volta':
                        obj = this.parseVolta(c);
                        break;
                    case 'octaveClef':
                        obj = this.parseOctaveClef(c);
                        break;
                    case 'trill':
                        obj = this.parseTrill(c);
                        break;
                    case 'basic':
                        if (c.attributes.has('noteRange')) {
                            noteRange = Number.parseInt(c.attributes.get('noteRange'));
                        }
                        break;
                }
            }
            if (obj) {
                obj.noteRange = noteRange;
            }
            return obj;
        }
        parseTrill(_unused) {
            const obj = new TrillDrawObject();
            return obj;
        }
        parseOctaveClef(element) {
            const obj = new OctaveClefDrawObject();
            if (element.attributes.has('octave')) {
                obj.octave = Number.parseInt(element.attributes.get('octave'));
            }
            return obj;
        }
        parseVolta(element) {
            const obj = new VoltaDrawObject();
            obj.allNumbers = element.attributes.get('allNumbers') === 'true';
            if (element.attributes.has('firstNumber')) {
                obj.firstNumber = Number.parseInt(element.attributes.get('firstNumber'));
            }
            if (element.attributes.has('lastNumber')) {
                obj.lastNumber = Number.parseInt(element.attributes.get('lastNumber'));
            }
            return obj;
        }
        parseWedge(element) {
            const obj = new WedgeDrawObject();
            obj.decrescendo = element.attributes.get('decrescendo') === 'true';
            return obj;
        }
        parseTupletBracket(element) {
            const obj = new TupletBracketDrawObject();
            if (element.attributes.has('number')) {
                obj.number = Number.parseInt(element.attributes.get('number'));
            }
            return obj;
        }
        parseWavyLine(_unused) {
            const obj = new WavyLineDrawObject();
            return obj;
        }
        parseSlur(_unused) {
            const obj = new SlurDrawObject();
            return obj;
        }
        parseGuitar(element) {
            const obj = new GuitarDrawObject();
            const strings = element.innerText.trim();
            for (let i = 0; i < strings.length; i++) {
                if (strings.charAt(i) === '/') {
                    obj.chord.strings.push(0);
                }
                else {
                    obj.chord.strings.push(Number.parseInt(strings.charAt(i)));
                }
            }
            return obj;
        }
        parseText(element) {
            const obj = new TextDrawObject();
            if (element.attributes.has('x')) {
                obj.x = Number.parseFloat(element.attributes.get('x'));
            }
            if (element.attributes.has('x')) {
                obj.y = Number.parseFloat(element.attributes.get('y'));
            }
            switch (element.getAttribute('align')) {
                case 'left':
                    obj.align = TextAlign.Left;
                    break;
                case 'center':
                    obj.align = TextAlign.Center;
                    break;
                case 'right':
                    obj.align = TextAlign.Right;
                    break;
            }
            switch (element.getAttribute('frame')) {
                case 'rectangle':
                    obj.frame = FrameType.Rectangle;
                    break;
                case 'ellipse':
                    obj.frame = FrameType.Ellipse;
                    break;
                case 'circle':
                    obj.frame = FrameType.Circle;
                    break;
                case 'none':
                    obj.frame = FrameType.None;
                    break;
            }
            if (element.firstElement) {
                for (const c of element.childElements()) {
                    switch (c.localName) {
                        case 'font':
                            obj.fontFace = c.getAttribute('face');
                            if (c.attributes.has('weight')) {
                                obj.weight = Number.parseInt(c.attributes.get('weight'));
                            }
                            if (c.attributes.has('height')) {
                                obj.height = Number.parseInt(c.attributes.get('height'));
                            }
                            break;
                        case 'content':
                            obj.text = c.innerText;
                            break;
                    }
                }
            }
            else {
                obj.text = element.innerText;
            }
            return obj;
        }
        parseInfo(element) {
            for (const c of element.childElements()) {
                switch (c.localName) {
                    // encodingSoftware ignored
                    case 'author':
                        this.score.tab = c.firstChild.innerText;
                        break;
                    // keywords ignored
                    case 'comment':
                        this.score.notices = c.firstChild.innerText;
                        break;
                }
            }
        }
    }

    /**
     * This ScoreImporter can read Capella (cap/capx) files.
     */
    class CapellaImporter extends ScoreImporter {
        get name() {
            return 'Capella';
        }
        readScore() {
            Logger.debug(this.name, 'Loading ZIP entries');
            const fileSystem = new ZipReader(this.data);
            let entries;
            let xml = null;
            entries = fileSystem.read();
            Logger.debug(this.name, 'Zip entries loaded');
            if (entries.length > 0) {
                for (const entry of entries) {
                    switch (entry.fileName) {
                        case 'score.xml':
                            xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                            break;
                    }
                }
            }
            else {
                this.data.reset();
                xml = IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
            }
            if (!xml) {
                throw new UnsupportedFormatError('No valid capella file');
            }
            Logger.debug(this.name, 'Start Parsing score.xml');
            try {
                const capellaParser = new CapellaParser();
                capellaParser.parseXml(xml, this.settings);
                Logger.debug(this.name, 'score.xml parsed');
                const score = capellaParser.score;
                return score;
            }
            catch (e) {
                throw new UnsupportedFormatError('Failed to parse CapXML', e);
            }
        }
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


    function __addDisposableResource(env, value, async) {
      if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
          if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
          if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
          dispose = value[Symbol.dispose];
          if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
        env.stack.push({ value: value, dispose: dispose, async: async });
      }
      else if (async) {
        env.stack.push({ async: true });
      }
      return value;
    }

    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    function __disposeResources(env) {
      function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
      }
      var r, s = 0;
      function next() {
        while (r = env.stack.pop()) {
          try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
              var result = r.dispose.call(r.value);
              if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
            }
            else s |= 1;
          }
          catch (e) {
            fail(e);
          }
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
      }
      return next();
    }

    /**
     * A canvas implementation using alphaSkia as rendering backend
     * @partial
     */
    class SkiaCanvas {
        /**
         * @target web
         * @partial
         */
        static enable(musicFontData, alphaSkia) {
            SkiaCanvas.alphaSkia = alphaSkia;
            SkiaCanvas.initializeMusicFont(SkiaCanvas.alphaSkia.AlphaSkiaTypeface.register(musicFontData));
        }
        static initializeMusicFont(musicFont) {
            SkiaCanvas.musicTextStyle = new SkiaCanvas.alphaSkia.AlphaSkiaTextStyle([musicFont.familyName], musicFont.weight, musicFont.isItalic);
        }
        static registerFont(fontData, fontInfo) {
            const typeface = SkiaCanvas.alphaSkia.AlphaSkiaTypeface.register(fontData.buffer);
            if (!fontInfo) {
                fontInfo = Font.withFamilyList([typeface.familyName], 12, typeface.isItalic ? FontStyle.Italic : FontStyle.Plain, typeface.weight > 400 ? FontWeight.Bold : FontWeight.Regular);
            }
            return fontInfo;
        }
        get font() {
            return this._font;
        }
        set font(value) {
            if (this._font === value) {
                return;
            }
            this._font = value;
            const key = this.textStyleKey(value);
            if (this._textStyles.has(key)) {
                this._textStyle = this._textStyles.get(key);
            }
            else {
                const textStyle = new SkiaCanvas.alphaSkia.AlphaSkiaTextStyle(value.families, value.weight === FontWeight.Bold ? 700 : 400, value.isItalic);
                this._textStyles.set(key, textStyle);
                this._textStyle = textStyle;
            }
        }
        textStyleKey(font) {
            return [...font.families, font.weight.toString(), font.isItalic ? 'italic' : 'upright'].join('_');
        }
        constructor() {
            this._color = new Color(0, 0, 0, 0);
            this._lineWidth = 0;
            this._textStyle = null;
            this._scale = 1;
            this._textStyles = new Map();
            this._font = new Font('Arial', 10, FontStyle.Plain);
            this.textAlign = TextAlign.Left;
            this.textBaseline = TextBaseline.Top;
            this._canvas = new SkiaCanvas.alphaSkia.AlphaSkiaCanvas();
            this.color = new Color(0, 0, 0, 0xff);
        }
        destroy() {
            this._canvas[Symbol.dispose]();
            for (const textStyle of this._textStyles.values()) {
                textStyle[Symbol.dispose]();
            }
        }
        onRenderFinished() {
            return null;
        }
        beginRender(width, height) {
            this._scale = this.settings.display.scale;
            this._canvas.beginRender(width, height, Environment.HighDpiFactor);
        }
        endRender() {
            return this._canvas.endRender();
        }
        get color() {
            return this._color;
        }
        set color(value) {
            if (this._color.rgba === value.rgba) {
                return;
            }
            this._color = value;
            this._canvas.color = SkiaCanvas.alphaSkia.AlphaSkiaCanvas.rgbaToColor(value.r, value.g, value.b, value.a);
        }
        get lineWidth() {
            return this._lineWidth;
        }
        set lineWidth(value) {
            this._lineWidth = value;
            this._canvas.lineWidth = value;
        }
        fillRect(x, y, w, h) {
            if (w > 0) {
                this._canvas.fillRect((x * this._scale) | 0, (y * this._scale) | 0, w * this._scale, h * this._scale);
            }
        }
        strokeRect(x, y, w, h) {
            const blurOffset = this.lineWidth % 2 === 0 ? 0 : 0.5;
            this._canvas.strokeRect(((x * this._scale) | 0) + blurOffset, ((y * this._scale) | 0) + blurOffset, w * this._scale, h * this._scale);
        }
        beginPath() {
            this._canvas.beginPath();
        }
        closePath() {
            this._canvas.closePath();
        }
        moveTo(x, y) {
            this._canvas.moveTo(x * this._scale, y * this._scale);
        }
        lineTo(x, y) {
            this._canvas.lineTo(x * this._scale, y * this._scale);
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this._canvas.quadraticCurveTo(cpx * this._scale, cpy * this._scale, x * this._scale, y * this._scale);
        }
        bezierCurveTo(cp1X, cp1Y, cp2X, cp2Y, x, y) {
            this._canvas.bezierCurveTo(cp1X * this._scale, cp1Y * this._scale, cp2X * this._scale, cp2Y * this._scale, x * this._scale, y * this._scale);
        }
        fillCircle(x, y, radius) {
            this._canvas.fillCircle(x * this._scale, y * this._scale, radius * this._scale);
        }
        strokeCircle(x, y, radius) {
            this._canvas.strokeCircle(x * this._scale, y * this._scale, radius * this._scale);
        }
        fill() {
            this._canvas.fill();
        }
        stroke() {
            this._canvas.stroke();
        }
        beginGroup(_identifier) {
        }
        endGroup() {
        }
        fillText(text, x, y) {
            if (text.length === 0) {
                return;
            }
            let textAlign = SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Left;
            switch (this.textAlign) {
                case TextAlign.Left:
                    textAlign = SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Left;
                    break;
                case TextAlign.Center:
                    textAlign = SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Center;
                    break;
                case TextAlign.Right:
                    textAlign = SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Right;
                    break;
            }
            let textBaseline = SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Top;
            switch (this.textBaseline) {
                case TextBaseline.Top:
                    textBaseline = SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Top;
                    break;
                case TextBaseline.Middle:
                    textBaseline = SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Middle;
                    break;
                case TextBaseline.Bottom:
                    textBaseline = SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Bottom;
                    break;
            }
            // NOTE: Avoiding sub-pixel text positions as they can lead to strange artifacts.
            this._canvas.fillText(text, this._textStyle, this._font.size * this._scale, (x * this._scale) | 0, (y * this._scale) | 0, textAlign, textBaseline);
        }
        measureText(text) {
            const env_1 = { stack: [], error: void 0, hasError: false };
            try {
                const metrics = __addDisposableResource(env_1, this._canvas.measureText(text, this._textStyle, this._font.size, SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Left, SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Alphabetic), false);
                return new MeasuredText(metrics.width, metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
            }
            catch (e_1) {
                env_1.error = e_1;
                env_1.hasError = true;
            }
            finally {
                __disposeResources(env_1);
            }
        }
        fillMusicFontSymbol(x, y, relativeScale, symbol, centerAtPosition) {
            if (symbol === MusicFontSymbol.None) {
                return;
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, String.fromCharCode(symbol), centerAtPosition);
        }
        fillMusicFontSymbols(x, y, relativeScale, symbols, centerAtPosition) {
            let s = '';
            for (const symbol of symbols) {
                if (symbol !== MusicFontSymbol.None) {
                    s += String.fromCharCode(symbol);
                }
            }
            this.fillMusicFontSymbolText(x, y, relativeScale, s, centerAtPosition);
        }
        fillMusicFontSymbolText(x, y, relativeScale, symbols, centerAtPosition) {
            this._canvas.fillText(symbols, SkiaCanvas.musicTextStyle, Environment.MusicFontSize * this._scale * relativeScale, x * this._scale, y * this._scale, centerAtPosition
                ? SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Center
                : SkiaCanvas.alphaSkia.AlphaSkiaTextAlign.Left, SkiaCanvas.alphaSkia.AlphaSkiaTextBaseline.Alphabetic);
        }
        beginRotate(centerX, centerY, angle) {
            this._canvas.beginRotate(centerX * this._scale, centerY * this._scale, angle);
        }
        endRotate() {
            this._canvas.endRotate();
        }
    }
    SkiaCanvas.musicTextStyle = null;

    class SlashTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(startNote.beat, endNote.beat, forEnd);
            this.startNote = startNote;
            this.endNote = endNote;
        }
        getTieHeight(startX, startY, endX, endY) {
            if (this.startNote === this.endNote) {
                return 15;
            }
            return super.getTieHeight(startX, startY, endX, endY);
        }
        getBeamDirection(_beat, _noteRenderer) {
            return BeamDirection.Down;
        }
        static getBeamDirectionForNote(note) {
            return BeamDirection.Down;
        }
        getStartY() {
            return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Center);
        }
        getEndY() {
            return this.getStartY();
        }
        getStartX() {
            if (this.startNote === this.endNote) {
                return this.getEndX() - 20;
            }
            return this.startNoteRenderer.getNoteX(this.startNote, NoteXPosition.Right);
        }
        getEndX() {
            return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Left);
        }
    }

    class SlashBeatContainerGlyph extends BeatContainerGlyph {
        constructor() {
            super(...arguments);
            this._tiedNoteTie = null;
        }
        createTies(n) {
            // create a tie if any effect requires it
            if (!n.isVisible) {
                return;
            }
            if (!this._tiedNoteTie && n.isTieOrigin && n.tieDestination.isVisible) {
                const tie = new SlashTieGlyph(n, n.tieDestination, false);
                this._tiedNoteTie = tie;
                this.addTie(tie);
            }
            if (!this._tiedNoteTie && n.isTieDestination) {
                const tie = new SlashTieGlyph(n.tieOrigin, n, true);
                this._tiedNoteTie = tie;
                this.addTie(tie);
            }
        }
    }

    class SlashRestGlyph extends ScoreRestGlyph {
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('slash', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
            }
        }
        paint(cx, cy, canvas) {
            super.internalPaint(cx, cy, canvas, BeatSubElement.SlashRests);
        }
    }

    class SlashBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this.noteHeads = null;
            this.deadSlapped = null;
            this.restGlyph = null;
        }
        get effectElement() {
            return BeatSubElement.SlashEffects;
        }
        getNoteX(_note, requestedPosition) {
            let g = null;
            if (this.noteHeads) {
                g = this.noteHeads;
            }
            else if (this.deadSlapped) {
                g = this.deadSlapped;
            }
            if (g) {
                let pos = g.x;
                switch (requestedPosition) {
                    case NoteXPosition.Left:
                        break;
                    case NoteXPosition.Center:
                        pos += g.width / 2;
                        break;
                    case NoteXPosition.Right:
                        pos += g.width;
                        break;
                }
                return pos;
            }
            return 0;
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            if (this.noteHeads && this.container.beat.notes.length > 0) {
                const noteBounds = new NoteBounds();
                noteBounds.note = this.container.beat.notes[0];
                noteBounds.noteHeadBounds = new Bounds();
                noteBounds.noteHeadBounds.x = cx + this.x + this.noteHeads.x;
                noteBounds.noteHeadBounds.y = cy + this.y + this.noteHeads.y - this.noteHeads.height / 2;
                noteBounds.noteHeadBounds.w = this.width;
                noteBounds.noteHeadBounds.h = this.height;
                beatBounds.addNote(noteBounds);
            }
        }
        getNoteY(_note, requestedPosition) {
            let g = null;
            if (this.noteHeads) {
                g = this.noteHeads;
            }
            else if (this.deadSlapped) {
                g = this.deadSlapped;
            }
            if (g) {
                let pos = this.y + g.y;
                switch (requestedPosition) {
                    case NoteYPosition.Top:
                    case NoteYPosition.TopWithStem:
                        pos -= g.height / 2 + 2;
                        break;
                    case NoteYPosition.Center:
                        break;
                    case NoteYPosition.Bottom:
                    case NoteYPosition.BottomWithStem:
                        pos += g.height / 2;
                        break;
                }
                return pos;
            }
            return 0;
        }
        updateBeamingHelper() {
            if (this.noteHeads) {
                this.noteHeads.updateBeamingHelper(this.container.x + this.x);
            }
            else if (this.deadSlapped) {
                if (this.beamingHelper) {
                    this.beamingHelper.registerBeatLineX('slash', this.container.beat, this.container.x + this.x + this.deadSlapped.x + this.width, this.container.x + this.x + this.deadSlapped.x);
                }
            }
            else if (this.restGlyph) {
                this.restGlyph.updateBeamingHelper(this.container.x + this.x);
            }
        }
        doLayout() {
            // create glyphs
            const sr = this.renderer;
            const line = sr.getNoteLine();
            const glyphY = sr.getLineY(line);
            if (this.container.beat.deadSlapped) {
                const deadSlapped = new DeadSlappedBeatGlyph();
                deadSlapped.renderer = this.renderer;
                deadSlapped.doLayout();
                this.deadSlapped = deadSlapped;
                this.addEffect(deadSlapped);
            }
            else if (!this.container.beat.isEmpty) {
                if (!this.container.beat.isRest) {
                    const isGrace = this.container.beat.graceType !== GraceType.None;
                    const noteHeadGlyph = new SlashNoteHeadGlyph(0, glyphY, this.container.beat.duration, isGrace, this.container.beat);
                    this.noteHeads = noteHeadGlyph;
                    noteHeadGlyph.beat = this.container.beat;
                    noteHeadGlyph.beamingHelper = this.beamingHelper;
                    this.addNormal(noteHeadGlyph);
                }
                else {
                    const restGlyph = new SlashRestGlyph(0, glyphY, this.container.beat.duration);
                    this.restGlyph = restGlyph;
                    restGlyph.beat = this.container.beat;
                    restGlyph.beamingHelper = this.beamingHelper;
                    this.addNormal(restGlyph);
                    if (this.beamingHelper) {
                        this.beamingHelper.applyRest(this.container.beat, 0);
                    }
                }
            }
            //
            // Note dots
            //
            if (this.container.beat.dots > 0) {
                this.addNormal(new SpacingGlyph(0, 0, 5));
                for (let i = 0; i < this.container.beat.dots; i++) {
                    this.addEffect(new CircleGlyph(0, sr.getLineY(sr.getNoteLine()) - sr.getLineHeight(0.5), 1.5));
                }
            }
            super.doLayout();
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.restGlyph) {
                this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
            }
            else if (this.noteHeads) {
                this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
            }
            else if (this.deadSlapped) {
                this.centerX = this.deadSlapped.x + this.deadSlapped.width / 2;
            }
        }
    }

    /**
     * This BarRenderer renders a bar using Slash Rhythm notation
     */
    class SlashBarRenderer extends LineBarRenderer {
        constructor(renderer, bar) {
            super(renderer, bar);
            this.simpleWhammyOverflow = 0;
            // ignore numbered notation here
            this._isOnlySlash = !bar.staff.showTablature && !bar.staff.showStandardNotation;
            this.helpers.preferredBeamDirection = BeamDirection.Up;
        }
        get repeatsBarSubElement() {
            return BarSubElement.SlashRepeats;
        }
        get barNumberBarSubElement() {
            return BarSubElement.SlashBarNumber;
        }
        get barLineBarSubElement() {
            return BarSubElement.SlashBarLines;
        }
        get staffLineBarSubElement() {
            return BarSubElement.SlashStaffLine;
        }
        get lineSpacing() {
            return BarRendererBase.RawLineSpacing;
        }
        get heightLineCount() {
            return 5;
        }
        get drawnLineCount() {
            return 1;
        }
        get bottomGlyphOverflow() {
            return 0;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            this.paintBeams(cx, cy, canvas, BeatSubElement.SlashFlags, BeatSubElement.SlashBeams);
            this.paintTuplets(cx, cy, canvas, BeatSubElement.SlashTuplet);
        }
        doLayout() {
            super.doLayout();
            let hasTuplets = false;
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    const c = this.getVoiceContainer(voice);
                    if (c.tupletGroups.length > 0) {
                        hasTuplets = true;
                        break;
                    }
                }
            }
            if (hasTuplets) {
                this.registerOverflowTop(this.tupletSize);
            }
        }
        getNoteLine() {
            return 0;
        }
        getFlagTopY(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadSlashWhiteHalf);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        getFlagBottomY(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadSlashWhiteHalf);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        getBeamDirection(_helper) {
            return BeamDirection.Up;
        }
        getNoteY(note, requestedPosition) {
            let y = super.getNoteY(note, requestedPosition);
            if (Number.isNaN(y)) {
                y = this.getLineY(0);
            }
            return y;
        }
        calculateBeamYWithDirection(_h, _x, _direction) {
            return this.getLineY(0) - this.getFlagStemSize(_h.shortestDuration);
        }
        getBarLineStart(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadSlashWhiteHalf);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        createLinePreBeatGlyphs() {
            // Key signature
            if (this._isOnlySlash &&
                (!this.bar.previousBar ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureNumerator !==
                            this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureDenominator !==
                            this.bar.previousBar.masterBar.timeSignatureDenominator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.isFreeTime &&
                        this.bar.masterBar.isFreeTime !== this.bar.previousBar.masterBar.isFreeTime))) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5));
            const masterBar = this.bar.masterBar;
            const g = new ScoreTimeSignatureGlyph(0, this.getLineY(0), masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator, masterBar.timeSignatureCommon, masterBar.isFreeTime &&
                (masterBar.previousMasterBar == null ||
                    masterBar.isFreeTime !== masterBar.previousMasterBar.isFreeTime));
            g.barSubElement = BarSubElement.SlashTimeSignature;
            this.addPreBeatGlyph(g);
        }
        createVoiceGlyphs(v) {
            for (const b of v.beats) {
                const container = new SlashBeatContainerGlyph(b, this.getVoiceContainer(v));
                container.preNotes = new BeatGlyphBase();
                container.onNotes = v.index === 0 ? new SlashBeatGlyph() : new BeatOnNoteGlyphBase();
                this.addBeatGlyph(container);
            }
        }
        paintBeamingStem(beat, _cy, x, topY, bottomY, canvas) {
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.SlashStem, beat);
            try {
                canvas.lineWidth = BarRendererBase.StemWidth;
                canvas.beginPath();
                canvas.moveTo(x, topY);
                canvas.lineTo(x, bottomY);
                canvas.stroke();
                canvas.lineWidth = 1;
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }
    SlashBarRenderer.StaffId = 'slash';

    /**
     * This Factory produces SlashBarRenderer instances
     */
    class SlashBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return SlashBarRenderer.StaffId;
        }
        getStaffPaddingTop(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingTop;
        }
        getStaffPaddingBottom(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingBottom;
        }
        create(renderer, bar) {
            return new SlashBarRenderer(renderer, bar);
        }
        canCreate(track, staff) {
            return super.canCreate(track, staff) && staff.showSlash;
        }
    }

    class NumberedTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(!startNote ? null : startNote.beat, !endNote ? null : endNote.beat, forEnd);
            this.startNote = startNote;
            this.endNote = endNote;
        }
        shouldDrawBendSlur() {
            return (this.renderer.settings.notation.extendBendArrowsOnTiedNotes &&
                !!this.startNote.bendOrigin &&
                this.startNote.isTieOrigin);
        }
        doLayout() {
            super.doLayout();
        }
        getBeamDirection(beat, noteRenderer) {
            return BeamDirection.Up;
        }
        getStartY() {
            return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Top);
        }
        getEndY() {
            return this.getStartY();
        }
        getStartX() {
            if (this.startNote === this.endNote) {
                return this.getEndX() - 20;
            }
            return this.startNoteRenderer.getNoteX(this.startNote, NoteXPosition.Center);
        }
        getEndX() {
            if (this.startNote === this.endNote) {
                return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Left);
            }
            return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Center);
        }
    }

    class NumberedSlurGlyph extends TabTieGlyph {
        constructor(startNote, endNote, forSlide, forEnd = false) {
            super(startNote, endNote, forEnd);
            this._direction = BeamDirection.Up;
            this._forSlide = forSlide;
        }
        getTieHeight(startX, startY, endX, endY) {
            return Math.log(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
        }
        tryExpand(startNote, endNote, forSlide, forEnd) {
            // same type required
            if (this._forSlide !== forSlide) {
                return false;
            }
            if (this.forEnd !== forEnd) {
                return false;
            }
            // same start and endbeat
            if (this.startNote.beat.id !== startNote.beat.id) {
                return false;
            }
            if (this.endNote.beat.id !== endNote.beat.id) {
                return false;
            }
            // if we can expand, expand in correct direction
            switch (this._direction) {
                case BeamDirection.Up:
                    if (startNote.realValue > this.startNote.realValue) {
                        this.startNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue > this.endNote.realValue) {
                        this.endNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
                case BeamDirection.Down:
                    if (startNote.realValue < this.startNote.realValue) {
                        this.startNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue < this.endNote.realValue) {
                        this.endNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
            }
            return true;
        }
        paint(cx, cy, canvas) {
            const startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staffId, this.startBeat.voice.bar);
            const direction = this.getBeamDirection(this.startBeat, startNoteRenderer);
            const slurId = `numbered.slur.${this.startNote.beat.id}.${this.endNote.beat.id}.${direction}`;
            const renderer = this.renderer;
            const isSlurRendered = renderer.staff.getSharedLayoutData(slurId, false);
            if (!isSlurRendered) {
                renderer.staff.setSharedLayoutData(slurId, true);
                super.paint(cx, cy, canvas);
            }
        }
    }

    class NumberedBeatContainerGlyph extends BeatContainerGlyph {
        constructor() {
            super(...arguments);
            this._effectSlurs = [];
        }
        createTies(n) {
            // create a tie if any effect requires it
            if (!n.isVisible) {
                return;
            }
            if (n.isTieOrigin && n.tieDestination.isVisible) {
                const tie = new NumberedTieGlyph(n, n.tieDestination, false);
                this.addTie(tie);
            }
            if (n.isTieDestination) {
                const tie = new NumberedTieGlyph(n.tieOrigin, n, true);
                this.addTie(tie);
            }
            if (n.isLeftHandTapped && !n.isHammerPullDestination) {
                const tapSlur = new NumberedTieGlyph(n, n, false);
                this.addTie(tapSlur);
            }
            // start effect slur on first beat
            if (n.isEffectSlurOrigin && n.effectSlurDestination) {
                let expanded = false;
                for (const slur of this._effectSlurs) {
                    if (slur.tryExpand(n, n.effectSlurDestination, false, false)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    const effectSlur = new NumberedSlurGlyph(n, n.effectSlurDestination, false, false);
                    this._effectSlurs.push(effectSlur);
                    this.addTie(effectSlur);
                }
            }
            // end effect slur on last beat
            if (n.isEffectSlurDestination && n.effectSlurOrigin) {
                let expanded = false;
                for (const slur of this._effectSlurs) {
                    if (slur.tryExpand(n.effectSlurOrigin, n, false, true)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    const effectSlur = new NumberedSlurGlyph(n.effectSlurOrigin, n, false, true);
                    this._effectSlurs.push(effectSlur);
                    this.addTie(effectSlur);
                }
            }
        }
    }

    class NumberedNoteHeadGlyph extends Glyph {
        constructor(x, y, number, isGrace, beat) {
            super(x, y);
            this._isGrace = isGrace;
            this._number = number;
            this._beat = beat;
        }
        paint(cx, cy, canvas) {
            const _ = this._beat.isRest
                ? ElementStyleHelper.beat(canvas, BeatSubElement.NumberedRests, this._beat)
                : this._beat.notes.length > 0
                    ? ElementStyleHelper.note(canvas, NoteSubElement.NumberedNumber, this._beat.notes[0])
                    : undefined;
            try {
                const res = this.renderer.resources;
                canvas.font = this._isGrace ? res.numberedNotationGraceFont : res.numberedNotationFont;
                canvas.textBaseline = TextBaseline.Middle;
                canvas.textAlign = TextAlign.Left;
                canvas.fillText(this._number.toString(), cx + this.x, cy + this.y);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
        doLayout() {
            const scale = this._isGrace ? NoteHeadGlyph.GraceScale : 1;
            this.width = NumberedNoteHeadGlyph.NoteHeadWidth * scale;
            this.height = NumberedNoteHeadGlyph.NoteHeadHeight * scale;
        }
    }
    NumberedNoteHeadGlyph.NoteHeadHeight = 17;
    NumberedNoteHeadGlyph.NoteHeadWidth = 12;

    class NumberedDashGlyph extends Glyph {
        constructor(x, y, beat) {
            super(x, y);
            this._beat = beat;
        }
        doLayout() {
            this.width = 14 + NumberedDashGlyph.Padding;
            this.height = NumberedBarRenderer.BarSize;
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.beat(canvas, BeatSubElement.NumberedDuration, this._beat);
            try {
                const padding = NumberedDashGlyph.Padding;
                canvas.fillRect(cx + this.x, cy + this.y, this.width - padding, this.height);
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }
    NumberedDashGlyph.Padding = 3;

    class NumberedBeatPreNotesGlyph extends BeatGlyphBase {
        constructor() {
            super(...arguments);
            this.isNaturalizeAccidental = false;
            this.accidental = AccidentalType.None;
        }
        get effectElement() {
            return BeatSubElement.NumberedEffects;
        }
        doLayout() {
            if (!this.container.beat.isRest && !this.container.beat.isEmpty) {
                const accidentals = new AccidentalGroupGlyph();
                accidentals.renderer = this.renderer;
                if (this.container.beat.notes.length > 0) {
                    const note = this.container.beat.notes[0];
                    // Notes
                    // - Compared to standard notation accidentals:
                    //   - Flat keysigs: When there is a naturalize symbol (against key signature, not naturalizing same line) we have a # in Numbered notation
                    //   - Flat keysigs: When there is a flat symbol standard notation we also have a flat in Numbered notation
                    //   - C keysig: A sharp on standard notation is a sharp on numbered notation
                    //   - # keysigs:  When there is a # symbol on standard notation we also a sharp in numbered notation
                    //   - # keysigs:  When there is a naturalize symbol (against key signature, not naturalizing same line) we have a flat in Numbered notation
                    // Or generally:
                    //  - numbered notation has the same accidentals as standard notation if applied
                    //  - when the standard notation naturalizes the accidental from the key signature, the numbered notation has the reversed accidental
                    const accidentalMode = note ? note.accidentalMode : NoteAccidentalMode.Default;
                    const noteValue = AccidentalHelper.getNoteValue(note);
                    let accidentalToSet = AccidentalHelper.computeAccidental(this.renderer.bar.keySignature, accidentalMode, noteValue, note.hasQuarterToneOffset);
                    if (accidentalToSet === AccidentalType.Natural) {
                        const ks = this.renderer.bar.keySignature;
                        const ksi = ks + 7;
                        const naturalizeAccidentalForKeySignature = ksi < 7 ? AccidentalType.Sharp : AccidentalType.Flat;
                        accidentalToSet = naturalizeAccidentalForKeySignature;
                        this.isNaturalizeAccidental = true;
                    }
                    // do we need an accidental on the note?
                    if (accidentalToSet !== AccidentalType.None) {
                        this.accidental = accidentalToSet;
                        const sr = this.renderer;
                        const color = ElementStyleHelper.noteColor(sr.resources, NoteSubElement.NumberedAccidentals, note);
                        const g = new AccidentalGlyph(0, sr.getLineY(0), accidentalToSet, note.beat.graceType !== GraceType.None
                            ? NoteHeadGlyph.GraceScale * NoteHeadGlyph.GraceScale
                            : NoteHeadGlyph.GraceScale);
                        g.colorOverride = color;
                        g.renderer = this.renderer;
                        accidentals.addGlyph(g);
                        this.addNormal(accidentals);
                        this.addNormal(new SpacingGlyph(0, 0, 4));
                    }
                }
            }
            super.doLayout();
        }
    }
    class NumberedBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this.noteHeads = null;
            this.deadSlapped = null;
            this.octaveDots = 0;
        }
        get effectElement() {
            return BeatSubElement.NumberedEffects;
        }
        getNoteX(_note, requestedPosition) {
            let g = null;
            if (this.noteHeads) {
                g = this.noteHeads;
            }
            else if (this.deadSlapped) {
                g = this.deadSlapped;
            }
            if (g) {
                let pos = g.x;
                switch (requestedPosition) {
                    case NoteXPosition.Left:
                        break;
                    case NoteXPosition.Center:
                        pos += g.width / 2;
                        break;
                    case NoteXPosition.Right:
                        pos += g.width;
                        break;
                }
                return pos;
            }
            return 0;
        }
        buildBoundingsLookup(beatBounds, cx, cy) {
            if (this.noteHeads && this.container.beat.notes.length > 0) {
                const noteBounds = new NoteBounds();
                noteBounds.note = this.container.beat.notes[0];
                noteBounds.noteHeadBounds = new Bounds();
                noteBounds.noteHeadBounds.x = cx + this.x + this.noteHeads.x;
                noteBounds.noteHeadBounds.y = cy + this.y + this.noteHeads.y - this.noteHeads.height / 2;
                noteBounds.noteHeadBounds.w = this.width;
                noteBounds.noteHeadBounds.h = this.height;
                beatBounds.addNote(noteBounds);
            }
        }
        getNoteY(_note, requestedPosition) {
            let g = null;
            if (this.noteHeads) {
                g = this.noteHeads;
            }
            else if (this.deadSlapped) {
                g = this.deadSlapped;
            }
            if (g) {
                let pos = this.y + g.y;
                switch (requestedPosition) {
                    case NoteYPosition.Top:
                    case NoteYPosition.TopWithStem:
                        pos -= g.height / 2 + 2;
                        break;
                    case NoteYPosition.Center:
                        break;
                    case NoteYPosition.Bottom:
                    case NoteYPosition.BottomWithStem:
                        pos += g.height / 2;
                        break;
                }
                return pos;
            }
            return 0;
        }
        updateBeamingHelper() {
            if (this.beamingHelper) {
                let g = null;
                if (this.noteHeads) {
                    g = this.noteHeads;
                }
                else if (this.deadSlapped) {
                    g = this.deadSlapped;
                }
                if (g) {
                    this.beamingHelper.registerBeatLineX('numbered', this.container.beat, this.container.x + this.x + g.x, this.container.x + this.x + g.x + g.width);
                }
            }
        }
        doLayout() {
            // create glyphs
            const sr = this.renderer;
            if (sr.shortestDuration < this.container.beat.duration) {
                sr.shortestDuration = this.container.beat.duration;
            }
            const glyphY = sr.getLineY(sr.getNoteLine());
            if (!this.container.beat.isEmpty) {
                let numberWithinOctave = '0';
                if (this.container.beat.notes.length > 0) {
                    const kst = this.renderer.bar.keySignatureType;
                    const ks = this.renderer.bar.keySignature;
                    const ksi = ks + 7;
                    const oneNoteValues = kst === KeySignatureType.Minor
                        ? NumberedBeatGlyph.MinorKeySignatureOneValues
                        : NumberedBeatGlyph.MajorKeySignatureOneValues;
                    const oneNoteValue = oneNoteValues[ksi];
                    const note = this.container.beat.notes[0];
                    if (note.isDead) {
                        numberWithinOctave = 'X';
                    }
                    else {
                        const noteValue = note.displayValue - oneNoteValue;
                        const index = noteValue < 0 ? ((noteValue % 12) + 12) % 12 : noteValue % 12;
                        let dots = noteValue < 0 ? ((Math.abs(noteValue) + 12) / 12) | 0 : (noteValue / 12) | 0;
                        if (noteValue < 0) {
                            dots *= -1;
                        }
                        this.octaveDots = dots;
                        sr.registerOctave(dots);
                        const stepList = ModelUtils.keySignatureIsSharp(ks) || ModelUtils.keySignatureIsNatural(ks)
                            ? AccidentalHelper.FlatNoteSteps
                            : AccidentalHelper.SharpNoteSteps;
                        let steps = stepList[index] + 1;
                        const hasAccidental = AccidentalHelper.AccidentalNotes[index];
                        if (hasAccidental &&
                            !this.container.preNotes.isNaturalizeAccidental) {
                            if (ksi < 7) {
                                steps++;
                            }
                            else {
                                steps--;
                            }
                        }
                        numberWithinOctave = steps.toString();
                    }
                }
                if (this.container.beat.deadSlapped) {
                    const deadSlapped = new DeadSlappedBeatGlyph();
                    deadSlapped.renderer = this.renderer;
                    deadSlapped.doLayout();
                    this.deadSlapped = deadSlapped;
                    this.addEffect(deadSlapped);
                }
                else {
                    const isGrace = this.container.beat.graceType !== GraceType.None;
                    const noteHeadGlyph = new NumberedNoteHeadGlyph(0, glyphY, numberWithinOctave, isGrace, this.container.beat);
                    this.noteHeads = noteHeadGlyph;
                    this.addNormal(noteHeadGlyph);
                }
                //
                // Note dots
                if (this.container.beat.dots > 0 && this.container.beat.duration >= Duration.Quarter) {
                    this.addNormal(new SpacingGlyph(0, 0, 5));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        const dot = new CircleGlyph(0, sr.getLineY(0), 1.5);
                        dot.renderer = this.renderer;
                        this.addEffect(dot);
                    }
                }
                //
                // Dashes
                let numberOfQuarterNotes = 0;
                switch (this.container.beat.duration) {
                    case Duration.QuadrupleWhole:
                        numberOfQuarterNotes = 16;
                        break;
                    case Duration.DoubleWhole:
                        numberOfQuarterNotes = 8;
                        break;
                    case Duration.Whole:
                        numberOfQuarterNotes = 4;
                        break;
                    case Duration.Half:
                        numberOfQuarterNotes = 2;
                        break;
                }
                let numberOfAddedQuarters = numberOfQuarterNotes;
                for (let i = 0; i < this.container.beat.dots; i++) {
                    numberOfAddedQuarters = (numberOfAddedQuarters / 2) | 0;
                    numberOfQuarterNotes += numberOfAddedQuarters;
                }
                for (let i = 0; i < numberOfQuarterNotes - 1; i++) {
                    const dash = new NumberedDashGlyph(0, sr.getLineY(0), this.container.beat);
                    dash.renderer = this.renderer;
                    this.addNormal(dash);
                }
            }
            super.doLayout();
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.noteHeads) {
                this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
            }
            else if (this.deadSlapped) {
                this.centerX = this.deadSlapped.x + this.deadSlapped.width / 2;
            }
        }
    }
    NumberedBeatGlyph.MajorKeySignatureOneValues = [
        // Flats
        59, 66, 61, 68, 63, 58, 65,
        // natural
        60,
        // sharps  (where the value is true, a flat accidental is required for the notes)
        67, 62, 69, 64, 71, 66, 61
    ];
    NumberedBeatGlyph.MinorKeySignatureOneValues = [
        // Flats
        71, 66, 73, 68, 63, 70, 65,
        // natural
        72,
        // sharps  (where the value is true, a flat accidental is required for the notes)
        67, 74, 69, 64, 71, 66, 73
    ];

    class NumberedKeySignatureGlyph extends Glyph {
        constructor(x, y, keySignature, keySignatureType) {
            super(x, y);
            this._text = '';
            this._accidental = AccidentalType.None;
            this._accidentalOffset = 0;
            this._keySignature = keySignature;
            this._keySignatureType = keySignatureType;
        }
        doLayout() {
            super.doLayout();
            const text = '1 = ';
            let text2 = '';
            let accidental = AccidentalType.None;
            switch (this._keySignatureType) {
                case KeySignatureType.Major:
                    switch (this._keySignature) {
                        case KeySignature.Cb:
                            text2 = '  C';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Gb:
                            text2 = '  G';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Db:
                            text2 = '  D';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Ab:
                            text2 = '  A';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Eb:
                            text2 = '  E';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Bb:
                            text2 = '  B';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.F:
                            text2 = 'F';
                            break;
                        case KeySignature.C:
                            text2 = 'C';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.G:
                            text2 = 'G';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.D:
                            text2 = 'D';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.A:
                            text2 = 'A';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.E:
                            text2 = 'E';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.B:
                            text2 = 'B';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.FSharp:
                            text2 = '  F';
                            accidental = AccidentalType.Sharp;
                            break;
                        case KeySignature.CSharp:
                            text2 = '  C';
                            accidental = AccidentalType.Sharp;
                            break;
                    }
                    break;
                case KeySignatureType.Minor:
                    switch (this._keySignature) {
                        case KeySignature.Cb:
                            text2 = '  a';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Gb:
                            text2 = '  e';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Db:
                            text2 = '  b';
                            accidental = AccidentalType.Flat;
                            break;
                        case KeySignature.Ab:
                            text2 = 'f';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.Eb:
                            text2 = 'c';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.Bb:
                            text2 = 'g';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.F:
                            text2 = 'd';
                            break;
                        case KeySignature.C:
                            text2 = 'a';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.G:
                            text2 = 'e';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.D:
                            text2 = 'b';
                            accidental = AccidentalType.None;
                            break;
                        case KeySignature.A:
                            text2 = '  f';
                            accidental = AccidentalType.Sharp;
                            break;
                        case KeySignature.E:
                            text2 = '  c';
                            accidental = AccidentalType.Sharp;
                            break;
                        case KeySignature.B:
                            text2 = '  g';
                            accidental = AccidentalType.Sharp;
                            break;
                        case KeySignature.FSharp:
                            text2 = '  d';
                            accidental = AccidentalType.Sharp;
                            break;
                        case KeySignature.CSharp:
                            text2 = '  a';
                            accidental = AccidentalType.Sharp;
                            break;
                    }
                    break;
            }
            this._text = text + text2;
            this._accidental = accidental;
            const c = this.renderer.scoreRenderer.canvas;
            const res = this.renderer.resources;
            c.font = res.numberedNotationFont;
            this._accidentalOffset = c.measureText(text).width;
            this.width = c.measureText(text + text2).width;
        }
        paint(cx, cy, canvas) {
            const _ = ElementStyleHelper.bar(canvas, BarSubElement.NumberedKeySignature, this.renderer.bar);
            try {
                const res = this.renderer.resources;
                canvas.font = res.numberedNotationFont;
                canvas.textBaseline = TextBaseline.Middle;
                canvas.fillText(this._text, cx + this.x, cy + this.y);
                if (this._accidental !== AccidentalType.None) {
                    canvas.fillMusicFontSymbol(cx + this.x + this._accidentalOffset, cy + this.y, 0.7, AccidentalGlyph.getMusicSymbol(this._accidental), false);
                }
            }
            finally {
                _?.[Symbol.dispose]?.();
            }
        }
    }

    /**
     * This BarRenderer renders a bar using (Jianpu) Numbered Music Notation
     */
    class NumberedBarRenderer extends LineBarRenderer {
        registerOctave(octave) {
            if (this.lowestOctave === null) {
                this.lowestOctave = octave;
                this.highestOctave = octave;
            }
            else {
                if (octave < this.lowestOctave) {
                    this.lowestOctave = octave;
                }
                if (octave > this.highestOctave) {
                    this.highestOctave = octave;
                }
            }
        }
        get repeatsBarSubElement() {
            return BarSubElement.NumberedRepeats;
        }
        get barNumberBarSubElement() {
            return BarSubElement.NumberedBarNumber;
        }
        get barLineBarSubElement() {
            return BarSubElement.NumberedBarLines;
        }
        get staffLineBarSubElement() {
            return BarSubElement.NumberedStaffLine;
        }
        constructor(renderer, bar) {
            super(renderer, bar);
            this.simpleWhammyOverflow = 0;
            this.shortestDuration = Duration.QuadrupleWhole;
            this.lowestOctave = null;
            this.highestOctave = null;
            this._isOnlyNumbered = !bar.staff.showSlash && !bar.staff.showTablature && !bar.staff.showStandardNotation;
        }
        get lineSpacing() {
            return BarRendererBase.RawLineSpacing;
        }
        get heightLineCount() {
            return 5;
        }
        get drawnLineCount() {
            return 0;
        }
        get bottomGlyphOverflow() {
            return 0;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            this.paintBeams(cx, cy, canvas, BeatSubElement.NumberedDuration, BeatSubElement.NumberedDuration);
            this.paintTuplets(cx, cy, canvas, BeatSubElement.NumberedTuplet, true);
        }
        doLayout() {
            super.doLayout();
            let hasTuplets = false;
            for (const voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    const c = this.getVoiceContainer(voice);
                    if (c.tupletGroups.length > 0) {
                        hasTuplets = true;
                        break;
                    }
                }
            }
            if (hasTuplets) {
                this.registerOverflowTop(this.tupletSize);
            }
            if (!this.bar.isEmpty) {
                const barCount = ModelUtils.getIndex(this.shortestDuration) - 2;
                if (barCount > 0) {
                    const barSpacing = NumberedBarRenderer.BarSpacing;
                    const barSize = NumberedBarRenderer.BarSize;
                    const barOverflow = (barCount - 1) * barSpacing + barSize;
                    let dotOverflow = 0;
                    const lowestOctave = this.lowestOctave;
                    if (lowestOctave !== null) {
                        dotOverflow = Math.abs(lowestOctave) * NumberedBarRenderer.DotSpacing + NumberedBarRenderer.DotSize;
                    }
                    this.registerOverflowBottom(barOverflow + dotOverflow);
                }
                const highestOctave = this.highestOctave;
                if (highestOctave !== null) {
                    const dotOverflow = Math.abs(highestOctave) * NumberedBarRenderer.DotSpacing + NumberedBarRenderer.DotSize;
                    this.registerOverflowTop(dotOverflow);
                }
            }
        }
        paintFlag(cx, cy, canvas, h, flagsElement) {
            this.paintBar(cx, cy, canvas, h, flagsElement);
        }
        paintBar(cx, cy, canvas, h, flagsElement) {
            if (h.beats.length === 0) {
                return;
            }
            const res = this.resources;
            for (let i = 0, j = h.beats.length; i < j; i++) {
                const beat = h.beats[i];
                const _ = ElementStyleHelper.beat(canvas, flagsElement, beat);
                try {
                    //
                    // draw line
                    //
                    const barSpacing = NumberedBarRenderer.BarSpacing;
                    const barSize = NumberedBarRenderer.BarSize;
                    const barCount = ModelUtils.getIndex(beat.duration) - 2;
                    const barStart = cy + this.y;
                    const beatLineX = this.getBeatX(beat, BeatXPosition.PreNotes) - this.beatGlyphsStart;
                    const beamY = this.calculateBeamY(h, beatLineX);
                    for (let barIndex = 0; barIndex < barCount; barIndex++) {
                        let barStartX = 0;
                        let barEndX = 0;
                        let barStartY = 0;
                        const barY = barStart + barIndex * barSpacing;
                        if (i === h.beats.length - 1) {
                            barStartX = beatLineX;
                            barEndX = this.getBeatX(beat, BeatXPosition.PostNotes) - this.beatGlyphsStart;
                        }
                        else {
                            barStartX = beatLineX;
                            barEndX = this.getBeatX(h.beats[i + 1], BeatXPosition.PreNotes) - this.beatGlyphsStart;
                        }
                        barStartY = (barY + beamY) | 0;
                        LineBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barStartY, barSize);
                    }
                    const onNotes = this.getBeatContainer(beat).onNotes;
                    let dotCount = onNotes instanceof NumberedBeatGlyph ? onNotes.octaveDots : 0;
                    let dotsY = 0;
                    let dotsOffset = 0;
                    if (dotCount > 0) {
                        dotsY = barStart + this.getLineY(0) - res.numberedNotationFont.size / 1.5;
                        dotsOffset = NumberedBarRenderer.DotSpacing * -1;
                    }
                    else if (dotCount < 0) {
                        dotsY = barStart + beamY + barCount * barSpacing;
                        dotsOffset = NumberedBarRenderer.DotSpacing;
                    }
                    const dotX = this.getBeatX(beat, BeatXPosition.OnNotes) + 4 - this.beatGlyphsStart;
                    dotCount = Math.abs(dotCount);
                    for (let d = 0; d < dotCount; d++) {
                        canvas.fillCircle(cx + this.x + dotX, dotsY, NumberedBarRenderer.DotSize);
                        dotsY += dotsOffset;
                    }
                }
                finally {
                    _?.[Symbol.dispose]?.();
                }
            }
        }
        getNoteLine() {
            return 0;
        }
        get tupletOffset() {
            return super.tupletOffset + this.resources.numberedNotationFont.size;
        }
        getFlagTopY(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        getFlagBottomY(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        getBeamDirection(_helper) {
            return BeamDirection.Down;
        }
        getTupletBeamDirection(_helper) {
            return BeamDirection.Up;
        }
        getNoteY(note, requestedPosition) {
            let y = super.getNoteY(note, requestedPosition);
            if (Number.isNaN(y)) {
                y = this.getLineY(0);
            }
            return y;
        }
        calculateBeamYWithDirection(_h, _x, _direction) {
            const res = this.resources.numberedNotationFont;
            return this.getLineY(0) + res.size;
        }
        getBarLineStart(_beat, _direction) {
            const noteHeadHeight = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.NoteheadBlack);
            return this.getLineY(0) - noteHeadHeight / 2;
        }
        createPreBeatGlyphs() {
            this.wasFirstOfLine = this.isFirstOfLine;
            if (this.index === 0 || (this.bar.masterBar.isRepeatStart && this._isOnlyNumbered)) {
                this.addPreBeatGlyph(new BarLineGlyph(false));
            }
            this.createLinePreBeatGlyphs();
            this.addPreBeatGlyph(new BarNumberGlyph(0, this.getLineHeight(-0.25), this.bar.index + 1));
        }
        createLinePreBeatGlyphs() {
            // Key signature
            if (!this.bar.previousBar || this.bar.keySignature !== this.bar.previousBar.keySignature) {
                this.createStartSpacing();
                this.createKeySignatureGlyphs();
            }
            if (this._isOnlyNumbered &&
                (!this.bar.previousBar ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureNumerator !==
                            this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureDenominator !==
                            this.bar.previousBar.masterBar.timeSignatureDenominator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.isFreeTime &&
                        this.bar.masterBar.isFreeTime !== this.bar.previousBar.masterBar.isFreeTime))) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
        }
        createKeySignatureGlyphs() {
            this.addPreBeatGlyph(new NumberedKeySignatureGlyph(0, this.getLineY(0), this.bar.keySignature, this.bar.keySignatureType));
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5));
            const masterBar = this.bar.masterBar;
            const g = new ScoreTimeSignatureGlyph(0, this.getLineY(0), masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator, masterBar.timeSignatureCommon, masterBar.isFreeTime &&
                (masterBar.previousMasterBar == null ||
                    masterBar.isFreeTime !== masterBar.previousMasterBar.isFreeTime));
            g.barSubElement = BarSubElement.NumberedTimeSignature;
            this.addPreBeatGlyph(g);
        }
        createPostBeatGlyphs() {
            if (this._isOnlyNumbered) {
                super.createPostBeatGlyphs();
            }
        }
        createVoiceGlyphs(v) {
            for (const b of v.beats) {
                const container = new NumberedBeatContainerGlyph(b, this.getVoiceContainer(v));
                container.preNotes = v.index === 0 ? new NumberedBeatPreNotesGlyph() : new BeatGlyphBase();
                container.onNotes = v.index === 0 ? new NumberedBeatGlyph() : new BeatOnNoteGlyphBase();
                this.addBeatGlyph(container);
            }
        }
        paintBeamingStem(_beat, _cy, x, topY, bottomY, canvas) {
        }
    }
    NumberedBarRenderer.StaffId = 'numbered';
    NumberedBarRenderer.BarSpacing = BarRendererBase.BeamSpacing + BarRendererBase.BeamThickness;
    NumberedBarRenderer.BarSize = 2;
    NumberedBarRenderer.DotSpacing = 5;
    NumberedBarRenderer.DotSize = 2;

    /**
     * This Factory produces NumberedBarRenderer instances
     */
    class NumberedBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return NumberedBarRenderer.StaffId;
        }
        getStaffPaddingTop(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingTop;
        }
        getStaffPaddingBottom(staff) {
            return staff.system.layout.renderer.settings.display.notationStaffPaddingBottom;
        }
        create(renderer, bar) {
            return new NumberedBarRenderer(renderer, bar);
        }
        canCreate(track, staff) {
            return super.canCreate(track, staff) && staff.showNumbered;
        }
    }

    class FreeTimeEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectText;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            const masterBar = beat.voice.bar.masterBar;
            const isFirstBeat = beat.voice.bar.staff.index === 0 && beat.voice.index === 0 && beat.index === 0;
            return (isFirstBeat &&
                masterBar.isFreeTime &&
                (masterBar.index === 0 || masterBar.isFreeTime !== masterBar.previousMasterBar.isFreeTime));
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, 'Free time', renderer.resources.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class SustainPedalGlyph extends EffectGlyph {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            super.doLayout();
            this.height = MusicFontSymbolSizes.Heights.get(MusicFontSymbol.KeyboardPedalPed);
        }
        paint(cx, cy, canvas) {
            const renderer = this.renderer;
            const y = cy + this.y;
            const h = this.height;
            const markers = renderer.bar.sustainPedals;
            const textWidth = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.KeyboardPedalPed);
            const starSize = MusicFontSymbolSizes.Widths.get(MusicFontSymbol.KeyboardPedalUp);
            let markerIndex = 0;
            while (markerIndex < markers.length) {
                let marker = markers[markerIndex];
                while (marker != null) {
                    const markerX = cx + this.renderer.getRatioPositionX(marker.ratioPosition);
                    // real own marker
                    let linePadding = 0;
                    if (marker.pedalType === SustainPedalMarkerType.Down) {
                        canvas.fillMusicFontSymbol(markerX, y + h, 1, MusicFontSymbol.KeyboardPedalPed, true);
                        linePadding = textWidth / 2 + SustainPedalGlyph.TextLinePadding;
                    }
                    else if (marker.pedalType === SustainPedalMarkerType.Up) {
                        canvas.fillMusicFontSymbol(markerX, y + h, 1, MusicFontSymbol.KeyboardPedalUp, true);
                        linePadding = starSize / 2 + SustainPedalGlyph.StarLinePadding;
                    }
                    // line to next marker or end-of-bar
                    if (marker.nextPedalMarker) {
                        if (marker.nextPedalMarker.bar === marker.bar) {
                            let nextX = cx + this.renderer.getRatioPositionX(marker.nextPedalMarker.ratioPosition);
                            switch (marker.nextPedalMarker.pedalType) {
                                case SustainPedalMarkerType.Down:
                                    nextX -= textWidth / 2;
                                    break;
                                case SustainPedalMarkerType.Hold:
                                    // no offset on hold
                                    break;
                                case SustainPedalMarkerType.Up:
                                    nextX -= starSize / 2;
                                    break;
                            }
                            const startX = markerX + linePadding;
                            if (nextX > startX) {
                                canvas.fillRect(startX, y + h - 1, nextX - startX, 1);
                            }
                        }
                        else {
                            const nextX = cx + this.x + this.width;
                            const startX = markerX + linePadding;
                            canvas.fillRect(startX, y + h - 1, nextX - startX, 1);
                        }
                    }
                    // line from bar start to initial marker
                    if (markerIndex === 0 && marker.previousPedalMarker) {
                        const startX = cx + this.x;
                        const endX = markerX - linePadding;
                        canvas.fillRect(startX, y + h - 1, endX - startX, 1);
                    }
                    markerIndex++;
                    if (marker.nextPedalMarker != null && marker.nextPedalMarker.bar !== marker.bar) {
                        marker = null;
                        markerIndex = markers.length;
                    }
                    else {
                        marker = marker.nextPedalMarker;
                    }
                }
            }
        }
    }
    SustainPedalGlyph.TextLinePadding = 3;
    SustainPedalGlyph.StarLinePadding = 3;

    class SustainPedalEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectSustainPedal;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.FullBar;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.voice.index === 0 && beat.index === 0 && beat.voice.bar.sustainPedals.length > 0;
        }
        createNewGlyph(renderer, beat) {
            return new SustainPedalGlyph();
        }
        canExpand(from, to) {
            return true;
        }
    }

    class GolpeEffectInfo extends EffectBarRendererInfo {
        constructor(type, shouldCreate) {
            super();
            this._type = type;
            this._shouldCreate = shouldCreate;
        }
        get notationElement() {
            return exports.NotationElement.EffectGolpe;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            const shouldCreate = this._shouldCreate;
            return beat.golpe === this._type && (!shouldCreate || shouldCreate(settings, beat));
        }
        createNewGlyph(renderer, beat) {
            return new GuitarGolpeGlyph(0, 0, true);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class WahPedalGlyph extends MusicFontGlyph {
        constructor(wahPedal) {
            super(0, 0, 1, WahPedalGlyph.getSymbol(wahPedal));
            this.center = true;
        }
        static getSymbol(wahPedal) {
            switch (wahPedal) {
                case WahPedal.Open:
                    return MusicFontSymbol.GuitarOpenPedal;
                case WahPedal.Closed:
                    return MusicFontSymbol.GuitarClosePedal;
            }
            return MusicFontSymbol.None;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height, canvas);
        }
    }

    class WahPedalEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectWahPedal;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.wahPedal !== WahPedal.None;
        }
        createNewGlyph(renderer, beat) {
            return new WahPedalGlyph(beat.wahPedal);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class BeatBarreEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectLetRing;
        }
        get canShareBand() {
            return false;
        }
        get hideOnMultiTrack() {
            return false;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.isBarre;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            let barre = '';
            switch (beat.barreShape) {
                case BarreShape.None:
                case BarreShape.Full:
                    break;
                case BarreShape.Half:
                    barre += '1/2';
                    break;
            }
            barre += `B ${BeatBarreEffectInfo.toRoman(beat.barreFret)}`;
            return new LineRangedGlyph(barre, false);
        }
        static toRoman(num) {
            let str = '';
            if (num > 0) {
                for (const [romanLetter, romanNumber] of BeatBarreEffectInfo.RomanLetters) {
                    const q = Math.floor(num / romanNumber);
                    num -= q * romanNumber;
                    str += romanLetter.repeat(q);
                }
            }
            return str;
        }
        canExpand(from, to) {
            return from.barreFret === to.barreFret && from.barreShape === to.barreShape;
        }
    }
    BeatBarreEffectInfo.RomanLetters = new Map([
        // ['M', 1000],
        // ['CM', 900],
        // ['D', 500],
        // ['CD', 400],
        // ['C', 100],
        // ['XC', 90],
        ['L', 50],
        ['XL', 40],
        ['X', 10],
        ['IX', 9],
        ['V', 5],
        ['IV', 4],
        ['I', 1]
    ]);

    class NoteOrnamentGlyph extends MusicFontGlyph {
        constructor(ornament) {
            super(0, 0, 1, NoteOrnamentGlyph.getSymbol(ornament));
            this.center = true;
        }
        static getSymbol(ornament) {
            switch (ornament) {
                case NoteOrnament.InvertedTurn:
                    return MusicFontSymbol.OrnamentTurnInverted;
                case NoteOrnament.Turn:
                    return MusicFontSymbol.OrnamentTurn;
                case NoteOrnament.UpperMordent:
                    return MusicFontSymbol.OrnamentShortTrill;
                case NoteOrnament.LowerMordent:
                    return MusicFontSymbol.OrnamentMordent;
            }
            return MusicFontSymbol.None;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height - 4, canvas);
        }
    }

    class NoteOrnamentEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectNoteOrnament;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.notes.some(n => n.ornament !== NoteOrnament.None);
        }
        createNewGlyph(renderer, beat) {
            return new NoteOrnamentGlyph(beat.notes.find(n => n.ornament !== NoteOrnament.None).ornament);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class RasgueadoEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectRasgueado;
        }
        get canShareBand() {
            return false;
        }
        get hideOnMultiTrack() {
            return false;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.hasRasgueado;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('rasg.');
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TargetDirectionGlyph extends Glyph {
        constructor(symbols) {
            super(0, 0);
            this._symbols = symbols;
        }
        doLayout() {
            this.height = 27 /* glyph */;
        }
        paint(cx, cy, canvas) {
            canvas.fillMusicFontSymbols(cx + this.x, cy + this.y + this.height, 0.8, this._symbols, true);
        }
    }
    class JumpDirectionGlyph extends Glyph {
        constructor(text) {
            super(0, 0);
            this._text = text;
        }
        doLayout() {
            this.height = this.renderer.resources.directionsFont.size * 1.5;
        }
        paint(cx, cy, canvas) {
            const font = canvas.font;
            const baseline = canvas.textBaseline;
            const align = canvas.textAlign;
            canvas.font = this.renderer.resources.directionsFont;
            canvas.textBaseline = TextBaseline.Middle;
            canvas.textAlign = TextAlign.Right;
            canvas.fillText(this._text, cx + this.x, cy + this.y + this.height / 2);
            canvas.font = font;
            canvas.textBaseline = baseline;
            canvas.textAlign = align;
        }
    }
    class DirectionsContainerGlyph extends EffectGlyph {
        constructor(x, y, directions) {
            super(x, y);
            this._barBeginGlyphs = [];
            this._barEndGlyphs = [];
            this._directions = directions;
        }
        doLayout() {
            const d = this._directions;
            if (d.has(Direction.TargetSegnoSegno)) {
                this._barBeginGlyphs.push(new TargetDirectionGlyph([MusicFontSymbol.Segno, MusicFontSymbol.Segno]));
            }
            if (d.has(Direction.TargetSegno)) {
                this._barBeginGlyphs.push(new TargetDirectionGlyph([MusicFontSymbol.Segno]));
            }
            if (d.has(Direction.TargetDoubleCoda)) {
                this._barBeginGlyphs.push(new TargetDirectionGlyph([MusicFontSymbol.Coda, MusicFontSymbol.Coda]));
            }
            if (d.has(Direction.TargetCoda)) {
                this._barBeginGlyphs.push(new TargetDirectionGlyph([MusicFontSymbol.Coda]));
            }
            if (d.has(Direction.TargetFine)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('Fine'));
            }
            if (d.has(Direction.JumpDaDoubleCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('To Double Coda'));
            }
            if (d.has(Direction.JumpDaCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('To Coda'));
            }
            if (d.has(Direction.JumpDalSegnoSegno)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S.S.'));
            }
            if (d.has(Direction.JumpDalSegnoSegnoAlCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S.S. al Coda'));
            }
            if (d.has(Direction.JumpDalSegnoSegnoAlDoubleCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S.S. al Double Coda'));
            }
            if (d.has(Direction.JumpDalSegnoSegnoAlFine)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S.S. al Fine'));
            }
            if (d.has(Direction.JumpDalSegno)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S.'));
            }
            if (d.has(Direction.JumpDalSegnoAlCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S. al Coda'));
            }
            if (d.has(Direction.JumpDalSegnoAlDoubleCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S. al Double Coda'));
            }
            if (d.has(Direction.JumpDalSegnoAlFine)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.S. al Fine'));
            }
            if (d.has(Direction.JumpDaCapo)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.C.'));
            }
            if (d.has(Direction.JumpDaCapoAlCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.C. al Coda'));
            }
            if (d.has(Direction.JumpDaCapoAlDoubleCoda)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.C. al Double Coda'));
            }
            if (d.has(Direction.JumpDaCapoAlFine)) {
                this._barEndGlyphs.push(new JumpDirectionGlyph('D.C. al Fine'));
            }
            const beginHeight = this.doSideLayout(this._barBeginGlyphs);
            const endHeight = this.doSideLayout(this._barEndGlyphs);
            this.height = Math.max(beginHeight, endHeight);
        }
        doSideLayout(glyphs) {
            let y = 0;
            const padding = 3;
            for (const g of glyphs) {
                g.y = y;
                g.renderer = this.renderer;
                g.doLayout();
                y += g.height + padding;
            }
            return y;
        }
        paint(cx, cy, canvas) {
            for (const begin of this._barBeginGlyphs) {
                begin.paint(cx + this.x, cy + this.y, canvas);
            }
            for (const end of this._barEndGlyphs) {
                end.paint(cx + this.x + this.width, cy + this.y, canvas);
            }
        }
    }

    class DirectionsEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectDirections;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.FullBar;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.voice.index === 0 &&
                beat.index === 0 &&
                beat.voice.bar.masterBar.directions !== null &&
                beat.voice.bar.masterBar.directions.size > 0);
        }
        createNewGlyph(renderer, beat) {
            return new DirectionsContainerGlyph(0, 0, beat.voice.bar.masterBar.directions);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class BeatTimerGlyph extends EffectGlyph {
        constructor(timer) {
            super(0, 0);
            this._text = '';
            this._textWidth = 0;
            this._textHeight = 0;
            this._timer = timer;
        }
        doLayout() {
            const minutes = (this._timer / 60000) | 0;
            const seconds = ((this._timer - minutes * 60000) / 1000) | 0;
            this._text = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            const c = this.renderer.scoreRenderer.canvas;
            c.font = this.renderer.resources.timerFont;
            const size = c.measureText(this._text);
            this._textHeight = c.font.size + BeatTimerGlyph.PaddingY * 2;
            this._textWidth = size.width + BeatTimerGlyph.PaddingX * 2;
            this.height = this._textHeight + BeatTimerGlyph.MarginY * 2;
        }
        paint(cx, cy, canvas) {
            const halfWidth = (this._textWidth / 2) | 0;
            canvas.strokeRect(cx + this.x - halfWidth, cy + this.y + BeatTimerGlyph.MarginY, this._textWidth, this._textHeight);
            const f = canvas.font;
            const b = canvas.textBaseline;
            const a = canvas.textAlign;
            canvas.font = this.renderer.resources.timerFont;
            canvas.textBaseline = TextBaseline.Middle;
            canvas.textAlign = TextAlign.Center;
            canvas.fillText(this._text, cx + this.x, cy + this.y + this.height / 2);
            canvas.font = f;
            canvas.textBaseline = b;
            canvas.textAlign = a;
        }
    }
    BeatTimerGlyph.PaddingX = 2;
    BeatTimerGlyph.PaddingY = 2;
    BeatTimerGlyph.MarginY = 2;

    class BeatTimerEffectInfo extends EffectBarRendererInfo {
        get notationElement() {
            return exports.NotationElement.EffectBeatTimer;
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.showTimer;
        }
        createNewGlyph(renderer, beat) {
            return new BeatTimerGlyph(beat.timer ?? 0);
        }
        canExpand(from, to) {
            return true;
        }
    }

    // <auto-generated>
    // This code was auto-generated.
    // Changes to this file may cause incorrect behavior and will be lost if
    // the code is regenerated.
    // </auto-generated>
    class VersionInfo {
        static print(print) {
            print(`alphaTab ${VersionInfo.version}`);
            print(`commit: ${VersionInfo.commit}`);
            print(`build date: ${VersionInfo.date}`);
        }
    }
    VersionInfo.version = '1.6.0';
    VersionInfo.date = '2025-06-15T14:48:58.455Z';
    VersionInfo.commit = 'f43cd971d7911b75277a9b3d98ca0855a129ad4d';

    /**
     * A factory for custom layout engines.
     */
    class LayoutEngineFactory {
        constructor(vertical, createLayout) {
            this.vertical = vertical;
            this.createLayout = createLayout;
        }
    }
    /**
     * A factory for custom render engines.
     * Note for Web: To use a custom engine in workers you have to ensure the engine and registration to the environment are
     * also done in the background worker files (e.g. when bundling)
     */
    class RenderEngineFactory {
        constructor(supportsWorkers, canvas) {
            this.supportsWorkers = supportsWorkers;
            this.createCanvas = canvas;
        }
    }
    /**
     * This public class represents the global alphaTab environment where
     * alphaTab looks for information like available layout engines
     * staves etc.
     * This public class represents the global alphaTab environment where
     * alphaTab looks for information like available layout engines
     * staves etc.
     * @partial
     */
    class Environment {
        /**
         * @target web
         * @internal
         */
        static get globalThis() {
            if (Environment._globalThis === undefined) {
                try {
                    Environment._globalThis = globalThis;
                }
                catch (e) {
                }
                if (typeof Environment._globalThis === 'undefined') {
                    Environment._globalThis = self;
                }
                if (typeof Environment._globalThis === 'undefined') {
                    Environment._globalThis = global;
                }
                if (typeof Environment._globalThis === 'undefined') {
                    Environment._globalThis = window;
                }
                if (typeof Environment._globalThis === 'undefined') {
                    Environment._globalThis = Function('return this')();
                }
            }
            return Environment._globalThis;
        }
        /**
         * @target web
         */
        static get isRunningInWorker() {
            return 'WorkerGlobalScope' in Environment.globalThis;
        }
        /**
         * @target web
         */
        static get isRunningInAudioWorklet() {
            return 'AudioWorkletGlobalScope' in Environment.globalThis;
        }
        /**
         * @target web
         * @partial
         */
        static throttle(action, delay) {
            let timeoutId = 0;
            return () => {
                Environment.globalThis.clearTimeout(timeoutId);
                timeoutId = Environment.globalThis.setTimeout(action, delay);
            };
        }
        /**
         * @target web
         */
        static detectScriptFile() {
            // custom global constant
            if (!Environment.isRunningInWorker && Environment.globalThis.ALPHATAB_ROOT) {
                let scriptFile = Environment.globalThis.ALPHATAB_ROOT;
                scriptFile = Environment.ensureFullUrl(scriptFile);
                scriptFile = Environment.appendScriptName(scriptFile);
                return scriptFile;
            }
            // browser include as ES6 import
            // <script type="module">
            // import * as alphaTab from 'dist/alphaTab.js';
            try {
                // @ts-ignore
                const importUrl = {};
                // avoid using file:// urls in case of
                // bundlers like webpack
                if (importUrl && importUrl.indexOf('file://') === -1) {
                    return importUrl;
                }
            }
            catch (e) {
            }
            // normal browser include as <script>
            if ('document' in Environment.globalThis &&
                document.currentScript &&
                document.currentScript instanceof HTMLScriptElement) {
                return document.currentScript.src;
            }
            return null;
        }
        /**
         * @target web
         * @internal
         */
        static ensureFullUrl(relativeUrl) {
            if (!relativeUrl) {
                return '';
            }
            if (!relativeUrl.startsWith('http') && !relativeUrl.startsWith('https') && !relativeUrl.startsWith('file')) {
                let root = '';
                const location = Environment.globalThis.location;
                root += location.protocol?.toString();
                root += '//'?.toString();
                if (location.hostname) {
                    root += location.hostname?.toString();
                }
                if (location.port) {
                    root += ':'?.toString();
                    root += location.port?.toString();
                }
                // as it is not clearly defined how slashes are treated in the location object
                // better be safe than sorry here
                if (!relativeUrl.startsWith('/')) {
                    const directory = location.pathname.split('/').slice(0, -1).join('/');
                    if (directory.length > 0) {
                        if (!directory.startsWith('/')) {
                            root += '/'?.toString();
                        }
                        root += directory?.toString();
                    }
                }
                if (!relativeUrl.startsWith('/')) {
                    root += '/'?.toString();
                }
                root += relativeUrl?.toString();
                return root;
            }
            return relativeUrl;
        }
        static appendScriptName(url) {
            // append script name
            if (url && !url.endsWith('.js')) {
                if (!url.endsWith('/')) {
                    url += '/';
                }
                url += 'alphaTab.js';
            }
            return url;
        }
        /**
         * @target web
         */
        static detectFontDirectory() {
            if (!Environment.isRunningInWorker && Environment.globalThis.ALPHATAB_FONT) {
                return Environment.ensureFullUrl(Environment.globalThis.ALPHATAB_FONT);
            }
            const scriptFile = Environment.scriptFile;
            if (scriptFile) {
                const lastSlash = scriptFile.lastIndexOf(String.fromCharCode(47));
                if (lastSlash >= 0) {
                    return `${scriptFile.substr(0, lastSlash)}/font/`;
                }
            }
            return null;
        }
        /**
         * @target web
         */
        static registerJQueryPlugin() {
            if (!Environment.isRunningInWorker && Environment.globalThis && 'jQuery' in Environment.globalThis) {
                const jquery = Environment.globalThis.jQuery;
                const api = new JQueryAlphaTab();
                jquery.fn.alphaTab = function (method) {
                    // biome-ignore lint/style/noArguments: Legacy jQuery plugin argument forwarding
                    const args = Array.prototype.slice.call(arguments, 1);
                    // if only a single element is affected, we use this
                    if (this.length === 1) {
                        return api.exec(this[0], method, args);
                    }
                    // if multiple elements are affected we provide chaining
                    return this.each((_i, e) => {
                        api.exec(e, method, args);
                    });
                };
                jquery.alphaTab = {
                    restore: JQueryAlphaTab.restore
                };
                jquery.fn.alphaTab.fn = api;
            }
        }
        static getRenderEngineFactory(engine) {
            if (!engine || !Environment.renderEngines.has(engine)) {
                return Environment.renderEngines.get('default');
            }
            return Environment.renderEngines.get(engine);
        }
        /**
         * @internal
         */
        static getLayoutEngineFactory(layoutMode) {
            if (!layoutMode || !Environment.layoutEngines.has(layoutMode)) {
                return Environment.layoutEngines.get(exports.LayoutMode.Page);
            }
            return Environment.layoutEngines.get(layoutMode);
        }
        /**
         * Gets all default ScoreImporters
         * @returns
         */
        static buildImporters() {
            return [
                new Gp3To5Importer(),
                new GpxImporter(),
                new Gp7To8Importer(),
                new MusicXmlImporter(),
                new CapellaImporter(),
                new AlphaTexImporter()
            ];
        }
        static createDefaultRenderEngines() {
            const renderEngines = new Map();
            renderEngines.set('svg', new RenderEngineFactory(true, () => {
                return new CssFontSvgCanvas();
            }));
            renderEngines.set('default', renderEngines.get('svg'));
            renderEngines.set('skia', new RenderEngineFactory(false, () => {
                return new SkiaCanvas();
            }));
            Environment.createPlatformSpecificRenderEngines(renderEngines);
            return renderEngines;
        }
        /**
         * Enables the usage of alphaSkia as rendering backend.
         * @param musicFontData The raw binary data of the music font.
         * @param alphaSkia The alphaSkia module.
         */
        static enableAlphaSkia(musicFontData, alphaSkia) {
            SkiaCanvas.enable(musicFontData, alphaSkia);
        }
        /**
         * Registers a new custom font for the usage in the alphaSkia rendering backend.
         * @param fontData The raw binary data of the font.
         * @returns The font info under which the font was registered.
         */
        static registerAlphaSkiaCustomFont(fontData) {
            return SkiaCanvas.registerFont(fontData);
        }
        /**
         * @target web
         * @partial
         */
        static createPlatformSpecificRenderEngines(renderEngines) {
            renderEngines.set('html5', new RenderEngineFactory(false, () => {
                return new Html5Canvas();
            }));
        }
        static createDefaultRenderers() {
            return [
                //
                // Slash
                new EffectBarRendererFactory(Environment.StaffIdBeforeSlashAlways, [
                    new TempoEffectInfo(),
                    new TripletFeelEffectInfo(),
                    new MarkerEffectInfo(),
                    new DirectionsEffectInfo(),
                    new AlternateEndingsEffectInfo(),
                    new FreeTimeEffectInfo(),
                    new TextEffectInfo(),
                    new BeatTimerEffectInfo(),
                    new ChordsEffectInfo()
                ]),
                // no before-slash-hideable
                new SlashBarRendererFactory(),
                //
                // Score (standard notation)
                new EffectBarRendererFactory(Environment.StaffIdBeforeScoreAlways, [
                    new FermataEffectInfo(),
                    new BeatBarreEffectInfo(),
                    new NoteOrnamentEffectInfo(),
                    new RasgueadoEffectInfo(),
                    new WahPedalEffectInfo()
                ]),
                new EffectBarRendererFactory(Environment.StaffIdBeforeScoreHideable, [
                    new WhammyBarEffectInfo(),
                    new TrillEffectInfo(),
                    new OttaviaEffectInfo(true),
                    new WideBeatVibratoEffectInfo(),
                    new SlightBeatVibratoEffectInfo(),
                    new WideNoteVibratoEffectInfo(),
                    new SlightNoteVibratoEffectInfo(false),
                    new LeftHandTapEffectInfo(),
                    new GolpeEffectInfo(GolpeType.Finger)
                ], (_, staff) => staff.showStandardNotation),
                new ScoreBarRendererFactory(),
                //
                // Numbered
                new EffectBarRendererFactory(Environment.StaffIdBeforeNumberedAlways, [
                    new CrescendoEffectInfo(),
                    new OttaviaEffectInfo(false),
                    new DynamicsEffectInfo(),
                    new GolpeEffectInfo(GolpeType.Thumb, (s, b) => b.voice.bar.staff.showStandardNotation),
                    new SustainPedalEffectInfo()
                ]),
                // no before-numbered-hideable
                new NumberedBarRendererFactory(),
                //
                // Tabs
                new EffectBarRendererFactory(Environment.StaffIdBeforeTabAlways, [new LyricsEffectInfo()]),
                new EffectBarRendererFactory(Environment.StaffIdBeforeTabHideable, [
                    // TODO: whammy line effect
                    new TrillEffectInfo(),
                    new WideBeatVibratoEffectInfo(),
                    new SlightBeatVibratoEffectInfo(),
                    new WideNoteVibratoEffectInfo(),
                    new SlightNoteVibratoEffectInfo(true),
                    new TapEffectInfo(),
                    new FadeEffectInfo(),
                    new HarmonicsEffectInfo(HarmonicType.Natural),
                    new HarmonicsEffectInfo(HarmonicType.Artificial),
                    new HarmonicsEffectInfo(HarmonicType.Pinch),
                    new HarmonicsEffectInfo(HarmonicType.Tap),
                    new HarmonicsEffectInfo(HarmonicType.Semi),
                    new HarmonicsEffectInfo(HarmonicType.Feedback),
                    new LetRingEffectInfo(),
                    new CapoEffectInfo(),
                    new FingeringEffectInfo(),
                    new PalmMuteEffectInfo(),
                    new PickStrokeEffectInfo(),
                    new PickSlideEffectInfo(),
                    new LeftHandTapEffectInfo(),
                    new GolpeEffectInfo(GolpeType.Finger, (s, b) => !b.voice.bar.staff.showStandardNotation)
                ], (_, staff) => staff.showTablature),
                new TabBarRendererFactory(),
                new EffectBarRendererFactory(Environment.StaffIdBeforeEndAlways, [
                    new GolpeEffectInfo(GolpeType.Thumb, (s, b) => !b.voice.bar.staff.showStandardNotation)
                ])
            ];
        }
        static createDefaultStaveProfiles() {
            const staveProfiles = new Map();
            // the general layout is repeating the same pattern across the different notation staffs:
            // * general effects before notation renderer, shown also if notation renderer is hidden (`before-xxxx-always`)
            // * effects specific to the notation renderer, hidden if the nottation renderer is hidden (`before-xxxx-hideable`)
            // * the notation renderer itself, hidden based on settings (`xxxx`)
            const defaultRenderers = Environment.createDefaultRenderers();
            staveProfiles.set(exports.StaveProfile.Default, defaultRenderers);
            staveProfiles.set(exports.StaveProfile.ScoreTab, defaultRenderers);
            const scoreRenderers = new Set([
                Environment.StaffIdBeforeSlashAlways,
                Environment.StaffIdBeforeScoreAlways,
                Environment.StaffIdBeforeNumberedAlways,
                Environment.StaffIdBeforeTabAlways,
                ScoreBarRenderer.StaffId,
                Environment.StaffIdBeforeEndAlways
            ]);
            staveProfiles.set(exports.StaveProfile.Score, defaultRenderers.filter(r => scoreRenderers.has(r.staffId)));
            const tabRenderers = new Set([
                Environment.StaffIdBeforeSlashAlways,
                Environment.StaffIdBeforeScoreAlways,
                Environment.StaffIdBeforeNumberedAlways,
                Environment.StaffIdBeforeTabAlways,
                TabBarRenderer.StaffId,
                Environment.StaffIdBeforeEndAlways
            ]);
            staveProfiles.set(exports.StaveProfile.Tab, Environment.createDefaultRenderers().filter(r => {
                if (r instanceof TabBarRendererFactory) {
                    const tab = r;
                    tab.showTimeSignature = true;
                    tab.showRests = true;
                    tab.showTiedNotes = true;
                }
                return tabRenderers.has(r.staffId);
            }));
            staveProfiles.set(exports.StaveProfile.TabMixed, Environment.createDefaultRenderers().filter(r => {
                if (r instanceof TabBarRendererFactory) {
                    const tab = r;
                    tab.showTimeSignature = false;
                    tab.showRests = false;
                    tab.showTiedNotes = false;
                }
                return tabRenderers.has(r.staffId);
            }));
            return staveProfiles;
        }
        static createDefaultLayoutEngines() {
            const engines = new Map();
            // default layout engines
            engines.set(exports.LayoutMode.Page, new LayoutEngineFactory(true, r => {
                return new PageViewLayout(r);
            }));
            engines.set(exports.LayoutMode.Horizontal, new LayoutEngineFactory(false, r => {
                return new HorizontalScreenLayout(r);
            }));
            return engines;
        }
        /**
         * @target web
         */
        static initializeMain(createWebWorker, createAudioWorklet) {
            if (Environment.isRunningInWorker || Environment.isRunningInAudioWorklet) {
                return;
            }
            // browser polyfills
            if (Environment.webPlatform === exports.WebPlatform.Browser || Environment.webPlatform === exports.WebPlatform.BrowserModule) {
                Environment.registerJQueryPlugin();
                Environment.HighDpiFactor = window.devicePixelRatio;
            }
            Environment.createWebWorker = createWebWorker;
            Environment.createAudioWorklet = createAudioWorklet;
        }
        /**
         * @target web
         * @internal
         */
        static get alphaTabWorker() {
            return Environment.globalThis.Worker;
        }
        /**
         * @target web
         * @internal
         */
        static get alphaTabUrl() {
            return Environment.globalThis.URL;
        }
        /**
         * @target web
         */
        static initializeWorker() {
            if (!Environment.isRunningInWorker) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Not running in worker, cannot run worker initialization');
            }
            AlphaTabWebWorker.init();
            AlphaSynthWebWorker.init();
            Environment.createWebWorker = _ => {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Nested workers are not supported');
            };
        }
        /**
         * @target web
         */
        static initializeAudioWorklet() {
            if (!Environment.isRunningInAudioWorklet) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Not running in audio worklet, cannot run worklet initialization');
            }
            AlphaSynthWebWorklet.init();
        }
        /**
         * @target web
         */
        static detectWebPack() {
            try {
                // @ts-ignore
                if (typeof __webpack_require__ === 'function') {
                    return true;
                }
            }
            catch (e) {
            }
            return false;
        }
        /**
         * @target web
         */
        static detectVite() {
            try {
                // @ts-ignore
                if (typeof __BASE__ === 'string') {
                    return true;
                }
            }
            catch (e) {
            }
            return false;
        }
        /**
         * @target web
         */
        static detectWebPlatform() {
            // There might be polyfills or platforms like Electron which have a global process object defined even in the browser.
            // We need to differenciate between those platforms and a real nodejs
            // the webPlatform is currently only relevant on the main process side and not within workers/worklets
            // so it is OK if we wrongly detect node.js inside them.
            const isBrowserLike = 
            // browser UI thread
            typeof Environment.globalThis.Window !== 'undefined' &&
                Environment.globalThis instanceof Environment.globalThis.Window;
            if (!isBrowserLike) {
                try {
                    // Credit of the node.js detection goes to
                    // https://github.com/iliakan/detect-node
                    // MIT License
                    // Copyright (c) 2017 Ilya Kantor
                    // tslint:disable-next-line: strict-type-predicates
                    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {
                        return exports.WebPlatform.NodeJs;
                    }
                }
                catch (e) {
                }
            }
            try {
                // @ts-ignore
                const url = {};
                if (url && typeof url === 'string' && !url.startsWith('file://')) {
                    return exports.WebPlatform.BrowserModule;
                }
            }
            catch (e) {
            }
            return exports.WebPlatform.Browser;
        }
        /**
         * Prints the environment information for easier troubleshooting.
         * @param force Whether to force printing.
         */
        static printEnvironmentInfo(force = true) {
            const printer = force
                ? message => {
                    Logger.log.debug('VersionInfo', message);
                }
                : message => {
                    Logger.debug('VersionInfo', message);
                };
            VersionInfo.print(printer);
            printer(`High DPI: ${Environment.HighDpiFactor}`);
            Environment.printPlatformInfo(printer);
        }
        /**
         * @target web
         * @partial
         */
        static printPlatformInfo(print) {
            print(`Browser: ${navigator.userAgent}`);
            print(`Platform: ${exports.WebPlatform[Environment.webPlatform]}`);
            print(`WebPack: ${Environment.isWebPackBundled}`);
            print(`Vite: ${Environment.isViteBundled}`);
            if (Environment.webPlatform !== exports.WebPlatform.NodeJs) {
                print(`Window Size: ${window.outerWidth}x${window.outerHeight}`);
                print(`Screen Size: ${window.screen.width}x${window.screen.height}`);
            }
        }
        /**
         * Prepares the given object to be sent to workers. Web Frameworks like Vue might
         * create proxy objects for all objects used. This code handles the necessary unwrapping.
         * @internal
         * @target web
         */
        static prepareForPostMessage(object) {
            if (!object) {
                return object;
            }
            // Vue toRaw:
            // https://github.com/vuejs/core/blob/e7381761cc7971c0d40ae0a0a72687a500fd8db3/packages/reactivity/src/reactive.ts#L378-L381
            if (typeof object === 'object') {
                const unwrapped = object.__v_raw;
                if (unwrapped) {
                    return Environment.prepareForPostMessage(unwrapped);
                }
            }
            // Solidjs unwrap: the symbol required to access the raw object is unfortunately hidden and we cannot unwrap it without importing
            // import { unwrap } from "solid-js/store"
            // alternative for users is to replace this method during runtime.
            return object;
        }
    }
    Environment.StaffIdBeforeSlashAlways = 'before-slash-always';
    Environment.StaffIdBeforeScoreAlways = 'before-score-always';
    Environment.StaffIdBeforeScoreHideable = 'before-score-hideable';
    Environment.StaffIdBeforeNumberedAlways = 'before-numbered-always';
    Environment.StaffIdBeforeTabAlways = 'before-tab-always';
    Environment.StaffIdBeforeTabHideable = 'before-tab-hideable';
    Environment.StaffIdBeforeEndAlways = 'before-end-always';
    /**
     * The font size of the music font in pixel.
     * @internal
     */
    Environment.MusicFontSize = 34;
    /**
     * The scaling factor to use when rending raster graphics for sharper rendering on high-dpi displays.
     * @internal
     */
    Environment.HighDpiFactor = 1;
    /**
     * @target web
     */
    Environment._globalThis = undefined;
    /**
     * @target web
     */
    Environment.webPlatform = Environment.detectWebPlatform();
    /**
     * @target web
     */
    Environment.isWebPackBundled = Environment.detectWebPack();
    /**
     * @target web
     */
    Environment.isViteBundled = Environment.detectVite();
    /**
     * @target web
     */
    Environment.scriptFile = Environment.detectScriptFile();
    /**
     * @target web
     */
    Environment.fontDirectory = Environment.detectFontDirectory();
    Environment.renderEngines = Environment.createDefaultRenderEngines();
    /**
     * @internal
     */
    Environment.layoutEngines = Environment.createDefaultLayoutEngines();
    /**
     * @internal
     */
    Environment.staveProfiles = Environment.createDefaultStaveProfiles();

    /**
     * Lists the known file formats for font files.
     * @target web
     */
    exports.FontFileFormat = void 0;
    (function (FontFileFormat) {
        /**
         * .eot
         */
        FontFileFormat[FontFileFormat["EmbeddedOpenType"] = 0] = "EmbeddedOpenType";
        /**
         * .woff
         */
        FontFileFormat[FontFileFormat["Woff"] = 1] = "Woff";
        /**
         * .woff2
         */
        FontFileFormat[FontFileFormat["Woff2"] = 2] = "Woff2";
        /**
         * .otf
         */
        FontFileFormat[FontFileFormat["OpenType"] = 3] = "OpenType";
        /**
         * .ttf
         */
        FontFileFormat[FontFileFormat["TrueType"] = 4] = "TrueType";
        /**
         * .svg
         */
        FontFileFormat[FontFileFormat["Svg"] = 5] = "Svg";
    })(exports.FontFileFormat || (exports.FontFileFormat = {}));
    /**
     * All main settings of alphaTab controlling rather general aspects of its behavior.
     * @json
     * @json_declaration
     */
    class CoreSettings {
        /**
         * Builds the default SMuFL font sources for the usage with alphaTab in cases
         * where no custom {@link smuflFontSources} are provided.
         * @param fontDirectory The {@link CoreSettings.fontDirectory} configured.
         * @target web
         */
        static buildDefaultSmuflFontSources(fontDirectory) {
            const map = new Map();
            // WOFF, WOFF2 and OTF should cover all our platform needs
            const prefix = fontDirectory ?? '';
            map.set(exports.FontFileFormat.Woff2, `${prefix}Bravura.woff2`);
            map.set(exports.FontFileFormat.Woff, `${prefix}Bravura.woff`);
            map.set(exports.FontFileFormat.OpenType, `${prefix}Bravura.otf`);
            return map;
        }
        /**
         * @target web
         */
        constructor() {
            /**
             * The full URL to the alphaTab JavaScript file.
             * @remarks
             * AlphaTab needs to know the full URL to the script file it is contained in to launch the web workers. AlphaTab will do its best to auto-detect
             * this path but in case it fails, this setting can be used to explicitly define it. Altenatively also a global variable `ALPHATAB_ROOT` can
             * be defined before initializing. Please be aware that bundling alphaTab together with other scripts might cause errors
             * in case those scripts are not suitable for web workers. e.g. if there is a script bundled together with alphaTab that accesses the DOM,
             * this will cause an error when alphaTab starts this script as worker.
             * @defaultValue Absolute url to JavaScript file containing alphaTab. (auto detected)
             * @category Core - JavaScript Specific
             * @target web
             * @since 0.9.6
             */
            this.scriptFile = null;
            /**
             * The full URL to the alphaTab font directory.
             * @remarks
             * AlphaTab will generate some dynamic CSS that is needed for displaying the music symbols correctly. For this it needs to know
             * where the Web Font files of [Bravura](https://github.com/steinbergmedia/bravura) are. Normally alphaTab expects
             * them to be in a `font` subfolder beside the script file. If this is not the case, this setting must be used to configure the path.
             * Alternatively also a global variable `ALPHATAB_FONT` can be set on the page before initializing alphaTab.
             *
             * Use {@link smuflFontSources} for more flexible font configuration.
             * @defaultValue `"${AlphaTabScriptFolder}/font/"`
             * @category Core - JavaScript Specific
             * @target web
             * @since 0.9.6
             */
            this.fontDirectory = null;
            /**
             * Defines the URLs from which to load the SMuFL compliant font files.
             * @remarks
             * These sources will be used to load and register the webfonts on the page so
             * they are available for rendering the music sheet. The sources can be set to any
             * CSS compatible URL which can be passed into `url()`.
             * See https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src#url
             * @defaultValue Bravura files located at {@link fontDirectory} .
             * @category Core - JavaScript Specific
             * @target web
             * @since 1.6.0
             */
            this.smuflFontSources = null;
            /**
             * The full URL to the input file to be loaded.
             * @remarks
             * AlphaTab can automatically load and render a file after initialization. This eliminates the need of manually calling
             * one of the load methods which are available. alphaTab will automatically initiate an `XMLHttpRequest` after initialization
             * to load and display the provided url of this setting. Note that this setting is only interpreted once on initialization.
             * @defaultValue `null`
             * @category Core - JavaScript Specific
             * @target web
             * @since 0.9.6
             */
            this.file = null;
            /**
             * Whether the contents of the DOM element should be loaded as alphaTex.
             * @target web
             * @remarks
             * This setting allows you to fill alphaTex code into the DOM element and make alphaTab automatically
             * load it when initializing. Note that this setting is only interpreted once on initialization.
             * @defaultValue `false`
             * @category Core - JavaScript Specific
             * @since 0.9.6
             * @example
             * JavaScript
             * ```html
             * <div id="alphaTab">\title "Simple alphaTex init" . 3.3*4</div>
             * <script>
             * const api = new alphaTab.AlphaTabApi(document.getElementById('alphaTab'), { core: { tex: true }});
             * </script>
             * ```
             */
            this.tex = false;
            /**
             * The tracks to display for the initally loaded file.
             * @json_raw
             * @remarks
             * This setting can be used in combinition with the {@link file} or {@link tex} option. It controls which of the tracks
             * of the initially loaded file should be displayed.
             * @defaultValue `null`
             * @category Core - JavaScript Specific
             * @target web
             * @since 0.9.6
             */
            this.tracks = null;
            /**
             * Enables lazy loading of the rendered music sheet chunks.
             * @remarks
             * AlphaTab renders the music sheet in smaller sub-chunks to have fast UI feedback. Not all of those sub-chunks are immediately
             * appended to the DOM due to performance reasons. AlphaTab tries to detect which elements are visible on the screen, and only
             * appends those elements to the DOM. This reduces the load of the browser heavily but is not working for all layouts and use cases.
             * This setting set to false, ensures that all rendered items are instantly appended to the DOM.
             * The lazy rendering of partial might not be available on all platforms.
             * @defaultValue `true`
             * @category Core
             * @since 0.9.6
             */
            this.enableLazyLoading = true;
            /**
             * The engine which should be used to render the the tablature.
             * @remarks
             * AlphaTab can use various render engines to draw the music notation. The available render engines is specific to the platform. Please refer to the table below to find out which engines are available on which platform.
             * - `default`- Platform specific default engine
             * - `html5`- Uses HTML5 canvas elements to render the music notation (browser only)
             * - `svg`- Outputs SVG strings (all platforms, default for web)
             * - `skia` - Uses [Skia](https://skia.org/) for rendering (all non-browser platforms via [alphaSkia](https://github.com/CoderLine/alphaSkia), default for non-web)
             * - `gdi` - Uses [GDI+](https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/graphics-and-drawing-in-windows-forms) for rendering (only on .net)
             * - `android` - Uses [android.graphics.Canvas](https://developer.android.com/reference/android/graphics/Canvas) for rendering (only on Android)
             * @defaultValue `"default"`
             * @category Core
             * @since 0.9.6
             */
            this.engine = 'default';
            /**
             * The log level to use within alphaTab
             * @remarks
             * AlphaTab internally does quite a bit of logging for debugging and informational purposes. The log level of alphaTab can be controlled via this setting.
             * @defaultValue `LogLevel.Info`
             * @category Core
             * @since 0.9.6
             */
            this.logLevel = exports.LogLevel.Info;
            /**
             * Whether the rendering should be done in a worker if possible.
             * @remarks
             * AlphaTab normally tries to render the music sheet asynchronously in a worker. This reduces the load on the UI side and avoids hanging. However sometimes it might be more desirable to have
             * a synchronous rendering behavior. This setting can be set to false to synchronously render the music sheet on the UI side.
             * @defaultValue `true`
             * @category Core
             * @since 0.9.6
             */
            this.useWorkers = true;
            /**
             * Whether in the {@link BoundsLookup} also the position and area of each individual note is provided.
             * @remarks
             * AlphaTab collects the position of the rendered music notation elements during the rendering process. This way some level of interactivity can be provided like the feature that seeks to the corresponding position when clicking on a beat.
             * By default the position of the individual notes is not collected due to performance reasons. If access to note position information is needed, this setting can enable it.
             * @defaultValue `false`
             * @category Core
             * @since 0.9.6
             * @example
             * JavaScript
             * ```js
             * const settings = new alphaTab.model.Settings();
             * settings.core.includeNoteBounds = true;
             * const api = new alphaTab.AlphaTabApi(document.querySelector('#alphaTab'), settings);
             * api.renderFinished.on(() => {
             *     const lookup = api.renderer.boundsLookup;
             *     const x = 100;
             *     const y = 100;
             *     const beat = lookup.getBeatAtPos(x, y);
             *     const note = lookup.getNoteAtPos(beat, x, y);
             * });
             * ```
             */
            this.includeNoteBounds = false;
            this.scriptFile = Environment.scriptFile;
            this.fontDirectory = Environment.fontDirectory;
        }
    }

    const _barrel$7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        AlphaTexImporter,
        ScoreImporter,
        ScoreLoader,
        UnsupportedFormatError
    }, Symbol.toStringTag, { value: 'Module' }));

    const _barrel$6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        ByteBuffer,
        IOHelper
    }, Symbol.toStringTag, { value: 'Module' }));

    /**
     * This is the base class for creating new song exporters which
     * enable writing scores to a binary datasink.
     */
    class ScoreExporter {
        /**
         * Initializes the importer with the given data and settings.
         */
        init(data, settings) {
            this.data = data;
            this.settings = settings;
        }
        /**
         * Exports the given score to a binary buffer.
         * @param score The score to serialize
         * @param settings  The settings to use during serialization
         * @returns A byte buffer with the serialized score.
         */
        export(score, settings = null) {
            const writable = ByteBuffer.withCapacity(1024);
            this.init(writable, settings ?? new Settings());
            this.writeScore(score);
            return writable.toArray();
        }
    }

    // Grabbed via Icon Picker beside track name in GP7
    var GpifIconIds;
    (function (GpifIconIds) {
        // Guitar & Basses
        GpifIconIds[GpifIconIds["SteelGuitar"] = 1] = "SteelGuitar";
        GpifIconIds[GpifIconIds["AcousticGuitar"] = 2] = "AcousticGuitar";
        GpifIconIds[GpifIconIds["TwelveStringGuitar"] = 3] = "TwelveStringGuitar";
        GpifIconIds[GpifIconIds["ElectricGuitar"] = 4] = "ElectricGuitar";
        GpifIconIds[GpifIconIds["Bass"] = 5] = "Bass";
        GpifIconIds[GpifIconIds["ClassicalGuitar"] = 23] = "ClassicalGuitar";
        GpifIconIds[GpifIconIds["UprightBass"] = 6] = "UprightBass";
        GpifIconIds[GpifIconIds["Ukulele"] = 7] = "Ukulele";
        GpifIconIds[GpifIconIds["Banjo"] = 8] = "Banjo";
        GpifIconIds[GpifIconIds["Mandolin"] = 9] = "Mandolin";
        // Orchestral
        GpifIconIds[GpifIconIds["Piano"] = 10] = "Piano";
        GpifIconIds[GpifIconIds["Synth"] = 12] = "Synth";
        GpifIconIds[GpifIconIds["Strings"] = 11] = "Strings";
        GpifIconIds[GpifIconIds["Brass"] = 13] = "Brass";
        GpifIconIds[GpifIconIds["Reed"] = 14] = "Reed";
        GpifIconIds[GpifIconIds["Woodwind"] = 15] = "Woodwind";
        GpifIconIds[GpifIconIds["Vocal"] = 16] = "Vocal";
        GpifIconIds[GpifIconIds["PitchedIdiophone"] = 17] = "PitchedIdiophone";
        GpifIconIds[GpifIconIds["Fx"] = 21] = "Fx";
        // Percussions
        GpifIconIds[GpifIconIds["PercussionKit"] = 18] = "PercussionKit";
        GpifIconIds[GpifIconIds["Idiophone"] = 19] = "Idiophone";
        GpifIconIds[GpifIconIds["Membraphone"] = 20] = "Membraphone";
    })(GpifIconIds || (GpifIconIds = {}));
    class GpifMidiProgramInfo {
        constructor(icon, instrumentSetName, instrumentSetType = null) {
            this.icon = GpifIconIds.Piano;
            this.icon = icon;
            this.instrumentSetName = instrumentSetName;
            if (!instrumentSetType) {
                const parts = instrumentSetName.split(' ');
                parts[0] = parts[0].substr(0, 1).toLowerCase() + parts[0].substr(1);
                this.instrumentSetType = parts.join('');
            }
            else {
                this.instrumentSetType = instrumentSetType;
            }
        }
    }
    /**
     * This class can write a score.gpif XML from a given score model.
     */
    class GpifWriter {
        constructor() {
            this._rhythmIdLookup = new Map();
        }
        writeXml(score) {
            const xmlDocument = new XmlDocument();
            this._rhythmIdLookup = new Map();
            this.writeDom(xmlDocument, score);
            return xmlDocument.toFormattedString('', true);
        }
        writeDom(parent, score) {
            const gpif = parent.addElement('GPIF');
            // just some values at the time this was implemented,
            gpif.addElement('GPVersion').innerText = '8.1.3';
            const gpRevision = gpif.addElement('GPRevision');
            gpRevision.attributes.set('required', '12024');
            gpRevision.attributes.set('recommended', '13000');
            gpRevision.innerText = '13007';
            const encoding = gpif.addElement('Encoding');
            encoding.addElement('EncodingDescription').innerText = 'GP8';
            const alphaTabComment = new XmlNode();
            alphaTabComment.nodeType = XmlNodeType.Comment;
            alphaTabComment.value = `Written by alphaTab ${VersionInfo.version} (${VersionInfo.commit})`;
            encoding.addChild(alphaTabComment);
            this.writeScoreNode(gpif, score);
            this.writeMasterTrackNode(gpif, score);
            this.writeBackingTrackNode(gpif, score);
            this.writeAudioTracksNode(gpif, score);
            this.writeTracksNode(gpif, score);
            this.writeMasterBarsNode(gpif, score);
            this.writeAssets(gpif, score);
            const bars = gpif.addElement('Bars');
            const voices = gpif.addElement('Voices');
            const beats = gpif.addElement('Beats');
            const notes = gpif.addElement('Notes');
            const rhythms = gpif.addElement('Rhythms');
            for (const tracks of score.tracks) {
                for (const staff of tracks.staves) {
                    for (const bar of staff.bars) {
                        this.writeBarNode(bars, bar);
                        for (const voice of bar.voices) {
                            this.writeVoiceNode(voices, voice);
                            for (const beat of voice.beats) {
                                this.writeBeatNode(beats, beat, rhythms);
                                for (const note of beat.notes) {
                                    this.writeNoteNode(notes, note);
                                }
                            }
                        }
                    }
                }
            }
        }
        writeAssets(parent, score) {
            if (!score.backingTrack?.rawAudioFile) {
                return;
            }
            const assets = parent.addElement('Assets');
            const asset = assets.addElement('Asset');
            asset.attributes.set('id', this.backingTrackAssetId);
            this.backingTrackAssetFileName = 'Content/Assets/backing-track';
            asset.addElement('EmbeddedFilePath').setCData(this.backingTrackAssetFileName);
        }
        writeBackingTrackNode(parent, score) {
            if (!score.backingTrack?.rawAudioFile) {
                return;
            }
            const backingTrackNode = parent.addElement('BackingTrack');
            const backingTrackAssetId = '0';
            this.backingTrackAssetId = backingTrackAssetId;
            backingTrackNode.addElement('IconId').innerText = '21';
            backingTrackNode.addElement('Color').innerText = '0 0 0';
            backingTrackNode.addElement('Name').setCData('Audio Track');
            backingTrackNode.addElement('ShortName').setCData('a.track');
            backingTrackNode.addElement('PlaybackState').innerText = 'Default';
            backingTrackNode.addElement('Enabled').innerText = 'true';
            backingTrackNode.addElement('Source').innerText = 'Local';
            backingTrackNode.addElement('AssetId').innerText = backingTrackAssetId;
            const channelStrip = backingTrackNode.addElement('ChannelStrip');
            channelStrip.addElement('Parameters').innerText =
                '0.500000 0.500000 0.500000 0.500000 0.500000 0.500000 0.500000 0.500000 0.500000 0.000000 0.500000 0.500000 0.800000 0.500000 0.500000 0.500000';
            channelStrip.addElement('YouTubeVideoUrl').innerText = '';
            channelStrip.addElement('Filter').innerText = '6';
            channelStrip.addElement('FramesPerPixel').innerText = '400';
            const framePadding = this.backingTrackFramePadding !== undefined ? this.backingTrackFramePadding : 0;
            backingTrackNode.addElement('FramePadding').innerText = `${framePadding}`;
            backingTrackNode.addElement('Semitones').innerText = '0';
            backingTrackNode.addElement('Cents').innerText = '0';
        }
        writeNoteNode(parent, note) {
            const noteNode = parent.addElement('Note');
            noteNode.attributes.set('id', note.id.toString());
            this.writeNoteProperties(noteNode, note);
            if (note.isGhost) {
                noteNode.addElement('AntiAccent').innerText = 'normal';
            }
            if (note.isLetRing) {
                noteNode.addElement('LetRing');
            }
            if (note.isTrill) {
                noteNode.addElement('Trill').innerText = note.trillValue.toString();
            }
            let accentFlags = 0;
            if (note.isStaccato) {
                accentFlags |= 1;
            }
            switch (note.accentuated) {
                case AccentuationType.Normal:
                    accentFlags |= 0x08;
                    break;
                case AccentuationType.Heavy:
                    accentFlags |= 0x04;
                    break;
                case AccentuationType.Tenuto:
                    accentFlags |= 0x10;
                    break;
            }
            if (accentFlags > 0) {
                noteNode.addElement('Accent').innerText = accentFlags.toString();
            }
            if (note.isTieOrigin || note.isTieDestination) {
                const tie = noteNode.addElement('Tie');
                tie.attributes.set('origin', note.isTieOrigin ? 'true' : 'false');
                tie.attributes.set('destination', note.isTieDestination ? 'true' : 'false');
            }
            switch (note.vibrato) {
                case VibratoType.Slight:
                    noteNode.addElement('Vibrato').innerText = 'Slight';
                    break;
                case VibratoType.Wide:
                    noteNode.addElement('Vibrato').innerText = 'Wide';
                    break;
            }
            if (note.isFingering) {
                switch (note.leftHandFinger) {
                    case Fingers.Thumb:
                        noteNode.addElement('LeftFingering').innerText = 'P';
                        break;
                    case Fingers.IndexFinger:
                        noteNode.addElement('LeftFingering').innerText = 'I';
                        break;
                    case Fingers.MiddleFinger:
                        noteNode.addElement('LeftFingering').innerText = 'M';
                        break;
                    case Fingers.AnnularFinger:
                        noteNode.addElement('LeftFingering').innerText = 'A';
                        break;
                    case Fingers.LittleFinger:
                        noteNode.addElement('LeftFingering').innerText = 'C';
                        break;
                }
                switch (note.rightHandFinger) {
                    case Fingers.Thumb:
                        noteNode.addElement('RightFingering').innerText = 'P';
                        break;
                    case Fingers.IndexFinger:
                        noteNode.addElement('RightFingering').innerText = 'I';
                        break;
                    case Fingers.MiddleFinger:
                        noteNode.addElement('RightFingering').innerText = 'M';
                        break;
                    case Fingers.AnnularFinger:
                        noteNode.addElement('RightFingering').innerText = 'A';
                        break;
                    case Fingers.LittleFinger:
                        noteNode.addElement('RightFingering').innerText = 'C';
                        break;
                }
            }
            if (note.percussionArticulation >= 0) {
                noteNode.addElement('InstrumentArticulation').innerText = note.percussionArticulation.toString();
            }
            else {
                noteNode.addElement('InstrumentArticulation').innerText = '0';
            }
            if (note.ornament !== NoteOrnament.None) {
                noteNode.addElement('Ornament').innerText = NoteOrnament[note.ornament];
            }
        }
        writeNoteProperties(parent, note) {
            const properties = parent.addElement('Properties');
            this.writeConcertPitch(properties, note);
            this.writeTransposedPitch(properties, note);
            if (note.isStringed) {
                this.writeSimplePropertyNode(properties, 'String', 'String', (note.string - 1).toString());
                this.writeSimplePropertyNode(properties, 'Fret', 'Fret', note.fret.toString());
                this.writeSimplePropertyNode(properties, 'Midi', 'Number', note.realValue.toString());
                if (note.showStringNumber) {
                    this.writeSimplePropertyNode(properties, 'ShowStringNumber', 'Enable', null);
                }
            }
            if (note.isPiano) {
                this.writeSimplePropertyNode(properties, 'Octave', 'Number', note.octave.toString());
                this.writeSimplePropertyNode(properties, 'Tone', 'Step', note.tone.toString());
                this.writeSimplePropertyNode(properties, 'Midi', 'Number', note.realValue.toString());
            }
            if (note.beat.tap) {
                this.writeSimplePropertyNode(properties, 'Tapped', 'Enable', null);
            }
            if (note.harmonicType !== HarmonicType.None) {
                switch (note.harmonicType) {
                    case HarmonicType.Natural:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Natural');
                        break;
                    case HarmonicType.Artificial:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Artificial');
                        break;
                    case HarmonicType.Pinch:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Pinch');
                        break;
                    case HarmonicType.Tap:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Tap');
                        break;
                    case HarmonicType.Semi:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Semi');
                        break;
                    case HarmonicType.Feedback:
                        this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Feedback');
                        break;
                }
                if (note.harmonicValue !== 0) {
                    this.writeSimplePropertyNode(properties, 'HarmonicFret', 'HFret', note.harmonicValue.toString());
                }
            }
            if (note.isDead) {
                this.writeSimplePropertyNode(properties, 'Muted', 'Enable', null);
            }
            if (note.isPalmMute) {
                this.writeSimplePropertyNode(properties, 'PalmMuted', 'Enable', null);
            }
            if (note.hasBend) {
                this.writeBend(properties, note);
            }
            if (note.isHammerPullOrigin) {
                this.writeSimplePropertyNode(properties, 'HopoOrigin', 'Enable', null);
            }
            if (note.isHammerPullDestination) {
                this.writeSimplePropertyNode(properties, 'HopoDestination', 'Enable', null);
            }
            if (note.isLeftHandTapped) {
                this.writeSimplePropertyNode(properties, 'LeftHandTapped', 'Enable', null);
            }
            let slideFlags = 0;
            switch (note.slideInType) {
                case SlideInType.IntoFromAbove:
                    slideFlags |= 32;
                    break;
                case SlideInType.IntoFromBelow:
                    slideFlags |= 16;
                    break;
            }
            switch (note.slideOutType) {
                case SlideOutType.Shift:
                    slideFlags |= 1;
                    break;
                case SlideOutType.Legato:
                    slideFlags |= 2;
                    break;
                case SlideOutType.OutDown:
                    slideFlags |= 4;
                    break;
                case SlideOutType.OutUp:
                    slideFlags |= 8;
                    break;
                case SlideOutType.PickSlideDown:
                    slideFlags |= 64;
                    break;
                case SlideOutType.PickSlideUp:
                    slideFlags |= 128;
                    break;
            }
            if (slideFlags > 0) {
                this.writeSimplePropertyNode(properties, 'Slide', 'Flags', slideFlags.toString());
            }
        }
        writeTransposedPitch(properties, note) {
            if (note.isPercussion) {
                this.writePitch(properties, 'ConcertPitch', 'C', '-1', '');
            }
            else {
                this.writePitchForValue(properties, 'TransposedPitch', note.displayValueWithoutBend, note.accidentalMode);
            }
        }
        writeConcertPitch(properties, note) {
            if (note.isPercussion) {
                this.writePitch(properties, 'ConcertPitch', 'C', '-1', '');
            }
            else {
                this.writePitchForValue(properties, 'ConcertPitch', note.realValueWithoutHarmonic, note.accidentalMode);
            }
        }
        writePitchForValue(properties, propertyName, value, accidentalMode) {
            let index = 0;
            let octave = 0;
            let step = '';
            let accidental = '';
            const updateParts = () => {
                index = value % 12;
                octave = (value / 12) | 0;
                step = Tuning.defaultSteps[index];
                accidental = Tuning.defaultAccidentals[index];
            };
            updateParts();
            switch (accidentalMode) {
                case NoteAccidentalMode.Default:
                    break;
                case NoteAccidentalMode.ForceNone:
                    accidental = '';
                    break;
                case NoteAccidentalMode.ForceNatural:
                    accidental = '';
                    break;
                case NoteAccidentalMode.ForceSharp:
                    accidental = '#';
                    break;
                case NoteAccidentalMode.ForceDoubleSharp:
                    if (accidental === '#') {
                        value -= 2;
                        updateParts();
                    }
                    accidental = 'x';
                    break;
                case NoteAccidentalMode.ForceFlat:
                    if (accidental === '#') {
                        value += 1;
                        updateParts();
                    }
                    accidental = 'b';
                    break;
                case NoteAccidentalMode.ForceDoubleFlat:
                    if (accidental === '#') {
                        value += 2;
                        updateParts();
                    }
                    accidental = 'bb';
                    break;
            }
            this.writePitch(properties, propertyName, step, octave.toString(), accidental);
        }
        writePitch(properties, propertyName, step, octave, accidental) {
            const property = properties.addElement('Property');
            property.attributes.set('name', propertyName);
            const pitch = property.addElement('Pitch');
            pitch.addElement('Step').innerText = step;
            pitch.addElement('Accidental').innerText = accidental;
            pitch.addElement('Octave').innerText = octave;
        }
        writeBend(properties, note) {
            if (note.hasBend && note.bendPoints.length <= 4) {
                this.writeStandardBend(properties, note.bendPoints);
            }
        }
        writeStandardBend(properties, bendPoints) {
            this.writeSimplePropertyNode(properties, 'Bended', 'Enable', null);
            const bendOrigin = bendPoints[0];
            const bendDestination = bendPoints[bendPoints.length - 1];
            let bendMiddle1;
            let bendMiddle2;
            switch (bendPoints.length) {
                case 4:
                    bendMiddle1 = bendPoints[1];
                    bendMiddle2 = bendPoints[2];
                    break;
                case 3:
                    bendMiddle1 = bendPoints[1];
                    bendMiddle2 = bendPoints[1];
                    break;
                // case 2:
                default:
                    bendMiddle1 = new BendPoint((bendOrigin.offset + bendDestination.offset) / 2, (bendOrigin.value + bendDestination.value) / 2);
                    bendMiddle2 = bendMiddle1;
                    break;
            }
            this.writeSimplePropertyNode(properties, 'BendDestinationOffset', 'Float', this.toBendOffset(bendDestination.offset).toString());
            this.writeSimplePropertyNode(properties, 'BendDestinationValue', 'Float', this.toBendValue(bendDestination.value).toString());
            this.writeSimplePropertyNode(properties, 'BendMiddleOffset1', 'Float', this.toBendOffset(bendMiddle1.offset).toString());
            this.writeSimplePropertyNode(properties, 'BendMiddleOffset2', 'Float', this.toBendOffset(bendMiddle2.offset).toString());
            this.writeSimplePropertyNode(properties, 'BendMiddleValue', 'Float', this.toBendValue(bendMiddle1.value).toString());
            this.writeSimplePropertyNode(properties, 'BendOriginOffset', 'Float', this.toBendOffset(bendOrigin.offset).toString());
            this.writeSimplePropertyNode(properties, 'BendOriginValue', 'Float', this.toBendValue(bendOrigin.value).toString());
        }
        toBendValue(value) {
            // GPIF: 25 per quarternote
            return value * 25;
        }
        toBendOffset(value) {
            // GPIF range: 0-100
            return (value / BendPoint.MaxPosition) * 100.0;
        }
        writeBeatNode(parent, beat, rhythms) {
            const beatNode = parent.addElement('Beat');
            beatNode.attributes.set('id', beat.id.toString());
            beatNode.addElement('Dynamic').innerText = DynamicValue[beat.dynamics];
            if (beat.fade !== FadeType.None) {
                beatNode.addElement('Fadding').innerText = FadeType[beat.fade];
            }
            if (beat.isTremolo) {
                switch (beat.tremoloSpeed) {
                    case Duration.Eighth:
                        beatNode.addElement('Tremolo').innerText = '1/2';
                        break;
                    case Duration.Sixteenth:
                        beatNode.addElement('Tremolo').innerText = '1/4';
                        break;
                    case Duration.ThirtySecond:
                        beatNode.addElement('Tremolo').innerText = '1/8';
                        break;
                }
            }
            if (beat.hasChord) {
                beatNode.addElement('Chord').setCData(beat.chordId);
            }
            if (beat.crescendo !== CrescendoType.None) {
                beatNode.addElement('Hairpin').innerText = CrescendoType[beat.crescendo];
            }
            switch (beat.brushType) {
                case BrushType.ArpeggioUp:
                    beatNode.addElement('Arpeggio').innerText = 'Up';
                    break;
                case BrushType.ArpeggioDown:
                    beatNode.addElement('Arpeggio').innerText = 'Down';
                    break;
            }
            if (beat.text) {
                beatNode.addElement('FreeText').setCData(beat.text);
            }
            switch (beat.graceType) {
                case GraceType.OnBeat:
                case GraceType.BeforeBeat:
                    beatNode.addElement('GraceNotes').innerText = GraceType[beat.graceType];
                    break;
            }
            if (beat.ottava !== Ottavia.Regular) {
                beatNode.addElement('Ottavia').innerText = Ottavia[beat.ottava].substr(1);
            }
            if (beat.hasWhammyBar) {
                this.writeWhammyNode(beatNode, beat);
            }
            if (beat.isLegatoOrigin || beat.isLegatoDestination) {
                const legato = beatNode.addElement('Legato');
                legato.attributes.set('origin', beat.isLegatoOrigin ? 'true' : 'false');
                legato.attributes.set('destination', beat.isLegatoDestination ? 'true' : 'false');
            }
            this.writeRhythm(beatNode, beat, rhythms);
            if (beat.preferredBeamDirection !== null) {
                switch (beat.preferredBeamDirection) {
                    case BeamDirection.Up:
                        beatNode.addElement('TransposedPitchStemOrientation').innerText = 'Upward';
                        beatNode.addElement('UserTransposedPitchStemOrientation').innerText = 'Upward';
                        break;
                    case BeamDirection.Down:
                        beatNode.addElement('TransposedPitchStemOrientation').innerText = 'Downward';
                        beatNode.addElement('UserTransposedPitchStemOrientation').innerText = 'Downward';
                        break;
                }
            }
            beatNode.addElement('ConcertPitchStemOrientation').innerText = 'Undefined';
            if (beat.slashed) {
                beatNode.addElement('Slashed');
            }
            if (beat.deadSlapped) {
                beatNode.addElement('DeadSlapped');
            }
            if (beat.notes.length > 0) {
                beatNode.addElement('Notes').innerText = beat.notes.map(n => n.id).join(' ');
            }
            if (beat.golpe !== GolpeType.None) {
                beatNode.addElement('Golpe').innerText = GolpeType[beat.golpe];
            }
            if (beat.wahPedal !== WahPedal.None) {
                beatNode.addElement('Wah').innerText = WahPedal[beat.wahPedal];
            }
            if (beat.showTimer) {
                beatNode.addElement('Timer').innerText = (beat.timer ?? 0).toString();
            }
            this.writeBeatProperties(beatNode, beat);
            this.writeBeatXProperties(beatNode, beat);
            if (beat.lyrics && beat.lyrics.length > 0) {
                this.writeBeatLyrics(beatNode, beat.lyrics);
            }
        }
        writeBeatLyrics(beatNode, lyrics) {
            const lyricsNode = beatNode.addElement('Lyrics');
            for (const l of lyrics) {
                const line = lyricsNode.addElement('Line');
                line.setCData(l);
            }
        }
        writeBeatXProperties(beatNode, beat) {
            const beatProperties = beatNode.addElement('XProperties');
            if (beat.brushDuration > 0) {
                this.writeSimpleXPropertyNode(beatProperties, '687935489', 'Int', beat.brushDuration.toString());
            }
            switch (beat.beamingMode) {
                case BeatBeamingMode.ForceSplitToNext:
                    this.writeSimpleXPropertyNode(beatProperties, '1124204546', 'Int', '2');
                    break;
                case BeatBeamingMode.ForceMergeWithNext:
                    this.writeSimpleXPropertyNode(beatProperties, '1124204546', 'Int', '1');
                    break;
                case BeatBeamingMode.ForceSplitOnSecondaryToNext:
                    this.writeSimpleXPropertyNode(beatProperties, '1124204552', 'Int', '1');
                    break;
            }
        }
        writeBeatProperties(beatNode, beat) {
            const beatProperties = beatNode.addElement('Properties');
            switch (beat.brushType) {
                case BrushType.BrushUp:
                    this.writeSimplePropertyNode(beatProperties, 'Brush', 'Direction', 'Up');
                    break;
                case BrushType.BrushDown:
                    this.writeSimplePropertyNode(beatProperties, 'Brush', 'Direction', 'Down');
                    break;
            }
            switch (beat.pickStroke) {
                case PickStroke.Up:
                    this.writeSimplePropertyNode(beatProperties, 'PickStroke', 'Direction', 'Up');
                    break;
                case PickStroke.Down:
                    this.writeSimplePropertyNode(beatProperties, 'PickStroke', 'Direction', 'Down');
                    break;
            }
            if (beat.slap) {
                this.writeSimplePropertyNode(beatProperties, 'Slapped', 'Enable', null);
            }
            if (beat.pop) {
                this.writeSimplePropertyNode(beatProperties, 'Popped', 'Enable', null);
            }
            switch (beat.vibrato) {
                case VibratoType.Wide:
                    this.writeSimplePropertyNode(beatProperties, 'VibratoWTremBar', 'Strength', 'Wide');
                    break;
                case VibratoType.Slight:
                    this.writeSimplePropertyNode(beatProperties, 'VibratoWTremBar', 'Strength', 'Slight');
                    break;
            }
            if (beat.isBarre) {
                this.writeSimplePropertyNode(beatProperties, 'BarreFret', 'Fret', beat.barreFret.toString());
                switch (beat.barreShape) {
                    case BarreShape.Full:
                        this.writeSimplePropertyNode(beatProperties, 'BarreString', 'String', '0');
                        break;
                    case BarreShape.Half:
                        this.writeSimplePropertyNode(beatProperties, 'BarreString', 'String', '1');
                        break;
                }
            }
            if (beat.rasgueado !== Rasgueado.None) {
                let rasgueado = '';
                switch (beat.rasgueado) {
                    case Rasgueado.Ii:
                        rasgueado = 'ii_1';
                        break;
                    case Rasgueado.Mi:
                        rasgueado = 'mi_1';
                        break;
                    case Rasgueado.MiiTriplet:
                        rasgueado = 'mii_1';
                        break;
                    case Rasgueado.MiiAnapaest:
                        rasgueado = 'mii_2';
                        break;
                    case Rasgueado.PmpTriplet:
                        rasgueado = 'pmp_1';
                        break;
                    case Rasgueado.PmpAnapaest:
                        rasgueado = 'pmp_2';
                        break;
                    case Rasgueado.PeiTriplet:
                        rasgueado = 'pei_1';
                        break;
                    case Rasgueado.PeiAnapaest:
                        rasgueado = 'pei_2';
                        break;
                    case Rasgueado.PaiTriplet:
                        rasgueado = 'pai_1';
                        break;
                    case Rasgueado.PaiAnapaest:
                        rasgueado = 'pai_2';
                        break;
                    case Rasgueado.AmiTriplet:
                        rasgueado = 'ami_1';
                        break;
                    case Rasgueado.AmiAnapaest:
                        rasgueado = 'ami_2';
                        break;
                    case Rasgueado.Ppp:
                        rasgueado = 'ppp_1';
                        break;
                    case Rasgueado.Amii:
                        rasgueado = 'amii_1';
                        break;
                    case Rasgueado.Amip:
                        rasgueado = 'amip_1';
                        break;
                    case Rasgueado.Eami:
                        rasgueado = 'eami_1';
                        break;
                    case Rasgueado.Eamii:
                        rasgueado = 'eamii_1';
                        break;
                    case Rasgueado.Peami:
                        rasgueado = 'peami_1';
                        break;
                }
                this.writeSimplePropertyNode(beatProperties, 'Rasgueado', 'Rasgueado', rasgueado);
            }
        }
        writeRhythm(parent, beat, rhythms) {
            const rhythmId = `${beat.duration}_${beat.dots}_${beat.tupletNumerator}_${beat.tupletDenominator}';`;
            let rhythm;
            if (!this._rhythmIdLookup.has(rhythmId)) {
                rhythm = this._rhythmIdLookup.size.toString();
                this._rhythmIdLookup.set(rhythmId, rhythm);
                const rhythmNode = rhythms.addElement('Rhythm');
                rhythmNode.attributes.set('id', rhythm);
                if (beat.hasTuplet) {
                    const tupletNode = rhythmNode.addElement('PrimaryTuplet');
                    tupletNode.attributes.set('num', beat.tupletNumerator.toString());
                    tupletNode.attributes.set('den', beat.tupletDenominator.toString());
                }
                if (beat.dots > 0) {
                    rhythmNode.addElement('AugmentationDot').attributes.set('count', beat.dots.toString());
                }
                let noteValue = 'Quarter';
                switch (beat.duration) {
                    case Duration.QuadrupleWhole:
                        noteValue = 'Long';
                        break;
                    case Duration.DoubleWhole:
                        noteValue = 'DoubleWhole';
                        break;
                    case Duration.Whole:
                        noteValue = 'Whole';
                        break;
                    case Duration.Half:
                        noteValue = 'Half';
                        break;
                    case Duration.Quarter:
                        noteValue = 'Quarter';
                        break;
                    case Duration.Eighth:
                        noteValue = 'Eighth';
                        break;
                    case Duration.Sixteenth:
                        noteValue = '16th';
                        break;
                    case Duration.ThirtySecond:
                        noteValue = '32nd';
                        break;
                    case Duration.SixtyFourth:
                        noteValue = '64th';
                        break;
                    case Duration.OneHundredTwentyEighth:
                        noteValue = '128th';
                        break;
                    case Duration.TwoHundredFiftySixth:
                        noteValue = '256th';
                        break;
                }
                rhythmNode.addElement('NoteValue').innerText = noteValue;
            }
            else {
                rhythm = this._rhythmIdLookup.get(rhythmId);
            }
            parent.addElement('Rhythm').attributes.set('ref', rhythm);
        }
        writeWhammyNode(parent, beat) {
            if (beat.hasWhammyBar && beat.whammyBarPoints.length <= 4) {
                this.writeStandardWhammy(parent, beat.whammyBarPoints);
            }
        }
        writeStandardWhammy(parent, whammyBarPoints) {
            const whammyNode = parent.addElement('Whammy');
            const whammyOrigin = whammyBarPoints[0];
            const whammyDestination = whammyBarPoints[whammyBarPoints.length - 1];
            let whammyMiddle1;
            let whammyMiddle2;
            switch (whammyBarPoints.length) {
                case 4:
                    whammyMiddle1 = whammyBarPoints[1];
                    whammyMiddle2 = whammyBarPoints[2];
                    break;
                case 3:
                    whammyMiddle1 = whammyBarPoints[1];
                    whammyMiddle2 = whammyBarPoints[1];
                    break;
                // case 2:
                default:
                    whammyMiddle1 = new BendPoint((whammyOrigin.offset + whammyDestination.offset) / 2, (whammyOrigin.value + whammyDestination.value) / 2);
                    whammyMiddle2 = whammyMiddle1;
                    break;
            }
            whammyNode.attributes.set('destinationOffset', this.toBendOffset(whammyDestination.offset).toString());
            whammyNode.attributes.set('destinationValue', this.toBendValue(whammyDestination.value).toString());
            whammyNode.attributes.set('middleOffset1', this.toBendOffset(whammyMiddle1.offset).toString());
            whammyNode.attributes.set('middleOffset2', this.toBendOffset(whammyMiddle2.offset).toString());
            whammyNode.attributes.set('middleValue', this.toBendValue(whammyMiddle1.value).toString());
            whammyNode.attributes.set('originOffset', this.toBendOffset(whammyOrigin.offset).toString());
            whammyNode.attributes.set('originValue', this.toBendValue(whammyOrigin.value).toString());
        }
        writeScoreNode(parent, score) {
            const scoreNode = parent.addElement('Score');
            scoreNode.addElement('Title').setCData(score.title);
            scoreNode.addElement('SubTitle').setCData(score.subTitle);
            scoreNode.addElement('Artist').setCData(score.artist);
            scoreNode.addElement('Album').setCData(score.album);
            scoreNode.addElement('Words').setCData(score.words);
            scoreNode.addElement('Music').setCData(score.music);
            scoreNode.addElement('WordsAndMusic').setCData(score.words === score.music ? score.words : '');
            scoreNode.addElement('Copyright').setCData(score.copyright);
            scoreNode.addElement('Tabber').setCData(score.tab);
            scoreNode.addElement('Instructions').setCData(score.instructions);
            scoreNode.addElement('Notices').setCData(score.notices);
            scoreNode.addElement('FirstPageHeader').setCData('');
            scoreNode.addElement('FirstPageFooter').setCData('');
            scoreNode.addElement('PageHeader').setCData('');
            scoreNode.addElement('PageFooter').setCData('');
            scoreNode.addElement('ScoreSystemsDefaultLayout').setCData(score.defaultSystemsLayout.toString());
            scoreNode.addElement('ScoreSystemsLayout').setCData(score.systemsLayout.join(' '));
            scoreNode.addElement('ScoreZoomPolicy').innerText = 'Value';
            scoreNode.addElement('ScoreZoom').innerText = '1';
            // not fully clear at this point so we rather activate it
            scoreNode.addElement('MultiVoice').innerText = '1>';
        }
        writeMasterTrackNode(parent, score) {
            const masterTrackNode = parent.addElement('MasterTrack');
            masterTrackNode.addElement('Tracks').innerText = score.tracks.map(t => t.index).join(' ');
            const automations = masterTrackNode.addElement('Automations');
            if (score.masterBars.length > 0 && score.masterBars[0].isAnacrusis) {
                masterTrackNode.addElement('Anacrusis');
            }
            if (score.masterBars[0].tempoAutomations.length === 0) {
                const initialTempoAutomation = automations.addElement('Automation');
                initialTempoAutomation.addElement('Type').innerText = 'Tempo';
                initialTempoAutomation.addElement('Linear').innerText = 'false';
                initialTempoAutomation.addElement('Bar').innerText = '0';
                initialTempoAutomation.addElement('Position').innerText = '0';
                initialTempoAutomation.addElement('Visible').innerText = 'true';
                initialTempoAutomation.addElement('Value').innerText = `${score.tempo} 2`;
                if (score.tempoLabel) {
                    initialTempoAutomation.addElement('Text').innerText = score.tempoLabel;
                }
            }
            const initialSyncPoint = score.masterBars[0].syncPoints
                ? score.masterBars[0].syncPoints.find(p => p.ratioPosition === 0 && p.syncPointValue.barOccurence === 0)
                : undefined;
            const millisecondPadding = initialSyncPoint ? initialSyncPoint.syncPointValue.millisecondOffset : 0;
            this.backingTrackFramePadding = (-1 * ((millisecondPadding / 1000) * GpifWriter.SampleRate)) | 0;
            const modifiedTempoLookup = new Lazy(() => MidiFileGenerator.buildModifiedTempoLookup(score));
            for (const mb of score.masterBars) {
                for (const automation of mb.tempoAutomations) {
                    const tempoAutomation = automations.addElement('Automation');
                    tempoAutomation.addElement('Type').innerText = 'Tempo';
                    tempoAutomation.addElement('Linear').innerText = automation.isLinear ? 'true' : 'false';
                    tempoAutomation.addElement('Bar').innerText = mb.index.toString();
                    tempoAutomation.addElement('Position').innerText = automation.ratioPosition.toString();
                    tempoAutomation.addElement('Visible').innerText = 'true';
                    tempoAutomation.addElement('Value').innerText = `${automation.value} 2`;
                    if (automation.text) {
                        tempoAutomation.addElement('Text').innerText = automation.text;
                    }
                }
                if (mb.syncPoints) {
                    for (const syncPoint of mb.syncPoints) {
                        const syncPointAutomation = automations.addElement('Automation');
                        syncPointAutomation.addElement('Type').innerText = 'SyncPoint';
                        syncPointAutomation.addElement('Linear').innerText = 'false';
                        syncPointAutomation.addElement('Bar').innerText = mb.index.toString();
                        syncPointAutomation.addElement('Position').innerText = syncPoint.ratioPosition.toString();
                        syncPointAutomation.addElement('Visible').innerText = 'true';
                        const value = syncPointAutomation.addElement('Value');
                        value.addElement('BarIndex').innerText = mb.index.toString();
                        value.addElement('BarOccurrence').innerText = syncPoint.syncPointValue.barOccurence.toString();
                        value.addElement('ModifiedTempo').innerText = modifiedTempoLookup.value.get(syncPoint).syncBpm.toString();
                        value.addElement('OriginalTempo').innerText = score.tempo.toString();
                        let frameOffset = (((syncPoint.syncPointValue.millisecondOffset - millisecondPadding) / 1000) *
                            GpifWriter.SampleRate);
                        frameOffset = Math.floor(frameOffset + 0.5);
                        value.addElement('FrameOffset').innerText = frameOffset.toString();
                    }
                }
            }
        }
        writeAudioTracksNode(parent, score) {
            parent.addElement('AudioTracks');
        }
        writeTracksNode(parent, score) {
            const tracksNode = parent.addElement('Tracks');
            for (const track of score.tracks) {
                this.writeTrackNode(tracksNode, track);
            }
        }
        writeTrackNode(parent, track) {
            const trackNode = parent.addElement('Track');
            trackNode.attributes.set('id', track.index.toString());
            trackNode.addElement('Name').setCData(track.name);
            trackNode.addElement('ShortName').setCData(track.shortName);
            trackNode.addElement('Color').innerText = `${track.color.r} ${track.color.g} ${track.color.b}`;
            trackNode.addElement('SystemsDefautLayout').innerText = track.defaultSystemsLayout.toString();
            trackNode.addElement('SystemsLayout').innerText = track.systemsLayout.join(' ');
            trackNode.addElement('AutoBrush');
            trackNode.addElement('PalmMute').innerText = '0';
            trackNode.addElement('PlayingStyle').innerText = GeneralMidi.isGuitar(track.playbackInfo.program)
                ? 'StringedPick'
                : 'Default';
            trackNode.addElement('UseOneChannelPerString');
            trackNode.addElement('IconId').innerText = GpifWriter.getIconId(track.playbackInfo).toString();
            this.writeInstrumentSetNode(trackNode, track);
            this.writeTransposeNode(trackNode, track);
            this.writeRseNode(trackNode, track);
            trackNode.addElement('ForcedSound').innerText = '-1';
            this.writeMidiConnectionNode(trackNode, track);
            if (track.playbackInfo.isSolo) {
                trackNode.addElement('PlaybackState').innerText = 'Solo';
            }
            else if (track.playbackInfo.isMute) {
                trackNode.addElement('PlaybackState').innerText = 'Mute';
            }
            else {
                trackNode.addElement('PlaybackState').innerText = 'Default';
            }
            trackNode.addElement('AudioEngineState').innerText = 'MIDI';
            this.writeLyricsNode(trackNode, track);
            this.writeStavesNode(trackNode, track);
            this.writeSoundsAndAutomations(trackNode, track);
        }
        static getIconId(playbackInfo) {
            if (playbackInfo.primaryChannel === 9) {
                return GpifWriter.DrumKitProgramInfo.icon;
            }
            if (GpifWriter.MidiProgramInfoLookup.has(playbackInfo.program)) {
                return GpifWriter.MidiProgramInfoLookup.get(playbackInfo.program).icon;
            }
            return GpifIconIds.SteelGuitar;
        }
        writeSoundAndAutomation(soundsNode, automationsNode, name, path, role, barIndex, program, ratioPosition = 0) {
            const soundNode = soundsNode.addElement('Sound');
            soundNode.addElement('Name').setCData(name);
            soundNode.addElement('Label').setCData(name);
            soundNode.addElement('Path').setCData(path);
            soundNode.addElement('Role').setCData(role);
            const midi = soundNode.addElement('MIDI');
            midi.addElement('LSB').innerText = '0';
            midi.addElement('MSB').innerText = '0';
            midi.addElement('Program').innerText = program.toString();
            const automationNode = automationsNode.addElement('Automation');
            automationNode.addElement('Type').innerText = 'Sound';
            automationNode.addElement('Linear').innerText = 'false';
            automationNode.addElement('Bar').innerText = barIndex.toString();
            automationNode.addElement('Position').innerText = ratioPosition.toString();
            automationNode.addElement('Visible').innerText = 'true';
            automationNode.addElement('Value').setCData(`${path};${name};${role}`);
        }
        writeSoundsAndAutomations(trackNode, track) {
            const soundsNode = trackNode.addElement('Sounds');
            const automationsNode = trackNode.addElement('Automations');
            if (track.staves.length > 0 && track.staves[0].bars.length > 0) {
                const trackSoundName = `Track_${track.index}_Initial`;
                const trackSoundPath = `Midi/${track.playbackInfo.program}`;
                const trackSoundRole = 'Factory';
                let trackSoundWritten = false;
                for (const staff of track.staves) {
                    for (const bar of staff.bars) {
                        for (const voice of bar.voices) {
                            for (const beat of voice.beats) {
                                const soundAutomation = beat.getAutomation(AutomationType.Instrument);
                                const isTrackSound = bar.index === 0 && beat.index === 0;
                                if (soundAutomation) {
                                    const name = isTrackSound ? trackSoundName : `ProgramChange_${beat.id}`;
                                    const path = isTrackSound ? trackSoundPath : `Midi/${soundAutomation.value}`;
                                    const role = isTrackSound ? trackSoundRole : 'User';
                                    if (!isTrackSound && !trackSoundWritten) {
                                        this.writeSoundAndAutomation(soundsNode, automationsNode, trackSoundName, trackSoundPath, trackSoundRole, track.staves[0].bars[0].index, track.playbackInfo.program);
                                        trackSoundWritten = true;
                                    }
                                    this.writeSoundAndAutomation(soundsNode, automationsNode, name, path, role, bar.index, soundAutomation.value, soundAutomation.ratioPosition);
                                    if (isTrackSound) {
                                        trackSoundWritten = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (const s of track.staves) {
                for (const b of s.bars) {
                    for (const sustainPedal of b.sustainPedals) {
                        if (sustainPedal.pedalType !== SustainPedalMarkerType.Hold) {
                            const automation = automationsNode.addElement('Automation');
                            automation.addElement('Type').innerText = 'SustainPedal';
                            automation.addElement('Linear').innerText = 'false';
                            automation.addElement('Bar').innerText = b.index.toString();
                            automation.addElement('Position').innerText = sustainPedal.ratioPosition.toString();
                            automation.addElement('Visible').innerText = 'true';
                            switch (sustainPedal.pedalType) {
                                case SustainPedalMarkerType.Down:
                                    automation.addElement('Value').innerText = '0 1';
                                    break;
                                case SustainPedalMarkerType.Up:
                                    automation.addElement('Value').innerText = '0 3';
                                    break;
                            }
                        }
                    }
                }
            }
        }
        writeMidiConnectionNode(trackNode, track) {
            const midiConnection = trackNode.addElement('MidiConnection');
            midiConnection.addElement('Port').innerText = track.playbackInfo.port.toString();
            midiConnection.addElement('PrimaryChannel').innerText = track.playbackInfo.primaryChannel.toString();
            midiConnection.addElement('SecondaryChannel').innerText = track.playbackInfo.secondaryChannel.toString();
            midiConnection.addElement('ForeOneChannelPerString').innerText = 'false';
        }
        writeRseNode(trackNode, track) {
            const rse = trackNode.addElement('RSE');
            const channelStrip = rse.addElement('ChannelStrip');
            channelStrip.attributes.set('version', 'E56');
            const channelStripParameters = channelStrip.addElement('Parameters');
            channelStripParameters.innerText = `0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1 0.5 ${track.playbackInfo.balance / 16} ${track.playbackInfo.volume / 16} 0.5 0.5 0.5`;
        }
        writeStavesNode(trackNode, track) {
            const staves = trackNode.addElement('Staves');
            for (const staff of track.staves) {
                this.writeStaffNode(staves, staff);
            }
        }
        writeStaffNode(parent, staff) {
            const staffNode = parent.addElement('Staff');
            const properties = staffNode.addElement('Properties');
            this.writeSimplePropertyNode(properties, 'CapoFret', 'Fret', staff.capo.toString());
            this.writeSimplePropertyNode(properties, 'FretCount', 'Fret', '24');
            if (staff.tuning.length > 0) {
                const tuningProperty = properties.addElement('Property');
                tuningProperty.attributes.set('name', 'Tuning');
                tuningProperty.addElement('Pitches').innerText = staff.tuning.slice().reverse().join(' ');
                tuningProperty.addElement('Label').setCData(staff.tuningName);
                tuningProperty.addElement('LabelVisible').innerText = staff.tuningName ? 'true' : 'false';
                tuningProperty.addElement('Flat');
                switch (staff.tuning.length) {
                    case 3:
                        tuningProperty.addElement('Instrument').innerText = 'Shamisen';
                        break;
                    case 4:
                        if (staff.track.playbackInfo.program === 105) {
                            tuningProperty.addElement('Instrument').innerText = 'Banjo';
                        }
                        else if (staff.track.playbackInfo.program === 42) {
                            tuningProperty.addElement('Instrument').innerText = 'Cello';
                        }
                        else if (staff.track.playbackInfo.program === 43) {
                            tuningProperty.addElement('Instrument').innerText = 'Contrabass';
                        }
                        else if (staff.track.playbackInfo.program === 40) {
                            tuningProperty.addElement('Instrument').innerText = 'Violin';
                        }
                        else if (staff.track.playbackInfo.program === 41) {
                            tuningProperty.addElement('Instrument').innerText = 'Viola';
                        }
                        else {
                            tuningProperty.addElement('Instrument').innerText = 'Bass';
                        }
                        break;
                    case 5:
                        if (staff.track.playbackInfo.program === 105) {
                            tuningProperty.addElement('Instrument').innerText = 'Banjo';
                        }
                        else {
                            tuningProperty.addElement('Instrument').innerText = 'Bass';
                        }
                        break;
                    case 6:
                        if (staff.track.playbackInfo.program === 105) {
                            tuningProperty.addElement('Instrument').innerText = 'Banjo';
                        }
                        else if (staff.track.playbackInfo.program <= 39) {
                            tuningProperty.addElement('Instrument').innerText = 'Bass';
                        }
                        else {
                            tuningProperty.addElement('Instrument').innerText = 'Guitar';
                        }
                        break;
                    case 7:
                        if (staff.track.playbackInfo.program <= 39) {
                            tuningProperty.addElement('Instrument').innerText = 'Bass';
                        }
                        else {
                            tuningProperty.addElement('Instrument').innerText = 'Guitar';
                        }
                        break;
                    default:
                        tuningProperty.addElement('Instrument').innerText = 'Guitar';
                        break;
                }
            }
            this.writeSimplePropertyNode(properties, 'PartialCapoFret', 'Fret', '0');
            this.writeSimplePropertyNode(properties, 'PartialCapoStringFlags', 'Bitset', staff.tuning.map(_ => '0').join(''));
            this.writeSimplePropertyNode(properties, 'TuningFlat', 'Enable', null);
            this.writeDiagramCollection(properties, staff, 'DiagramCollection');
            this.writeDiagramCollection(properties, staff, 'DiagramWorkingSet');
        }
        writeDiagramCollection(properties, staff, name) {
            const diagramCollectionProperty = properties.addElement('Property');
            diagramCollectionProperty.attributes.set('name', name);
            const diagramCollectionItems = diagramCollectionProperty.addElement('Items');
            const sc = staff.chords;
            if (sc) {
                for (const [id, chord] of sc) {
                    const diagramCollectionItem = diagramCollectionItems.addElement('Item');
                    diagramCollectionItem.attributes.set('id', id);
                    diagramCollectionItem.attributes.set('name', chord.name);
                    const diagram = diagramCollectionItem.addElement('Diagram');
                    diagram.attributes.set('stringCount', chord.strings.length.toString());
                    diagram.attributes.set('fretCount', '5');
                    diagram.attributes.set('baseFret', (chord.firstFret - 1).toString());
                    diagram.attributes.set('barStates', chord.strings.map(_ => '1').join(' '));
                    const frets = [];
                    const fretToStrings = new Map();
                    for (let i = 0; i < chord.strings.length; i++) {
                        const chordFret = chord.strings[i];
                        if (chordFret !== -1) {
                            const fretNode = diagram.addElement('Fret');
                            const chordString = chord.strings.length - 1 - i;
                            fretNode.attributes.set('string', chordString.toString());
                            fretNode.attributes.set('fret', (chordFret - chord.firstFret + 1).toString());
                            if (!fretToStrings.has(chordFret)) {
                                fretToStrings.set(chordFret, []);
                                frets.push(chordFret);
                            }
                            fretToStrings.get(chordFret).push(chordString);
                        }
                    }
                    frets.sort();
                    // try to rebuild the barre frets
                    const fingering = diagram.addElement('Fingering');
                    if (chord.barreFrets.length > 0) {
                        const fingers = [
                            Fingers.LittleFinger,
                            Fingers.AnnularFinger,
                            Fingers.MiddleFinger,
                            Fingers.IndexFinger
                        ];
                        for (const fret of frets) {
                            const fretStrings = fretToStrings.get(fret);
                            if (fretStrings.length > 1 && chord.barreFrets.indexOf(fret) >= 0) {
                                const finger = fingers.length > 0 ? fingers.pop() : Fingers.IndexFinger;
                                for (const fretString of fretStrings) {
                                    const position = fingering.addElement('Position');
                                    switch (finger) {
                                        case Fingers.LittleFinger:
                                            position.attributes.set('finger', 'Pinky');
                                            break;
                                        case Fingers.AnnularFinger:
                                            position.attributes.set('finger', 'Ring');
                                            break;
                                        case Fingers.MiddleFinger:
                                            position.attributes.set('finger', 'Middle');
                                            break;
                                        case Fingers.IndexFinger:
                                            position.attributes.set('finger', 'Index');
                                            break;
                                    }
                                    position.attributes.set('fret', (fret - chord.firstFret + 1).toString());
                                    position.attributes.set('string', fretString.toString());
                                }
                            }
                        }
                    }
                    const showName = diagram.addElement('Property');
                    showName.attributes.set('name', 'ShowName');
                    showName.attributes.set('type', 'bool');
                    showName.attributes.set('value', chord.showName ? 'true' : 'false');
                    const showDiagram = diagram.addElement('Property');
                    showDiagram.attributes.set('name', 'ShowDiagram');
                    showDiagram.attributes.set('type', 'bool');
                    showDiagram.attributes.set('value', chord.showDiagram ? 'true' : 'false');
                    const showFingering = diagram.addElement('Property');
                    showFingering.attributes.set('name', 'ShowFingering');
                    showFingering.attributes.set('type', 'bool');
                    showFingering.attributes.set('value', chord.showFingering ? 'true' : 'false');
                    // TODO Chord details
                    const chordNode = diagram.addElement('Chord');
                    const keyNoteNode = chordNode.addElement('KeyNote');
                    keyNoteNode.attributes.set('step', 'C');
                    keyNoteNode.attributes.set('accidental', 'Natural');
                    const bassNoteNode = chordNode.addElement('BassNote');
                    bassNoteNode.attributes.set('step', 'C');
                    bassNoteNode.attributes.set('accidental', 'Natural');
                    const degree1Node = chordNode.addElement('Degree');
                    degree1Node.attributes.set('interval', 'Third');
                    degree1Node.attributes.set('alteration', 'Major');
                    degree1Node.attributes.set('omitted', 'false');
                    const degree2Node = chordNode.addElement('Degree');
                    degree2Node.attributes.set('interval', 'Fifth');
                    degree2Node.attributes.set('alteration', 'Perfect');
                    degree2Node.attributes.set('omitted', 'false');
                }
            }
        }
        writeSimplePropertyNode(parent, propertyName, propertyValueTagName, propertyValue) {
            const prop = parent.addElement('Property');
            prop.attributes.set('name', propertyName);
            const propertyValueTag = prop.addElement(propertyValueTagName);
            if (propertyValue !== null) {
                propertyValueTag.innerText = propertyValue;
            }
            return prop;
        }
        writeSimpleXPropertyNode(parent, propertyId, propertyValueTagName, propertyValue) {
            const prop = parent.addElement('XProperty');
            prop.attributes.set('id', propertyId);
            const propertyValueTag = prop.addElement(propertyValueTagName);
            if (propertyValue !== null) {
                propertyValueTag.innerText = propertyValue;
            }
            return prop;
        }
        writeLyricsNode(trackNode, track) {
            const lyrics = trackNode.addElement('Lyrics');
            lyrics.attributes.set('dispatched', 'true');
            const lines = [];
            for (const bar of track.staves[0].bars) {
                for (const voice of bar.voices) {
                    if (!voice.isEmpty) {
                        for (const beat of voice.beats) {
                            if (beat.lyrics) {
                                for (let l = 0; l < beat.lyrics.length; l++) {
                                    // initial create of the lines
                                    while (l >= lines.length) {
                                        const newLyrics = new Lyrics();
                                        newLyrics.startBar = bar.index;
                                        newLyrics.text = '[Empty]';
                                        lines.push(newLyrics);
                                    }
                                    const line = lines[l];
                                    line.text =
                                        line.text === '[Empty]'
                                            ? beat.lyrics[l]
                                            : `${line.text} ${beat.lyrics[l].split(' ').join('+')}`;
                                }
                            }
                        }
                    }
                }
            }
            for (let i = 0; i < lines.length; i++) {
                const line = lyrics.addElement('Line');
                line.addElement('Text').setCData(lines[i].text);
                line.addElement('Offset').innerText = lines[i].startBar.toString();
            }
        }
        writeTransposeNode(trackNode, track) {
            const transpose = trackNode.addElement('Transpose');
            const octaveTranspose = Math.floor(track.staves[0].displayTranspositionPitch / 12);
            const chromaticTranspose = track.staves[0].displayTranspositionPitch - octaveTranspose * 12;
            transpose.addElement('Chromatic').innerText = chromaticTranspose.toString();
            transpose.addElement('Octave').innerText = octaveTranspose.toString();
        }
        writeInstrumentSetNode(trackNode, track) {
            const instrumentSet = trackNode.addElement('InstrumentSet');
            const firstStaff = track.staves[0];
            instrumentSet.addElement('LineCount').innerText = firstStaff.standardNotationLineCount.toString();
            if (track.percussionArticulations.length > 0 || firstStaff.isPercussion) {
                const articulations = track.percussionArticulations.length > 0
                    ? track.percussionArticulations
                    : Array.from(PercussionMapper.instrumentArticulations.values());
                instrumentSet.addElement('Name').innerText = GpifWriter.DrumKitProgramInfo.instrumentSetName;
                instrumentSet.addElement('Type').innerText = GpifWriter.DrumKitProgramInfo.instrumentSetType;
                let currentElementName = '';
                let currentArticulations = new XmlNode();
                const counterPerType = new Map();
                const elements = instrumentSet.addElement('Elements');
                for (const articulation of articulations) {
                    {
                        const currentElement = elements.addElement('Element');
                        let name = articulation.elementType;
                        if (counterPerType.has(name)) {
                            const counter = counterPerType.get(name);
                            name += ` ${counter}`;
                            counterPerType.set(name, counter + 1);
                        }
                        else {
                            counterPerType.set(name, 1);
                        }
                        currentElementName = name;
                        currentElement.addElement('Name').innerText = name;
                        currentElement.addElement('Type').innerText = articulation.elementType;
                        currentArticulations = currentElement.addElement('Articulations');
                    }
                    const articulationNode = currentArticulations.addElement('Articulation');
                    articulationNode.addElement('Name').innerText =
                        `${currentElementName} ${currentArticulations.childNodes.length}`;
                    articulationNode.addElement('StaffLine').innerText = articulation.staffLine.toString();
                    articulationNode.addElement('Noteheads').innerText = [
                        this.mapMusicSymbol(articulation.noteHeadDefault),
                        this.mapMusicSymbol(articulation.noteHeadHalf),
                        this.mapMusicSymbol(articulation.noteHeadWhole)
                    ].join(' ');
                    switch (articulation.techniqueSymbolPlacement) {
                        case TextBaseline.Top:
                            articulationNode.addElement('TechniquePlacement').innerText = 'below';
                            break;
                        case TextBaseline.Middle:
                            articulationNode.addElement('TechniquePlacement').innerText = 'inside';
                            break;
                        case TextBaseline.Bottom:
                            articulationNode.addElement('TechniquePlacement').innerText = 'above';
                            break;
                    }
                    articulationNode.addElement('TechniqueSymbol').innerText = this.mapMusicSymbol(articulation.techniqueSymbol);
                    articulationNode.addElement('InputMidiNumbers').innerText = '';
                    articulationNode.addElement('OutputMidiNumber').innerText = articulation.outputMidiNumber.toString();
                }
            }
            else {
                const programInfo = GpifWriter.MidiProgramInfoLookup.has(track.playbackInfo.program)
                    ? GpifWriter.MidiProgramInfoLookup.get(track.playbackInfo.program)
                    : GpifWriter.MidiProgramInfoLookup.get(0);
                instrumentSet.addElement('Name').innerText = programInfo.instrumentSetName;
                instrumentSet.addElement('Type').innerText = programInfo.instrumentSetType;
                // Only the simple pitched element for normal instruments
                const elements = instrumentSet.addElement('Elements');
                const element = elements.addElement('Element');
                element.addElement('Pitched').innerText = 'Pitched';
                element.addElement('Type').innerText = 'pitched';
                element.addElement('SoundbankName').innerText = '';
                const articulations = element.addElement('Articulations');
                const articulation = articulations.addElement('Articulation');
                articulation.addElement('Name').innerText = '';
                articulation.addElement('StaffLine').innerText = '0';
                articulation.addElement('Noteheads').innerText = 'noteheadBlack noteheadHalf noteheadWhole';
                articulation.addElement('TechniquePlacement').innerText = 'outside';
                articulation.addElement('TechniqueSymbol').innerText = '';
                articulation.addElement('InputMidiNumbers').innerText = '';
                articulation.addElement('OutputRSESound').innerText = '';
                articulation.addElement('OutputMidiNumber').innerText = '0';
            }
        }
        mapMusicSymbol(symbol) {
            if (symbol === MusicFontSymbol.None) {
                return '';
            }
            const s = MusicFontSymbol[symbol];
            return s.substring(0, 1).toLowerCase() + s.substring(1);
        }
        writeMasterBarsNode(parent, score) {
            const masterBars = parent.addElement('MasterBars');
            for (const masterBar of score.masterBars) {
                this.writeMasterBarNode(masterBars, masterBar);
            }
        }
        writeMasterBarNode(parent, masterBar) {
            const masterBarNode = parent.addElement('MasterBar');
            const key = masterBarNode.addElement('Key');
            key.addElement('AccidentalCount').innerText = masterBar.keySignature.toString();
            key.addElement('Mode').innerText = KeySignatureType[masterBar.keySignatureType];
            key.addElement('Sharps').innerText = 'Sharps';
            masterBarNode.addElement('Time').innerText =
                `${masterBar.timeSignatureNumerator}/${masterBar.timeSignatureDenominator}`;
            if (masterBar.isFreeTime) {
                masterBarNode.addElement('FreeTime');
            }
            const bars = [];
            for (const tracks of masterBar.score.tracks) {
                for (const staves of tracks.staves) {
                    bars.push(staves.bars[masterBar.index].id.toString());
                }
            }
            masterBarNode.addElement('Bars').innerText = bars.join(' ');
            if (masterBar.isDoubleBar) {
                masterBarNode.addElement('DoubleBar');
            }
            if (masterBar.isSectionStart) {
                const section = masterBarNode.addElement('Section');
                section.addElement('Letter').setCData(masterBar.section.marker);
                section.addElement('Text').setCData(masterBar.section.text);
            }
            if (masterBar.isRepeatStart || masterBar.isRepeatEnd) {
                const repeat = masterBarNode.addElement('Repeat');
                repeat.attributes.set('start', masterBar.isRepeatStart ? 'true' : 'false');
                repeat.attributes.set('end', masterBar.isRepeatEnd ? 'true' : 'false');
                if (masterBar.isRepeatEnd) {
                    repeat.attributes.set('count', masterBar.repeatCount.toString());
                }
            }
            if (masterBar.alternateEndings > 0) {
                let remainingBits = masterBar.alternateEndings;
                const alternateEndings = [];
                let bit = 0;
                while (remainingBits > 0) {
                    if (((remainingBits >> bit) & 0x01) === 0x01) {
                        alternateEndings.push(bit + 1);
                        // clear bit
                        remainingBits &= ~(1 << bit);
                    }
                    bit++;
                }
                masterBarNode.addElement('AlternateEndings').innerText = alternateEndings.join(' ');
            }
            if (masterBar.tripletFeel !== TripletFeel.NoTripletFeel) {
                masterBarNode.addElement('TripletFeel').innerText = TripletFeel[masterBar.tripletFeel];
            }
            if (masterBar.directions && masterBar.directions.size > 0) {
                const directions = masterBarNode.addElement('Directions');
                for (const d of masterBar.directions) {
                    switch (d) {
                        case Direction.TargetFine:
                            directions.addElement('Target').innerText = 'Fine';
                            break;
                        case Direction.TargetSegno:
                            directions.addElement('Target').innerText = 'Segno';
                            break;
                        case Direction.TargetSegnoSegno:
                            directions.addElement('Target').innerText = 'SegnoSegno';
                            break;
                        case Direction.TargetCoda:
                            directions.addElement('Target').innerText = 'Coda';
                            break;
                        case Direction.TargetDoubleCoda:
                            directions.addElement('Target').innerText = 'DoubleCoda';
                            break;
                        case Direction.JumpDaCapo:
                            directions.addElement('Jump').innerText = 'DaCapo';
                            break;
                        case Direction.JumpDaCapoAlCoda:
                            directions.addElement('Jump').innerText = 'DaCapoAlCoda';
                            break;
                        case Direction.JumpDaCapoAlDoubleCoda:
                            directions.addElement('Jump').innerText = 'DaCapoAlDoubleCoda';
                            break;
                        case Direction.JumpDaCapoAlFine:
                            directions.addElement('Jump').innerText = 'DaCapoAlFine';
                            break;
                        case Direction.JumpDalSegno:
                            directions.addElement('Jump').innerText = 'DaSegno';
                            break;
                        case Direction.JumpDalSegnoAlCoda:
                            directions.addElement('Jump').innerText = 'DaSegnoAlCoda';
                            break;
                        case Direction.JumpDalSegnoAlDoubleCoda:
                            directions.addElement('Jump').innerText = 'DaSegnoAlDoubleCoda';
                            break;
                        case Direction.JumpDalSegnoAlFine:
                            directions.addElement('Jump').innerText = 'DaSegnoAlFine';
                            break;
                        case Direction.JumpDalSegnoSegno:
                            directions.addElement('Jump').innerText = 'DaSegnoSegno';
                            break;
                        case Direction.JumpDalSegnoSegnoAlCoda:
                            directions.addElement('Jump').innerText = 'DaSegnoSegnoAlCoda';
                            break;
                        case Direction.JumpDalSegnoSegnoAlDoubleCoda:
                            directions.addElement('Jump').innerText = 'DaSegnoSegnoAlDoubleCoda';
                            break;
                        case Direction.JumpDalSegnoSegnoAlFine:
                            directions.addElement('Jump').innerText = 'DaSegnoSegnoAlFine';
                            break;
                        case Direction.JumpDaCoda:
                            directions.addElement('Jump').innerText = 'DaCoda';
                            break;
                        case Direction.JumpDaDoubleCoda:
                            directions.addElement('Jump').innerText = 'DaDoubleCoda';
                            break;
                    }
                }
            }
            this.writeFermatas(masterBarNode, masterBar);
        }
        writeFermatas(parent, masterBar) {
            const fermataCount = masterBar.fermata?.size ?? 0;
            if (fermataCount === 0) {
                return;
            }
            if (fermataCount > 0) {
                const fermatas = parent.addElement('Fermatas');
                for (const [offset, fermata] of masterBar.fermata) {
                    this.writeFermata(fermatas, offset, fermata);
                }
            }
        }
        writeFermata(parent, offset, fermata) {
            let numerator = -1;
            let denominator = 1;
            if (offset > 0) {
                while (denominator < 10) {
                    // Offset = (numerator / denominator) * QuarterTime
                    // (Offset / QuarterTime) * denominator = numerator
                    numerator = (offset / MidiUtils.QuarterTime) * denominator;
                    // found a full digit match
                    if (numerator === Math.floor(numerator)) {
                        break;
                    }
                    numerator = -1;
                    denominator++;
                }
            }
            else {
                numerator = 0;
                denominator = 1;
            }
            if (numerator === -1) {
                // No split found
                return;
            }
            const fermataNode = parent.addElement('Fermata');
            fermataNode.addElement('Type').innerText = FermataType[fermata.type];
            fermataNode.addElement('Length').innerText = fermata.length.toString();
            fermataNode.addElement('Offset').innerText = `${numerator}/${denominator}`;
        }
        writeBarNode(parent, bar) {
            const barNode = parent.addElement('Bar');
            barNode.attributes.set('id', bar.id.toString());
            barNode.addElement('Voices').innerText = bar.voices.map(v => (v.isEmpty ? '-1' : v.id.toString())).join(' ');
            barNode.addElement('Clef').innerText = Clef[bar.clef];
            if (bar.clefOttava !== Ottavia.Regular) {
                barNode.addElement('Ottavia').innerText = Ottavia[bar.clefOttava].substr(1);
            }
            if (bar.simileMark !== SimileMark.None) {
                barNode.addElement('SimileMark').innerText = SimileMark[bar.simileMark];
            }
        }
        writeVoiceNode(parent, voice) {
            if (voice.isEmpty) {
                return;
            }
            const voiceNode = parent.addElement('Voice');
            voiceNode.attributes.set('id', voice.id.toString());
            voiceNode.addElement('Beats').innerText = voice.beats.map(v => v.id).join(' ');
        }
    }
    // tests have shown that Guitar Pro seem to always work with 44100hz for the frame offsets,
    // they are NOT using the sample rate of the input file.
    // Downsampling a 44100hz ogg to 8000hz and using it in as audio track resulted in the same frame offset when placing sync points.
    GpifWriter.SampleRate = 44100;
    GpifWriter.MidiProgramInfoLookup = new Map([
        [0, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
        [1, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
        [2, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
        [3, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
        [4, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
        [5, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
        [6, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harpsichord')],
        [7, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harpsichord')],
        [8, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Celesta')],
        [9, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
        [10, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
        [11, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
        [12, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
        [13, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
        [14, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
        [15, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
        [16, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [17, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [18, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [19, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [20, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [21, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [22, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
        [23, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
        [24, new GpifMidiProgramInfo(GpifIconIds.ClassicalGuitar, 'Nylon Guitar')],
        [25, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Steel Guitar')],
        [26, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
        [27, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
        [28, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
        [29, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
        [30, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
        [31, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
        [32, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Acoustic Bass')],
        [33, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
        [34, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
        [35, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Acoustic Bass')],
        [36, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
        [37, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
        [38, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Synth Bass')],
        [39, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Synth Bass')],
        [40, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [41, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Viola')],
        [42, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Cello')],
        [43, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Contrabass')],
        [44, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [45, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [46, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harp')],
        [47, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Timpani')],
        [48, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [49, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [50, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [51, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [52, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
        [53, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
        [54, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
        [55, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [56, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
        [57, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trombone')],
        [58, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Tuba')],
        [59, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
        [60, new GpifMidiProgramInfo(GpifIconIds.Brass, 'French Horn')],
        [61, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
        [62, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
        [63, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
        [64, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
        [65, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
        [66, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
        [67, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
        [68, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Oboe')],
        [69, new GpifMidiProgramInfo(GpifIconIds.Reed, 'English Horn')],
        [70, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Bassoon')],
        [71, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Clarinet')],
        [72, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Piccolo')],
        [73, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
        [74, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
        [75, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
        [76, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
        [77, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
        [78, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
        [79, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
        [80, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [81, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [82, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [83, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [84, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [85, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [86, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [87, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
        [88, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [89, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [90, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [91, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [92, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [93, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [94, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [95, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
        [96, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
        [97, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
        [98, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
        [99, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
        [100, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
        [101, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
        [102, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
        [103, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Trumpet')],
        [104, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Banjo')],
        [105, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
        [106, new GpifMidiProgramInfo(GpifIconIds.Ukulele, 'Ukulele')],
        [107, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
        [108, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
        [109, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Bassoon')],
        [110, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
        [111, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
        [112, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
        [113, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Celesta')],
        [114, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
        [115, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Xylophone')],
        [116, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
        [117, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
        [118, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
        [119, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Celesta')],
        [120, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Steel Guitar')],
        [121, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [122, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [123, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [124, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [125, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [126, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
        [127, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Timpani')]
    ]);
    GpifWriter.DrumKitProgramInfo = new GpifMidiProgramInfo(GpifIconIds.PercussionKit, 'Drums', 'drumKit');

    /**
     * CRC-32 with reversed data and unreversed output
     */
    class Crc32 {
        static buildCrc32Lookup() {
            const poly = 0xedb88320;
            const lookup = new Uint32Array(256);
            for (let i = 0; i < lookup.length; i++) {
                let crc = i;
                for (let bit = 0; bit < 8; bit++) {
                    crc = (crc & 1) === 1 ? (crc >>> 1) ^ poly : crc >>> 1;
                }
                lookup[i] = crc;
            }
            return lookup;
        }
        /**
         * Returns the CRC data checksum computed so far.
         */
        get value() {
            return ~this._checkValue;
        }
        /**
         * Initialise a default instance of Crc32.
         */
        constructor() {
            /**
             * The CRC data checksum so far.
             */
            this._checkValue = Crc32.CrcInit;
            this.reset();
        }
        /**
         * Update CRC data checksum based on a portion of a block of data
         * @param data The array containing the data to add
         * @param offset Range start for data (inclusive)
         * @param count The number of bytes to checksum starting from offset
         */
        update(data, offset, count) {
            for (let i = 0; i < count; i++) {
                this._checkValue =
                    Crc32.Crc32Lookup[(this._checkValue ^ data[offset + i]) & 0xff] ^ (this._checkValue >>> 8);
            }
        }
        /**
         * Resets the CRC data checksum as if no update was ever called.
         */
        reset() {
            this._checkValue = Crc32.CrcInit;
        }
    }
    Crc32.Crc32Lookup = Crc32.buildCrc32Lookup();
    Crc32.CrcInit = 0xffffffff;

    // This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
    // https://github.com/icsharpcode/SharpZipLib
    /*
     * Copyright © 2000-2018 SharpZipLib Contributors
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this
     * software and associated documentation files (the "Software"), to deal in the Software
     * without restriction, including without limitation the rights to use, copy, modify, merge,
     * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
     * to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or
     * substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
     * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
     * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
     * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
     * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    /**
     * This class contains constants used for deflation.
     */
    class DeflaterConstants {
    }
    DeflaterConstants.MAX_WBITS = 15;
    DeflaterConstants.WSIZE = 1 << DeflaterConstants.MAX_WBITS;
    DeflaterConstants.WMASK = DeflaterConstants.WSIZE - 1;
    DeflaterConstants.MIN_MATCH = 3;
    DeflaterConstants.MAX_MATCH = 258;
    DeflaterConstants.DEFAULT_MEM_LEVEL = 8;
    DeflaterConstants.PENDING_BUF_SIZE = 1 << (DeflaterConstants.DEFAULT_MEM_LEVEL + 8);
    DeflaterConstants.HASH_BITS = DeflaterConstants.DEFAULT_MEM_LEVEL + 7;
    DeflaterConstants.HASH_SIZE = 1 << DeflaterConstants.HASH_BITS;
    DeflaterConstants.HASH_SHIFT = (DeflaterConstants.HASH_BITS + DeflaterConstants.MIN_MATCH - 1) / DeflaterConstants.MIN_MATCH;
    DeflaterConstants.HASH_MASK = DeflaterConstants.HASH_SIZE - 1;
    DeflaterConstants.MIN_LOOKAHEAD = DeflaterConstants.MAX_MATCH + DeflaterConstants.MIN_MATCH + 1;
    DeflaterConstants.MAX_DIST = DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD;

    // This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
    // https://github.com/icsharpcode/SharpZipLib
    /*
     * Copyright © 2000-2018 SharpZipLib Contributors
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this
     * software and associated documentation files (the "Software"), to deal in the Software
     * without restriction, including without limitation the rights to use, copy, modify, merge,
     * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
     * to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or
     * substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
     * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
     * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
     * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
     * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    class Tree {
        constructor(dh, elems, minCodes, maxLength) {
            this.length = null;
            this.numCodes = 0;
            this.codes = null;
            this.huffman = dh;
            this.minNumCodes = minCodes;
            this.maxLength = maxLength;
            this.freqs = new Int16Array(elems);
            this.bitLengthCounts = new Int32Array(maxLength);
        }
        /**
         * Resets the internal state of the tree
         */
        reset() {
            for (let i = 0; i < this.freqs.length; i++) {
                this.freqs[i] = 0;
            }
            this.codes = null;
            this.length = null;
        }
        buildTree() {
            const numSymbols = this.freqs.length;
            /* heap is a priority queue, sorted by frequency, least frequent
             * nodes first.  The heap is a binary tree, with the property, that
             * the parent node is smaller than both child nodes.  This assures
             * that the smallest node is the first parent.
             *
             * The binary tree is encoded in an array:  0 is root node and
             * the nodes 2*n+1, 2*n+2 are the child nodes of node n.
             */
            const heap = new Int32Array(numSymbols);
            let heapLen = 0;
            let maxCode = 0;
            for (let n = 0; n < numSymbols; n++) {
                const freq = this.freqs[n];
                if (freq !== 0) {
                    // Insert n into heap
                    let pos = heapLen++;
                    while (true) {
                        if (pos > 0) {
                            const ppos = Math.floor((pos - 1) / 2);
                            if (this.freqs[heap[ppos]] > freq) {
                                heap[pos] = heap[ppos];
                                pos = ppos;
                            }
                            else {
                                break;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    heap[pos] = n;
                    maxCode = n;
                }
            }
            /* We could encode a single literal with 0 bits but then we
             * don't see the literals.  Therefore we force at least two
             * literals to avoid this case.  We don't care about order in
             * this case, both literals get a 1 bit code.
             */
            while (heapLen < 2) {
                const node = maxCode < 2 ? ++maxCode : 0;
                heap[heapLen++] = node;
            }
            this.numCodes = Math.max(maxCode + 1, this.minNumCodes);
            const numLeafs = heapLen;
            const childs = new Int32Array(4 * heapLen - 2);
            const values = new Int32Array(2 * heapLen - 1);
            let numNodes = numLeafs;
            for (let i = 0; i < heapLen; i++) {
                const node = heap[i];
                childs[2 * i] = node;
                childs[2 * i + 1] = -1;
                values[i] = this.freqs[node] << 8;
                heap[i] = i;
            }
            /* Construct the Huffman tree by repeatedly combining the least two
             * frequent nodes.
             */
            do {
                const first = heap[0];
                let last = heap[--heapLen];
                // Propagate the hole to the leafs of the heap
                let ppos = 0;
                let path = 1;
                while (path < heapLen) {
                    if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]]) {
                        path++;
                    }
                    heap[ppos] = heap[path];
                    ppos = path;
                    path = path * 2 + 1;
                }
                /* Now propagate the last element down along path.  Normally
                 * it shouldn't go too deep.
                 */
                let lastVal = values[last];
                while (true) {
                    path = ppos;
                    if (ppos > 0) {
                        ppos = Math.floor((path - 1) / 2);
                        if (values[heap[ppos]] > lastVal) {
                            heap[path] = heap[ppos];
                        }
                        else {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
                heap[path] = last;
                const second = heap[0];
                // Create a new node father of first and second
                last = numNodes++;
                childs[2 * last] = first;
                childs[2 * last + 1] = second;
                const mindepth = Math.min(values[first] & 0xff, values[second] & 0xff);
                lastVal = values[first] + values[second] - mindepth + 1;
                values[last] = lastVal;
                // Again, propagate the hole to the leafs
                ppos = 0;
                path = 1;
                while (path < heapLen) {
                    if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]]) {
                        path++;
                    }
                    heap[ppos] = heap[path];
                    ppos = path;
                    path = ppos * 2 + 1;
                }
                // Now propagate the new element down along path
                while (true) {
                    path = ppos;
                    if (path > 0) {
                        ppos = Math.floor((path - 1) / 2);
                        if (values[heap[ppos]] > lastVal) {
                            heap[path] = heap[ppos];
                        }
                        else {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
                heap[path] = last;
            } while (heapLen > 1);
            this.buildLength(childs);
        }
        buildLength(childs) {
            this.length = new Uint8Array(this.freqs.length);
            const numNodes = Math.floor(childs.length / 2);
            const numLeafs = Math.floor((numNodes + 1) / 2);
            let overflow = 0;
            for (let i = 0; i < this.maxLength; i++) {
                this.bitLengthCounts[i] = 0;
            }
            // First calculate optimal bit lengths
            const lengths = new Int32Array(numNodes);
            lengths[numNodes - 1] = 0;
            for (let i = numNodes - 1; i >= 0; i--) {
                if (childs[2 * i + 1] !== -1) {
                    let bitLength = lengths[i] + 1;
                    if (bitLength > this.maxLength) {
                        bitLength = this.maxLength;
                        overflow++;
                    }
                    lengths[childs[2 * i]] = bitLength;
                    lengths[childs[2 * i + 1]] = bitLength;
                }
                else {
                    // A leaf node
                    const bitLength = lengths[i];
                    this.bitLengthCounts[bitLength - 1]++;
                    this.length[childs[2 * i]] = lengths[i];
                }
            }
            if (overflow === 0) {
                return;
            }
            let incrBitLen = this.maxLength - 1;
            do {
                // Find the first bit length which could increase:
                while (this.bitLengthCounts[--incrBitLen] === 0) {
                }
                // Move this node one down and remove a corresponding
                // number of overflow nodes.
                do {
                    this.bitLengthCounts[incrBitLen]--;
                    this.bitLengthCounts[++incrBitLen]++;
                    overflow -= 1 << (this.maxLength - 1 - incrBitLen);
                } while (overflow > 0 && incrBitLen < this.maxLength - 1);
            } while (overflow > 0);
            /* We may have overshot above.  Move some nodes from maxLength to
             * maxLength-1 in that case.
             */
            this.bitLengthCounts[this.maxLength - 1] += overflow;
            this.bitLengthCounts[this.maxLength - 2] -= overflow;
            /* Now recompute all bit lengths, scanning in increasing
             * frequency.  It is simpler to reconstruct all lengths instead of
             * fixing only the wrong ones. This idea is taken from 'ar'
             * written by Haruhiko Okumura.
             *
             * The nodes were inserted with decreasing frequency into the childs
             * array.
             */
            let nodePtr = 2 * numLeafs;
            for (let bits = this.maxLength; bits !== 0; bits--) {
                let n = this.bitLengthCounts[bits - 1];
                while (n > 0) {
                    const childPtr = 2 * childs[nodePtr++];
                    if (childs[childPtr + 1] === -1) {
                        // We found another leaf
                        this.length[childs[childPtr]] = bits;
                        n--;
                    }
                }
            }
        }
        /**
         * Get encoded length
         * @returns Encoded length, the sum of frequencies * lengths
         */
        getEncodedLength() {
            let len = 0;
            for (let i = 0; i < this.freqs.length; i++) {
                len += this.freqs[i] * this.length[i];
            }
            return len;
        }
        /**
         * Scan a literal or distance tree to determine the frequencies of the codes
         * in the bit length tree.
         * @param blTree
         */
        calcBLFreq(blTree) {
            let max_count; /* max repeat count */
            let min_count; /* min repeat count */
            let count; /* repeat count of the current code */
            let curlen = -1; /* length of current code */
            let i = 0;
            while (i < this.numCodes) {
                count = 1;
                const nextlen = this.length[i];
                if (nextlen === 0) {
                    max_count = 138;
                    min_count = 3;
                }
                else {
                    max_count = 6;
                    min_count = 3;
                    if (curlen !== nextlen) {
                        blTree.freqs[nextlen]++;
                        count = 0;
                    }
                }
                curlen = nextlen;
                i++;
                while (i < this.numCodes && curlen === this.length[i]) {
                    i++;
                    if (++count >= max_count) {
                        break;
                    }
                }
                if (count < min_count) {
                    blTree.freqs[curlen] += count;
                }
                else if (curlen !== 0) {
                    blTree.freqs[Tree.Repeat3To6]++;
                }
                else if (count <= 10) {
                    blTree.freqs[Tree.Repeat3To10]++;
                }
                else {
                    blTree.freqs[Tree.Repeat11To138]++;
                }
            }
        }
        /**
         * Set static codes and length
         * @param staticCodes new codes
         * @param staticLengths length for new codes
         */
        setStaticCodes(staticCodes, staticLengths) {
            this.codes = staticCodes;
            this.length = staticLengths;
        }
        /**
         * Build dynamic codes and lengths
         */
        buildCodes() {
            const nextCode = new Int32Array(this.maxLength);
            let code = 0;
            this.codes = new Int16Array(this.freqs.length);
            for (let bits = 0; bits < this.maxLength; bits++) {
                nextCode[bits] = code;
                code += this.bitLengthCounts[bits] << (15 - bits);
            }
            for (let i = 0; i < this.numCodes; i++) {
                const bits = this.length[i];
                if (bits > 0) {
                    this.codes[i] = DeflaterHuffman.bitReverse(nextCode[bits - 1]);
                    nextCode[bits - 1] += 1 << (16 - bits);
                }
            }
        }
        /**
         * Write tree values
         * @param blTree Tree to write
         */
        writeTree(blTree) {
            let maxCount; // max repeat count
            let minCount; // min repeat count
            let count; // repeat count of the current code
            let curlen = -1; // length of current code
            let i = 0;
            while (i < this.numCodes) {
                count = 1;
                const nextlen = this.length[i];
                if (nextlen === 0) {
                    maxCount = 138;
                    minCount = 3;
                }
                else {
                    maxCount = 6;
                    minCount = 3;
                    if (curlen !== nextlen) {
                        blTree.writeSymbol(nextlen);
                        count = 0;
                    }
                }
                curlen = nextlen;
                i++;
                while (i < this.numCodes && curlen === this.length[i]) {
                    i++;
                    if (++count >= maxCount) {
                        break;
                    }
                }
                if (count < minCount) {
                    while (count-- > 0) {
                        blTree.writeSymbol(curlen);
                    }
                }
                else if (curlen !== 0) {
                    blTree.writeSymbol(Tree.Repeat3To6);
                    this.huffman.pending.writeBits(count - 3, 2);
                }
                else if (count <= 10) {
                    blTree.writeSymbol(Tree.Repeat3To10);
                    this.huffman.pending.writeBits(count - 3, 3);
                }
                else {
                    blTree.writeSymbol(Tree.Repeat11To138);
                    this.huffman.pending.writeBits(count - 11, 7);
                }
            }
        }
        writeSymbol(code) {
            this.huffman.pending.writeBits(this.codes[code] & 0xffff, this.length[code]);
        }
    }
    // repeat previous bit length 3-6 times (2 bits of repeat count)
    Tree.Repeat3To6 = 16;
    // repeat a zero length 3-10 times  (3 bits of repeat count)
    Tree.Repeat3To10 = 17;
    // repeat a zero length 11-138 times  (7 bits of repeat count)
    Tree.Repeat11To138 = 18;
    class DeflaterHuffman {
        static staticInit() {
            // See RFC 1951 3.2.6
            // Literal codes
            let i = 0;
            while (i < 144) {
                DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x030 + i) << 8);
                DeflaterHuffman.staticLLength[i++] = 8;
            }
            while (i < 256) {
                DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x190 - 144 + i) << 7);
                DeflaterHuffman.staticLLength[i++] = 9;
            }
            while (i < 280) {
                DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x000 - 256 + i) << 9);
                DeflaterHuffman.staticLLength[i++] = 7;
            }
            while (i < DeflaterHuffman.LITERAL_NUM) {
                DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x0c0 - 280 + i) << 8);
                DeflaterHuffman.staticLLength[i++] = 8;
            }
            // Distance codes
            for (i = 0; i < DeflaterHuffman.DIST_NUM; i++) {
                DeflaterHuffman.staticDCodes[i] = DeflaterHuffman.bitReverse(i << 11);
                DeflaterHuffman.staticDLength[i] = 5;
            }
        }
        /**
         * Reverse the bits of a 16 bit value.
         * @param toReverse Value to reverse bits
         * @returns Value with bits reversed
         */
        static bitReverse(toReverse) {
            return ((DeflaterHuffman.bit4Reverse[toReverse & 0xf] << 12) |
                (DeflaterHuffman.bit4Reverse[(toReverse >> 4) & 0xf] << 8) |
                (DeflaterHuffman.bit4Reverse[(toReverse >> 8) & 0xf] << 4) |
                DeflaterHuffman.bit4Reverse[toReverse >> 12]);
        }
        constructor(pending) {
            this.last_lit = 0;
            this.extra_bits = 0;
            this.pending = pending;
            this.literalTree = new Tree(this, DeflaterHuffman.LITERAL_NUM, 257, 15);
            this.distTree = new Tree(this, DeflaterHuffman.DIST_NUM, 1, 15);
            this.blTree = new Tree(this, DeflaterHuffman.BITLEN_NUM, 4, 7);
            this.d_buf = new Int16Array(DeflaterHuffman.BUFSIZE);
            this.l_buf = new Uint8Array(DeflaterHuffman.BUFSIZE);
        }
        isFull() {
            return this.last_lit >= DeflaterHuffman.BUFSIZE;
        }
        reset() {
            this.last_lit = 0;
            this.extra_bits = 0;
            this.literalTree.reset();
            this.distTree.reset();
            this.blTree.reset();
        }
        flushStoredBlock(stored, storedOffset, storedLength, lastBlock) {
            this.pending.writeBits((DeflaterHuffman.STORED_BLOCK << 1) + (lastBlock ? 1 : 0), 3);
            this.pending.alignToByte();
            this.pending.writeShort(storedLength);
            this.pending.writeShort(~storedLength);
            this.pending.writeBlock(stored, storedOffset, storedLength);
            this.reset();
        }
        flushBlock(stored, storedOffset, storedLength, lastBlock) {
            this.literalTree.freqs[DeflaterHuffman.EOF_SYMBOL]++;
            // Build trees
            this.literalTree.buildTree();
            this.distTree.buildTree();
            // Calculate bitlen frequency
            this.literalTree.calcBLFreq(this.blTree);
            this.distTree.calcBLFreq(this.blTree);
            // Build bitlen tree
            this.blTree.buildTree();
            let blTreeCodes = 4;
            for (let i = 18; i > blTreeCodes; i--) {
                if (this.blTree.length[DeflaterHuffman.BL_ORDER[i]] > 0) {
                    blTreeCodes = i + 1;
                }
            }
            let opt_len = 14 +
                blTreeCodes * 3 +
                this.blTree.getEncodedLength() +
                this.literalTree.getEncodedLength() +
                this.distTree.getEncodedLength() +
                this.extra_bits;
            let static_len = this.extra_bits;
            for (let i = 0; i < DeflaterHuffman.LITERAL_NUM; i++) {
                static_len += this.literalTree.freqs[i] * DeflaterHuffman.staticLLength[i];
            }
            for (let i = 0; i < DeflaterHuffman.DIST_NUM; i++) {
                static_len += this.distTree.freqs[i] * DeflaterHuffman.staticDLength[i];
            }
            if (opt_len >= static_len) {
                // Force static trees
                opt_len = static_len;
            }
            if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
                // Store Block
                this.flushStoredBlock(stored, storedOffset, storedLength, lastBlock);
            }
            else if (opt_len === static_len) {
                // Encode with static tree
                this.pending.writeBits((DeflaterHuffman.STATIC_TREES << 1) + (lastBlock ? 1 : 0), 3);
                this.literalTree.setStaticCodes(DeflaterHuffman.staticLCodes, DeflaterHuffman.staticLLength);
                this.distTree.setStaticCodes(DeflaterHuffman.staticDCodes, DeflaterHuffman.staticDLength);
                this.compressBlock();
                this.reset();
            }
            else {
                // Encode with dynamic tree
                this.pending.writeBits((DeflaterHuffman.DYN_TREES << 1) + (lastBlock ? 1 : 0), 3);
                this.sendAllTrees(blTreeCodes);
                this.compressBlock();
                this.reset();
            }
        }
        /**
         * Write all trees to pending buffer
         * @param blTreeCodes The number/rank of treecodes to send.
         */
        sendAllTrees(blTreeCodes) {
            this.blTree.buildCodes();
            this.literalTree.buildCodes();
            this.distTree.buildCodes();
            this.pending.writeBits(this.literalTree.numCodes - 257, 5);
            this.pending.writeBits(this.distTree.numCodes - 1, 5);
            this.pending.writeBits(blTreeCodes - 4, 4);
            for (let rank = 0; rank < blTreeCodes; rank++) {
                this.pending.writeBits(this.blTree.length[DeflaterHuffman.BL_ORDER[rank]], 3);
            }
            this.literalTree.writeTree(this.blTree);
            this.distTree.writeTree(this.blTree);
        }
        /**
         * Compress current buffer writing data to pending buffer
         */
        compressBlock() {
            for (let i = 0; i < this.last_lit; i++) {
                const litlen = this.l_buf[i] & 0xff;
                let dist = this.d_buf[i];
                if (dist-- !== 0) {
                    const lc = DeflaterHuffman.Lcode(litlen);
                    this.literalTree.writeSymbol(lc);
                    let bits = Math.floor((lc - 261) / 4);
                    if (bits > 0 && bits <= 5) {
                        this.pending.writeBits(litlen & ((1 << bits) - 1), bits);
                    }
                    const dc = DeflaterHuffman.Dcode(dist);
                    this.distTree.writeSymbol(dc);
                    bits = Math.floor(dc / 2) - 1;
                    if (bits > 0) {
                        this.pending.writeBits(dist & ((1 << bits) - 1), bits);
                    }
                }
                else {
                    this.literalTree.writeSymbol(litlen);
                }
            }
            this.literalTree.writeSymbol(DeflaterHuffman.EOF_SYMBOL);
        }
        /**
         * Add distance code and length to literal and distance trees
         * @param distance Distance code
         * @param length Length
         * @returns Value indicating if internal buffer is full
         */
        tallyDist(distance, length) {
            this.d_buf[this.last_lit] = distance;
            this.l_buf[this.last_lit++] = length - 3;
            const lc = DeflaterHuffman.Lcode(length - 3);
            this.literalTree.freqs[lc]++;
            if (lc >= 265 && lc < 285) {
                this.extra_bits += Math.floor((lc - 261) / 4);
            }
            const dc = DeflaterHuffman.Dcode(distance - 1);
            this.distTree.freqs[dc]++;
            if (dc >= 4) {
                this.extra_bits += Math.floor(dc / 2) - 1;
            }
            return this.isFull();
        }
        /**
         * Add literal to buffer
         * @param literal Literal value to add to buffer
         * @returns Value indicating internal buffer is full
         */
        tallyLit(literal) {
            this.d_buf[this.last_lit] = 0;
            this.l_buf[this.last_lit++] = literal;
            this.literalTree.freqs[literal]++;
            return this.isFull();
        }
        static Lcode(length) {
            if (length === 255) {
                return 285;
            }
            let code = 257;
            while (length >= 8) {
                code += 4;
                length = length >> 1;
            }
            return code + length;
        }
        static Dcode(distance) {
            let code = 0;
            while (distance >= 4) {
                code += 2;
                distance = distance >> 1;
            }
            return code + distance;
        }
    }
    DeflaterHuffman.BUFSIZE = 1 << (DeflaterConstants.DEFAULT_MEM_LEVEL + 6);
    DeflaterHuffman.LITERAL_NUM = 286;
    /**
     * Written to Zip file to identify a stored block
     */
    DeflaterHuffman.STORED_BLOCK = 0;
    /**
     * Identifies static tree in Zip file
     */
    DeflaterHuffman.STATIC_TREES = 1;
    /**
     * Identifies dynamic tree in Zip file
     */
    DeflaterHuffman.DYN_TREES = 2;
    // Number of distance codes
    DeflaterHuffman.DIST_NUM = 30;
    DeflaterHuffman.staticLCodes = new Int16Array(DeflaterHuffman.LITERAL_NUM);
    DeflaterHuffman.staticLLength = new Uint8Array(DeflaterHuffman.LITERAL_NUM);
    DeflaterHuffman.staticDCodes = new Int16Array(DeflaterHuffman.DIST_NUM);
    DeflaterHuffman.staticDLength = new Uint8Array(DeflaterHuffman.DIST_NUM);
    // The lengths of the bit length codes are sent in order of decreasing
    // probability, to avoid transmitting the lengths for unused bit length codes.
    DeflaterHuffman.BL_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    DeflaterHuffman.bit4Reverse = new Uint8Array([
        0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15
    ]);
    // Number of codes used to transfer bit lengths
    DeflaterHuffman.BITLEN_NUM = 19;
    DeflaterHuffman.EOF_SYMBOL = 256;
    DeflaterHuffman.staticInit();

    // This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
    // https://github.com/icsharpcode/SharpZipLib
    /*
     * Copyright © 2000-2018 SharpZipLib Contributors
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this
     * software and associated documentation files (the "Software"), to deal in the Software
     * without restriction, including without limitation the rights to use, copy, modify, merge,
     * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
     * to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or
     * substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
     * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
     * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
     * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
     * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    /**
     * Low level compression engine for deflate algorithm which uses a 32K sliding window
     * with secondary compression from Huffman/Shannon-Fano codes.
     */
    class DeflaterEngine {
        /**
         * Construct instance with pending buffer
         * @param pending Pending buffer to use
         * @param noAdlerCalculation Pending buffer to use
         */
        constructor(pending) {
            this.maxChain = 128;
            this.niceLength = 128;
            this.goodLength = 8;
            /**
             * Hash index of string to be inserted
             */
            this.insertHashIndex = 0;
            /**
             * lookahead is the number of characters starting at strstart in
             * window that are valid.
             * So window[strstart] until window[strstart+lookahead-1] are valid
             * characters.
             */
            this.lookahead = 0;
            /**
             * The input data for compression.
             */
            this.inputBuf = null;
            /**
             * The offset into inputBuf, where input data starts.
             */
            this.inputOff = 0;
            /**
             * The end offset of the input data.
             */
            this.inputEnd = 0;
            /**
             * Set if previous match exists
             */
            this.prevAvailable = false;
            this.matchStart = 0;
            /**
             * Length of best match
             */
            this.matchLen = 0;
            this.pending = pending;
            this.huffman = new DeflaterHuffman(pending);
            this.inputCrc = new Crc32();
            this.window = new Uint8Array(2 * DeflaterConstants.WSIZE);
            this.head = new Int16Array(DeflaterConstants.HASH_SIZE);
            this.prev = new Int16Array(DeflaterConstants.WSIZE);
            // We start at index 1, to avoid an implementation deficiency, that
            // we cannot build a repeat pattern at index 0.
            this.blockStart = 1;
            this.strstart = 1;
        }
        /**
         * Reset internal state
         */
        reset() {
            this.huffman.reset();
            this.inputCrc.reset();
            this.blockStart = 1;
            this.strstart = 1;
            this.lookahead = 0;
            this.prevAvailable = false;
            this.matchLen = DeflaterConstants.MIN_MATCH - 1;
            for (let i = 0; i < DeflaterConstants.HASH_SIZE; i++) {
                this.head[i] = 0;
            }
            for (let i = 0; i < DeflaterConstants.WSIZE; i++) {
                this.prev[i] = 0;
            }
        }
        updateHash() {
            this.insertHashIndex =
                (this.window[this.strstart] << DeflaterConstants.HASH_SHIFT) ^ this.window[this.strstart + 1];
        }
        /**
         * Determines if more input is needed.
         * @returns Return true if input is needed via setInput
         */
        needsInput() {
            return this.inputEnd === this.inputOff;
        }
        /**
         * Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
         * returns true
         * @param buffer The buffer containing input data.
         * @param offset The offset of the first byte of data.
         * @param count The number of bytes of data to use as input.
         */
        setInput(buffer, offset, count) {
            const end = offset + count;
            this.inputBuf = buffer;
            this.inputOff = offset;
            this.inputEnd = end;
        }
        /**
         * Deflate drives actual compression of data
         * @param flush True to flush input buffers
         * @param finish Finish deflation with the current input.
         * @returns Returns true if progress has been made.
         */
        deflate(flush, finish) {
            let progress;
            do {
                this.fillWindow();
                const canFlush = flush && this.inputOff === this.inputEnd;
                progress = this.deflateSlow(canFlush, finish);
            } while (this.pending.isFlushed && progress); // repeat while we have no pending output and progress was made
            return progress;
        }
        deflateSlow(flush, finish) {
            if (this.lookahead < DeflaterConstants.MIN_LOOKAHEAD && !flush) {
                return false;
            }
            while (this.lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush) {
                if (this.lookahead === 0) {
                    if (this.prevAvailable) {
                        this.huffman.tallyLit(this.window[this.strstart - 1] & 0xff);
                    }
                    this.prevAvailable = false;
                    // We are flushing everything
                    this.huffman.flushBlock(this.window, this.blockStart, this.strstart - this.blockStart, finish);
                    this.blockStart = this.strstart;
                    return false;
                }
                if (this.strstart >= 2 * DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD) {
                    /* slide window, as FindLongestMatch needs this.
                     * This should only happen when flushing and the window
                     * is almost full.
                     */
                    this.slideWindow();
                }
                const prevMatch = this.matchStart;
                let prevLen = this.matchLen;
                if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
                    const hashHead = this.insertString();
                    if (hashHead !== 0 &&
                        this.strstart - hashHead <= DeflaterConstants.MAX_DIST &&
                        this.findLongestMatch(hashHead)) {
                        // longestMatch sets matchStart and matchLen
                        // Discard match if too small and too far away
                        if (this.matchLen === DeflaterConstants.MIN_MATCH &&
                            this.strstart - this.matchStart > DeflaterEngine.TooFar) {
                            this.matchLen = DeflaterConstants.MIN_MATCH - 1;
                        }
                    }
                }
                // previous match was better
                if (prevLen >= DeflaterConstants.MIN_MATCH && this.matchLen <= prevLen) {
                    this.huffman.tallyDist(this.strstart - 1 - prevMatch, prevLen);
                    prevLen -= 2;
                    do {
                        this.strstart++;
                        this.lookahead--;
                        if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
                            this.insertString();
                        }
                    } while (--prevLen > 0);
                    this.strstart++;
                    this.lookahead--;
                    this.prevAvailable = false;
                    this.matchLen = DeflaterConstants.MIN_MATCH - 1;
                }
                else {
                    if (this.prevAvailable) {
                        this.huffman.tallyLit(this.window[this.strstart - 1] & 0xff);
                    }
                    this.prevAvailable = true;
                    this.strstart++;
                    this.lookahead--;
                }
                if (this.huffman.isFull()) {
                    let len = this.strstart - this.blockStart;
                    if (this.prevAvailable) {
                        len--;
                    }
                    const lastBlock = finish && this.lookahead === 0 && !this.prevAvailable;
                    this.huffman.flushBlock(this.window, this.blockStart, len, lastBlock);
                    this.blockStart += len;
                    return !lastBlock;
                }
            }
            return true;
        }
        /**
         * Find the best (longest) string in the window matching the
         * string starting at strstart.
         * @param curMatch
         * @returns True if a match greater than the minimum length is found
         */
        findLongestMatch(curMatch) {
            let match;
            let scan = this.strstart;
            // scanMax is the highest position that we can look at
            const scanMax = scan + Math.min(DeflaterConstants.MAX_MATCH, this.lookahead) - 1;
            const limit = Math.max(scan - DeflaterConstants.MAX_DIST, 0);
            const window = this.window;
            const prev = this.prev;
            let chainLength = this.maxChain;
            const niceLength = Math.min(this.niceLength, this.lookahead);
            this.matchLen = Math.max(this.matchLen, DeflaterConstants.MIN_MATCH - 1);
            if (scan + this.matchLen > scanMax) {
                return false;
            }
            let scan_end1 = window[scan + this.matchLen - 1];
            let scan_end = window[scan + this.matchLen];
            // Do not waste too much time if we already have a good match:
            if (this.matchLen >= this.goodLength) {
                chainLength >>= 2;
            }
            do {
                match = curMatch;
                scan = this.strstart;
                if (window[match + this.matchLen] !== scan_end ||
                    window[match + this.matchLen - 1] !== scan_end1 ||
                    window[match] !== window[scan] ||
                    window[++match] !== window[++scan]) {
                    continue;
                }
                // scan is set to strstart+1 and the comparison passed, so
                // scanMax - scan is the maximum number of bytes we can compare.
                // below we compare 8 bytes at a time, so first we compare
                // (scanMax - scan) % 8 bytes, so the remainder is a multiple of 8
                switch ((scanMax - scan) % 8) {
                    case 1:
                        if (window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 2:
                        if (window[++scan] === window[++match] && window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 3:
                        if (window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 4:
                        if (window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 5:
                        if (window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 6:
                        if (window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                    case 7:
                        if (window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match] &&
                            window[++scan] === window[++match]) {
                            break;
                        }
                        break;
                }
                if (window[scan] === window[match]) {
                    /* We check for insufficient lookahead only every 8th comparison;
                     * the 256th check will be made at strstart + 258 unless lookahead is
                     * exhausted first.
                     */
                    do {
                        if (scan === scanMax) {
                            ++scan; // advance to first position not matched
                            ++match;
                            break;
                        }
                    } while (window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match] &&
                        window[++scan] === window[++match]);
                }
                if (scan - this.strstart > this.matchLen) {
                    this.matchStart = curMatch;
                    this.matchLen = scan - this.strstart;
                    if (this.matchLen >= niceLength) {
                        break;
                    }
                    scan_end1 = window[scan - 1];
                    scan_end = window[scan];
                }
                curMatch = prev[curMatch & DeflaterConstants.WMASK] & 0xffff;
            } while (curMatch > limit && 0 !== --chainLength);
            return this.matchLen >= DeflaterConstants.MIN_MATCH;
        }
        /**
         * Inserts the current string in the head hash and returns the previous
         * value for this hash.
         * @returns The previous hash value
         */
        insertString() {
            const hash = ((this.insertHashIndex << DeflaterConstants.HASH_SHIFT) ^
                this.window[this.strstart + (DeflaterConstants.MIN_MATCH - 1)]) &
                DeflaterConstants.HASH_MASK;
            const match = this.head[hash];
            this.prev[this.strstart & DeflaterConstants.WMASK] = match;
            this.head[hash] = this.strstart;
            this.insertHashIndex = hash;
            return match & 0xffff;
        }
        /**
         * Fill the window
         */
        fillWindow() {
            /* If the window is almost full and there is insufficient lookahead,
             * move the upper half to the lower one to make room in the upper half.
             */
            if (this.strstart >= DeflaterConstants.WSIZE + DeflaterConstants.MAX_DIST) {
                this.slideWindow();
            }
            /* If there is not enough lookahead, but still some input left,
             * read in the input
             */
            if (this.lookahead < DeflaterConstants.MIN_LOOKAHEAD && this.inputOff < this.inputEnd) {
                let more = 2 * DeflaterConstants.WSIZE - this.lookahead - this.strstart;
                if (more > this.inputEnd - this.inputOff) {
                    more = this.inputEnd - this.inputOff;
                }
                this.window.set(this.inputBuf.subarray(this.inputOff, this.inputOff + more), this.strstart + this.lookahead);
                this.inputCrc.update(this.inputBuf, this.inputOff, more);
                this.inputOff += more;
                // this.totalIn += more;
                this.lookahead += more;
            }
            if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
                this.updateHash();
            }
        }
        slideWindow() {
            this.window.set(this.window.subarray(DeflaterConstants.WSIZE, DeflaterConstants.WSIZE + DeflaterConstants.WSIZE), 0);
            this.matchStart -= DeflaterConstants.WSIZE;
            this.strstart -= DeflaterConstants.WSIZE;
            this.blockStart -= DeflaterConstants.WSIZE;
            // Slide the hash table (could be avoided with 32 bit values
            // at the expense of memory usage).
            for (let i = 0; i < DeflaterConstants.HASH_SIZE; ++i) {
                const m = this.head[i] & 0xffff;
                this.head[i] = m >= DeflaterConstants.WSIZE ? m - DeflaterConstants.WSIZE : 0;
            }
            // Slide the prev table.
            for (let i = 0; i < DeflaterConstants.WSIZE; i++) {
                const m = this.prev[i] & 0xffff;
                this.prev[i] = m >= DeflaterConstants.WSIZE ? m - DeflaterConstants.WSIZE : 0;
            }
        }
    }
    DeflaterEngine.TooFar = 4096;

    // This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
    // https://github.com/icsharpcode/SharpZipLib
    /*
     * Copyright © 2000-2018 SharpZipLib Contributors
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this
     * software and associated documentation files (the "Software"), to deal in the Software
     * without restriction, including without limitation the rights to use, copy, modify, merge,
     * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
     * to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or
     * substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
     * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
     * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
     * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
     * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    /**
     * This class is general purpose class for writing data to a buffer.
     * It allows you to write bits as well as bytes
     * Based on DeflaterPending.java
     */
    class PendingBuffer {
        /**
         * Indicates if buffer has been flushed
         */
        get isFlushed() {
            return this._end === 0;
        }
        /**
         * construct instance using specified buffer size
         * @param bufferSize size to use for internal buffer
         */
        constructor(bufferSize) {
            this._start = 0;
            this._end = 0;
            this._bits = 0;
            /**
             * The number of bits written to the buffer
             */
            this.bitCount = 0;
            this._buffer = new Uint8Array(bufferSize);
        }
        /**
         * Clear internal state/buffers
         */
        reset() {
            this._start = 0;
            this._end = 0;
            this.bitCount = 0;
        }
        /**
         * Write a short value to internal buffer most significant byte first
         * @param s value to write
         */
        writeShortMSB(s) {
            this._buffer[this._end++] = (s >> 8) & 0xff;
            this._buffer[this._end++] = s & 0xff;
        }
        /**
         * Write a short value to buffer LSB first
         * @param value The value to write.
         */
        writeShort(value) {
            this._buffer[this._end++] = value;
            this._buffer[this._end++] = value >> 8;
        }
        /**
         * Write a block of data to buffer
         * @param block data to write
         * @param offset offset of first byte to write
         * @param length number of bytes to write
         */
        writeBlock(block, offset, length) {
            this._buffer.set(block.subarray(offset, offset + length), this._end);
            this._end += length;
        }
        /**
         * Flushes the pending buffer into the given output array.  If the
         * output array is to small, only a partial flush is done.
         * @param output The output array.
         * @param offset The offset into output array.
         * @param length The maximum number of bytes to store.
         * @returns The number of bytes flushed.
         */
        flush(output, offset, length) {
            if (this.bitCount >= 8) {
                this._buffer[this._end++] = this._bits & 0xff;
                this._bits >>= 8;
                this.bitCount -= 8;
            }
            if (length > this._end - this._start) {
                length = this._end - this._start;
                output.set(this._buffer.subarray(this._start, this._start + length), offset);
                this._start = 0;
                this._end = 0;
            }
            else {
                output.set(this._buffer.subarray(this._start, this._start + length), offset);
                this._start += length;
            }
            return length;
        }
        /**
         * Write bits to internal buffer
         * @param b source of bits
         * @param count number of bits to write
         */
        writeBits(b, count) {
            this._bits |= b << this.bitCount;
            this.bitCount += count;
            if (this.bitCount >= 16) {
                this._buffer[this._end++] = this._bits & 0xff;
                this._buffer[this._end++] = (this._bits >> 8) & 0xff;
                this._bits >>= 16;
                this.bitCount -= 16;
            }
        }
        /**
         * Align internal buffer on a byte boundary
         */
        alignToByte() {
            if (this.bitCount > 0) {
                this._buffer[this._end++] = this._bits & 0xff;
                if (this.bitCount > 8) {
                    this._buffer[this._end++] = (this._bits >> 8) & 0xff;
                }
            }
            this._bits = 0;
            this.bitCount = 0;
        }
    }

    // This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
    // https://github.com/icsharpcode/SharpZipLib
    /*
     * Copyright © 2000-2018 SharpZipLib Contributors
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this
     * software and associated documentation files (the "Software"), to deal in the Software
     * without restriction, including without limitation the rights to use, copy, modify, merge,
     * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
     * to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or
     * substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
     * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
     * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
     * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
     * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    /**
     * This is the Deflater class.  The deflater class compresses input
     * with the deflate algorithm described in RFC 1951.  It has several
     * compression levels and three different strategies described below.
     *
     * This class is <i>not</i> thread safe.  This is inherent in the API, due
     * to the split of deflate and setInput.
     *
     * author of the original java version : Jochen Hoenicke
     */
    class Deflater {
        get inputCrc() {
            return this._engine.inputCrc.value;
        }
        /**
         * Creates a new deflater with given compression level
         * @param level the compression level, a value between NO_COMPRESSION and BEST_COMPRESSION.
         * beginning and the adler checksum at the end of the output.  This is
         * useful for the GZIP/PKZIP formats.
         */
        constructor() {
            this._state = 0;
            this._pending = new PendingBuffer(DeflaterConstants.PENDING_BUF_SIZE);
            this._engine = new DeflaterEngine(this._pending);
            this.reset();
        }
        /**
         * Returns true, if the input buffer is empty.
         * You should then call setInput().
         * NOTE: This method can also return true when the stream
         * was finished.
         */
        get isNeedingInput() {
            return this._engine.needsInput();
        }
        /**
         * Returns true if the stream was finished and no more output bytes
         * are available.
         */
        get isFinished() {
            return this._state === Deflater.FinishedState && this._pending.isFlushed;
        }
        /**
         * Resets the deflater. The deflater acts afterwards as if it was
         * just created with the same compression level and strategy as it
         * had before.
         */
        reset() {
            this._state = Deflater.BusyState;
            this._pending.reset();
            this._engine.reset();
        }
        /**
         * Sets the data which should be compressed next.  This should be
         * only called when needsInput indicates that more input is needed.
         * The given byte array should not be changed, before needsInput() returns
         * true again.
         * @param input the buffer containing the input data.
         * @param offset the start of the data.
         * @param count the number of data bytes of input.
         */
        setInput(input, offset, count) {
            this._engine.setInput(input, offset, count);
        }
        /**
         * Deflates the current input block to the given array.
         * @param output Buffer to store the compressed data.
         * @param offset Offset into the output array.
         * @param length The maximum number of bytes that may be stored.
         * @returns The number of compressed bytes added to the output, or 0 if either
         * needsInput() or finished() returns true or length is zero.
         */
        deflate(output, offset, length) {
            const origLength = length;
            while (true) {
                const count = this._pending.flush(output, offset, length);
                offset += count;
                length -= count;
                if (length === 0 || this._state === Deflater.FinishedState) {
                    break;
                }
                if (!this._engine.deflate((this._state & Deflater.IsFlushing) !== 0, (this._state & Deflater.IsFinishing) !== 0)) {
                    switch (this._state) {
                        case Deflater.BusyState:
                            // We need more input now
                            return origLength - length;
                        case Deflater.FlushingState:
                            /* We have to supply some lookahead.  8 bit lookahead
                             * is needed by the zlib inflater, and we must fill
                             * the next byte, so that all bits are flushed.
                             */
                            let neededbits = 8 + (-this._pending.bitCount & 7);
                            while (neededbits > 0) {
                                /* write a static tree block consisting solely of
                                 * an EOF:
                                 */
                                this._pending.writeBits(2, 10);
                                neededbits -= 10;
                            }
                            this._state = Deflater.BusyState;
                            break;
                        case Deflater.FinishingState:
                            this._pending.alignToByte();
                            this._state = Deflater.FinishedState;
                            break;
                    }
                }
            }
            return origLength - length;
        }
        /**
         * Finishes the deflater with the current input block.  It is an error
         * to give more input after this method was called.  This method must
         * be called to force all bytes to be flushed.
         */
        finish() {
            this._state |= Deflater.IsFlushing | Deflater.IsFinishing;
        }
    }
    /*
     * The Deflater can do the following state transitions:
     *
     * (1) -> INIT_STATE   ----> INIT_FINISHING_STATE ---.
     *        /  | (2)      (5)                          |
     *       /   v          (5)                          |
     *   (3)| SETDICT_STATE ---> SETDICT_FINISHING_STATE |(3)
     *       \   | (3)                 |        ,--------'
     *        |  |                     | (3)   /
     *        v  v          (5)        v      v
     * (1) -> BUSY_STATE   ----> FINISHING_STATE
     *                                | (6)
     *                                v
     *                           FINISHED_STATE
     *    \_____________________________________/
     *                    | (7)
     *                    v
     *               CLOSED_STATE
     *
     * (1) If we should produce a header we start in INIT_STATE, otherwise
     *     we start in BUSY_STATE.
     * (2) A dictionary may be set only when we are in INIT_STATE, then
     *     we change the state as indicated.
     * (3) Whether a dictionary is set or not, on the first call of deflate
     *     we change to BUSY_STATE.
     * (4) -- intentionally left blank -- :)
     * (5) FINISHING_STATE is entered, when flush() is called to indicate that
     *     there is no more INPUT.  There are also states indicating, that
     *     the header wasn't written yet.
     * (6) FINISHED_STATE is entered, when everything has been flushed to the
     *     internal pending output buffer.
     * (7) At any time (7)
     *
     */
    Deflater.IsFlushing = 0x04;
    Deflater.IsFinishing = 0x08;
    Deflater.BusyState = 0x10;
    Deflater.FlushingState = 0x14;
    Deflater.FinishingState = 0x1c;
    Deflater.FinishedState = 0x1e;

    class ZipCentralDirectoryHeader {
        constructor(entry, crc32, localHeaderOffset, compressionMode, compressedSize) {
            this.entry = entry;
            this.crc32 = crc32;
            this.localHeaderOffset = localHeaderOffset;
            this.compressionMode = compressionMode;
            this.compressedSize = compressedSize;
        }
    }
    class ZipWriter {
        constructor(data) {
            this._centralDirectoryHeaders = [];
            this._deflater = new Deflater();
            this._data = data;
        }
        writeEntry(entry) {
            // 4.3.7 local file header
            const compressionMode = ZipEntry.CompressionMethodDeflate;
            const compressedData = ByteBuffer.empty();
            const crc32 = this.compress(compressedData, entry.data, compressionMode);
            const compressedDataArray = compressedData.toArray();
            const directoryHeader = new ZipCentralDirectoryHeader(entry, crc32, this._data.bytesWritten, compressionMode, compressedData.length);
            this._centralDirectoryHeaders.push(directoryHeader);
            // Signature
            IOHelper.writeInt32LE(this._data, ZipEntry.LocalFileHeaderSignature);
            // Version
            IOHelper.writeUInt16LE(this._data, 10);
            // Flags
            IOHelper.writeUInt16LE(this._data, 0x0800);
            // Compression
            IOHelper.writeUInt16LE(this._data, compressionMode);
            // last mod file time
            IOHelper.writeInt16LE(this._data, 0);
            // last mod file date
            IOHelper.writeInt16LE(this._data, 0);
            // crc-32
            IOHelper.writeInt32LE(this._data, crc32);
            // compressed size
            IOHelper.writeInt32LE(this._data, compressedDataArray.length);
            // uncompressed size
            IOHelper.writeInt32LE(this._data, entry.data.length);
            // file name length
            IOHelper.writeInt16LE(this._data, entry.fullName.length);
            // extra field length
            IOHelper.writeInt16LE(this._data, 0);
            // file name (variable size)
            const fileNameBuffer = IOHelper.stringToBytes(entry.fullName);
            this._data.write(fileNameBuffer, 0, fileNameBuffer.length);
            // extra field (variable size)
            // <empty>
            // 4.3.8 File Data
            this._data.write(compressedDataArray, 0, compressedDataArray.length);
        }
        compress(output, data, compressionMode) {
            if (compressionMode !== ZipEntry.CompressionMethodDeflate) {
                const crc = new Crc32();
                crc.update(data, 0, data.length);
                output.write(data, 0, data.length);
                return crc.value;
            }
            const buffer = new Uint8Array(512);
            // init deflater
            this._deflater.reset();
            // write data
            this._deflater.setInput(data, 0, data.length);
            while (!this._deflater.isNeedingInput) {
                const len = this._deflater.deflate(buffer, 0, buffer.length);
                if (len <= 0) {
                    break;
                }
                output.write(buffer, 0, len);
            }
            // let deflater finish up
            this._deflater.finish();
            while (!this._deflater.isFinished) {
                const len = this._deflater.deflate(buffer, 0, buffer.length);
                if (len <= 0) {
                    break;
                }
                output.write(buffer, 0, len);
            }
            return this._deflater.inputCrc;
        }
        end() {
            const startOfCentralDirectory = this._data.bytesWritten;
            for (const header of this._centralDirectoryHeaders) {
                this.writeCentralDirectoryHeader(header);
            }
            const endOfCentralDirectory = this._data.bytesWritten;
            this.writeEndOfCentralDirectoryRecord(startOfCentralDirectory, endOfCentralDirectory);
        }
        writeEndOfCentralDirectoryRecord(startOfCentralDirectory, endOfCentralDirectory) {
            // Signature
            IOHelper.writeInt32LE(this._data, ZipEntry.EndOfCentralDirSignature);
            // number of this disk             2 bytes
            IOHelper.writeInt16LE(this._data, 0);
            // number of the disk with the
            // start of the central directory  2 bytes
            IOHelper.writeInt16LE(this._data, 0);
            // total number of entries in the
            // central directory on this disk  2 bytes
            IOHelper.writeInt16LE(this._data, this._centralDirectoryHeaders.length);
            // total number of entries in
            // the central directory           2 bytes
            IOHelper.writeInt16LE(this._data, this._centralDirectoryHeaders.length);
            // size of the central directory   4 bytes
            IOHelper.writeInt32LE(this._data, endOfCentralDirectory - startOfCentralDirectory);
            // offset of start of central
            // directory with respect to
            // the starting disk number        4 bytes
            IOHelper.writeInt32LE(this._data, startOfCentralDirectory);
            // .ZIP file comment length        2 bytes
            IOHelper.writeInt16LE(this._data, 0);
        }
        writeCentralDirectoryHeader(header) {
            // Signature
            IOHelper.writeInt32LE(this._data, ZipEntry.CentralFileHeaderSignature);
            // version made by
            IOHelper.writeUInt16LE(this._data, 10);
            // version needed to extract
            IOHelper.writeUInt16LE(this._data, 10);
            // Flags
            IOHelper.writeUInt16LE(this._data, 0x0800);
            // Compression
            IOHelper.writeUInt16LE(this._data, header.compressionMode);
            // last mod file time
            IOHelper.writeInt16LE(this._data, 0);
            // last mod file date
            IOHelper.writeInt16LE(this._data, 0);
            // crc-32
            IOHelper.writeInt32LE(this._data, header.crc32);
            // compressed size
            IOHelper.writeInt32LE(this._data, header.compressedSize);
            // uncompressed size
            IOHelper.writeInt32LE(this._data, header.entry.data.length);
            // file name length
            IOHelper.writeInt16LE(this._data, header.entry.fullName.length);
            // extra field length
            IOHelper.writeInt16LE(this._data, 0);
            // file comment length
            IOHelper.writeInt16LE(this._data, 0);
            // disk number start
            IOHelper.writeInt16LE(this._data, 0);
            // internal file attributes
            IOHelper.writeInt16LE(this._data, 0);
            // external file attributes
            IOHelper.writeInt32LE(this._data, 0);
            // relative offset of local header
            IOHelper.writeInt32LE(this._data, header.localHeaderOffset);
            // file name (variable size)
            const fileNameBuffer = IOHelper.stringToBytes(header.entry.fullName);
            this._data.write(fileNameBuffer, 0, fileNameBuffer.length);
        }
    }

    /**
     * This ScoreExporter can write Guitar Pro 7+ (gp) files.
     */
    class Gp7Exporter extends ScoreExporter {
        get name() {
            return 'Guitar Pro 7-8';
        }
        writeScore(score) {
            Logger.debug(this.name, 'Writing data entries');
            const gpifWriter = new GpifWriter();
            const gpifXml = gpifWriter.writeXml(score);
            const binaryStylesheet = BinaryStylesheet.writeForScore(score);
            const partConfiguration = PartConfiguration.writeForScore(score);
            const layoutConfiguration = LayoutConfiguration.writeForScore(score);
            Logger.debug(this.name, 'Writing ZIP entries');
            const fileSystem = new ZipWriter(this.data);
            fileSystem.writeEntry(new ZipEntry('VERSION', IOHelper.stringToBytes('7.0')));
            fileSystem.writeEntry(new ZipEntry('Content/', new Uint8Array(0)));
            fileSystem.writeEntry(new ZipEntry('Content/BinaryStylesheet', binaryStylesheet));
            fileSystem.writeEntry(new ZipEntry('Content/PartConfiguration', partConfiguration));
            fileSystem.writeEntry(new ZipEntry('Content/LayoutConfiguration', layoutConfiguration));
            fileSystem.writeEntry(new ZipEntry('Content/score.gpif', IOHelper.stringToBytes(gpifXml)));
            if (gpifWriter.backingTrackAssetFileName) {
                fileSystem.writeEntry(new ZipEntry(gpifWriter.backingTrackAssetFileName, score.backingTrack.rawAudioFile));
            }
            fileSystem.end();
        }
    }

    const _barrel$5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        Gp7Exporter,
        ScoreExporter
    }, Symbol.toStringTag, { value: 'Module' }));

    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class DeprecatedMidiEvent extends MidiEvent {
        constructor() {
            super(0, 0, MidiEventType.EndOfTrack);
        }
        writeTo(s) {
            throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Deprecated event, serialization not supported');
        }
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    var MetaEventType;
    (function (MetaEventType) {
        MetaEventType[MetaEventType["SequenceNumber"] = 0] = "SequenceNumber";
        MetaEventType[MetaEventType["TextEvent"] = 1] = "TextEvent";
        MetaEventType[MetaEventType["CopyrightNotice"] = 2] = "CopyrightNotice";
        MetaEventType[MetaEventType["SequenceOrTrackName"] = 3] = "SequenceOrTrackName";
        MetaEventType[MetaEventType["InstrumentName"] = 4] = "InstrumentName";
        MetaEventType[MetaEventType["LyricText"] = 5] = "LyricText";
        MetaEventType[MetaEventType["MarkerText"] = 6] = "MarkerText";
        MetaEventType[MetaEventType["CuePoint"] = 7] = "CuePoint";
        MetaEventType[MetaEventType["PatchName"] = 8] = "PatchName";
        MetaEventType[MetaEventType["PortName"] = 9] = "PortName";
        MetaEventType[MetaEventType["MidiChannel"] = 32] = "MidiChannel";
        MetaEventType[MetaEventType["MidiPort"] = 33] = "MidiPort";
        MetaEventType[MetaEventType["EndOfTrack"] = 47] = "EndOfTrack";
        MetaEventType[MetaEventType["Tempo"] = 81] = "Tempo";
        MetaEventType[MetaEventType["SmpteOffset"] = 84] = "SmpteOffset";
        MetaEventType[MetaEventType["TimeSignature"] = 88] = "TimeSignature";
        MetaEventType[MetaEventType["KeySignature"] = 89] = "KeySignature";
        MetaEventType[MetaEventType["SequencerSpecific"] = 127] = "SequencerSpecific";
    })(MetaEventType || (MetaEventType = {}));
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class MetaEvent extends DeprecatedMidiEvent {
        get metaStatus() {
            return MetaEventType.EndOfTrack;
        }
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class MetaDataEvent extends MetaEvent {
        constructor() {
            super(...arguments);
            this.data = new Uint8Array();
        }
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class MetaNumberEvent extends MetaEvent {
        constructor() {
            super(...arguments);
            this.value = 0;
        }
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class Midi20PerNotePitchBendEvent extends DeprecatedMidiEvent {
        constructor() {
            super(...arguments);
            this.noteKey = 0;
            this.pitch = 0;
        }
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    var SystemCommonType;
    (function (SystemCommonType) {
        SystemCommonType[SystemCommonType["SystemExclusive"] = 240] = "SystemExclusive";
        SystemCommonType[SystemCommonType["MtcQuarterFrame"] = 241] = "MtcQuarterFrame";
        SystemCommonType[SystemCommonType["SongPosition"] = 242] = "SongPosition";
        SystemCommonType[SystemCommonType["SongSelect"] = 243] = "SongSelect";
        SystemCommonType[SystemCommonType["TuneRequest"] = 246] = "TuneRequest";
        SystemCommonType[SystemCommonType["SystemExclusive2"] = 247] = "SystemExclusive2";
    })(SystemCommonType || (SystemCommonType = {}));
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class SystemCommonEvent extends DeprecatedMidiEvent {
    }
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    var AlphaTabSystemExclusiveEvents;
    (function (AlphaTabSystemExclusiveEvents) {
        AlphaTabSystemExclusiveEvents[AlphaTabSystemExclusiveEvents["MetronomeTick"] = 0] = "MetronomeTick";
        AlphaTabSystemExclusiveEvents[AlphaTabSystemExclusiveEvents["Rest"] = 1] = "Rest";
    })(AlphaTabSystemExclusiveEvents || (AlphaTabSystemExclusiveEvents = {}));
    /**
     * @deprecated Move to the new concrete Midi Event Types.
     */
    class SystemExclusiveEvent extends SystemCommonEvent {
        constructor() {
            super(...arguments);
            this.data = new Uint8Array();
        }
        get isMetronome() {
            return false;
        }
        get metronomeNumerator() {
            return -1;
        }
        get metronomeDurationInTicks() {
            return -1;
        }
        get metronomeDurationInMilliseconds() {
            return -1;
        }
        get isRest() {
            return false;
        }
        get manufacturerId() {
            return 0;
        }
    }
    SystemExclusiveEvent.AlphaTabManufacturerId = 0x7d;

    const _barrel$4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        AlphaSynthMidiFileHandler,
        AlphaTabMetronomeEvent,
        AlphaTabRestEvent,
        AlphaTabSysExEvent,
        get AlphaTabSystemExclusiveEvents () { return AlphaTabSystemExclusiveEvents; },
        BeatTickLookup,
        BeatTickLookupItem,
        ControlChangeEvent,
        get ControllerType () { return ControllerType; },
        DeprecatedMidiEvent,
        EndOfTrackEvent,
        MasterBarTickLookup,
        MasterBarTickLookupTempoChange,
        MetaDataEvent,
        MetaEvent,
        get MetaEventType () { return MetaEventType; },
        MetaNumberEvent,
        Midi20PerNotePitchBendEvent,
        MidiEvent,
        get MidiEventType () { return MidiEventType; },
        MidiFile,
        get MidiFileFormat () { return MidiFileFormat; },
        MidiFileGenerator,
        MidiTickLookup,
        MidiTickLookupFindBeatResult,
        get MidiTickLookupFindBeatResultCursorMode () { return MidiTickLookupFindBeatResultCursorMode; },
        MidiTrack,
        NoteBendEvent,
        NoteEvent,
        NoteOffEvent,
        NoteOnEvent,
        PitchBendEvent,
        ProgramChangeEvent,
        SystemCommonEvent,
        get SystemCommonType () { return SystemCommonType; },
        SystemExclusiveEvent,
        TempoChangeEvent,
        TimeSignatureEvent
    }, Symbol.toStringTag, { value: 'Module' }));

    const _barrel$3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        get AccentuationType () { return AccentuationType; },
        get AccidentalType () { return AccidentalType; },
        Automation,
        get AutomationType () { return AutomationType; },
        BackingTrack,
        Bar,
        get BarLineStyle () { return BarLineStyle; },
        BarStyle,
        get BarSubElement () { return BarSubElement; },
        get BarreShape () { return BarreShape; },
        Beat,
        get BeatBeamingMode () { return BeatBeamingMode; },
        BeatStyle,
        get BeatSubElement () { return BeatSubElement; },
        BendPoint,
        get BendStyle () { return BendStyle; },
        get BendType () { return BendType; },
        get BracketExtendMode () { return BracketExtendMode; },
        get BrushType () { return BrushType; },
        Chord,
        get Clef () { return Clef; },
        Color,
        get CrescendoType () { return CrescendoType; },
        get Direction () { return Direction; },
        get Duration () { return Duration; },
        get DynamicValue () { return DynamicValue; },
        ElementStyle,
        get FadeType () { return FadeType; },
        Fermata,
        get FermataType () { return FermataType; },
        get Fingers () { return Fingers; },
        Font,
        get FontStyle () { return FontStyle; },
        get FontWeight () { return FontWeight; },
        get GolpeType () { return GolpeType; },
        GraceGroup,
        get GraceType () { return GraceType; },
        get HarmonicType () { return HarmonicType; },
        HeaderFooterStyle,
        InstrumentArticulation,
        JsonConverter,
        get KeySignature () { return KeySignature; },
        get KeySignatureType () { return KeySignatureType; },
        Lyrics,
        MasterBar,
        get MusicFontSymbol () { return MusicFontSymbol; },
        Note,
        get NoteAccidentalMode () { return NoteAccidentalMode; },
        get NoteOrnament () { return NoteOrnament; },
        NoteStyle,
        get NoteSubElement () { return NoteSubElement; },
        get Ottavia () { return Ottavia; },
        get PickStroke () { return PickStroke; },
        PlaybackInformation,
        get Rasgueado () { return Rasgueado; },
        RenderStylesheet,
        RepeatGroup,
        Score,
        ScoreStyle,
        get ScoreSubElement () { return ScoreSubElement; },
        Section,
        get SimileMark () { return SimileMark; },
        get SlideInType () { return SlideInType; },
        get SlideOutType () { return SlideOutType; },
        Staff,
        SustainPedalMarker,
        get SustainPedalMarkerType () { return SustainPedalMarkerType; },
        SyncPointData,
        Track,
        get TrackNameMode () { return TrackNameMode; },
        get TrackNameOrientation () { return TrackNameOrientation; },
        get TrackNamePolicy () { return TrackNamePolicy; },
        TrackStyle,
        get TrackSubElement () { return TrackSubElement; },
        get TripletFeel () { return TripletFeel; },
        Tuning,
        TupletGroup,
        get VibratoType () { return VibratoType; },
        Voice: Voice$1,
        VoiceStyle,
        get VoiceSubElement () { return VoiceSubElement; },
        get WahPedal () { return WahPedal; },
        get WhammyType () { return WhammyType; }
    }, Symbol.toStringTag, { value: 'Module' }));

    const _barrel$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        BarBounds,
        get BeamDirection () { return BeamDirection; },
        BeatBounds,
        Bounds,
        BoundsLookup,
        MasterBarBounds,
        NoteBounds,
        RenderFinishedEventArgs,
        ScoreRenderer,
        StaffSystemBounds
    }, Symbol.toStringTag, { value: 'Module' }));

    const _barrel$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        CssFontSvgCanvas,
        Cursors,
        FontSizeDefinition,
        FontSizes,
        MeasuredText,
        SvgCanvas,
        get TextAlign () { return TextAlign; },
        get TextBaseline () { return TextBaseline; }
    }, Symbol.toStringTag, { value: 'Module' }));

    const _barrel = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null,
        ActiveBeatsChangedEventArgs,
        AlphaSynth,
        AlphaSynthAudioWorkletOutput,
        AlphaSynthBase,
        AlphaSynthScriptProcessorOutput,
        AlphaSynthWebAudioOutputBase,
        AlphaSynthWebWorkerApi,
        AudioExportChunk,
        AudioExportOptions,
        BackingTrackSyncPoint,
        CircularSampleBuffer,
        MidiEventsPlayedEventArgs,
        PlaybackRange,
        PlaybackRangeChangedEventArgs,
        get PlayerState () { return PlayerState; },
        PlayerStateChangedEventArgs,
        PositionChangedEventArgs
    }, Symbol.toStringTag, { value: 'Module' }));

    const _jsonbarrel = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
        __proto__: null
    }, Symbol.toStringTag, { value: 'Module' }));

    /**@target web */
    if (Environment.isRunningInWorker) {
        Environment.initializeWorker();
    }
    else if (Environment.isRunningInAudioWorklet) {
        Environment.initializeAudioWorklet();
    }
    else {
        Environment.initializeMain(settings => {
            if (Environment.webPlatform === exports.WebPlatform.NodeJs) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Workers not yet supported in Node.js');
            }
            if (Environment.webPlatform === exports.WebPlatform.BrowserModule ||
                Environment.isWebPackBundled ||
                Environment.isViteBundled) {
                Logger.debug('AlphaTab', 'Creating webworker');
                try {
                    return new Environment.alphaTabWorker(new Environment.alphaTabUrl('./alphaTab.worker.ts', {}), {
                        type: 'module'
                    });
                }
                catch (e) {
                    Logger.debug('AlphaTab', 'ESM webworker construction with direct URL failed', e);
                }
                // fallback to blob worker with ESM URL
                let workerUrl = '';
                try {
                    // Note: prevent bundlers to copy worker as asset via alphaTabUrl
                    workerUrl = new Environment.alphaTabUrl('./alphaTab.worker.ts', {});
                    const script = `import ${JSON.stringify(workerUrl)}`;
                    const blob = new Blob([script], {
                        type: 'application/javascript'
                    });
                    return new Worker(URL.createObjectURL(blob), {
                        type: 'module'
                    });
                }
                catch (e) {
                    Logger.debug('AlphaTab', 'ESM webworker construction with blob import failed', workerUrl, e);
                }
                // fallback to worker with configurable fallback URL
                try {
                    // Note: prevent bundlers to copy worker as asset
                    if (!settings.core.scriptFile) {
                        throw new Error('Could not detect alphaTab script file');
                    }
                    workerUrl = settings.core.scriptFile;
                    const script = `import ${JSON.stringify(settings.core.scriptFile)}`;
                    const blob = new Blob([script], {
                        type: 'application/javascript'
                    });
                    return new Worker(URL.createObjectURL(blob), {
                        type: 'module'
                    });
                }
                catch (e) {
                    Logger.debug('AlphaTab', 'ESM webworker construction with blob import failed', settings.core.scriptFile, e);
                }
            }
            // classical browser entry point
            if (!settings.core.scriptFile) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Could not detect alphaTab script file, cannot initialize renderer');
            }
            try {
                Logger.debug('AlphaTab', 'Creating Blob worker');
                const script = `importScripts('${settings.core.scriptFile}')`;
                const blob = new Blob([script], {
                    type: 'application/javascript'
                });
                return new Worker(URL.createObjectURL(blob));
            }
            catch (e) {
                Logger.warning('Rendering', 'Could not create inline worker, fallback to normal worker');
                return new Worker(settings.core.scriptFile);
            }
        }, (context, settings) => {
            if (Environment.webPlatform === exports.WebPlatform.NodeJs) {
                throw new AlphaTabError(exports.AlphaTabErrorType.General, 'Audio Worklets not yet supported in Node.js');
            }
            if (Environment.webPlatform === exports.WebPlatform.BrowserModule ||
                Environment.isWebPackBundled ||
                Environment.isViteBundled) {
                Logger.debug('AlphaTab', 'Creating Module worklet');
                const alphaTabWorklet = context.audioWorklet; // this name triggers the WebPack Plugin
                return alphaTabWorklet.addModule(new Environment.alphaTabUrl('./alphaTab.worklet.ts', {}));
            }
            Logger.debug('AlphaTab', 'Creating Script worklet');
            return context.audioWorklet.addModule(settings.core.scriptFile);
        });
    }

    exports.AlphaTabApi = AlphaTabApi;
    exports.AlphaTabApiBase = AlphaTabApiBase;
    exports.AlphaTabError = AlphaTabError;
    exports.ConsoleLogger = ConsoleLogger;
    exports.CoreSettings = CoreSettings;
    exports.DisplaySettings = DisplaySettings;
    exports.Environment = Environment;
    exports.FileLoadError = FileLoadError;
    exports.FormatError = FormatError;
    exports.ImporterSettings = ImporterSettings;
    exports.Logger = Logger;
    exports.NotationSettings = NotationSettings;
    exports.PlayerSettings = PlayerSettings;
    exports.ProgressEventArgs = ProgressEventArgs;
    exports.RenderEngineFactory = RenderEngineFactory;
    exports.RenderingResources = RenderingResources;
    exports.ResizeEventArgs = ResizeEventArgs;
    exports.Settings = Settings;
    exports.SlidePlaybackSettings = SlidePlaybackSettings;
    exports.VibratoPlaybackSettings = VibratoPlaybackSettings;
    exports.exporter = _barrel$5;
    exports.importer = _barrel$7;
    exports.io = _barrel$6;
    exports.json = _jsonbarrel;
    exports.meta = VersionInfo;
    exports.midi = _barrel$4;
    exports.model = _barrel$3;
    exports.platform = _barrel$1;
    exports.rendering = _barrel$2;
    exports.synth = _barrel;

    Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

}));
