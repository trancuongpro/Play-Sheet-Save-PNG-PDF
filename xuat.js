/**
 * H√†m ch√≠nh ƒë·ªÉ xu·∫•t b·∫£n nh·∫°c ra file ·∫£nh ho·∫∑c PDF b·∫±ng OSMD
 * @param {string} musicXmlData D·ªØ li·ªáu file MusicXML (d∆∞·ªõi d·∫°ng chu·ªói)
 * @param {'png' | 'pdf'} format ƒê·ªãnh d·∫°ng file mu·ªën xu·∫•t ('png' ho·∫∑c 'pdf')
 * @param {string} originalFileName T√™n file g·ªëc ƒë·ªÉ ƒë·∫∑t t√™n cho file xu·∫•t ra
 */
async function exportWithOSMD(musicXmlData, format, originalFileName) {
    const exportPngBtn = document.getElementById('export-png-btn');
    const exportPdfBtn = document.getElementById('export-pdf-btn');

    // V√¥ hi·ªáu h√≥a c√°c n√∫t ƒë·ªÉ tr√°nh click nhi·ªÅu l·∫ßn
    exportPngBtn.disabled = true;
    exportPngBtn.textContent = 'ƒêang x·ª≠ l√Ω...';
    exportPdfBtn.disabled = true;

    try {
        const osmdContainer = document.getElementById('osmd-container');
        osmdContainer.innerHTML = ''; 

        // Kh·ªüi t·∫°o OSMD, ch√∫ng ta kh√¥ng c·∫ßn t√πy ch·ªçn backgroundColor n·ªØa
        const osmd = new opensheetmusicdisplay.OpenSheetMusicDisplay(osmdContainer, {
            autoResize: true,
            backend: "canvas",
            drawingParameters: "compact"
        });

        // T·∫£i v√† render b·∫£n nh·∫°c
        await osmd.load(musicXmlData);
        await new Promise(resolve => requestAnimationFrame(resolve));
        osmd.render();

        const pages = osmdContainer.querySelectorAll('canvas');

        if (pages.length === 0 || pages[0].width === 0) {
            throw new Error("OSMD ƒë√£ kh√¥ng th·ªÉ render b·∫£n nh·∫°c ra canvas. K√≠ch th∆∞·ªõc canvas b·∫±ng 0.");
        }

        const baseFileName = (originalFileName || 'music-score').replace(/\.[^/.]+$/, "");

        if (format === 'png') {
            const combinedCanvas = document.createElement('canvas');
            const totalWidth = pages[0].width;
            let totalHeight = 0;
            pages.forEach(page => totalHeight += page.height);

            combinedCanvas.width = totalWidth;
            combinedCanvas.height = totalHeight;
            const ctx = combinedCanvas.getContext('2d');
            
            // S·ª¨A L·ªñI QUAN TR·ªåNG NH·∫§T: T·ª∞ TAY T√î N·ªÄN TR·∫ÆNG
            // ƒê√¢y l√† b∆∞·ªõc "s∆°n l√≥t" ƒë·ªÉ ƒë·∫£m b·∫£o canvas c√≥ n·ªÅn tr·∫Øng.
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, combinedCanvas.width, combinedCanvas.height);
            
            // B√¢y gi·ªù m·ªõi v·∫Ω c√°c trang nh·∫°c l√™n tr√™n n·ªÅn tr·∫Øng ƒë√£ c√≥
            let currentY = 0;
            pages.forEach(page => {
                ctx.drawImage(page, 0, currentY);
                currentY += page.height;
            });

            triggerDownload(combinedCanvas.toDataURL('image/png'), `${baseFileName}.png`);

        } else if (format === 'pdf') {
            // ƒê·ªëi v·ªõi PDF, ch√∫ng ta kh√¥ng c·∫ßn lo l·∫Øng v√¨ b·∫£n th√¢n trang PDF ƒë√£ l√† m√†u tr·∫Øng.
            // Khi ch√∫ng ta th√™m ·∫£nh PNG (k·ªÉ c·∫£ trong su·ªët) l√™n, n√≥ s·∫Ω hi·ªán tr√™n n·ªÅn tr·∫Øng c·ªßa PDF.
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF({
                orientation: pages[0].width > pages[0].height ? 'l' : 'p',
                unit: 'px',
                format: [pages[0].width, pages[0].height]
            });

            pages.forEach((page, index) => {
                if (index > 0) {
                    pdf.addPage([page.width, page.height]);
                }
                const imgData = page.toDataURL('image/png');
                pdf.addImage(imgData, 'PNG', 0, 0, page.width, page.height);
            });
            
            pdf.save(`${baseFileName}.pdf`);
        }
    } catch (error) {
        console.error("L·ªói khi xu·∫•t file b·∫±ng OSMD:", error);
        alert("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh xu·∫•t file. Vui l√≤ng ki·ªÉm tra Console (F12).");
    } finally {
        // K√≠ch ho·∫°t l·∫°i c√°c n√∫t v√† tr·∫£ l·∫°i t√™n c≈©
        exportPngBtn.disabled = false;
        exportPngBtn.textContent = 'üìÑ Xu·∫•t PNG';
        exportPdfBtn.disabled = false;
    }
}

/**
 * H√†m ti·ªán √≠ch ƒë·ªÉ k√≠ch ho·∫°t t·∫£i file v·ªÅ m√°y
 */
function triggerDownload(url, filename) {
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}